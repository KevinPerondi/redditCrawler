{
	"name": "golang",
	"subscribers": 45269,
	"title": "The Go Programming Language",
	"submissions": [
		{
			"author": "cixtor",
			"date": "2017-07-14",
			"id": "6na5sy",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "It came to them with a message",
			"comments": [
				{
					"author": "ritewhose",
					"content": "That\u0027s not any old spear they\u0027re throwing either. That\u0027s a Rob Pike.",
					"date": "2017-07-15",
					"id": "dk8xecz",
					"isArchived": true,
					"isControversial": false,
					"score": 90
				},
				{
					"author": "gott_modus",
					"content": "and it missed the target :/",
					"date": "2017-07-17",
					"id": "dkbcc0g",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "3bodyproblemsolver",
					"content": "I do love Go a lot(even without Generics) \n\nAlienLang\n----------\n\nA few alien explorers from a galaxy far away visit Earth, and they want to communicate with us humans, for which they need a language. They could have used sign language but they don’t. It’s not clear whether it’s a cultural thing or that they might want to exchange more than the usual cry of “Bob” while pointing a body appendage towards self and then towards you(at which point you say your name or faint).\n\nSo these ultra intelligent life forms that have traveled inter-stellar distances to meet with us folks set out to create a new language which can be easily understood by both alien and human. The only problem is that the alien is advanced to human by more than a million and close to a billion years. So they sit down and form a committee. As you can see they are not so different after all.\n\nYou can imagine them to be a group of three. Two middle-aged aliens and a wise old alien. They are all very chummy and stuff and they fight and debate and come up with a specification for the aforesaid language and christen it, “the mighty gopher hates coffee beans and loves big snakes of the sea” as per their customary traditional practice of naming new languages.\n\nThe meeting went something like this.\n\n“So we all agree that the language should have the basic constructs to allow these puny humans to understand our vast alien knowledge”, said Bob\n\n“Yes, we can’t really talk to them in our conventional multi-dimensional speech now, can we”, piped in Pipeson.\n\n“Yep, the last mud world we tried teaching our galaxy language to, misunderstood us for invaders. Invaders! We are only glorified geologists for universe sake”, said Grizzly while scratching his second head with his fifth arm.\n\n“The language is barely published and there are mass humans protests all across Earth accusing us of duplicity. Just yesterday, I walked by a group of ugly humans holding placards saying, “We are not dumb!” and “We are intelligent too!” and stuff like that. I didn’t get the, “Stomp the cockroach” one, whatever that means”, said Pipeson.\n\n“See, we all know in our vast alien intelligence that lesser building blocks for a language is a good thing. I don’t think they will ever understand. In any case, I think we have enough humans convinced to progress the language”, exclaimed Bob.\n\n“What about the rest of the puny humans?”, asked Grizzly. “Ah, I don’t know, shoot them with our atomizer guns?”\n\n“Well, the biologists are looking for specimens”.\n\nMeanwhile a group of red-orange aliens are about to begin their landing cycle in crate shaped ships whilst a bunch of engineers from Planet D are still fueling their ship at the last stopover.\n\n",
					"date": "2017-07-15",
					"id": "dk8ktsa",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "chickenpolitik",
					"content": "Wat. Confused",
					"date": "2017-07-15",
					"id": "dk8zn5o",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "TheOnlyMrYeah",
					"content": "Instructions unclear. Stuck dick in gopher and caused a stack overflow.",
					"date": "2017-08-06",
					"id": "dl8sw3y",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheBallPeenHammerer",
					"content": "Is that last part a Rust reference?",
					"date": "2017-07-15",
					"id": "dk9a1pj",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "comrade-jim",
					"content": "C doesn\u0027t have generics. ",
					"date": "2017-07-14",
					"id": "dk85jvw",
					"isArchived": true,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-14",
					"id": "dk88af7",
					"isArchived": true,
					"isControversial": false,
					"score": 69
				},
				{
					"author": "MattieShoes",
					"content": "In that case, interface{} works too, right? :-D",
					"date": "2017-07-14",
					"id": "dk8c4et",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "ragefacesmirk",
					"content": "unsafe.Pointer for the win",
					"date": "2017-07-14",
					"id": "dk8grsd",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "ryeguy",
					"content": "Yes, and people go to great extents to work around that like using `void *` (like `interface{}`) or [using the preprocessor to generate them](https://stackoverflow.com/a/11035347/49018). ",
					"date": "2017-07-15",
					"id": "dk8s4gw",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "jnwatson",
					"content": "The preprocessor would disagree with you.",
					"date": "2017-07-15",
					"id": "dk8ihmo",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "gott_modus",
					"content": "Honestly, it may disagree, but its counter itself isn\u0027t particularly attractive.\n\nI\u0027ll take a void or char pointer most of the time.",
					"date": "2017-07-17",
					"id": "dkbcb5o",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "youstolemyname",
					"content": "You\u0027re right. We should just use C instead of Go.",
					"date": "2017-07-15",
					"id": "dk8kw1m",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "jimmjii",
					"content": "C doesn\u0027t have mandatory garbage collection.",
					"date": "2017-07-15",
					"id": "dk9ljut",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-01",
					"id": "dl08egx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jimmjii",
					"content": "C doesn\u0027t need the developer to disable a garbage collector manually since it doesn\u0027t come with one at first place.",
					"date": "2017-08-03",
					"id": "dl4qbdn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gott_modus",
					"content": "Ye, C also doesn\u0027t have a GC so it balances things out.",
					"date": "2017-07-17",
					"id": "dkbc8ra",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "CountyMcCounterson",
					"content": "C doesn\u0027t have data structures or garbage collection either so maybe we should get rid of those too.",
					"date": "2017-07-14",
					"id": "dk88ers",
					"isArchived": true,
					"isControversial": true,
					"score": -7
				},
				{
					"author": "campbellm",
					"content": "What?\n\nhttps://en.wikipedia.org/wiki/Struct_(C_programming_language)",
					"date": "2017-07-14",
					"id": "dk88rnv",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "CritJongUn",
					"content": "The dude said Data Structures, not structs. You can\u0027t import a list from the stdlib that\u0027s his point",
					"date": "2017-07-14",
					"id": "dk8e0y6",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "campbellm",
					"content": "So, the ability to import code from elsewhere is what makes it a \"data structure\"?  If that\u0027s his point, he made it poorly.\n",
					"date": "2017-07-15",
					"id": "dk8temm",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "CritJongUn",
					"content": "He did made his point in a bad way, however it\u0027s not about being able to import it, it\u0027s about being available from the get go instead having you coding them when you want them. Sure you can import them from somewhere but you\u0027re never 100% sure they\u0027re bulletproof",
					"date": "2017-07-15",
					"id": "dk8zmz8",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "campbellm",
					"content": "I see.  So I guess his point was C doesn\u0027t come with provided data structure libraries?  that\u0027s a far cry from what he said, but sure.\n\nOh, upvote for keeping it civil; thanks for that.",
					"date": "2017-07-16",
					"id": "dk9xe42",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "CountyMcCounterson",
					"content": "Yeah okay then toss me a hashmap genius oh wait no you can\u0027t because there isn\u0027t one and you can\u0027t have lists either or any other *data structures* because you have to write everything from scratch for every single possible data type.",
					"date": "2017-07-14",
					"id": "dk8ezrd",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "jmtd",
					"content": "I never write them from scratch. There\u0027s plenty of well worn libraries already e.g. Glib, CCAN, or https://fragglet.github.io/c-algorithms/",
					"date": "2017-07-15",
					"id": "dk8x98x",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "To be fair, that\u0027s only one data structure. Not structures.",
					"date": "2017-07-14",
					"id": "dk8chwn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "fripletister",
					"content": "Tuples (structs) are also the most rudimentary of the bunch.",
					"date": "2017-07-14",
					"id": "dk8gt52",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "WikiTextBot",
					"content": "**Struct (C programming language)**\n\nA struct in the C programming language (and many derivatives) is a composite data type declaration that defines a physically grouped list of variables to be placed under one name in a block of memory, allowing the different variables to be accessed via a single pointer, or the struct declared name which returns the same address. The struct can contain many other complex and simple data types in an association, so is a natural organizing type for records like the mixed data types in lists of directory entries reading a hard drive (file length, name, extension, physical (cylinder, disk, head indexes) address, etc.), or other mixed record type (patient names, address, telephone... insurance codes, balance, etc.).\n\nThe C struct directly references a contiguous block of physical memory, usually delimited (sized) by word-length boundaries.\n\n***\n\n^[ [^PM](https://www.reddit.com/message/compose?to\u003dkittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to\u003dWikiTextBot\u0026amp;message\u003dExcludeme\u0026amp;subject\u003dExcludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/golang/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]\n^Downvote ^to ^remove ^| ^v0.24",
					"date": "2017-07-14",
					"id": "dk88rr9",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "thewisestmatt",
					"content": "This made me lol (and want to upvote x100)",
					"date": "2017-07-15",
					"id": "dk8kro9",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "titpetric",
					"content": "username checks out",
					"date": "2017-07-15",
					"id": "dk9drxz",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "LekeH5N1",
					"content": "It\u0027s funny because I don\u0027t understand. ",
					"date": "2017-07-15",
					"id": "dk96ooz",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kron4eg",
					"content": "It was funny only first 25 times...",
					"date": "2017-07-14",
					"id": "dk8774f",
					"isArchived": true,
					"isControversial": true,
					"score": 5
				},
				{
					"author": "Jigsus",
					"content": "I still hope the fragmentation won\u0027t kill go",
					"date": "2017-07-14",
					"id": "dk85m8b",
					"isArchived": true,
					"isControversial": false,
					"score": -11
				},
				{
					"author": "vAltyR47",
					"content": "No fragmentation is an explicit design goal, so I\u0027m pretty confident they\u0027ll find a good solution.",
					"date": "2017-07-14",
					"id": "dk89wuf",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "dlsniper",
					"content": "What fragmentation are you talking about? ",
					"date": "2017-07-14",
					"id": "dk87emh",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "Creshal",
					"content": "When Go 2 lands, you\u0027ll have a split between projects still on the old version and projects already on the new one. \n\nIf everything goes right, that transition phase will be over in a few months. If not, well… look at where Python is now.",
					"date": "2017-07-14",
					"id": "dk8bv9t",
					"isArchived": true,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "pstuart",
					"content": "That pain point was the key thing rsc was trying to avoid.",
					"date": "2017-07-14",
					"id": "dk8c2jx",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Creshal",
					"content": "There\u0027s a difference between *trying* and *succeeding*. Python *tried* as well, and fucked up.",
					"date": "2017-07-14",
					"id": "dk8ecjg",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "pstuart",
					"content": "Agreed, however, considering the conservative approach they\u0027ve taken thus far I have a high degree of confidence that they\u0027ll be able to manage it.",
					"date": "2017-07-15",
					"id": "dk8kqrp",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TheBallPeenHammerer",
					"content": "Python literally changed it\u0027s function syntax. They did not \"try.\" ",
					"date": "2017-07-15",
					"id": "dk9a3re",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "qaisjp",
					"content": "Really? How was it changed?",
					"date": "2018-01-04",
					"id": "ds61apa",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "__crackers__",
					"content": "Yeah, but what Python tried was fundamentally broken from the start.\n\n\"All text is Unicode\" is a wonderful idea, but that isn\u0027t the world we live in.\n\n",
					"date": "2017-07-15",
					"id": "dk8iw37",
					"isArchived": true,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "earthboundkid",
					"content": "Lol, Go is even more anal than Python 3. For Go, all text is UTF-8!",
					"date": "2017-07-15",
					"id": "dk8rozu",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "__crackers__",
					"content": "\u0026gt; Go is even more **anal** than Python 3\n\nBecause it doesn\u0027t insist on decoding the undecodeable into Frankenstein Unicode that explodes when you try to encode it? I think the word you\u0027re looking for is \"correct\".\n\n\u0026gt; For Go, all text is UTF-8!\n\n*By default*, yes. And UTF-8 is a much better default that Python 3\u0027s ASCII.\n",
					"date": "2017-07-16",
					"id": "dkanvs3",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "dlsniper",
					"content": "That\u0027s not how Go 2 will come about. Watch the talk Russ gave at GopherCon. ",
					"date": "2017-07-14",
					"id": "dk8ebzp",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Creshal",
					"content": "I\u0027ll rather wait until Go 2 actually lands. They don\u0027t even know yet what the scope of Go 2 will be.",
					"date": "2017-07-14",
					"id": "dk8ee98",
					"isArchived": true,
					"isControversial": false,
					"score": -8
				},
				{
					"author": "dlsniper",
					"content": "You really are missing all the points. ",
					"date": "2017-07-14",
					"id": "dk8f36f",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "Creshal",
					"content": "Go ahead, educate me, or do you prefer to just knee-jerk downvote everyone who doesn\u0027t fit to your echo chamber?",
					"date": "2017-07-15",
					"id": "dk8y9hd",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "dlsniper",
					"content": "I already said it, wait for the video. Or read this: https://blog.golang.org/toward-go2",
					"date": "2017-07-15",
					"id": "dk91lla",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "justinisrael",
					"content": "Don\u0027t forget that Python is dynamically typed while Go is statically typed. Go already has gofix. It would be alot easier to fix language differences between Go1 and Go2 automatically, than it is to fix Python code. Also Python 2 vs 3 can encounter runtime issues depending on which interpreter is available and tries to run the code. Go is compiled ahead of time. ",
					"date": "2017-07-15",
					"id": "dk8il6c",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dlsniper",
					"content": "The fact that it\u0027s dynamic typed has nothing to do with its stability and how gofix can work. ",
					"date": "2017-07-15",
					"id": "dk91juc",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "justinisrael",
					"content": "Why not? Isn\u0027t it much more difficult to transform a python program when you can\u0027t even assert types properly? ",
					"date": "2017-07-15",
					"id": "dk9208k",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "__crackers__",
					"content": "TBF, the Python core devs did go full retard. \n\nThey broke almost all existing code while offering almost nothing in return, and the  new version is based on a model that\u0027s fundamentally incompatible with reality.\n\nEven a decade later, Py3 can\u0027t do stuff Py2 could because it\u0027s *still* half-baked.",
					"date": "2017-07-15",
					"id": "dk8imtp",
					"isArchived": true,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "qaisjp",
					"content": "\u0026gt;\nEven a decade later, Py3 can\u0027t do stuff Py2 could because it\u0027s *still* half-baked.\n\nLike what?",
					"date": "2018-01-04",
					"id": "ds619zz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "__crackers__",
					"content": "Reliably run via `cron` or `launchd` without dying in flames.\n\nPEP 540 will hopefully fix that when it lands in 3.7.\n\nWas that trawl through my post history really worth the effort?",
					"date": "2018-01-04",
					"id": "ds676eo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "qaisjp",
					"content": "Oh, interesting to know.\n\n\u0026gt;Was that trawl through my post history really worth the effort?\n\nI couldn\u0027t sleep. Visited top posts in /r/golang from the past year, found this thread interesting.",
					"date": "2018-01-04",
					"id": "ds6arrg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "__crackers__",
					"content": "Right. I\u0027m sorry.\n\nI figured you were a Py3 fanboy going through my post history looking to pick a fight because I criticised Py3 yesterday.\n\nTo give you a bit more detail, Py3 automatically decodes IO to Unicode using the encoding specified by your locale. If the environment is empty, as `cron`\u0027s is, Py3 defaults to ASCII, which often causes it to die.\n\nPEP 540 should see Py3.7 default to UTF-8 instead in that situation.",
					"date": "2018-01-04",
					"id": "ds6btwp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "qaisjp",
					"content": "Oh wow, so strings aren\u0027t even consistent across locales? Yay for Go \"runes\". ",
					"date": "2018-01-04",
					"id": "ds75kr8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "__crackers__",
					"content": "You can\u0027t compare it directly to Go. Go strings are basically immutable sequences of bytes, like Python 2 strings. Python 3 strings aren\u0027t bytes, they\u0027re Unicode. An immutable sequence of `rune`s, if you will.\n\nWith Go or Py2, there\u0027s no guarantee that a string is actually valid in any encoding. You can create the mother of all mojibake, and neither Go nor Python 2 will complain (unless you try to convert the string to Unicode).\n\nPython 3 tries to ensure strings are always valid by automatically decoding from \u0026amp; encoding to bytes at IO boundaries, giving you, for example, the contents of ARGV or environment variables as decoded Unicode, not a sequence of bytes that you can perform string operations on, as Python 2 and Go do.\n\nUnfortunately, we don\u0027t live in a world of valid-strings-of-known-encoding, and when Py3 can\u0027t decode something, it silently gives you *unmarked*, fucked-up Unicode objects (containing so-called surrogate escapes that only Python understands), which will explode if you try to encode them for printing or writing to a file.\n\nBeyond the broken assumption that all text can be decoded, the fundamental problem of Py3 is that it doesn\u0027t give you the tools or information you need to (easily) fix the fucked-up Unicode objects it gives you.",
					"date": "2018-01-04",
					"id": "ds78jog",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-14",
					"id": "dk7vly9",
					"isArchived": true,
					"isControversial": false,
					"score": -3
				},
				{
					"author": "simonorono",
					"content": "It\u0027s not original. [Source](http://poorlydrawnlines.com).",
					"date": "2017-07-14",
					"id": "dk7vpop",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "jerf",
					"content": "[Sourcier source](http://www.poorlydrawnlines.com/comic/a-message/).\n\n(And I suppose I\u0027m asking for someone to post [sourciest source](http://www.poorlydrawnlines.com/wp-content/uploads/2015/03/a-message.png), so I\u0027ll just pre-empt that. Better to link the site itself, though.)",
					"date": "2017-07-14",
					"id": "dk7vzrv",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "adipisicing",
					"content": "You are a soucerer.",
					"date": "2017-07-14",
					"id": "dk8gnwu",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "People who care about generics have probably already left the Go language. Why would they add it now? \n\nI\u0027m not really a Go developer anymore, although I did use it for a few projects a year ago. ",
					"date": "2017-07-14",
					"id": "dk8ay5r",
					"isArchived": true,
					"isControversial": false,
					"score": -23
				},
				{
					"author": "Pagedpuddle65",
					"content": "You think all the people that might try go over the next 10 years have already tried it and moved on? \n\nNot likely. \n\nAnd people that have tried it and liked it except for generics would be more likely to come back if they heard it was added. ",
					"date": "2017-07-15",
					"id": "dk8ii76",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "[deleted]",
					"content": "\u0026gt;And people that have tried it and liked it except for generics would be more likely to come back if they heard it was added.\n\nNah, I have a feeling most people found greatness in other languages and probably won\u0027t come back.",
					"date": "2017-07-15",
					"id": "dk8ikxe",
					"isArchived": true,
					"isControversial": false,
					"score": -13
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "I care about generics and I use Go. Just because a language doesn\u0027t have a feature I really want doesn\u0027t mean I won\u0027t use it. I use Go because it makes my life better, not because it\u0027s the perfect language (it\u0027s definitely not).",
					"date": "2017-07-15",
					"id": "dk8m6zd",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "gott_modus",
					"content": "why not just write in c then, man.\n\n\n",
					"date": "2017-07-17",
					"id": "dkbqjbt",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "I do write in C, when it\u0027s the best fit. I also write in Go, Rust, Python and JavaScript.",
					"date": "2017-07-17",
					"id": "dkc5b13",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ewouldblock",
					"content": "Thats why i use javascript. Go took a page from the \"worse is better\" playbook. ",
					"date": "2017-07-15",
					"id": "dk8sc7p",
					"isArchived": true,
					"isControversial": false,
					"score": -9
				},
				{
					"author": "tmornini",
					"content": "No.\n\nNo, no.\n\nDefinitely no.\n\nCompletely, absolutely no.",
					"date": "2017-07-15",
					"id": "dk8vszb",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "ewouldblock",
					"content": "Im curious, which part of my post do you object to? The part where i anchor go to javascript, or the part where i said go as a language subscribes to the \"worse is better\" philosophy?",
					"date": "2017-07-15",
					"id": "dk9a6yd",
					"isArchived": true,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "jeffrallen",
					"content": "Go does not subscribe to worse is better. Go has less because less is exponentially more:\nhttps://commandcenter.blogspot.ch/2012/06/less-is-exponentially-more.html",
					"date": "2017-07-15",
					"id": "dk9meqv",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ewouldblock",
					"content": "That sounds like worse is better to me. https://en.m.wikipedia.org/wiki/Worse_is_better. Can you explain the difference?",
					"date": "2017-07-15",
					"id": "dk9qzyc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "WikiTextBot",
					"content": "**Worse is better**\n\nWorse is better, also called New Jersey style, was conceived by Richard P. Gabriel in an essay \"Worse is better\" to describe the dynamics of software acceptance, but it has broader application. It is the idea that quality does not necessarily increase with functionality—that there is a point where less functionality (\"worse\") is a preferable option (\"better\") in terms of practicality and usability. Software that is limited, but simple to use, may be more appealing to the user and market than the reverse.\n\nAs to the oxymoronic title, Gabriel calls it a caricature, declaring the style bad in comparison with \"The Right Thing\".\n\n***\n\n^[ [^PM](https://www.reddit.com/message/compose?to\u003dkittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to\u003dWikiTextBot\u0026amp;message\u003dExcludeme\u0026amp;subject\u003dExcludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/golang/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]\n^Downvote ^to ^remove ^| ^v0.24",
					"date": "2017-07-15",
					"id": "dk9r024",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jeffrallen",
					"content": "No, I cannot explain better than what Rob wrote in his blog posting. If you\u0027ve read that and disagree with me, OK, fine. If you haven\u0027t gotten around to reading what Rob says about why Go doesn\u0027t have your favorite feature, please do. Then if you have more questions, find a conference where Rob is present and buy him a beer and ask him to explain it in person.",
					"date": "2017-07-17",
					"id": "dkbt0wn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ewouldblock",
					"content": "All Im saying is \"less is more\" sounds like it is precisely \"worse is better.\" And thrre seems to be disagreement with that (read the thread above). I don\u0027t care if go has generics, or any other feature.",
					"date": "2017-07-17",
					"id": "dkbxkvh",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "shayan_e",
			"date": "2017-08-06",
			"id": "6rxfjo",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 2, please don\u0027t make it happen",
			"comments": [
				{
					"author": "peatymike",
					"content": "Reminds me of this https://hbfs.files.wordpress.com/2009/11/perl6book-parody.jpg\n\n",
					"date": "2017-08-06",
					"id": "dl8jl4d",
					"isArchived": true,
					"isControversial": false,
					"score": 66
				},
				{
					"author": "AchillesDev",
					"content": "Eh I use Perl at my day job, and Perl 6 is pretty neat. IMO the biggest problem is calling it Perl 6.",
					"date": "2017-08-06",
					"id": "dl8m5tp",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "alloutblitz",
					"content": "Yup. Perl6 is so much different than Perl5 (and so backwards incompatible), that they may have called Perl6 a brand new language. Aw well.",
					"date": "2017-08-06",
					"id": "dl8mc0t",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "peatymike",
					"content": "I haven\u0027t tried it, I just find r/orlybooks funny :-)",
					"date": "2017-08-06",
					"id": "dl8onan",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "haiveu",
					"content": "agree, the biggest mistake is calling it Perl 6 and some people expect it to replace Perl 5",
					"date": "2017-08-06",
					"id": "dl8oxcm",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "backltrack",
					"content": "What do you used  perl (6) for?  Don\u0027t recall seeing any local listings for perl programmer in my area.  Is the documentation and community around perl 6 good?   And is it worthwhile to dive into?  I\u0027ve played with perl plenty but I feel like I never really had it click with me. ",
					"date": "2017-08-07",
					"id": "dla72sr",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "AchillesDev",
					"content": "Sorry, I should have clarified, I use perl5 at work. I\u0027m not aware of any Perl6 jobs since I don\u0027t think it\u0027s at that stage yet, nor is the community very big. I believe an O\u0027Reilly book on it is out or coming out soon, and my experience with it is very minor playing with it and reading articles about the various features. Perl5 is tough to wrap your head around, but once it clicks it\u0027s a breeze to use, sometimes despite its quirks, sometimes because of them. I use it mainly for processing large volumes of data, but there is a team working on an MMO (I think text-based) called [Tau Station](https://taustation.space/blog/).",
					"date": "2017-08-07",
					"id": "dla7bxi",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "backltrack",
					"content": "I have managed to do a few small projects in perl and it wasn\u0027t that bad.   It\u0027s just I don\u0027t think I\u0027ve used it enough for it to click and be productive in it.   I just wish there was better tooling for it like there is for python/java/etc ",
					"date": "2017-08-07",
					"id": "dla7qff",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dataf3l",
					"content": "Documentation and community is fantastic, join us at the irc channel!:)",
					"date": "2017-11-27",
					"id": "dqejiax",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "backltrack",
					"content": "Neat.  I have to learn some node and shit for my new job but maybe after that!",
					"date": "2017-11-27",
					"id": "dqejuym",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sys7emshock",
					"content": "Wouldn\u0027t be surprised if that was the official cover.",
					"date": "2017-08-06",
					"id": "dl8kd1j",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "Acid-Snow",
					"content": "[go 2 considered harmful](http://www.u.arizona.edu/~rubinson/copyright_violations/Go_To_Considered_Harmful.html)?",
					"date": "2017-08-07",
					"id": "dl9kals",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "thegsg",
					"content": "Rob Pike said in one of the ~~articles~~ talks about the design decisions behind Go that many languages \"borrow\" features and ideas from each other, meaning they eventually become more or less the same, and that Go will never do that. \n\nReading the discussion in the comments here only enforces the point he made. I suppose they\u0027d have to have great reasons to go back on such a strong design decision\n\nEdit: can\u0027t seem to find the link to the article (or maybe it was a talk?). If someone remembers where it\u0027s from I\u0027d be thankful for the link!",
					"date": "2017-08-06",
					"id": "dl8jldp",
					"isArchived": true,
					"isControversial": false,
					"score": 69
				},
				{
					"author": "jnj1",
					"content": "[Simplicity is Complicated](https://youtu.be/rFejpH_tAHM?t\u003d1m5s)",
					"date": "2017-08-06",
					"id": "dl8r06z",
					"isArchived": true,
					"isControversial": false,
					"score": 30
				},
				{
					"author": "dm319",
					"content": "Yes, the term he used is \u0027bloat without distinction\u0027.  Or something like that.\n\nWhich is why this whole Go 2 thing surprises me.  Why not just call it something different?  Could be a name that is somewhat related, and would save the whole python 2/3 thing.",
					"date": "2017-08-06",
					"id": "dl914zb",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "tv64738",
					"content": "If it was called something else, it wouldn\u0027t work as a flytrap for all the drive-by generic pony requests.",
					"date": "2017-08-06",
					"id": "dl95tdu",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-07",
					"id": "dl9ja20",
					"isArchived": true,
					"isControversial": true,
					"score": 4
				},
				{
					"author": "miyakohouou",
					"content": "I\u0027m a most of the time go developer, and it\u0027s been the main language I\u0027ve been using at work for the last 18 months. While it\u0027s possible to get by without them, I definitely miss having higher kinded types and paramedic polymorphism. I\u0027d also really like support for parametric interfaces.\n\nSimplicity is a great goal to strive for, but adding features doesn\u0027t necessarily mean losing simplicity as long as the semantics of the language are consistent and the features are baked in.  Much of the argument against generics feels like the typical arguments of blub developers against useful features higher up the power curve than they want to learn or think about.",
					"date": "2017-08-07",
					"id": "dlb2bk9",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-08",
					"id": "dlbs7wy",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "miyakohouou",
					"content": "It\u0027s a fair question, but the answer is simply that the tech market I\u0027m in (Midwest) doesn\u0027t have a lot of opportunities to work with languages I like. I like the people I work with, and the company is very kind and treats us very well.  I\u0027m slowly working on getting other people on my team comfortable with other languages, but in the mean time Go is the lingua franca of the team and it would be irresponsible to just go off and write things in e.g. haskell when nobody else knows it.  Blub languages tend to be gravity wells for exactly this reason- being in the middle of the power curve and not particularly interesting, they tend to be the language that the most people on a team happen to know.  Teaching people a new language (and new way of writing code) takes time, and a lot of trust from your team in order to get buy in from them to learn at all.",
					"date": "2017-08-08",
					"id": "dlbte6s",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "snazzyjackets",
					"content": "Sometimes the language is chosen for you. There is very few times that I could pick the language.",
					"date": "2017-08-16",
					"id": "dlq67qg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "saturn_vk",
					"content": "\"just because you don\u0027t need generics comment, ...\"\n\nbut seriously, i often wonder about something similar. are all those people saying that the language doesn\u0027t need generics full time Go developers? Or are they just writing simple http servers all day, and that has caused them to believe that everything is all and well with the world? The thing about generics is, it doesn\u0027t matter whether you or I need it. The compiler and the standard library do. There\u0027s currently a lot of special magic being done on behalf of the few containers and builtin functions being provided by the compiler, and the list of std packages that would benefit immensely is growing with each release. The word \u0027simplicity\u0027 that every opponent of extending the language is throwing around would actually apply here, since it would make the compiler quite a bit simpler. However, since quite a few Go developers have most like immigrated from dynamic languages, and haven\u0027t had any exposure to strongly typed ones, such a point would be lost. \n\nGo is currently very well suited for writing network apps and pushing bytes around. But that\u0027s mostly the extent of it. If it doesn\u0027t grow, it will likely die out eventually, because other languages are also good at these things, but they are also quite capable of being general-purpose. And once you start writing big applications, the later will almost always win, since they allow you to do other things much easier than Go currently does.",
					"date": "2017-08-07",
					"id": "dl9vtx3",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "titpetric",
					"content": "You make a fair point about the compiler and standard library. But I think, as somebody who implemented networking apps in other \"general-purpose\" languages, that you overestimate them. There hasn\u0027t been a networking service (server, api, client, tcp, http, etc.) that was implemented in a general purpose language which would be as-good as even a basic Go implementation. The rare examples which I\u0027ve seen have all been in C, and have at least a decade of development - which these \"general-purpose\" languages don\u0027t.\n\nNot to mention that maybe generics isn\u0027t even a problem about these languages. Sure, there\u0027s no compile-time safety, but if I\u0027d point a finger I\u0027d just point it at a poor ecosystem. Node/NPM is broken with all their stupid packages like `isarray` and `is-array` and `left-pad` and whatever, PHP/Composer is (as much of PHP) even worse (but thankfully adoption is much lower as well).\n\nConsidering how recent EcmaScript standards have been implemented in Node, I\u0027d rather advocate for a pre-compiler toolchain integration for `go build`. That way code generation would be a first class citizen. One could implement a completely different syntax and just make sure with something like `//+build` to pass it through some kind of precompiler toolchain. Since most of the generics discussion is about providing a concrete type for `T` (templates), I think that this would be an elegant way to solve it. Go stays Go. The question is, does Go need some *additions* that can\u0027t be solved with a precompiler.",
					"date": "2017-08-07",
					"id": "dl9zz0a",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tv64738",
					"content": "\u0026gt; The compiler and the standard library do. There\u0027s currently a lot of special magic being done on behalf of the few containers and builtin functions being provided by the compiler,\n\nYes, there is. But it\u0027s 1) probably less than you think 2) often needed anyway, because e.g. map is pretty well optimized on that level, and e.g. `append` is more of an AST transformation than a function 3) as a whole *simpler than implementing generics would be*.\n\nPlease please please consider the idea that doing it this way was an explicit trade-off.",
					"date": "2017-08-08",
					"id": "dlb8nt7",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "LovecraftsDeath",
					"content": "Have you considered how many developers chose not to use Go due its lack of generics, exceptions, etc?",
					"date": "2017-08-08",
					"id": "dlck7xp",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "alasijia",
					"content": "Isn\u0027t Go full of all kinds of features from other language?\n\n* package and import from many languages, most from python.\n\n* interface/reflection from Java.\n\n* slice from python\n\n* map from many other languages.\n\n* function/closure from JavaScript\n\n* pointer from C\n\n* struct from C\n\n* type deduce from C++\n\n* multiple returns from many other languages\n\n* garbage collection from many other languages.\n\nThe problem of many other languages isn\u0027t to borrow features, it is just to borrow anything, or borrow something without carefully thinking about it. The same is for generic (and other possible future new Go features), it is a pain without it, and it will also be a pain if Go supports it without carefully designing it.\n",
					"date": "2017-08-07",
					"id": "dl9mckc",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "bobappleyard",
					"content": "\u0026gt; function/closure from JavaScript\n\n(._. )",
					"date": "2017-08-08",
					"id": "dlbg8id",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "aredirect",
					"content": "weren\u0027t most of those features in lisp first? :D",
					"date": "2017-08-07",
					"id": "dlah0e1",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "thegsg",
					"content": "Maybe I failed for wanting to put this too succinctly. I suggest you watch the video I mentioned, it\u0027s really good.\n\nOf course they borrow features from other languages, the alternative would be redesigning everything from the ground up, from syntax to data structures and compiler design. \n\nThe difference is that Go features are there as a result of a top-down approach for designing a simple, productive language with orthogonal features and great tooling. Other languages strive for other things such as expressiveness, ease of read and homoiconity and then add more features to further versions because \"C#/Python/R/Ruby/perl6 has it, why shouldn\u0027t we?\". That results in a more complex language, more complex tooling and unproductive discussions of for loops vs. map/reduce/fold/comprehensions or the optimal Tab size.",
					"date": "2017-08-07",
					"id": "dla2oly",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "I get the sentiment, adding features willy-nilly on top of each other doesn\u0027t result in nice languages. But the upper part isn\u0027t entirely true to the way things are. It should be [more like this](http://i.imgur.com/zSPaRLb.jpg). I mean, have you seen `syncmap`? That thing is as misshapen as the creature in the lower part.\n",
					"date": "2017-08-06",
					"id": "dl8qkjj",
					"isArchived": true,
					"isControversial": false,
					"score": 61
				},
				{
					"author": "nosmileface",
					"content": "To be honest I\u0027d like to see some of these features in Go eventually. But the picture is funny, you got my upvote, it made me laugh.",
					"date": "2017-08-06",
					"id": "dl8hgzv",
					"isArchived": true,
					"isControversial": false,
					"score": 113
				},
				{
					"author": "ihsw",
					"content": "Operator overload is something that I would find extremely underwhelming and abused.\n\nTo hell with `dataManager +\u003d data.record()`, it makes no bloody sense. What\u0027s wrong with `dataManager.insert(data.record())`?",
					"date": "2017-08-06",
					"id": "dl8oui1",
					"isArchived": true,
					"isControversial": false,
					"score": 90
				},
				{
					"author": "jonaso95",
					"content": "Totally agree, just adds unneeded complexity to the language IMO",
					"date": "2017-08-06",
					"id": "dl8pr5q",
					"isArchived": true,
					"isControversial": false,
					"score": 42
				},
				{
					"author": "joncalhoun",
					"content": "The only times I find it useful is for defining what equality is, or if you have what is clearly a numeric value (eg math/big). But like you, I\u0027m okay with not having them because I agree they would be abused far too much.",
					"date": "2017-08-06",
					"id": "dl8vkti",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Majora320",
					"content": "\u0026gt;abused far too much\n\nYou can write C++ in any language, it\u0027s not like avoiding useful features which \"can\" be abused will automagically make everyone better programmers...",
					"date": "2017-08-06",
					"id": "dl8z617",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "stone_henge",
					"content": "You don\u0027t automatically get better programmers, but on the other hand, by excluding some constructs that are commonly abused you can guarantee that you\u0027ll never come across them in a code base.\n\nI wouldn\u0027t abuse operator overloading, and I\u0027d like to think that I work with people that wouldn\u0027t, but I read code by people that are not me or people I work with, and it\u0027s nice to be able to jump into a code base confident that + means + and not something else because someone made a bad decision at some point. If you weighed the convenience of being able to use operators to execute some custom code against the inconvenience of not being certain of what an operator does in a particular context, I think the former would fly off the scale like a carcass off a catapult.",
					"date": "2017-08-08",
					"id": "dlblhs7",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "joncalhoun",
					"content": "I don\u0027t think anybody said that it makes everyone a better programmer. I certainly didn\u0027t. \n\nIt is my opinion that the number of use cases where operator overloading causes more confusion and eats up more developer time would be greater than the number of cases where it clarifies and reduces dev time. As a result, I wouldn\u0027t advocate for adding it. This opinion is based on my experience in ruby.\n\nI also believe there are much bigger issues in worth addressing in Go.",
					"date": "2017-08-06",
					"id": "dl93bai",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "optimists",
					"content": "I agree, though I hate writing A.Add(B) instead of A+B just because A and B are not floats or ints but some other numerical type like decimal or bit.Rat . It becomes worse since the syntax is very different. for big.Rat it would even be A.Add(A,B) iirc.\nI would appreciate some syntactic sugar if your type fulfills some \u0027math.Number\u0027 interface or whatever.",
					"date": "2017-08-06",
					"id": "dl8u4h0",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "elagergren",
					"content": "This only speaks to part of your comment, but there was a proposal to make `int` arbitrary precision.",
					"date": "2017-08-06",
					"id": "dl9e79s",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "loderunnr",
					"content": "I think there\u0027s an argument for a limited form of operator overloading, that I described in [here](https://dev.to/loderunner/go-i-love-you-but-youre-bringing-me-down) along with some other ideas. TL;DR Clear semantics baked into the language could prevent operator overloading abuse.\n\nSameer Ajmani [mentioned](https://twitter.com/Sajma/status/889584792660045825) seeing a similar proposal",
					"date": "2017-08-07",
					"id": "dl9y65n",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "saichampa",
					"content": "This was pretty much my exact reaction to it",
					"date": "2017-08-06",
					"id": "dl8jotu",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "BurpsWangy",
					"content": "I\u0027m with you.  I may be the minority; however, I love Go just the way it is.  I find it highly enjoyable to code with, and am blown away by the standard library|packages and the community support it has.\n\nI know there\u0027s always going to be growth; however, I came from the other languages because I hated the other languages (I\u0027m looking at you in particular, .NET).  Now I see all these Microsoft \u0027enthusiast\u0027 jumpin\u0027 on the Go bandwagon, and they\u0027re voicing their support to add all these things to the language.  Leave it alone!  You\u0027ve guys got your .NET core (15 years too late) and other toys to play with.",
					"date": "2017-08-06",
					"id": "dl94itl",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "GoTheFuckToBed",
					"content": "When you find an iOS question on stackoverflow and the answer contains 4 snippets: obj-c, swift 1, swift 2, swift 3",
					"date": "2017-08-06",
					"id": "dl8oftw",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "TheSpreader",
					"content": "lest we forget, swift 4 is out soon...",
					"date": "2017-08-07",
					"id": "dl9lth2",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "I don\u0027t think this will happen, the Go team has expressed a deep concern about this; minimising disruption and  compatibility with Go 1 is the top of the list in terms of constraints (according to the Go 2 blog post).",
					"date": "2017-08-09",
					"id": "dlcyyc9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "byllgrim",
					"content": "Is Pike still in charge? I kinda trust him.",
					"date": "2017-08-06",
					"id": "dl8vzps",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "rimpy13",
					"content": "I hope he is.",
					"date": "2017-08-06",
					"id": "dl93zuj",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "iends",
					"content": "Hasn\u0027t rsc taken over?",
					"date": "2017-08-06",
					"id": "dl96ry5",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dilap",
					"content": "has he? i trust rsc, too. honestly my biggest fear is that they feel compelled to listen to the community too much. too  many cooks and all that.",
					"date": "2017-08-08",
					"id": "dlc6wld",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "iends",
					"content": "I don\u0027t think anybody has accused the Google Go team of ever listening to the community TOO much. In fact, it usually goes the other way.",
					"date": "2017-08-09",
					"id": "dld3bdz",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dilap",
					"content": "j\u0027accuse! :)\n\nno i think that\u0027s part of the problem. they\u0027ll try to be responsive to criticism and go to far the other way. that\u0027s what i fear, anyway.",
					"date": "2017-08-09",
					"id": "dld5oyc",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "snazzyjackets",
					"content": "If history has told us anything it is that the core Go Team gives no fucks. They do what they do, and that doing is not influenced by anyone or anything outside of Google.",
					"date": "2017-08-16",
					"id": "dlq425l",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "snazzyjackets",
					"content": "From what I understand Pike had a hand in creating the language, and helped with the implementation. Pike now mostly just messes with big data within Google. So Pike mostly works with the language and sometimes on the language. However, his opinion is valued, and when Pike speaks up people mostly listen.",
					"date": "2017-08-16",
					"id": "dlq5fui",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "gott_modus",
					"content": "Just add generics FFS and call it a day",
					"date": "2017-08-06",
					"id": "dl8m3lk",
					"isArchived": true,
					"isControversial": false,
					"score": 60
				},
				{
					"author": "Deltigre",
					"content": "But I want to reimplement my [collection type] every time I optimize!",
					"date": "2017-08-06",
					"id": "dl8ny4m",
					"isArchived": true,
					"isControversial": false,
					"score": 51
				},
				{
					"author": "the_starbase_kolob",
					"content": "It\u0027s pragmatic",
					"date": "2017-08-06",
					"id": "dl8wvyw",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "tv64738",
					"content": "\"Just\"",
					"date": "2017-08-06",
					"id": "dl8ov1v",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "orbat",
					"content": "You make it sound like it\u0027s some heroic feat to implement a generics system",
					"date": "2017-08-06",
					"id": "dl91k3v",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "adamrt",
					"content": "I imagine it is a heroic feat to implement a generics system that doesn\u0027t complicate the language and tooling. It\u0027s about trade offs and they don\u0027t seem to think the trade offs are worth it currently. \n\n",
					"date": "2017-08-06",
					"id": "dl9277q",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "Daishiman",
					"content": "A good generics system is better than 10 different codegen tools to write all the stuff you shouldn\u0027t need to write in the first place.",
					"date": "2017-08-06",
					"id": "dl9b9dy",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "metamatic",
					"content": "So show us a good generics system which doesn\u0027t have a horrible complicated syntax. Someone must have done it, right?\n\nAnd please don\u0027t reply with Java or C++ unless you want howls of derisive laughter.",
					"date": "2017-08-07",
					"id": "dlabloh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Daishiman",
					"content": "Haskell, Typescript, Kotlin.\n\n I don\u0027t know where using a dozen slightly incompatible codegen tools is a step up from using a reasonable amount of generic code to define the few polymorphic functions that are needed for generic collections and so on. It\u0027s certainly a *way* easier problem that understanding the subtle semantic gotchas in channels.",
					"date": "2017-08-07",
					"id": "dlah54e",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "metamatic",
					"content": "Maybe I\u0027m missing something, but [Kotlin generics](https://kotlinlang.org/docs/reference/generics.html) seem to have more complexity than Java\u0027s, and TypeScript\u0027s seems basically the same as Java.",
					"date": "2017-08-07",
					"id": "dlaisqj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Daishiman",
					"content": "The only place where you have to seriously think about complexity in generics is when you\u0027re the creator of custom data structures and have to consider multiple type parameters and unusual weirdness that frankly constitutes an irrelevant minority of edge cases. As a consumer of generics and user you don\u0027t even have to have that knowledge in your head.\n\nYou\u0027re going to be hitting contention and semantics issues in channels way sooner than this but nobody complains that proper channels are deep down not trivial at all.",
					"date": "2017-08-07",
					"id": "dlat80i",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "tv64738",
					"content": "You make it sound like you never read http://research.swtch.com/generic",
					"date": "2017-08-06",
					"id": "dl92tav",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "orbat",
					"content": "I understand the challenges. My point is that it\u0027s still not *that* hard (multiple languages have done it before, there\u0027s a lot of research on the subject) even though it\u0027s not trivial (especially from a Go type system point of view)",
					"date": "2017-08-06",
					"id": "dl92z9x",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "tv64738",
					"content": "I for one *really* appreciate Go attempting to be a very simple language, like a modernized early C. I haven\u0027t seen a concrete proposal that would inflict less than C++ levels of horrors. Whining doesn\u0027t make those concrete proposals appear, and the Go core devs have stated they don\u0027t currently see a way to make that happen either.",
					"date": "2017-08-06",
					"id": "dl95nw7",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "\u0026gt; I for one really appreciate Go attempting to be a very simple language, like a modernized early C.\n\nC is simple because it\u0027s a thin abstraction over the machine. Go is... not that. At all. There\u0027s no real reason to pretend it is except for a fetishization of \"simplicity\".\n\nA language with a modern typesystem - including generics - and Go 1\u0027s green threads and ad-hoc interfaces would be excellent. Go 2 could be that.",
					"date": "2017-08-07",
					"id": "dl9t4nf",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-07",
					"id": "dl9rkgt",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gott_modus",
					"content": "C# isn\u0027t a bad language. C++ has its warts for sure and the amount of baggage it has is ridiculous I agree.\n\nBut generics aren\u0027t esoteric. They\u0027re standard and pragmatic.",
					"date": "2017-08-07",
					"id": "dl9rsds",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "carleeto",
					"content": "I didn\u0027t intend to imply either was bad. Both, however, are complex. I like Go\u0027s simplicity and I hope it stays that way.",
					"date": "2017-08-07",
					"id": "dl9sfll",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gott_modus",
					"content": "I don\u0027t blame you there. Simple is good. Simple gets shit done.\n\nAnd generics are simple.",
					"date": "2017-08-07",
					"id": "dl9xwvv",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-07",
					"id": "dlakggr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gott_modus",
					"content": "\n\u0026gt;but what I definitely don\u0027t want is what happened to C++... Lots of keywords introduced over years to try to describe and work with types. \n\nI don\u0027t think anyone really wants a C++ repeat, for any language really. A lot of game engine programmers sigh and accept it because that\u0027s the standard. \n\nI use C++, but my C++ isn\u0027t as modern as it could be, and avoids a lot of meta language features because the project I\u0027m working on has never used them and I won\u0027t have a reason to really learn modern C++ until I\u0027m finished with it.\n\nI can tell you that it\u0027s not really something I\u0027m stoked about. C is much nicer, and far more elegant. But C++ provides very key features which make it still worth investing in, and it\u0027s prevelant everywhere. C++ is a lot like JavaScript in that sense: a language a lot of people love to hate, but accept using because it\u0027s still the most sane choice for the given domains it\u0027s being used in.\n\n   ",
					"date": "2017-08-08",
					"id": "dlbecgi",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "metamatic",
					"content": "It\u0027s also what\u0027s happened to JavaScript. And before that, it happened to Perl. Perl 6 drove me to switch to Ruby.",
					"date": "2017-08-07",
					"id": "dlabokf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gnu-user",
					"content": "I really like go because it gives me that effortless freedom to write code without thinking the same as if I\u0027m writing a blog post in English. The only other language I\u0027ve felt this way with is C and I attribute it to the languages being simple enough you can keep most of the spec in your head.\n\nOn the other hand with languages such as Python (production stuff), Java and C++ I\u0027m always forced to look things up because there\u0027s just too much to keep it all in your head.\n\nFor example with Python there 2 -\u0026gt; 2.7, 2 vs 3, pep8, \"pythonic\" conventions, PyPy, CPython, Cython, the list goes on... The same with C++ boost, C++98/C++11/C++14, MS/GCC/Intel/Clang compilers, Make/Automake/Cmake/Gradle just thinking about it gives me anxiety!",
					"date": "2017-08-06",
					"id": "dl8x1bp",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "iluminae",
					"content": "I just hope they don\u0027t mess up the language. I am one of those guys who don\u0027t want exceptions because I don\u0027t want another c# mess. I don\u0027t even want generics at this point because I have learned to go without and I like my final product every time.\n\nI even think making a go2 will fragment the libraries out there across both and get a python2/3 situation that I don\u0027t want to deal with either.\n\nWe have a simple, powerful language that meets so many use cases. Don\u0027t mess up my language bro.",
					"date": "2017-08-06",
					"id": "dl8ockc",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "JemandAnderes",
					"content": "\u0026gt; I even think making a go2 will fragment the libraries out there across both and get a python2/3 situation that I don\u0027t want to deal with either.\n\nOne of the main goals (or constraints) for go2 is not dividing the go developer base:\n\n \u0026gt; Go 2 must also bring along all the existing Go 1 source code. We must not split the Go ecosystem. Mixed programs, in which packages written in Go 2 import packages written in Go 1 and vice versa, must work effortlessly during a transition period of multiple years. We\u0027ll have to figure out exactly how to do that; automated tooling like go fix will certainly play a part.   \n\nSource: https://blog.golang.org/toward-go2",
					"date": "2017-08-06",
					"id": "dl8prgn",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "DenzelM",
					"content": "I ask these questions genuinely:\n\n1. What projects have you shipped with Go?\n2. How many kLOC were they?\n3. How many developers worked on the project with you?",
					"date": "2017-08-06",
					"id": "dl9crzl",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "iluminae",
					"content": "1) All the professional projects are pieces of a proprietary system. (For work)\n2) Overall, maybe 8k lines after tests? I don\u0027t care enough to get on the VPN to check it out. \n3) I believe we are at about 40 engineers in dev.\n\nI hope this information helps you?",
					"date": "2017-08-07",
					"id": "dl9mbno",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "DenzelM",
					"content": "It does. Usually people that work on small projects don\u0027t see a need for exceptions -- or other formal techniques like enforcing/documenting/reasoning about invariants. Rightfully so, I might add.\n\nSo, I was just curious whether my initial hunch was correct.",
					"date": "2017-08-08",
					"id": "dlc8chh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hobbified",
					"content": "Thanks for lowering the level of discourse.",
					"date": "2017-08-06",
					"id": "dl8rfmu",
					"isArchived": true,
					"isControversial": false,
					"score": 26
				},
				{
					"author": "CountyMcCounterson",
					"content": "Go 1 is fucking disgusting it has so many features you don\u0027t need.\n\nCode would be so much simpler without types. Just imagine.\n\n\u0026gt;var x \u003d new(4)\n\ncreates a new variable of 4 bytes and then you manipulate these bytes like an integer and write all your own functions.\n\nBecause seriously why would you want prewritten integer functions that\u0027s going to be slow and might not match your use case.\n\nSomething has to be done, good programmers like ourselves don\u0027t need these stupid features and simple is better.",
					"date": "2017-08-06",
					"id": "dl8k1eo",
					"isArchived": true,
					"isControversial": false,
					"score": 115
				},
				{
					"author": "ctesibius",
					"content": "Spot the BCPL programmer. ",
					"date": "2017-08-06",
					"id": "dl8k9k2",
					"isArchived": true,
					"isControversial": false,
					"score": 38
				},
				{
					"author": "qu33ksilver",
					"content": "Might as well write in assembly then.",
					"date": "2017-08-06",
					"id": "dl8n3fw",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "Creshal",
					"content": "x64 assembly has a better type system than that.",
					"date": "2017-08-06",
					"id": "dl8xc3t",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "stone_henge",
					"content": "Reductio ad absurdum",
					"date": "2017-08-06",
					"id": "dl8mqa6",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "hobbified",
					"content": "Either you understand what those words mean, and you agree with /u/CountyMcCounterson, or you don\u0027t, and you\u0027re trying to disagree :)",
					"date": "2017-08-06",
					"id": "dl8rc9r",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "stone_henge",
					"content": "The picture is at worst a straw man. Most of those features have been suggested for Go 2 in one way or another, so you can\u0027t exactly call it absurd.",
					"date": "2017-08-06",
					"id": "dl8ucjn",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "JoelFolksy",
					"content": "Exactly! I also hate how they brought in this obscure, ivory tower concurrency system (CSP). I wish for once we could get a language that\u0027s easy for programmers from all backgrounds to learn, rather than more academic wankery.",
					"date": "2017-08-07",
					"id": "dlathfh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bonobo-cop",
					"content": "It at least seems appropriate that the generics are the wings.",
					"date": "2017-08-06",
					"id": "dl9aom0",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "p7r",
					"content": "Most of these are never going to happen in Go, because it would go against the design philosophy of Go.\n\nSome _might_ happen, but probably should not. People who are prepared to sacrifice clarity and readability in the name of DRY have no business writing maintainable software. Solutions that allow a developer to be \"very clever\" when writing software means the rest of us are dumb-founded when maintaining it a year or three later. Generics, Mixins and Lambdas can all fall into this class.\n\nPolymorphism would too, but Go actually has this. We just call them interfaces: they abstract concrete behaviour on concrete types in a way that allows data (and specifically its type) to expose behaviour. The way Go does polymorphism through the interface type is probably better than any other implementation I\u0027ve seen - others should borrow it from Go. We should not borrow other implementations from other languages.\n\ntry/catch is so philosophically removed from Go\u0027s principles around integrity and correctness, its introduction would literally ruin much of the point of the language.\n\nThe rest I can take or leave, but would probably leave.\n\nIn all seriousness, we need to ask: why do we need a Go 2?",
					"date": "2017-08-07",
					"id": "dl9tws1",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "srbufi",
					"content": "They should just challenge the Go 2 community to implement all these features in a repo and see how it works out.",
					"date": "2017-08-06",
					"id": "dl8key7",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "mcandre",
					"content": "Case aware lexing. XML primitives. Monadic guarantees. Brainfuck preprocessor. std::physics2d. Custom heredocs. JARs. Dynamic scope. Fucking ternary operator.",
					"date": "2017-08-06",
					"id": "dl8s7nr",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "willbeddow",
					"content": "Can someone ELI5 why this is a bad thing? As a python developer I got into go because it seemed like was a compiled language that had a relatively gentle learning curve, and could be written quickly. Why would more features be a bad thing?",
					"date": "2017-08-06",
					"id": "dl8uexy",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "saturn_vk",
					"content": "More features wouldn\u0027t necessarily be a bad thing. The problem is that a lot of people feel that they don\u0027t need generics for various reasons (don\u0027t realize that they already use the builtin \u0027generic\u0027 types, write tiny applications, duplicate code where needed, are perfectly fine with dealing with the issue at runtime, etc). And since they don\u0027t need it, it\u0027s obviously a useless feature and should never be added.",
					"date": "2017-08-06",
					"id": "dl9bny5",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "shayan_e",
					"content": "https://www.youtube.com/watch?v\u003drFejpH_tAHM",
					"date": "2017-08-06",
					"id": "dl8vpvl",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "youtubefactsbot",
					"content": "\u0026gt;[**dotGo 2015 - Rob Pike - Simplicity is Complicated [23:12]**](http://youtu.be/rFejpH_tAHM)\n\n\u0026gt;\u0026gt;Go is often described as a simple language. It is not, it just seems that way. Rob explains how Go\u0027s simplicity hides a great deal of complexity, and that both the simplicity and complexity are part of the design.\n\n\u0026gt; [*^dotconferences*](https://www.youtube.com/channel/UCSRhwaM00ay0fasnsw6EXKA) ^in ^Science ^\u0026amp; ^Technology\n\n\u0026gt;*^34,689 ^views ^since ^Dec ^2015*\n\n[^bot ^info](/r/youtubefactsbot/wiki/index)",
					"date": "2017-08-06",
					"id": "dl8vqc9",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "Exceptions could be a case in point; operator overloading too.\n\nThe current language makes it easy to know what happens when an error occurs. It\u0027s more verbose, but more predictable than exceptions. If Go were to get exceptions, some library might throw one, breaking all your assumptions. So then you want to have a safeguard against that, and there will have to be a \u0027func ... throws ...\u0027 construction, which will finally show up everywhere. It\u0027ll get messy.\n\nI personally think that generics, even if they only allow you to abstract from the type and avoid the type switch in places where you know what type to expect, would be a good thing, though.",
					"date": "2017-08-06",
					"id": "dl8vef1",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "metamatic",
					"content": "It\u0027s estimated that to become fluent in C++, and able to program in it reliably and safely, requires around 5 years of experience. The language is huge, has many features which can be extremely dangerous if misused, and so on. This makes C++ development expensive. It\u0027s why there\u0027s so much interest in Rust, Vala, Swift, and Go -- people want something with performance comparable to C++, but without the difficulty and expense. (And without the JVM, because Oracle.)",
					"date": "2017-08-07",
					"id": "dlacqfc",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Streamweaver66",
					"content": "The core language design team needs to stay true to itself and we wont need to worry about it no matter the version number.\n\nI agree with the author.  There\u0027s just something about the language I like, but the lack of these language crutches have been very freeing for me in Go and I hope we don\u0027t see them.  Chaining together crutches is why some other languages (particularly java), which are otherwise fine on their own, become so bloated.",
					"date": "2017-08-06",
					"id": "dl8rmb2",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "codingconcepts",
					"content": "That\u0027s a pretty multipurpose looking whatever that is...  I reckon it\u0027d put up a good fight against C# and Java, which look similar if memory serves.",
					"date": "2017-08-06",
					"id": "dl8hmzc",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "WagwanKenobi",
					"content": "But at that point why not just use Java/C#? People switch to Go because it\u0027s simple and well-designed. If it doesn\u0027t work for you then that\u0027s that. Move on. \n\nUse the language if it works for you. Stop trying to mold it to your specific needs. Honestly if you really, really need more than one thing listed in the picture, you\u0027re better off using another language.\n\nEdit: Great concurrency is available in every single mainstream language in the form of third-party libraries. You just aren\u0027t looking hard enough. It\u0027s not worth switching to another language over that. Yes, you won\u0027t get \"first class concurrency\" (for whatever that\u0027s worth) but if you\u0027re coming from language X and you really, really love language X, you can probably make X concurrent. Stop trying to turn Go into X+concurrency. That\u0027s a misuse.",
					"date": "2017-08-06",
					"id": "dl8imfp",
					"isArchived": true,
					"isControversial": false,
					"score": 30
				},
				{
					"author": "apockill",
					"content": "I went to go to have a language made for concurrency...",
					"date": "2017-08-06",
					"id": "dl8jblu",
					"isArchived": true,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "iends",
					"content": "Elixir and/or Erlang?",
					"date": "2017-08-06",
					"id": "dl8pazb",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "WagwanKenobi",
					"content": "No, not that hard!",
					"date": "2017-08-06",
					"id": "dl96zwn",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "iends",
					"content": "Elixir is pretty nice, but it\u0027s way behind go in popularity. There is a whole range of applications that people are using Go for that would be better suited to Elixir (although vice-versa too, I\u0027m sure).\n\nAlthough, lack of static typing is kinda of a bummer...but hey you can get something out of dialyzer.\n\nOh, I guess deploying Elixir/Erlang is meh too, but that\u0027s something you only have to figure out once and then the process is repeatable.",
					"date": "2017-08-06",
					"id": "dl974rj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "WagwanKenobi",
					"content": "Elixer is definitely very good lol. My point was that people want easy concurrency.",
					"date": "2017-08-07",
					"id": "dl9gm3c",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "comrade-jim",
					"content": "They run in a VM",
					"date": "2017-08-06",
					"id": "dl9ccwo",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "iends",
					"content": "Okay? ",
					"date": "2017-08-07",
					"id": "dl9gjx3",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Perelandric",
					"content": "https://www.ponylang.org/discover/",
					"date": "2017-08-06",
					"id": "dl8kyxp",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "apockill",
					"content": "At the end of the day, I also want that language to be popular.",
					"date": "2017-08-06",
					"id": "dl8ly24",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "spaghetti-in-pockets",
					"content": "I\u0027ve grown to agree with this over time. Tools, community and support are important.",
					"date": "2017-08-06",
					"id": "dl8nz93",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Perelandric",
					"content": "Sure, just sharing. It\u0027s an interesting project nonetheless. :)",
					"date": "2017-08-06",
					"id": "dl8mudg",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "theQuandary",
					"content": "Just switch to CML/SML and call it a day.",
					"date": "2017-08-07",
					"id": "dlaawtv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "andreasgonewild",
					"content": "Anything with channels and green threads, or enough power to implement them would get you there. It\u0027s not magic.\n\nhttps://github.com/andreas-gone-wild/blog/blob/master/diy_cpp_chan.md",
					"date": "2017-08-06",
					"id": "dl8xatw",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "EsperSpirit",
					"content": "Pretty much every functional language has great concurrency support. Clojure has channels similar to go for example...",
					"date": "2017-08-06",
					"id": "dl91qpu",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "campbellm",
					"content": "Our communities are likely different but the people I\u0027ve talked to that switch to go did so for the fast compilation and static binaries.",
					"date": "2017-08-06",
					"id": "dl8msx4",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "Perelandric",
					"content": "\u0026gt; why not just use Java/C#?\n\nClass-based inheritance and they run in a VM. Those are two major differences nobody is asking for in Go.\n",
					"date": "2017-08-06",
					"id": "dl8kufz",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "Krieger08026",
					"content": "Oh yes. I picked up Go in addition to C# because it\u0027s nice to have a language that can compile to a native binary and isn\u0027t C/++. ",
					"date": "2017-08-06",
					"id": "dl8lkvs",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "metamatic",
					"content": "Give it time. JavaScript got class-based inheritance because so many people kept asking for it. Grr.",
					"date": "2017-08-07",
					"id": "dlacam2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jacksonmills",
					"content": "Because Go isn\u0027t just meant to be simple, it\u0027s meant to make concurrency simple. That simplicity lies in channels and go-routines.\n\nUnfortunately, code written in Go can easily get to the point of \"not easy to understand\", or \"not simple\", and a lot of it has to do with the language design itself, not underlying complexity. We can say there\u0027s virtue in performing the `for` loop ourselves every time we want to remove an element from a collection, but the fact of the matter is that generics will solve a lot of common cases of bloat by enforcing a pattern across a common interface that will not only reduce repetition but mental overhead in understanding the patterns at large within the code.\n\nThe way I look at it is that Go 1 included all of the features that were \"safe\". Go 2 has the same aim as 1 - simple code, strong well-made abstractions, easy to write, standard patterns - but it\u0027s starting to include all of the features that may be slightly less safe.\n\nWhile I can agree that some things scare me - particularly exceptions - I think we should at the very least stop fear mongering, \"craftsman shaming\", and projecting the will of the core team as some dark motive emanating from salty C# and Java programmers who just want total parity between Go and their old workhorse.  A lot of feedback from the community was processed in making these decisions, and I think we should have a \"wait and see\" attitude towards how they will all turn out. Who knows? Maybe exceptions won\u0027t be terrible after all. ",
					"date": "2017-08-06",
					"id": "dl8rtu6",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "tiberiousr",
					"content": "\u0026gt; We can say there\u0027s virtue in performing the for loop ourselves every time we want to remove an element from a collection\n\nWhere n is the element index\n\n    a \u003d append(a[:n], a[n+1:]...)",
					"date": "2017-08-06",
					"id": "dl9aore",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "jacksonmills",
					"content": "So how are you finding that element index?",
					"date": "2017-08-07",
					"id": "dl9h9xp",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tiberiousr",
					"content": "    rand.Seed(time.Now().UnixNano())\n    n :\u003d rand.Intn(len(a))\n\n:p\n\n",
					"date": "2017-08-07",
					"id": "dla0i50",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tiberiousr",
					"content": "But on a more serious note. If you\u0027re not doing an iterative loop in order to determine item index in order to remove said item then it seems likely that the language you\u0027re using is doing it under the hood in some fashion or other. All we\u0027re really doing in Go is elaborating on that logic and making it more obvious.",
					"date": "2017-08-07",
					"id": "dlazooa",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "winger_sendon",
					"content": "Go strives for simplicity. Although a gopher could understand that. Having to use append to remove an element is odd at first sight.",
					"date": "2017-08-07",
					"id": "dlamuh1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tiberiousr",
					"content": "A fair point. The logic above is obviously only useful if you know your indices but in terms of optimisation it\u0027s not a bad pattern. You could just as well do:\n\n    for n, p :\u003d range a {\n        if p \u003d\u003d condition {\n            a \u003d append(a[:n], a[n+1:]...)\n            break\n        }\n    }\n\nIt would certainly be more efficient than re-allocating an entirely new slice that simply iterates and omits the item you want to exclude.",
					"date": "2017-08-07",
					"id": "dlazvgi",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "winger_sendon",
					"content": "Of course. But if go had generics, we could make a remove function which does that. That is what abstractions are for. ",
					"date": "2017-08-08",
					"id": "dlbyx11",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jjolla888",
					"content": "go makes standalone executables. \n\nno extra unnecessary layer needed.",
					"date": "2017-08-06",
					"id": "dl8lqmy",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "codingconcepts",
					"content": "Absolutely.  If you\u0027re having to shoehorn, you\u0027re doing it wrong.",
					"date": "2017-08-06",
					"id": "dl8l0ci",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "AlyssaDaemon",
					"content": "\u0026lt;Insert joke about C#/Java not working in the first place\u0026gt;",
					"date": "2017-08-06",
					"id": "dl8kgab",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rimpy13",
					"content": "I\u0027m really sad I only get to upvote you once.",
					"date": "2017-08-06",
					"id": "dl944l7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "d_rudy",
					"content": "The more I think about it the more my opinion has changed. While I was using Go, I could think of all kinds of things that other languages had that I would find useful. But really, if I think about the things I really like about Go (clarity, a solid and contemporary stdlib, gofmt, compiled, great concurrency, etc), there\u0027s no reason other languages couldn\u0027t make those things happen. All the things I want in Go would just make it a different language, so really, I think I just need to be shopping for a different language.",
					"date": "2017-08-07",
					"id": "dl9hlq2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "MonkeyD",
					"content": "Honestly, as someone new to Go and really loving it, I also hope this isn\u0027t what happens with Go 2. As others have stated, I would probably go to C# for everything listed here...",
					"date": "2017-08-07",
					"id": "dlazsjj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "divan0",
					"content": "Who is the author of this masterpiece? :)",
					"date": "2017-08-06",
					"id": "dl8rfzm",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tv64738",
					"content": "The picture is somewhat amusing, but I\u0027m downvoting because this post is doomed to decline into whining without understanding the trade-offs.",
					"date": "2017-08-06",
					"id": "dl8p2xv",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "Xenepa",
					"content": "So... now I know how ruby looks in real life \u003dD\n\nBut I\u0027d be happy with nicer error handling. I don\u0027t like evaluating error.String() to guess what happened... \n\nOr maybe macros so that core language goes away without generics, mixins, lambdas, symbols etc but we can just create some sugar to implement them. Unreadable you say? Good editor will show you how the code looks \"unfolded\"  ",
					"date": "2017-08-06",
					"id": "dl8rlkw",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "moose_cahoots",
					"content": "\u0026gt;I don\u0027t like evaluating error.String() to guess what happened... \n\nThere are better ways to handle errors. See the famous post [Don\u0027t just check errors, handle them gracefully](https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully). It proposes multiple ways to handle errors​ that are better than substring matching.",
					"date": "2017-08-06",
					"id": "dl8vajh",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "rimpy13",
					"content": "https://blog.golang.org/errors-are-values",
					"date": "2017-08-06",
					"id": "dl94ctm",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "jadbox",
					"content": "Give me a strictly typed system for Map/Filter/Reduce and I\u0027ll be happy... although you\u0027ll need generics for that.",
					"date": "2017-08-06",
					"id": "dl93krw",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "iends",
					"content": "Haskell.",
					"date": "2017-08-06",
					"id": "dl96vd9",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "albgr03",
					"content": "Generics, list comprehension and try/catch would improve the language though. Also, Go has lambda expressions.",
					"date": "2017-08-06",
					"id": "dl8gr2k",
					"isArchived": true,
					"isControversial": true,
					"score": -6
				},
				{
					"author": "faiface",
					"content": "Have you ever used Go? Generics, I agree if they are done right, but list comprehensions and exceptions, no way. Exceptions were deliberately left out of the language because of the decades of experience with them. List comprehensions are just smart and can make code less readable, this is an experience from Python.",
					"date": "2017-08-06",
					"id": "dl8hrr8",
					"isArchived": true,
					"isControversial": false,
					"score": 36
				},
				{
					"author": "albgr03",
					"content": "Yes I did. And I miss those. No, list comps aren’t unreadable, at all. No, exceptions aren’t harmful.",
					"date": "2017-08-06",
					"id": "dl8ikvt",
					"isArchived": true,
					"isControversial": true,
					"score": 7
				},
				{
					"author": "comrade-jim",
					"content": "Coupling exceptions to a control structure, as in the try-catch-finally idiom, results in convoluted code. It also tends to encourage programmers to label too many ordinary errors, such as failing to open a file, as *exceptional*. For plain error handling, Go\u0027s multi-value returns make it easy to report an error without overloading the return value. A canonical error type, coupled with Go\u0027s other features, makes error handling actually pleasant.\n\nGo also has a couple of built-in functions to signal and recover from truly exceptional conditions. The recovery mechanism is executed only as part of a function\u0027s state being torn down after an error, which is sufficient to handle catastrophe but requires no extra control structures and, when used well, can result in cleaner error-handling code than what you see in languages like Java, where massive try-catch blocks are not only common, but the norm.\n\n",
					"date": "2017-08-06",
					"id": "dl8m7xp",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "winger_sendon",
					"content": "`such as failing to open a file, as exceptional`  \n\nexception !\u003d panic. exceptions \u003d error in go sense, in java and C#",
					"date": "2017-08-07",
					"id": "dlan0fo",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "albgr03",
					"content": "Really? Copy+pasting the Go FAQ without sourcing it?\n\nWell, as I said, I understand, but still disagree. I really prefer a large try/catch block that handle everything over `if err !\u003d nil { return err }` for every function call. It’s not really more convoluted. And it’s as opinionated as [the original text](https://golang.org/doc/faq#exceptions).\n\n\u0026gt; **We believe that** coupling exceptions to a control structure, […]",
					"date": "2017-08-06",
					"id": "dl8mkhy",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "campbellm",
					"content": "He\u0027s comrade jim. They have little concept of ownership.",
					"date": "2017-08-06",
					"id": "dl8mvy6",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "gxti",
					"content": "I wish there were a syntactic sugar to deal with long lists of call this, if err then return. But I agree with the authors that exceptions don\u0027t belong.",
					"date": "2017-08-06",
					"id": "dl8o4nm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "circuitously",
					"content": "\u0026gt; Generics, list comprehension and try/catch would improve the language though.\n\nYou say that almost as if it\u0027s a statement of fact, as opposed to just your opinion.",
					"date": "2017-08-06",
					"id": "dl8h3jg",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "albgr03",
					"content": "\u0026gt;Generics\n\n * improved type safety\n * reusable data structures\n\n\u0026gt; list comprehension\n\n * less boilerplate code\n\n\u0026gt;try/catch\n\n * enforce error handling\n * no more `if err !\u003d nil { return err }` everywhere\n\nThose are facts, not opinions.",
					"date": "2017-08-06",
					"id": "dl8has0",
					"isArchived": true,
					"isControversial": true,
					"score": 15
				},
				{
					"author": "fungussa",
					"content": "\u0026gt; try/catch\n\n\u0026gt; enforce error handling\n\nHow is exception handling \u0027enforced\u0027?",
					"date": "2017-08-06",
					"id": "dl8i9gq",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "albgr03",
					"content": "With exceptions, the program crashes if I do not catch them. Nothing happens with return values.",
					"date": "2017-08-06",
					"id": "dl8icue",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "fungussa",
					"content": "That isn\u0027t enforcing anything. Enforcement is:\n\n\u0026gt; the act of compelling observance of or compliance with a law, rule, or obligation.\n\nException handlers are optional. Enforcement would\u0027ve required the compiler to statically determine whether all throws have corresponding catches.\n\nAnd we all know what that means in other languages. ",
					"date": "2017-08-06",
					"id": "dl8il6b",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "albgr03",
					"content": "Yes, sorry, I’m not native, and sometimes it’s difficult to say what I want in english. ",
					"date": "2017-08-06",
					"id": "dl8is8q",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "fungussa",
					"content": "I hadn\u0027t realised.",
					"date": "2017-08-06",
					"id": "dl8iu25",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "albgr03",
					"content": "No problem :)",
					"date": "2017-08-06",
					"id": "dl8iv1l",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "NyaNc00",
					"content": "I don\u0027t care about the first 2 features. I like how go is now.\nBut i pray that try/catch stays out of go. Why ?\nWell you don\u0027t enforce error handling more than now. If i dont want to handle it ill just do an empty catch block and thats it. You have a lot more freedom now with errors. Bc sometimes you just dont need to handle errors so you drop em and thats that handeled. Or i specifically want to hand my errors to my caller to work with it there.\n\nAnd btw how are try catch blocks nicer than if err !\u003d nil ? i have my errorhandling right where i want it. Exactly after my function call. and i wont start packing every call in a try catch block.\nSo pls no try catch",
					"date": "2017-08-06",
					"id": "dl8j1yc",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "albgr03",
					"content": "\u0026gt;And btw how are try catch blocks nicer than if err !\u003d nil ? i have my errorhandling right where i want it. Exactly after my function call. and i wont start packing every call in a try catch block. So pls no try catch\n\nBecause only one try/catch block can handle errors of a whole functionnal block. So instead of wrapping each call in a try/catch block, like you’re suggesting, you can do it for the entire function. And that’s cleaner than adding an `if err !\u003d nil { return err }` for each call.",
					"date": "2017-08-06",
					"id": "dl8j5lt",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Growlizing",
					"content": "Yeah, try-catch blocks are awful, and it lures people into weird error handling techniques, and is effectively a goto-statement. And we all agreed that gotos were a bad idea. Errors as values are actually useful, and with generics we could have established monadic patterns for error handling as values...",
					"date": "2017-08-06",
					"id": "dl8kcxw",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-06",
					"id": "dl8npve",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Freakezoid",
					"content": "Try/catch do not enforce error handling.... So not a fact. And what does make a try/catch block better as if err !\u003d Nil? You just talk like you are the grandmaster of language design but you just are a prisionner in your little known universe.",
					"date": "2017-08-06",
					"id": "dl8le5t",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "albgr03",
					"content": "[Instead of insulting me you can read what other said on that point](https://www.reddit.com/r/golang/comments/6rxfjo/go_2_please_dont_make_it_happen/dl8i9gq/).\n\n\u0026gt;And what does make a try/catch block better as if err !\u003d Nil?\n\n[Once again, I already answered.](https://www.reddit.com/r/golang/comments/6rxfjo/go_2_please_dont_make_it_happen/dl8j1yc/)",
					"date": "2017-08-06",
					"id": "dl8lgsk",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Freakezoid",
					"content": "https://davidnix.io/post/error-handling-in-go/ really good article about that try/catch disaster",
					"date": "2017-08-06",
					"id": "dl8llmg",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "albgr03",
					"content": "It’s an article advocating Go’s error handling, not an article criticizing exceptions. Really, except control flow, which is better than this article let you think, there is nothing against them.",
					"date": "2017-08-06",
					"id": "dl8lz4p",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "illogical_commentary",
					"content": "Reusable, readable and maintainable code isn\u0027t an opinion.",
					"date": "2017-08-06",
					"id": "dl8h4ym",
					"isArchived": true,
					"isControversial": true,
					"score": -5
				},
				{
					"author": "gbitten",
					"content": "Why are the code in Go 1 the most readable that I can find?",
					"date": "2017-08-06",
					"id": "dl8hhs2",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "albgr03",
					"content": "Because it’s your opinion.",
					"date": "2017-08-06",
					"id": "dl8hkoj",
					"isArchived": true,
					"isControversial": true,
					"score": 10
				},
				{
					"author": "gbitten",
					"content": "More than that, it is my personal experience, that why I appreciate to work Go.",
					"date": "2017-08-06",
					"id": "dl8hm2e",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "albgr03",
					"content": "And in my personnal experience, Python code is the more readable. It really does not mean anything at all.",
					"date": "2017-08-06",
					"id": "dl8i57q",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "kaeshiwaza",
					"content": "Python look readable and can be readable. But it can also be full of traps. You can make your own dictionary, everybody will think it\u0027s a dictionary but it will not behave like the standard dict...\n\nThe more I master Python the more I use magic features, it\u0027s fine for me, I build my own language. But it\u0027s not more readable for somebody else. And sometimes \"somebody else\" is me some years after ! So now I appreciate Go to prevent me to build something that I will not understand myself few years later.\n\nGo is explicit like wanted to become Python...",
					"date": "2017-08-06",
					"id": "dl8kddc",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "albgr03",
					"content": "That’s why I said it’s opinionated.",
					"date": "2017-08-06",
					"id": "dl8ljwn",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "comrade-jim",
					"content": "I think Go is objectively more readable than most other popular languages used in enterprise. ",
					"date": "2017-08-06",
					"id": "dl8icz5",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "albgr03",
					"content": "\u0026gt; I think Go is objectively\n\nHum…\n\n\u0026gt;than most other popular languages used in enterprise. \n\nPerhaps, but it does not invalidate my point.",
					"date": "2017-08-06",
					"id": "dl8iexc",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "programming_acct",
					"content": "Yeah, the groupthink is strong in the golang community.",
					"date": "2017-08-06",
					"id": "dl8jzcw",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "kaeshiwaza",
					"content": "It\u0027s not an opinion, it was designed for that.",
					"date": "2017-08-06",
					"id": "dl8hyz6",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "albgr03",
					"content": "[citation needed]",
					"date": "2017-08-06",
					"id": "dl8ibhc",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "circuitously",
					"content": "Sure, but there are differing opinions on what constitutes those things, and you have you balance out adding in additional language features with any potential downsides.",
					"date": "2017-08-06",
					"id": "dl8hcru",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "andradei",
					"content": "This picture is pretty funny, but in seriousness it assumes a future version where the designers will turn the language into _not_ Go to the point we can\u0027t recognize anymore (or enjoy it like we enjoy Go 1.x). I don\u0027t think that that will be the case.\n\nI look forward to Go 2.",
					"date": "2017-08-07",
					"id": "dlanpnd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ddooo",
					"content": "go should be simple, that\u0027s why i love go. if go 2 become like that picture why not i just use js?",
					"date": "2017-08-06",
					"id": "dl8mfhl",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "Perelandric",
					"content": "Adding a feature or two, while making the language a bit larger, can make it simpler because it becomes easier to express your code.\n\nTry speaking using only a monosyllabic vocabulary. You would be using a smaller, simpler language, yet it would be much more difficult to communicate your thoughts.",
					"date": "2017-08-06",
					"id": "dl8n9ej",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-06",
					"id": "dl8w1b1",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Perelandric",
					"content": "LOL, Kevlang! All vars are 8 chars or fewer!",
					"date": "2017-08-06",
					"id": "dl8xfsi",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Irythros",
					"content": "Go supports multi-CPU/Core/Thread out of the box.  Node requires multiple instances.  \n\nGo compiles to a single binary.  Node does not.  \n\nGo has easy concurrency.  Node does not.  \n\nGo is a great general purpose language.  Node is not.  ",
					"date": "2017-08-06",
					"id": "dl8uckk",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "iends",
					"content": "For what it\u0027s worth, node has even easier concurrency than Go.",
					"date": "2017-08-06",
					"id": "dl96z5j",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "robe_and_wizard_hat",
					"content": "i guess if you don\u0027t mind framing your flow control around callbacks. I personally do, and prefer to think about things from a \"thread\" perspective which go does well.  ",
					"date": "2017-08-06",
					"id": "dl99qmg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "albgr03",
					"content": "Go has a pretty good standard library. Node does not.",
					"date": "2017-08-06",
					"id": "dl97qh5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dotaheor",
					"content": "This is Go 1.x: http://i.imgur.com/ilBsLgo.png",
					"date": "2017-08-07",
					"id": "dl9xq71",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				}
			]
		},
		{
			"author": "emdeka87",
			"date": "2017-05-28",
			"id": "6dwm8t",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "The struggles of a C programmer switching to Go",
			"comments": [
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-05-29",
					"id": "di6hh69",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "koffiezet",
					"content": "True, when I still coded in C, the build system was in many cases actually the biggest headache. This was for embedded stuff and 10 to 15 years ago, but these days I\u0027m mostly in an ops role in a software company where they mainly use C++ - and the build system is still a large part of the complexity. In Go you just type \"go build\" and be done with it.\n\nThe \"coding\" gotcha\u0027s is something you master. Yes you can still make mistakes, but when you do things cleanly, you shouldn\u0027t violate the basic things. The biggest disadvantage there is all the boiler-plate code and limited stdlib. This is a lot better in C++, where you have stuff like Boost, but is still nowhere near Go\u0027s level of convenience.",
					"date": "2017-05-29",
					"id": "di6vl1h",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "brokedown",
					"content": "I don\u0027t know about the least, but depending on where a c programmer is in their ability it could be pretty far from being a primary concern. The gotchas surrounding malloc/free, buffer overruns, deprecated unsafe functions that may still compile, pointer arithmetic, type casting, and portability things like endianness and type sizes are all things you should already understand before threads.\n\nOr, you can bypass all of those things and learn go.",
					"date": "2017-05-29",
					"id": "di6qomb",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "_ak",
					"content": "I\u0027m not so sure about that. When I was still programming with C++ (okay, it\u0027s not C), my greatest worries were some inexplicable crashes that I eventually traced to SSL libraries (in particular OpenSSL and GnuTLS) requiring special initialization when using libcurl and pthreads. Essentially impossible to debug, only found by pure chance, and an error class that I absolutely don\u0027t have to worry about anymore with Go.",
					"date": "2017-05-29",
					"id": "di6snhx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "vph",
					"content": "\"Segmentation fault: core dump\" is one of the most scary things to me.",
					"date": "2017-05-29",
					"id": "di6nakc",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "sirspate",
					"content": "Ditto. If it\u0027s coming from gdb.",
					"date": "2017-05-29",
					"id": "di6r8l8",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bruce3434",
					"content": "You should have a look at Chapel too, it\u0027s even easier to do parallelism.* \nhttp://faculty.knox.edu/dbunde/teaching/chapel/#Forall\n\n\n    cobegin {\n    writeln(\"I\u0027m one thread\");\n    writeln(\"I\u0027m another thread\");\n    writeln(\"I\u0027m yet another thread\");\n    }\n    begin writeln(\"I am less important and can wait\"); \n    //..\n    sync {\n    begin writeln(\"I\u0027m one thread\");\n    begin writeln(\"I\u0027m another thread\");\n    begin writeln(\"I\u0027m yet another thread\");\n    }\n    begin writeln(\"I am less important and can wait\");\n",
					"date": "2017-05-29",
					"id": "di65nhg",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Cidan",
					"content": "That is parallelism, not concurrency.",
					"date": "2017-05-29",
					"id": "di665g2",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "bruce3434",
					"content": "My bad",
					"date": "2017-05-29",
					"id": "di668pg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "onwuka",
					"content": "It is when they need to coordinate or yield to one  another that things get interesting. ",
					"date": "2017-05-29",
					"id": "di6fw9s",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Shadowengineer",
					"content": "Check this video out of Rob Pike explaining the difference between concurrency and parallelism. https://www.youtube.com/watch?v\u003dcN_DpYBzKso",
					"date": "2017-05-29",
					"id": "di6u6pl",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "To be perfectly honest, if you are a C programmer/company and can port your work to Golang but haven\u0027t been able to port it to C++, Scala, Java, D, C# or a fuck-ton multitude of other languages which offer easier\u0026amp;safer abstractions for paralelism and concurrency out of the box you\u0027ve been doing something very very very wrong for the last dozen of years...\n\nAlso, there are actually libraries for coroutines, even-driven parallelism and easy multi-threading that are C compatible.\n\nAnd to be perfectly honest I don\u0027t see the anger that\u0027s directed at just using plain posix thread with a minimal abstraction over them. Sometimes you do indeed get into weird situations where you are managing a shared state and a shit-load of semaphores in order to transmit messages and in that case corutines can be very helpful, but I think in 90% of the cases you encounter in \"real life\" join and detach are more than enough for the job.",
					"date": "2017-05-29",
					"id": "di6yml3",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "nevyn",
					"content": "Some people think C++ is better/easier than C, they are wrong.\n\nAs for the others, there are reasons that people are porting C/C++ to Rust/golang but didn\u0027t port to Java or other languages and it\u0027s not because they were \"very very very wrong\".",
					"date": "2017-05-29",
					"id": "di715oj",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "forfunc",
					"content": "I think rust is in a different league than Go is. Both are ofcourse new kids on the block with their advantages but Rust feels more like a C++ replacer.",
					"date": "2017-05-29",
					"id": "di72v41",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "roxven",
					"content": "I think Rust will replace C++ in most contexts where using C++ was a good idea. I don\u0027t think most C++ in the wild is like that; I think a lot of huge corporations adopted it and their high turnover workforce of primarily inexperienced/new-grad engineers building binaries with dependency trees a hundred targets deep is precisely what Go was designed to address.",
					"date": "2017-05-30",
					"id": "di7med4",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "I would say that if you\u0027r problem with C is that it doesn\u0027t offer enough abstractions porting to C++ will give you most of those abstractions (e.g. corutines) while not compromising on speed.\n\nIf you\u0027re system did not require speed to being with, it should have been ported to languages like Scala or Rust or Haskell or even Java if you needed Safety and ease of integrating new parts via interfaces or to language like Ruby, Python, Javascript... etc if you needed speed in development and a wide pool of developers that are easy to train to work on it.\n\nThe only reason that a C programmer might migrate to Golang instead of something else its because its familiar on the surface... or, again, because he waited way to long to port his work, because honestly Golang wasn\u0027t a viable alternative until maybe 5-6 years ago.\n\n...Also, C++ is way easier than C, I should argue that with the addition atomic shared pointers C++ can be as easy as Java or Python or any other language which relies on atomic pointer swapping and garbage collection to make the mental model of the program simpler.",
					"date": "2017-05-29",
					"id": "di73xjw",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "[deleted]",
					"content": "\u0026gt; And to be perfectly honest I don\u0027t see the anger that\u0027s directed at just using plain posix thread with a minimal abstraction over them.\n\nBecause programs which use threads are usually full of race conditions and crash all the time. (or worse, and more likely, crash just often enough to be a problem, but not often enough to be easily reproducible)\n\nIt\u0027s the same reason why pointer arithmetic, although quite simple in theory, leads to so many problems in practice. It\u0027s really easy to screw up when writing code.\n\nGo\u0027s concurrency model is like training wheels for writing multi-threaded programs. The fact that it is also faster sometimes shows how powerful the abstraction is, but, in my opinion, the biggest win is in producing simpler and more reliable code.",
					"date": "2017-05-29",
					"id": "di76hbs",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "[deleted]",
					"content": "\"or worse, and more likely, crash just often enough to be a problem, but not often enough to be easily reproducible\"\n\nCould you please give me a common example or where this would happen as a result of anything but oblivious code ? \n\nIf you really want to make a mutli-threaded program crash its easy to do so, if you are actively trying (e.g. having a mutable shared state that doesn\u0027t have a mutex which controls access to it... which is still very much possible to do in go, it doesn\u0027t stop you from being a moron if you want to be moron).\n\nDisregarding oblivious code, programs which do multi-threading using posix threads will probably crash during testing or even better, they might not even compile or generate compiler warnings.",
					"date": "2017-05-30",
					"id": "di7zdp1",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "[deleted]",
					"content": "\u0026gt; Disregarding oblivious code, programs which do multi-threading using posix threads will probably crash during testing or even better, they might not even compile or generate compiler warnings.\n\nYou have to be diligent with mutexes and other constructs. Their behavior is subtle, easy to get wrong and hard to spot when you do.\n\nIf you mutate state from multiple threads it sets up a race condition. Sometimes that mutation happens rarely - maybe you\u0027re only updating a cache occasionally - and when its rare, it means the chances of the two threads happening simultaneously is small.\n\nUnfortunately once you run it in production, the chance is still low, but the opportunity is much higher, because the code gets hit a whole lot more often. Data races end up in bizarre and unpredictable behavior, and it get take a very long time to get to the bottom of what\u0027s happening.\n\nOther common problems: deadlocks due to failing to release a lock, thread starvation, this pattern:\n\n    if this.x \u003d\u003d null {\n        lock (this) {\n            this.x \u003d something expensive\n        }\n    }\n    return this.x\n\n(https://en.wikipedia.org/wiki/Double-checked_locking)\n\nProblems related to multithreading are some of the most common bugs when working on software written for servers. I\u0027m surprised you haven\u0027t run into them.\n\n\u0026gt; it doesn\u0027t stop you from being a moron if you want to be moron\n\nJust speaking from experience: I make mistakes when I write code. Like with pointer arithmetic, it\u0027s really easy to shoot yourself in the foot with multithreaded code, so I\u0027m extra cautious with it. You\u0027re correct that Go doesn\u0027t prevent you from making the same mistakes, but if you stick to channels and avoid sharing state, you can be much more confident that your code is correct. Its just a whole lot easier to reason about.",
					"date": "2017-05-30",
					"id": "di836os",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "alialtun14",
			"date": "2017-06-24",
			"id": "6ja8mn",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Rewrite from Java to Go had made things 10X slower",
			"comments": [
				{
					"author": "TheBallPeenHammerer",
					"content": "Oh my God people it\u0027s called a \"joke.\" The title is not the entire tweet because jokes have setups, and then punchlines. Much like Go has setups, and then terminating compiler warnings.",
					"date": "2017-06-24",
					"id": "djcsmh1",
					"isArchived": true,
					"isControversial": false,
					"score": 120
				},
				{
					"author": "deedubaya",
					"content": "First rule of golang club is don\u0027t joke about golang club",
					"date": "2017-06-24",
					"id": "djcudb4",
					"isArchived": true,
					"isControversial": false,
					"score": 39
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "But ns is nanoseconds, not microseconds...",
					"date": "2017-06-25",
					"id": "djd3teq",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "dmikalova",
					"content": "Those are two different tweets talking about micro and nano respectively.",
					"date": "2017-06-25",
					"id": "djduz7v",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "True, my point was a not very obvious joke implying that Go may be an additional 1000x faster.",
					"date": "2017-06-25",
					"id": "djdxg8k",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "alialtun14",
					"content": "Resource: \n\nhttps://twitter.com/rob_pike/status/878412416127606784",
					"date": "2017-06-24",
					"id": "djcpsrc",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "1s44c",
					"content": "What project got 100 times faster? And was the speedup the result of design changes or was nothing but the language changed?",
					"date": "2017-06-24",
					"id": "djctziy",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "_foobaz",
					"content": "I think the joke could be rephrased, \"here\u0027s the 10 year old corpse of a horse named Java Is Slow and I\u0027m beating it with a stick named Golang.\"",
					"date": "2017-06-24",
					"id": "djcuwfy",
					"isArchived": true,
					"isControversial": false,
					"score": 74
				},
				{
					"author": "tech_tuna",
					"content": "I\u0027ve been using Java 1.8 a lot lately. . . I\u0027m not going to lie, I don\u0027t *love* it, but it\u0027s a big improvement over earlier versions.  And Java is pretty damn fast these days.\n\nI\u0027ve been tinkering with Kotlin a bit.  I find its syntax a bit more pleasant than Go\u0027s although I like both languages a lot.",
					"date": "2017-06-25",
					"id": "djczydg",
					"isArchived": true,
					"isControversial": false,
					"score": 30
				},
				{
					"author": "winger_sendon",
					"content": "Except Kotlin has generics and a muuch better type system than Go",
					"date": "2017-06-25",
					"id": "djd2t7p",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "hooluupog",
					"content": "How does kotlin implement reified generics on JVM?",
					"date": "2017-06-25",
					"id": "djd60da",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "mbStavola",
					"content": "With inlined functions... but you obviously won\u0027t be able to use either when using Java interop.",
					"date": "2017-06-25",
					"id": "djd9pu9",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "comrade-jim",
					"content": "it also has a god awful syntax. ",
					"date": "2017-06-25",
					"id": "djdmp8b",
					"isArchived": true,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "winger_sendon",
					"content": "How so? ",
					"date": "2017-06-25",
					"id": "djdngk5",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "pooogles",
					"content": "\u0026gt; And Java is pretty damn fast these days\n\nIt\u0027s been fast since 1.2.",
					"date": "2017-06-25",
					"id": "djdhnwy",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Zatherz",
					"content": "No, it hasn\u0027t",
					"date": "2017-06-25",
					"id": "djdzerb",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "pooogles",
					"content": "\u0026gt;No, it hasn\u0027t\n\nI guess the real question is, what do we define as fast?\n\nFast to write?  Fast when it runs?  A combination of both?\n\nI\u0027m no fanboy but Java and the JVM have a pretty good mixture, so IMO it\u0027s definitely a fast language.",
					"date": "2017-06-25",
					"id": "dje5tom",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tetroxid",
					"content": "Same here. I gave go a try, I mean it\u0027s not bad, but compared to the mind-boggingly *vast* Java ecosystem it\u0027s not even a blip on the radar.\n\nI\u0027d use Go for command line utilities if Python didn\u0027t exist or was too slow for the use case.",
					"date": "2017-06-25",
					"id": "djdco44",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "shovelpost",
					"content": "\u0026gt; but compared to the mind-boggingly vast Java ecosystem it\u0027s not even a blip on the radar.\n\nThat\u0027s the whole point of Go.",
					"date": "2017-06-25",
					"id": "djdd9pw",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dlsniper",
					"content": "To offer a small ecosystem where you can\u0027t find what you need not it covers everything as Java does? Then why do we compare them so much?",
					"date": "2017-06-25",
					"id": "djdky8k",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "tech_tuna",
					"content": "I agree with you and I\u0027m not just talking about large libraries that exist outside of the standard library (e.g. the Apache stuff), I\u0027m talking about the greater Java community which as tetroxid stated, is vast compared to Go.\n\nNow, that isn\u0027t to say that Go\u0027s community won\u0027t someday be that big, although I suspect that it won\u0027t.  But to imply that not having such a large ecosystem is *desired* is crazy.\n\nThe Java ecosystem may be full of garbage and awful verbose enterprise bloatware but there are lots of great libraries out there too. . . for example the CodeHale metrics library is insanely good.\n\nAlso, while I love that Go compiles to native code, I also love what I get from the JVM. . . access to ALL of the Java ecosystem and the ability to use many different languages like Kotlin, Groovy, Scala, Clojure, etc.\n\nI actually wish the default implementations of Python, Ruby, PHP, Perl and other scripting languages were the JVM versions.  \n\nIt would be wonderful to be able to just put the JVM on a host and know that you can use the latest and greatest Ruby with Java and Kotlin, etc.  However, lots of developers who use other languages hate the JVM and everything it stands for i.e. we\u0027ll never see Jython become as popular as CPython. ",
					"date": "2017-06-25",
					"id": "djdoiff",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "pooogles",
					"content": "\u0026gt;for example the CodeHale metrics library is insanely good.\n\n\u0026gt; Also, while I love that Go compiles to native code, I also love what I get from the JVM. . . access to ALL of the Java ecosystem and the option of using a ton of different languages like Kotlin, Groovy, Scala, **Clojure**, etc.\n\nIronically one of my favorite Clojure libraries is just a wrapper around the CodaHale metrics lib.",
					"date": "2017-06-25",
					"id": "dje5wlt",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "\u0026gt; To offer a small ecosystem where you can\u0027t find what you need not it covers everything as Java does? Then why do we compare them so much?\n\nGo has managed to create a community around a certain school of programming. One that favors few dependencies and programs that are easier to maintain and simpler. It is this philosophy that makes me and most gophers prefer the Go ecosystem despite it being younger.",
					"date": "2017-06-25",
					"id": "dje09y4",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "winger_sendon",
					"content": "Few dependencies - yeah because you keep reinventing the wheel because lol no generics.",
					"date": "2017-06-26",
					"id": "djeu4se",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "shovelpost",
					"content": "It is usually [done consciously](https://www.youtube.com/watch?v\u003dPAAkCSZUG1c\u0026amp;t\u003d9m28s).",
					"date": "2017-06-26",
					"id": "djeu7th",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "video_descriptionbot",
					"content": "SECTION | CONTENT\n:--|:--\nTitle | Go Proverbs - Rob Pike - Gopherfest - November 18, 2015\nDescription | See the full list of proverbs here: http://go-proverbs.github.io/\nLength | 0:22:29\n\n \n\n \n \n \n****\n \n^(I am a bot, this is an auto-generated reply | )^[Info](https://www.reddit.com/u/video_descriptionbot) ^| ^[Feedback](https://www.reddit.com/message/compose/?to\u003dvideo_descriptionbot\u0026amp;subject\u003dFeedback) ^| ^(Reply STOP to opt out permanently)",
					"date": "2017-06-26",
					"id": "djeu7v0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "skadooshpanda",
					"content": "For most parts, you don\u0027t really need the ecosystem. Typically with Go you can whip up a solution faster than search and test for the best Java library... Most of the Java libraries are kind of shoddy, not because of the language but because it has (too) low barriers of entry.",
					"date": "2017-06-25",
					"id": "djdeaco",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "tetroxid",
					"content": "With Java I\u0027d use Spring and/or the Apache libraries. I\u0027ve never had the need to use anything else of questionable source. \n\nAnd honestly; I think go has a lower barrier of entry than Java. If you come across a genericified DefaultAbstractFactoryServiceSingletonImplementation class without familiarity of the concepts behind it you\u0027d get lost. Go thankfully isn\u0027t an OOP circlejerk like Java and doesn\u0027t do shit like this.",
					"date": "2017-06-25",
					"id": "djdew9n",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "tech_tuna",
					"content": "FWIW, one of the properties of Java I despise the most is that EVERYTHING must be in a class.  When you use Go (yes types not classes) or Python, you feel how well it works to be able to define standalone functions.  \n\n",
					"date": "2017-06-25",
					"id": "djdmyx9",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "ExBigBoss",
					"content": "Actually, classes are types.",
					"date": "2017-06-25",
					"id": "djdvu2i",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "ryeguy",
					"content": "\u0026gt; Most of the Java libraries are kind of shoddy, not because of the language but because it has (too) low barriers of entry.\n\nThis makes no sense in this discussion. Isn\u0027t the lower-than-average barrier of entry one of the benefits of Go that is parroted around? ",
					"date": "2017-06-25",
					"id": "dje5bxj",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dlsniper",
					"content": "Whereas with Go you don\u0027t yet have that problem because silly people like me still insist on best practices and detract people as much as they can from reinventing the wheel. Yet we have 12+ vendoring projects, 12+ routers / muxers / frameworks (each awful in their own way) and the list goes on... ",
					"date": "2017-06-25",
					"id": "djdl0n5",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "shovelpost",
					"content": "\u0026gt; because silly people like me still insist on best practices\n\nWhere\u0027s the best practices?",
					"date": "2017-06-25",
					"id": "djdlmzn",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "metamatic",
					"content": "It just goes to show, you can make anything fast if you throw enough RAM at it.",
					"date": "2017-06-28",
					"id": "djip5jq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "__crackers__",
					"content": "Their `time-till-lunch` command?",
					"date": "2017-06-24",
					"id": "djcx9ca",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "1s44c",
					"content": "I did actually write one of those years ago when I was in a helpdesk/operations role. It was a time until hometime, not lunch, though. In a really unpleasant job it improved my quality of life.\n\nI also wrote something to calculate how much they paid me to take coffee and toilet breaks. It\u0027s strangely motivating to know some idiot who hates you just paid you $cents to take a dump. Sadly $cents was a very small number.\n",
					"date": "2017-06-24",
					"id": "djcxhzg",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "timetravelhunter",
					"content": "The commodity is your time. Even though you are not working at work you are still not able to do what you want.",
					"date": "2017-06-25",
					"id": "djdnx0i",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dlsniper",
					"content": "Yes, time till launch is so critical when you launch a web server that should run for hours/days/weeks or an app that you start a couple of times a day (that being said, if it\u0027s more than a few minutes, then yes, probably it needs some checking) ",
					"date": "2017-06-25",
					"id": "djdl3aa",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dtfinch",
					"content": "Joke titles like this give a bad impression to people who don\u0027t click to read the punchline.",
					"date": "2017-06-25",
					"id": "dje0gzg",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "sh41",
					"content": "I\u0027m a little sad to see how well a clickbait-y title works at generating upvotes and attention. :(",
					"date": "2017-06-25",
					"id": "djdz4s5",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "Fake news",
					"date": "2017-06-24",
					"id": "djcq87f",
					"isArchived": true,
					"isControversial": true,
					"score": -16
				},
				{
					"author": "n1ghtm4n",
					"content": "Are you joking or is the story really a fable?",
					"date": "2017-06-24",
					"id": "djcr07v",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "dlsniper",
					"content": "\u0026gt; Are you joking\n\nThe thread title is: \"Rewrite from Java to Go had made things 10X slower\" whereas the tweet continues: \"until they noticed the graph was in micros not millis\".\n\nIf that ain\u0027t clickbait I don\u0027t know what it is.",
					"date": "2017-06-24",
					"id": "djcr66f",
					"isArchived": true,
					"isControversial": true,
					"score": -12
				},
				{
					"author": "devsquid",
					"content": "Humor man... It\u0027s called humor...",
					"date": "2017-06-24",
					"id": "djctqbh",
					"isArchived": true,
					"isControversial": false,
					"score": 41
				},
				{
					"author": "eattherichnow",
					"content": "I thought that theory died back in 19th century?",
					"date": "2017-06-24",
					"id": "djcu3d5",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "LimEJET",
					"content": "It\u0027s not clickbait. Clickbait would have been following it up with \"You won\u0027t believe the reason why!\"",
					"date": "2017-06-24",
					"id": "djcv8sy",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "classhero",
					"content": "What is fake news?",
					"date": "2017-06-24",
					"id": "djcxebl",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jediorange",
					"content": "Poorly worded post. The tweet actually states the opposite.",
					"date": "2017-06-24",
					"id": "djcr5u7",
					"isArchived": true,
					"isControversial": false,
					"score": -34
				},
				{
					"author": "Sythe2o0",
					"content": "I think it\u0027s an intentional bait-and-switch",
					"date": "2017-06-24",
					"id": "djcriwk",
					"isArchived": true,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "AskMeIfImAReptiloid",
					"content": "The post is word as to not take away the punchline...",
					"date": "2017-06-24",
					"id": "djcsa3s",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				}
			]
		},
		{
			"author": "[deleted]",
			"date": "2017-08-18",
			"id": "6uihnj",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Self-aware robot",
			"comments": [
				{
					"author": "daellin",
					"content": "I highly enjoyed the gopher face addition.",
					"date": "2017-08-18",
					"id": "dltidn5",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "GoTheFuckToBed",
					"content": "I love memes",
					"date": "2017-08-18",
					"id": "dlt09a3",
					"isArchived": true,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-18",
					"id": "dlszhb7",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "geigenmusikant",
					"content": "There\u0027s a Go Font? 😅",
					"date": "2017-08-18",
					"id": "dlt48bg",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "VanPepe",
					"content": "https://blog.golang.org/go-fonts",
					"date": "2017-08-18",
					"id": "dlt5ims",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-18",
					"id": "dltcbwp",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "scarhill",
					"content": "Scroll down on that page and you\u0027ll see that the proportional fonts are sans serif. ",
					"date": "2017-08-20",
					"id": "dlvwnon",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tcrypt",
					"content": "Sans-serif fonts are probably for children.",
					"date": "2017-08-18",
					"id": "dltmqj7",
					"isArchived": true,
					"isControversial": false,
					"score": -8
				},
				{
					"author": "ruralcoypu",
					"content": "You, an uncultured rube: I like sans-serif fonts.\n\nMe, an intellectual: You impudent child.",
					"date": "2017-08-19",
					"id": "dltu6ju",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "MattieShoes",
					"content": "serif for printing, sans-serif for screen.  So unless you\u0027re still using a teletype...",
					"date": "2017-08-19",
					"id": "dlu3zsu",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TinyBirdperson",
					"content": "Yea, a font is what a language needs, not something as useless as generics. Better use code generation, yo",
					"date": "2017-08-18",
					"id": "dltcus9",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Ars-Nocendi",
					"content": "Fucking What?",
					"date": "2017-08-19",
					"id": "dlucnbn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "milkyway9",
					"content": "eli5 request, what is the problem with generics? [8]",
					"date": "2017-08-18",
					"id": "dltja8s",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "SupersonicSpitfire",
					"content": "People want Go to have it, but all proposed implementations are too ugly for the Go authors to accept.",
					"date": "2017-08-18",
					"id": "dltln8j",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-19",
					"id": "dlts3p6",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "[deleted]",
					"content": "if the authors found an implementation they liked, would you still be against it? I don\u0027t understand arguing against a simple generics feature.",
					"date": "2017-08-19",
					"id": "dlu2bhc",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "tetroxid",
					"content": "Generics are not simple.",
					"date": "2017-08-19",
					"id": "dlu3jvd",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "[deleted]",
					"content": "Well, I disagree.",
					"date": "2017-08-19",
					"id": "dlu3m2v",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "tetroxid",
					"content": "Simple to use, but complex to implement. I think Go should have generics, but if you think it\u0027s a quick and easy thing to implement you\u0027re mistaken.",
					"date": "2017-08-19",
					"id": "dlu4mjb",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "albgr03",
					"content": "A compiler is not meant to be simple.",
					"date": "2017-08-19",
					"id": "dlu4z0q",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "I didn\u0027t say simple to implement, I meant simple to use. Of course it\u0027s not easy to implement, compilers are extremely complicated.",
					"date": "2017-08-19",
					"id": "dluocpu",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tetroxid",
					"content": "Simple/complex\n\nvs\n\nEasy/difficult\n\nPlease think what the words mean before using them",
					"date": "2017-08-19",
					"id": "dluoo4u",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "You seem like an angry person. I hope your day goes well.",
					"date": "2017-08-19",
					"id": "dluoz12",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hein_bloed",
					"content": "I am currently writing a compiler for a language supporting generics. Its a pain in the ass",
					"date": "2017-08-19",
					"id": "dlu6yj4",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Valken32",
					"content": "Do you know of any languages with simple generics that would not be equivalent to a `go generate` template? Most of my experience with \u0027real generics\u0027 was in Scala which took the [unsound implementation from Java](http://io.livecode.ch/learn/namin/unsound) and added some [nightmarish variance rules](https://youtu.be/uiJycy6dFSQ?t\u003d22m3s).",
					"date": "2017-08-19",
					"id": "dlud3ub",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheShyro",
					"content": "Software systems aren\u0027t simple. We shouldn\u0027t be using simple tools to build complex systems",
					"date": "2017-08-19",
					"id": "dlu4gya",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "cavaliercoder",
					"content": "I totally disagree! I\u0027d argue that one of the driving principals behind Go is to keep the language as simple as possible, precisely so that complex systems are easier to build and more reliable. A similar theme is also driving the adoption of functional programming languages.",
					"date": "2017-08-19",
					"id": "dlu5sui",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "TheShyro",
					"content": "From a usability point of view I agree. The language should be simple to _use_ / write software in.\n\nWhat I meant by complex tools is the language internally, not syntax.\n\nGarbage collection and type systems for example are exceptionally complex systems to design and build, yet relatively easy / simple to use. So we are already past the point of no return in that regard.\n\nGenerics are in my opinion the same, complex to build but not to use (after an initial learning curve). When I see generics in any other language that looks simple to me. In go, writing the same code over and over because we can\u0027t use generics, is just really annoying - not simple.\n\nFor beginners I see the point, it took me a while before I really understood the whole concept.\nBut leaving out such a powerful feature shouldn\u0027t be based on some interns potentially having to ask questions about how some portion of code works.\n\nJust my $0.2",
					"date": "2017-08-19",
					"id": "dlu6l9h",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "cavaliercoder",
					"content": "Actually... that makes a lot of sense. Thanks for the reply. ",
					"date": "2017-08-19",
					"id": "dlu7f1g",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "sh41",
					"content": "Many of the people who want Go to have it don\u0027t even use Go.",
					"date": "2017-08-19",
					"id": "dltwxvh",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "albgr03",
					"content": "[citation needed]",
					"date": "2017-08-19",
					"id": "dlu4bi9",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "ivosaurus",
					"content": "I\u0027m one of those people! I started learning it, then learnt about ` for ... range`, then discovered I would never be able to put my own types through it, and I stopped soon after. I\u0027ve been lurking here, waiting, waiting in the dark, ever since.",
					"date": "2017-08-19",
					"id": "dlu7ofo",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "albgr03",
					"content": "I stopped using Go recently, [not only because of generics](https://www.reddit.com/r/programmingcirclejerk/comments/6uehog/do_we_really_need_syncmap/dlslbxj/). We’re two, it’s far from the “many” claimed. I know, we’re definitely more, but he pulled that fact out of nowhere.",
					"date": "2017-08-19",
					"id": "dlu82hg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ivosaurus",
					"content": "I see people come in and complain about go all the time on certain threads, and I\u0027m certain a decent proportion haven\u0027t really tried it before, you can basically tell from the shallowness of knowledge in the complaints.",
					"date": "2017-08-20",
					"id": "dlvmzkr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SupersonicSpitfire",
					"content": "You can have functions that receive functions and then loop over a custom type while applying the given function. This works well in practice. Look at the design of BoltDB.",
					"date": "2017-08-19",
					"id": "dlul9nc",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ivosaurus",
					"content": "Yes! You mean the extremely common general function found in many many languages, `map`! I love that one too. Which is another reason I stopped.",
					"date": "2017-08-20",
					"id": "dlv5o0t",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "DemandsBattletoads",
					"content": "I\u0027m... I\u0027m happy without genetics.",
					"date": "2017-08-19",
					"id": "dltvnaw",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				}
			]
		},
		{
			"author": "[deleted]",
			"date": "2017-08-24",
			"id": "6vuhkz",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.9 is released",
			"comments": [
				{
					"author": "Kraigius",
					"content": "[Release note](https://golang.org/doc/go1.9)",
					"date": "2017-08-24",
					"id": "dm359mh",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "taylorchu",
					"content": "https://golang.org/doc/go1.9#vendor-dotdotdot\n\nThis is a real life saver. `go test ./...`",
					"date": "2017-08-24",
					"id": "dm34e7p",
					"isArchived": true,
					"isControversial": false,
					"score": 52
				},
				{
					"author": "cheetahkk",
					"content": "bye bye `glide novendor`\n\n            ",
					"date": "2017-08-25",
					"id": "dm3nb1a",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "bmurphy1976",
					"content": "Compilation times are slightly better for my project:\n\nGo v1.8:\n\n    real\t0m6.542s\n    user\t0m12.727s\n    sys\t0m1.524s\n\nGo v1.9:\n\n    real\t0m5.502s\n    user\t0m11.103s\n    sys\t0m1.447s\n",
					"date": "2017-08-25",
					"id": "dm396ah",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "dilap",
					"content": "I tested an old version of a project of mine against Go 1.4 (the fastest Go compiler so far) and Go 1.9, and the results were 2.1s for 1.4 and 2.5s for 1.9 -- so 1.9 is within 20% of the speed of 1.4. Not bad!\n\n(That\u0027s for about 30K lines of Go, running on a old MacBook Air, dual-core 1.7 GHz i7.)",
					"date": "2017-08-25",
					"id": "dm3ak7p",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "christoph2k",
					"content": "Why are newer versions of the compiler so much slower than 1.4? Seems odd?",
					"date": "2017-08-25",
					"id": "dm3o8gv",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dlq84",
					"content": "If I recall correctly \u0026lt;\u003d1.4 compiler was written in C ~~or C++~~, and then was rewritten in Go for 1.5.\n\n[Go 1.5 release notes](https://tip.golang.org/doc/go1.5): \n\u0026gt; The compiler and runtime are now written entirely in Go (with a little assembler). C is no longer involved in the implementation, and so the C compiler that was once necessary for building the distribution is gone.",
					"date": "2017-08-25",
					"id": "dm3ogf7",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "CountyMcCounterson",
					"content": "If the compiler is written in Go and to use the compiler you need to compile it using itself then how does someone without the Go compiler compile the Go compiler?",
					"date": "2017-08-25",
					"id": "dm4cqq2",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "epiris",
					"content": "You are correct that you can not write a compiler in Go without having a Go compiler. The solution to this chicken and the egg problem your referring to is called **compiler bootstrapping** if you want some reading material.",
					"date": "2017-08-25",
					"id": "dm4gsut",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "self",
					"content": "If you don\u0027t already have a Go compiler on your system, you need to download [1.4.2 first](http://golang.org/s/go15bootstrap).\n",
					"date": "2017-08-25",
					"id": "dm4gzm3",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "harnash",
					"content": "How one compile gcc toolchain without c/c++ compiler ;-) A classic chicken-egg problem. I\u0027m not sure how go toolchain does it but here you have example using gcc: http://gcc.gnu.org/install/build.html",
					"date": "2017-08-25",
					"id": "dm4gnl1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "epiris",
					"content": "Well if the c compiler then existed today with the same sophistication in the toolchain then it would be much slower I imagine. The SSA backend and all the optimization passes didn\u0027t exist in 1.4.",
					"date": "2017-08-25",
					"id": "dm40j2n",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "martisch",
					"content": "I would not call 20% too much slower. Still a lot of work that can be done to improve this.\n\nThe compiler was translated from c to go. Cleanup of this mostly automatic translation from c\u0027ism to more idiomatic go has been done over many releases. Also newer compilers do more optimizations which involves more work. \n\nCompiling programs with different go versions can also be a moving target as they are also compiled with the newer runtime and std lib which can also contain more code to compile than before. Likely does not matter as much for large code bases.",
					"date": "2017-08-25",
					"id": "dm3ojwj",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "pubgftw",
					"content": "Life is good!",
					"date": "2017-08-24",
					"id": "dm34s07",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "TheNumb",
					"content": "Indeed.",
					"date": "2017-08-25",
					"id": "dm3jts9",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "vopi181",
					"content": "Why do some golang threads have everyone golded? Who keeps doing this lol \n\nEdit: oh god damn it lmao",
					"date": "2017-08-25",
					"id": "dm3l7xo",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "nekron",
					"content": "Have you never heard of goldlang ;-)?",
					"date": "2017-08-25",
					"id": "dm3mu0t",
					"isArchived": true,
					"isControversial": false,
					"score": 26
				},
				{
					"author": "[deleted]",
					"content": "It\u0027s party, we got best Go release by far*.  :tada: :tada:\n\n* every release is the best release.  \n\nI\u0027m wondering why I got forgotten tho. :/ xD\n\nEdit: Thanks for golds kind gopher redditor :D\n\n",
					"date": "2017-08-25",
					"id": "dm3n2xj",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "zer0t3ch",
					"content": "[For the guy who keeps gilding everyone; a golden gopher](https://i.imgur.com/wm1lyVQ.png)",
					"date": "2017-08-25",
					"id": "dm3tkkz",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "jaychok",
					"content": "[Here\u0027s a golden god](https://c1.staticflickr.com/9/8164/7593355284_029a33643e_b.jpg)",
					"date": "2017-08-25",
					"id": "dm3xqxg",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Hexodam",
					"content": "Someone who really misses writing releases to golden cd\u0027s",
					"date": "2017-08-25",
					"id": "dm3yp4o",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "earthboundkid",
					"content": "The popcount in math/bits should speed up my sudoku program. Thanks Go Team!",
					"date": "2017-08-25",
					"id": "dm38j4e",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "reven80",
					"content": "Interestingly they don\u0027t use the popcount opcode for x86 processors yet. Its all written in Go with table lookups.\n\n",
					"date": "2017-08-25",
					"id": "dm3do5o",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "martisch",
					"content": "Unless there is a bug in the compiler the popcount instruction should be emitted for amd64. math.Bits only contains the generic go versions of the implementation. The compiler can replace those on a per architecture basis. Since not all amd64 capable cpus support popcnt the dispatch of the popcnt instruction is guarded by a check for the capability.\n\nrelevant code for the compiler intrinsic:\nhttps://github.com/golang/go/blob/master/src/cmd/compile/internal/gc/ssa.go#L2879",
					"date": "2017-08-25",
					"id": "dm3gybm",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "reven80",
					"content": "Didn\u0027t realize they hard coded those library functions into the compiler!\n",
					"date": "2017-08-25",
					"id": "dm3jewb",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "SSoreil",
					"content": "I remember reading a few years back that popcode intrinsics weren\u0027t always faster than doing it in normal code.\nI also very vaguely remember there being some issue with popcount related feature flags on at least one generation of Intel CPUs that made it hard to determine whether or not there was popcount support.",
					"date": "2017-08-25",
					"id": "dm42m7s",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ar1819",
					"content": "Pprof labels looks interesting. ",
					"date": "2017-08-25",
					"id": "dm3cie5",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Ainar-G",
					"content": "[`testing.(*T).Helper()`](https://golang.org/pkg/testing/#T.Helper) is my favourite addition. Definitely gonna go through my tests and use it.\n\n**EDIT:** Thank you for the gold, kind fellow gopher!",
					"date": "2017-08-24",
					"id": "dm3317t",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "muesli",
					"content": "I actually dislike this solution a lot. I\u0027ve always been fond of Go taking a stance against those weird quirks that only apply in special situations. I would have already liked it a lot better if the caller would decide when to mark some function call as a helper, like:\n\n```\nfunc TestFoo(t *testing.T) {\n    ...\n    t.Helper(someHelperFunc(...))\n    ...\n}\n```\n\nThat being said, our Golang overlords probably had a good reason not to implement it like that.",
					"date": "2017-08-25",
					"id": "dm37evx",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "jammerlt",
					"content": "I wonder if it works with helpers more than one level deep.",
					"date": "2017-08-25",
					"id": "dm47mwc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "If you want to make it harder for you to debug issues, sure, go for it. As an example: https://play.golang.org/p/heF7hr9_24",
					"date": "2017-08-24",
					"id": "dm34csf",
					"isArchived": true,
					"isControversial": false,
					"score": -7
				},
				{
					"author": "Ainar-G",
					"content": "I don\u0027t understand what is the issue. Aside from non-descriptive message, but that has nothing to do with the new method.",
					"date": "2017-08-24",
					"id": "dm34uuh",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-25",
					"id": "dm37ix8",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "dlsniper",
					"content": "Sure, here is the issue with it, I was hoping that running the test would make it clear but by the amount of -1 I guess people don\u0027t understand that.\n\n\nWithout the helper method\n```\n--- FAIL: TestTrue (0.00s)\n        demo_test.go:9: failure\n--- FAIL: TestTrueTwo (0.00s)\n        demo_test.go:12: failure\nFAIL\nFAIL    command-line-arguments  0.395s\n```\n\nWith the helper method\n```\n--- FAIL: TestTrue (0.00s)\n        demo_test.go:21: failure\n--- FAIL: TestTrueTwo (0.00s)\n        demo_test.go:25: failure\nFAIL\nFAIL    command-line-arguments  0.395s\n```\n\nIt would be more useful to be:\n```\n--- FAIL: TestTrue (0.00s)\n        demo_test.go:9: failure\n        demo_test.go:21: failure\n--- FAIL: TestTrueTwo (0.00s)\n        demo_test.go:12: failure\n        demo_test.go:25: failure\nFAIL\nFAIL    command-line-arguments  0.395s\n```",
					"date": "2017-08-25",
					"id": "dm3mkxt",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "I sill don\u0027t understand why is this a problem. :P  \n\nIf you know what line failed, you know what function failed. Knowing what line failed is way more useful, at least for me, rather than function. The message you proposed could be better, but that doesn\u0027t me this thing is unusable. :D Still, maybe we can change/improve it in future versions.  \n\nI don\u0027t know how it works if you have a lot of functions callings, nested function, or how it is called. Can\u0027t provide example or test now tho.",
					"date": "2017-08-25",
					"id": "dm3n04t",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TotesMessenger",
					"content": "I\u0027m a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:\n\n- [/r/negativewithgold] [\"If you want to make it harder for you to debug issues, sure, go for it. As an example: https:\\/\\/play.golang.org\\/p\\/heF7hr9\\_24...\" \\[-10\\]](https://np.reddit.com/r/NegativeWithGold/comments/6w0c5v/if_you_want_to_make_it_harder_for_you_to_debug/)\n\n[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don\u0027t vote in the other threads.) ^\\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to\u003d/r/TotesMessenger))*\n\n[](#bot)",
					"date": "2017-08-25",
					"id": "dm4cj5h",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Kraigius",
					"content": "I\u0027m not sure I understand the point of the Helper function. Can someone explain it to me?",
					"date": "2017-08-24",
					"id": "dm357xc",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "tv64738",
					"content": "Let\u0027s say you have a package that implements some sort of a data structure, and you write a `func checkFoo(t testing.TB, f *Foo) { if f.level \u0026gt; 9000 { t.Fatalf(\"level must always be \u0026lt;\u003d9000: %v\", f.level) }}` that makes sure its invariants still hold. Imagine you have dozens or hundreds of those calls in your unit tests. If you now make it call `t.Helper()`, the resulting error won\u0027t claim that it happened in `checkFoo`, it\u0027ll claim the error happened in the actual test, at the correct line. `t.Helper` makes it easier to find the spot where to start debugging.",
					"date": "2017-08-25",
					"id": "dm3614r",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "d0gsg0w00f",
					"content": "Yeah.  This is the one I\u0027m excited about ",
					"date": "2017-08-25",
					"id": "dm3hf9n",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Keplerspace",
					"content": "This is actually really useful. Great explanation, thanks!",
					"date": "2017-08-25",
					"id": "dm47q6b",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "DualRearWheels",
					"content": "That would be great if something like that existed logging as well. C has __ FILE __ , __ LINE __ which can be used with macros.",
					"date": "2017-08-25",
					"id": "dm3ojoh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "priestlyemu",
					"content": "Oftentimes you can use runtime.Caller():\n\nhttps://golang.org/pkg/runtime/#Caller",
					"date": "2017-08-25",
					"id": "dm3x0lc",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "DualRearWheels",
					"content": "Well thanks! That one managed to stay below my radar.",
					"date": "2017-08-25",
					"id": "dm40ek7",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "YEPHENAS",
					"content": "I love Go.",
					"date": "2017-08-25",
					"id": "dm3nkwg",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "BurpsWangy",
					"content": "I love it more!",
					"date": "2017-08-25",
					"id": "dm4mfo0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gnu-user",
					"content": "Now that 1.9 is released we\u0027re logically just one more minor release away from 2.0!",
					"date": "2017-08-25",
					"id": "dm39dze",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "WindRainCloud",
					"content": "sorry, the next release will be 1.10",
					"date": "2017-08-25",
					"id": "dm3a14i",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "dilap",
					"content": "Oh my summer child...",
					"date": "2017-08-25",
					"id": "dm3an2f",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "shovelpost",
					"content": "/u/bradfitz has talked about this before.\n\n\u0026gt; Go 1.9\n\n\u0026gt; Go 2.0 !!!\n\n\u0026gt; Generics!\n\n\u0026gt; Sum Types!\n\n\u0026gt; List comprehensions!\n\n\u0026gt; Immutability!\n\n\u0026gt; Rationalizing\n[]byte vs string\n\n\u0026gt; Rationalizing\nnew() vs make()\n\n\u0026gt; Rationalizing\n:\u003d vs var\n\n\u0026gt; VFS layer,\nos.File becomes an interface\n\n\u0026gt; ~memory\n@ownership!\n\n\u0026gt; Data races statically impossible!\n\nYou can find the rest in [his talk](https://docs.google.com/presentation/d/1JsCKdK_AvDdn8EkummMNvpo7ntqteWQfynq9hFTCkhQ/view#slide\u003did.g118cf9b85c_0_258).",
					"date": "2017-08-25",
					"id": "dm3absu",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "Xiol",
					"content": "List comprehensions are the one thing I miss from my Python days. They would make me very happy in my trousers. ",
					"date": "2017-08-25",
					"id": "dm48xzh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mixedCase_",
					"content": "Difference being the discussion for what Go 2 is going to be, has started. So the \"never\" from that talk is no longer valid.",
					"date": "2017-08-25",
					"id": "dm48d7e",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "There\u0027s a word next to never.",
					"date": "2017-08-25",
					"id": "dm4jsl3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "qaisjp",
					"content": "\"maybe\"",
					"date": "2017-08-27",
					"id": "dm6u8fb",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "HornedKavu",
					"content": "Concurrent Map in the sync? Yay! Totally missed it was going to happen!",
					"date": "2017-08-25",
					"id": "dm3jv9x",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "R2A2",
					"content": "Be aware that it\u0027s untyped. `sync.Map.Get(interface{})` returns `interface{}`. \n\nI can\u0027t think of when I\u0027d use it over normal map and a mutex.",
					"date": "2017-08-25",
					"id": "dm3tz57",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "titpetric",
					"content": "For what it\u0027s worth, at least the API is usable for implementation in your typed implementation. I\u0027m confused as to why this even got into stdlib, esp. with all the holywar generics discussions in the last months.",
					"date": "2017-08-25",
					"id": "dm3u8b7",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "martingxx",
					"content": "It got in so it could be used by other bits of the stdlib.",
					"date": "2017-08-25",
					"id": "dm43ome",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "titpetric",
					"content": "Mind elaborating what\u0027s different than just an underlying map[string]interface{} and a mutex? I didn\u0027t look at the code yet but some comment made me think that I should.",
					"date": "2017-08-25",
					"id": "dm474k4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "martingxx",
					"content": "I don\u0027t know technically what\u0027s different but I remember a few of the patches to use sync.Map resulted in performance improvements for some reason, and sometimes more readable code.",
					"date": "2017-08-25",
					"id": "dm4fch6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DenzelM",
					"content": "`sync.Map` is poorly named imo in that it is specifically optimized for cases where you have a high read:write ratio. The closer you get to a balanced number of reads and writes, the more you should start looking for another solution. `sync.Map` is not a generic concurrent map, which is what I originally thought it was based upon the name... until I looked at the code.",
					"date": "2017-08-26",
					"id": "dm4y63k",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "justinlindh",
					"content": "I\u0027ll be interested in seeing benchmarks on it. ",
					"date": "2017-08-25",
					"id": "dm3ks6r",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "8lall0",
					"content": "I don\u0027t think that\u0027s gonna run very fast, but maybe in 1.10... :D",
					"date": "2017-08-25",
					"id": "dm3mm09",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TheMerovius",
					"content": "It is [almost certainly not going to help you](https://www.youtube.com/watch?v\u003dC1EtfDnsdDs).",
					"date": "2017-08-25",
					"id": "dm3u9d8",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "_nefario_",
					"content": "i can\u0027t wait to see the updated garbage collector graphs!",
					"date": "2017-08-25",
					"id": "dm3r1hq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "iPwnJ00",
					"content": "So good to see that they removed vendored folders from the `dotdotdot` commands!",
					"date": "2017-08-25",
					"id": "dm3zu0a",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Marreck",
					"content": "Has anyone tested yet how the performance of the concurrent map holds up versus just using some mutex manually? \n\nWhile the addition of a concurrent map is nice, I didn\u0027t really have many problems with maps before. Especially since the great updates to the race detector in 1.6 and 1.8.",
					"date": "2017-08-25",
					"id": "dm3nnyc",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "titpetric",
					"content": "Lots of people implemented some generic implementations of this to have typed maps, and literally all of them used some rwmutex, it\u0027s confusing even to see a sync.Map that\u0027s storing interface{}s. I know without generics there\u0027s really not a better way, but why include it at all...\n\nTBH, I\u0027m more interested in `Mutex is now more fair.`? Who\u0027s the fairest maiden in this land?",
					"date": "2017-08-25",
					"id": "dm3qvn8",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ragefacesmirk",
					"content": "If you look at the source code of the sync map, it\u0027s doing far more than a map with a mutex around it...",
					"date": "2017-08-25",
					"id": "dm3zkyj",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "rz2yoj",
					"content": "Awesome.",
					"date": "2017-08-25",
					"id": "dm3lxda",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "leftrightupdown",
					"content": "really great stuff. What i don\u0027t see here is any benchmarks regarding speed?",
					"date": "2017-08-25",
					"id": "dm3lft5",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-25",
					"id": "dm3pg0e",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TheMerovius",
					"content": "1.10 almost certainly",
					"date": "2017-08-25",
					"id": "dm3u84w",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Lucas_Meyer",
					"content": "Amazing. I love the concurrent map.",
					"date": "2017-08-25",
					"id": "dm3plnk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "wwoollff",
					"content": "Congratulations on the type aliasing! a life saver",
					"date": "2017-08-25",
					"id": "dm3qd7v",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "CaptainBland",
					"content": "Looks like there\u0027s some good stuff in here. The test helper method is a nice to have to keep tests clean - the sync map looks useful, too.",
					"date": "2017-08-25",
					"id": "dm3tlag",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "boomanbean",
					"content": "You get gold! You get gold! Everyone gets a gold! ",
					"date": "2017-08-25",
					"id": "dm45ght",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "metamatic",
					"content": "It\u0027s a shower of gold! A veritable golden shower!",
					"date": "2017-08-25",
					"id": "dm4eilk",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "HolyClickbaitBatman",
					"content": "Except you, apparently.",
					"date": "2017-08-25",
					"id": "dm4dlzl",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dkarlovi",
					"content": "Oh.",
					"date": "2017-08-25",
					"id": "dm4f33s",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "likebike2",
					"content": "Really great!  I\u0027ve been looking forward to these changes, especially the type aliases.  Thank you Go Team!!!",
					"date": "2017-08-25",
					"id": "dm4cffm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "goomba_gibbon",
					"content": "Constant performance improvements and  sync.Map are the highlights for me! Huge thanks to everyone involved.",
					"date": "2017-08-25",
					"id": "dm4nnqa",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheSpreader",
					"content": "Just upgraded today on my local machine, so far no issues!  Would love to see the alpine linux package updated to go 1.9, I might even do the PR to the aports repo but they look to be...  a bit behind in their merges.",
					"date": "2017-08-26",
					"id": "dm515bd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Melraidin",
					"content": "I get to throw out my hacky architecture-specific bit twiddling!",
					"date": "2017-08-26",
					"id": "dm51r75",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "alexcrownus",
					"content": "Fantastic release!",
					"date": "2017-08-26",
					"id": "dm5fq2p",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ju6ju8Oo",
					"content": "Any new libs that use the testing.(*T).Helper? ",
					"date": "2017-08-26",
					"id": "dm5j6r4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "vetn",
					"content": "This thread is a gold..congrats for 1.9 release ",
					"date": "2017-08-26",
					"id": "dm5kxwz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "therealmalios",
					"content": "Hey, can I havz gold too?",
					"date": "2017-08-25",
					"id": "dm3lk9d",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "ligustah",
					"content": "Asking the important questions",
					"date": "2017-08-25",
					"id": "dm3osbf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "HugoWeb",
					"content": "Before installing the new version on Linux, delete the old folder:\n\nsudo rm -rf /usr/local/go",
					"date": "2017-08-25",
					"id": "dm3r9x3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DyrusIsTheMan",
					"content": "Why so much gold...?",
					"date": "2017-08-25",
					"id": "dm3s0j0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "doatech",
					"content": "coz gold is made from go, I see myself out",
					"date": "2017-08-25",
					"id": "dm46xbo",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "AlmostDebugged",
					"content": "Damn these releases are coming in fast. Wasnt the last one only a month ago?",
					"date": "2017-08-25",
					"id": "dm3nfu6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "Not really, that were release candidate versions.  \n\nNew Go releases come up every 6 months. [Release History](https://golang.org/doc/devel/release.html).",
					"date": "2017-08-25",
					"id": "dm3nuxe",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "DualRearWheels",
					"content": "Unfortunately there is slight binary size increase for some of my work ( \u0026lt;~10%).",
					"date": "2017-08-25",
					"id": "dm3oo75",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "HighOnCloud",
					"content": "Good stuff!",
					"date": "2017-08-25",
					"id": "dm3p4ev",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Hexodam",
					"content": "hello automatic and audited testing!\n \n\u0026gt; Env\n\u0026gt;\n\u0026gt; The new go env -json flag enables JSON output, instead of the default OS-specific output format.\n\u0026gt; \n\u0026gt; Test\n\u0026gt;\n\u0026gt; The go test command accepts a new -list flag, which takes a regular expression as an argument and prints to stdout the name of any tests, benchmarks, or examples that match it, without running them.\n\nAutomatically run the test, output to json, send it to the elstic stack for easy reporting.",
					"date": "2017-08-25",
					"id": "dm4026x",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-25",
					"id": "dm4174p",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Hexodam",
					"content": "Damn, maybe next time ",
					"date": "2017-08-25",
					"id": "dm4e6bz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nemith",
					"content": "The -list flag is for test discovery for large multi-language test systems. \n\nJSON output for tests are have been proposed but i haven\u0027t seen code for it yet.",
					"date": "2017-08-26",
					"id": "dm4tvbt",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "winger_sendon",
					"content": "Awesome. sync.Map would help me a lot. \nCan\u0027t wait for Go 2",
					"date": "2017-08-25",
					"id": "dm41by3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hagg3n",
					"content": "Do we have gene... I mean, woohoo \\o/\n",
					"date": "2017-08-25",
					"id": "dm4enwg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "a-williams",
					"content": "Thanks Go Team. When I saw [net.Buffers](https://golang.org/pkg/net/#Buffers) I thought they were new. Turns out they were added in 1.8. What\u0027s the use-case for this type?",
					"date": "2017-08-25",
					"id": "dm4imhs",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "epiris",
					"content": "Oh that\u0027s cool I never noticed somehow. It says it uses the writev syscall if it\u0027s available which makes sense because the signature is a slice of slices. I haven\u0027t seen the net.Buffer implementation, but the Linux writev syscall is for vectored I/O which allows a single syscall to read from or write to a single Buffer, and write to or read from multiple buffers sequentially and atomically. You can probably extrapolate that to potential use cases.",
					"date": "2017-08-25",
					"id": "dm4muz0",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ptman",
					"content": "What solution are people using for installing several versions of golang at the same time on their system? I\u0027ve mostly been using debian packages myself, but they lag a bit behind.",
					"date": "2017-08-25",
					"id": "dm3o79l",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "PaluMacil",
					"content": "I use [Go Version Manager](https://github.com/moovweb/gvm).",
					"date": "2017-08-25",
					"id": "dm3w0v4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "throwawaybeginr",
					"content": "EDIT\n\nA comment below has ***completely accurately*** summarized the spirit of my comment:\n\n\u0026gt;it just makes Go slightly less broken.\n\n(Their words, not mine.)  I added this quote because of the huge negative backlash to my comment.  Personally, I\u0027m super, super excited!!!\n\nOf course, full generics should need to be added to the language later!!\n\n\nORIGINAL VERSION OF MY COMMENT:\n\n--------------------\n[\nEDIT: copied from original bottom of comment:\n***Obviously this just reduces copy and pasting in certain specific cases, letting you keep the type information in just one part of the codebase - it\u0027s only a small part of what generics enable***.\n]\n\n\nHoly holy sh#$ is type aliasing huge!???\n\nI only just learned Go a couple of weeks ago so forgive me if I\u0027m wrong but this SEEMS massive!!!\n\n~~Like, almost the same as generics~~.  [EDIT: that goes way too far.  I was just excited at how useful this new feature might be.]  You can now write a set of functions and data types where in only a *single* line you write:\n\ntype MyPony \u003d int;\n\nThen change it to string.  You can write it against MyPony!!  That is absolutely massive if this is true!\n\nLet me give you a very specific example.\n\nHere is a Queue:\n\n    queue :\u003d make([]int, 0)\n    // Push\n    queue :\u003d append(queue, 1)\n    // Top (just get next element, don\u0027t remove it)\n    x \u003d queue[0]\n    // Discard top element\n    queue \u003d queue[1:]\n    // Is empty ?\n    if len(queue) \u003d\u003d 0 {\n        fmt.Println(\"Queue is empty !\")\n    }\n\nBeautiful, isn\u0027t it (I got it [here](https://stackoverflow.com/questions/2818852/is-there-a-queue-implementation).)\n\nMakes my eyes water.  Awesome.  Except wht\u0027s this - queue :\u003d make([]int, 0).  damn.  Can\u0027t use it for anything but an int!\n\nBut now these two lines:\n\n    type queueType \u003d int\n    queue :\u003d make([]queueType, 0)\n\nmmmmmmmmmmmmmmm.  That\u0027s just the beginning.  You can make functions and whatnot, right!???\n\nAnd they say Go wouldn\u0027t get generics :D  [\u0026lt;--- this was a joke.  This is not generics.]\n\n\nI mean, maybe I\u0027m misinterpreting but it sure looks to me like this can save a TON of copy and pasting... [\u0026lt;---- only copy and pasting.  And search and replace.  Not full generics.]\n\nWhat am I missing?  (***Obviously this just reduces copy and pasting in certain specific cases, letting you keep the type information in just one part of the codebase - it\u0027s only a small part of what generics enable***.) [\u0026lt;----- this was part of my original comment but should have gone on the top instead of the bottom.]",
					"date": "2017-08-25",
					"id": "dm3eqs6",
					"isArchived": true,
					"isControversial": false,
					"score": -9
				},
				{
					"author": "epiris",
					"content": "?¿?¿?¿?¿\n\n ¯\\\\\\_(ツ)_/¯",
					"date": "2017-08-25",
					"id": "dm3jbxu",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "throwawaybeginr",
					"content": "Hi, you gifted me gold.\n\nCould you explain whether this was because you were making fun of my comment, or thought my comment was a joke?\n\nThe reason my comment was not a joke is because as I wrote, it reduces copy and paste.\n\nLet me be very clear.  Before this addition, I might have copied one library into another, then have to do a find and replace.  Only I couldn\u0027t replace every instance of \"int\" because maybe some of them are unrelated or doing something different.\n\nAfter this addition, I can copy one library into another and change a single line, to change the entire type of that library.  Because in some sense it was written in a generic style.\n\nWhile it is not a complete generics solution, bear in mind that Wikipedia says \"Arrays and structs can be viewed as predefined generic types. Every usage of an array or struct type instantiates a new concrete type, or reuses a previous instantiated type. Array element types and struct element types are parameterized types, which are used to instantiate the corresponding generic type. All this is usually built-in in the compiler and the syntax differs from other generic constructs.\" \n\nWhen you change the type of an array, you will have to recompile and so forth.  Yet in some sense it \"can be viwed as predefined generic types.\"\n\nIn some sense I can write an entire 2000-line library around a queue, and have it apply only  to integers.  At the top of my library I can put  `queueType \u003d int`  and someone else (or me) can change it later.  Throughout my library I can use the word queueType and it will refer to just that part of the construction.  In this way I can very clearly program an entire function or library using the word queueType without deciding the exact type that it will refer to.\n\nIf you don\u0027t see that this is a small kind of what generics programming is, i.e. reduces copy and paste in some cases, then you are not seeing me:\n\n- Before: copy the library.  Click \"find\" in your editor.  Type \"int\".  Decide for every single integer, whether it refers to queueType in a logical sense or is some unrelated or different use of an integer.\n\n- After: copy the ibrary.  Click \"find\" in your editor.  `queueType \u003d `.  Change the end it from an int to a float and see if it still works.  Maybe keep clicking \"find\" for instances of queueType and see if the library makes other assumptions about it that break.\n\nBut what you will not do under #2 above is replace unrelated usages of int.\n\nSo I view this as enabling a very small subset of generic programming.  If I\u0027m as wrong as you suggest, then please correct my understanding.",
					"date": "2017-08-25",
					"id": "dm3wffg",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "epiris",
					"content": "I was convinced it was a fairly adorable troll, add to that now elaborate lol. If your being serious, this feature doesn\u0027t enable Generics in any sense of the term. No more than your code editor does, I.e. \n\n    :%s/queueType/int/g\n\nEdit: I did not give you gold to mock you or reflect my perspective. I gave you gold as I did everyone before I went to bed just as I\u0027ve done in past releases because I think it makes the release more fun. I also feel I did not personally attack you- I didn\u0027t call you a troll I said I was convinced it was. I still feel you could be trolling but if you are genuinely excited about that feature than I apologize. \n\nThough I would suggest if you\u0027re passionate about Go you avoid using Aliases for use cases outside the spirit of their design: refactoring code. What most gophers value about Go is the limited feature set which prevents having to explore their unusual experimentation during other people\u0027s learning exercises. When I see a alias I should immediately think this type is migrating and I should use the type it points to. Tooling should eventually do the same. If you use it a different way than I and anyone else has to become familiar with your usage.\n\nEdit2:\n\nI see your edit, I\u0027m not accepting your ultimatums and I am not striking through my text. I am instead choosing to exercising my right to disagree with you on both points. \n\n  * 1)  I did not personally attack **you**, I raised question to your **ideas** which is well within my right in a forum dedicated to exchanging opinions in public setting. My original reply was to your post when it said \"this is like generics\" which was false without room for objection. This under a downvoted throw away that said \"who said Go won\u0027t get generics\" at a time generics is a heated source of debate here. Under this context my replies are not unreasonable nor is my apprehension to taken you seriously. If you want serious responses post in serious tone.\n  * 2)  I am not mistaken on the points of your post, I disagree with them on multiple fronts even after they have been edited. You can claim the alias feature is a form of generic programming and I am genuinely happy if you find a lot of value in it, but computer science does not support your claim and I choose not to as well.\n\nI won\u0027t reply to you further we can disagree from here. My apology from the first edit stands if you were being genuine- not because I feel my actions made it necessary but because in the off chance you are not being disingenuous I don\u0027t want to discourage you from your journey to Go. Happy coding.\n",
					"date": "2017-08-25",
					"id": "dm3zmlv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "throwawaybeginr",
					"content": "epiris, the reason you are mistaken is as follows.\n\n(1)  We take my fully given example.  I gave it in full!\n\n    queue :\u003d make([]int, 0)\n    // Push\n    queue :\u003d append(queue, 1)\n    // Top (just get next element, don\u0027t remove it)\n    x \u003d queue[0]\n    // Discard top element\n    queue \u003d queue[1:]\n    // Is empty ?\n    if len(queue) \u003d\u003d 0 {\n        fmt.Println(\"Queue is empty !\")\n    }\n\nYou can consider this being in a function, or whatever else we like.  Next we make it a little bit more complicated.  It doesn\u0027t really matter what the complication is, this is just an illustrative example.  For our example, we will simple keep track of its length in a dedicated variable called myLength.\n\n\n    queue :\u003d make([]int, 0)\n\n    // Push\n    queue :\u003d append(queue, 1)\n    // Top (just get next element, don\u0027t remove it)\n    x \u003d queue[0]\n    // Discard top element\n    queue \u003d queue[1:]\n    // Is empty ?\n    if len(queue) \u003d\u003d 0 {\n        fmt.Println(\"Queue is empty !\")\n    }\n\n    var myCachedLength int //tracks length, only updated manually\n\n    // update length (call this manually)\n    myCachedLength \u003d len(queue)\n\nWhy might someone do something like this?  Oh, I don\u0027t know, can you possibly imagine a tree that is expensive and traverse the elements of?  If not, then can you please read this article:\n\nhttps://en.wikipedia.org/wiki/Binary_search_tree\n\nAbove I completely implemented a queue.  Can you imagine me implementing a more esoteric data structure? No?\n\nWell, it doesn\u0027t matter if you can imagine me doing it, because we are doing generic programming here.\n\n(2)\n\nYou claim:\n\n     No more than your code editor does, I.e.\n    :%s/queueType/int/g\n\nBut before this change, `Go did not have the possibility of defining queueType to mean int.`\n\nTherefore before 1.9, if you wrote a program with queueType, ***it wasn\u0027t a Go program until you ran:***\n\n     No more than your code editor does, I.e.\n    :%s/queueType/int/g\n\nIt simply wasn\u0027t Go!\n\nIs this a Go program?\n\n    ###this package is:main\n\n    require \"fmt\"\n    \nbecause you can write\n\n    :%s/###this package is:/package/g\n    :%s/require:/import /g\n   \nSo, really, Go included both the words \"require\" as a synonym for import, and the more verbose \"###this package is:\" as a synonym for package?\n\nNo.  You must present a valid Go program, not external search-and-replace shenanigans.\n\nSo, ***if we start with a valid Go 1.8 program***, then your external search-and-replace shenanigans result in this:\n\n     var myCachedLength string //tracks length, only updated manually\n\n    // update length (call this manually)\n    myCachedLength \u003d len(queue)\n\nThis is a type error (the mistake in the code is at the first line, which now defines the cached length as a string, and then it gets triggered at the third line which is illegal).  The function is now broken.\n\nThis applies to my example, but it doesn\u0027t apply to yours because in *your* example you were already generically programming albeit in a limited form, using your external tool to let you do so, and not writing valid Go.  But if we removed this and start with a valid 1.8 program, then you had to use this to replace it:\n\n     No more than your code editor does, I.e.\n    :%s/int/string/g\n\nSo what Go 1.9 did is move the limited form of generic programming ***that you were doing*** from your code editor, into the Go language.\n\nIn fact, I will go farther:\n\nIn your example of writing an illegal queueType which was not a valid Go program, then using search and replace in your code editor (or an automated tool) to change it, ***you were engaged in Generic programming.***\n\nThis is because you were writing code without regard for its type.\n\nThe difference is, in Go 1.9, you can write ***valid*** code without regard for its type.  In Go 1.8, you had to write ***invalid code, that wasn\u0027t Go*** to write code without regard for its type.\n\nThis is the change I refer to.  Your claim is like saying that adding \"require\" as a synonym for \"import\" does not expand the language to include the word require, because it was already part of the language if you wrote using it and then did a search and replace.\n\n\nBear in mind that I have only been learning Go for a couple of weeks, so I may have Syntax errors above, and my point may be wrong.  I am open to the idea that I am wrong, if you express it clearly.\n\n\n(3)  I am unhappy that you have attacked me as a troll, then an elaborate troll.  This derails the discussion. \n Another person, who uses generics heavily in C++, already started off by disagreeing then amended their [point to say](https://www.reddit.com/r/golang/comments/6vuhkz/go_19_is_released/dm3yl92/):\n\n\u0026gt;\u0026gt;Before this addition: [...] You would have had to write: [...]\n\n\u0026gt; Oh god. This is horrifying. I *get it why you are excited about the alternative, but it just makes Go slightly less broken.*\n\nThey saw my point.  It\u0027s just a limited form of generics programming, that saves *some* copying and some search and replace.  I have [amended my comment](https://www.reddit.com/r/golang/comments/6vuhkz/go_19_is_released/dm3eqs6/) to make this blindingly clear.\n\nLikewise in order not to derail the discussion please do the following:\n\n1.  Add strikethrough to your comment where you call me a troll.  (A personal attack.)\n\n2.  Add \"I was mistaken and now understand OP\u0027s example.\"\n\nCertainly instead of 2 we can continue this discussion.  But you must perform 1 as it\u0027s very rude of you to attack another Go user this way.\n\nAs you have seen, I also do not accept your point.  Go 1.9 now includes a very limited way to write a valid Go program using a somewhat generic code technique, that before could only have been done through copy and paste or search and replace.  Now the starting program can be valid, and by changing the type definition, in some cases it can remain valid.\n\nThis is huge in my opinion, of course you and everyone else here are right that it\u0027s extremely limited - but it certainly (100%) meets the definition of adding a very limited form of generic programming to the language.  Please amend your comment as I have requested before replying.  I will message mods about your calling me a troll, otherwise.  That is a personal attack.\n\nThen I am happy to continue this discussion with you.",
					"date": "2017-08-25",
					"id": "dm47e75",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "WikiTextBot",
					"content": "**Binary search tree**\n\nIn computer science, binary search trees (BST), sometimes called ordered or sorted binary trees, are a particular type of container: data structures that store \"items\" (such as numbers, names etc.) in memory. They allow fast lookup, addition and removal of items, and can be used to implement either dynamic sets of items, or lookup tables that allow finding an item by its key (e.g., finding the phone number of a person by name).\n\nBinary search trees keep their keys in sorted order, so that lookup and other operations can use the principle of binary search: when looking for a key in a tree (or a place to insert a new key), they traverse the tree from root to leaf, making comparisons to keys stored in the nodes of the tree and deciding, based on the comparison, to continue searching in the left or right subtrees. On average, this means that each comparison allows the operations to skip about half of the tree, so that each lookup, insertion or deletion takes time proportional to the logarithm of the number of items stored in the tree.\n\n***\n\n^[ [^PM](https://www.reddit.com/message/compose?to\u003dkittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to\u003dWikiTextBot\u0026amp;message\u003dExcludeme\u0026amp;subject\u003dExcludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/golang/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]\n^Downvote ^to ^remove ^| ^v0.26",
					"date": "2017-08-25",
					"id": "dm47eb8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ar1819",
					"content": "I can see where you coming from, but the problem is - if I need, for example, binary tree for both int and float implementations - I will be forced to duplicate the source and edit type aliases. Code generation became easier, but it is still not a proper solution for a language generic facilities. \n\nFor example - there will be difficulties constraining the type. If I don\u0027t want user of my code to use it for pointers or structs which have pointers - because it will break equality operator - how can I achieve that? ",
					"date": "2017-08-26",
					"id": "dm4wres",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DaBeechees",
					"content": "\u0026gt; What am I missing?\n\nWell, pretty much the whole concept of generics actually.\n\nConsider this C# code (it\u0027s pretty straightforward even if you don\u0027t know C#, don\u0027t worry), a language that actually has generics:\n\n    class Foo\n    {\n        int[] data;\n        int first;\n    }\n\n    class Bar\n    {\n        double[] data;\n        double first;\n    }\n\nYou have two classes (Foo and Bar) that are essentially the same, except for the type of the data in it.\nThis code is *obviously* duplicated, except that it\u0027s not, because those classes store different data types. So, how do we solve this? With generics!\n\n    class Baz\u0026lt;T\u0026gt;\n    {\n        T[] data;\n        T first;\n    }\n\nThis Baz class can work with any data type.\nSo if you want an array of various data types, you just do this:\n\n    var x \u003d new Baz\u0026lt;int\u0026gt;();\n    var y \u003d new Baz\u0026lt;string\u0026gt;();\n    var z \u003d new Baz\u0026lt;SomeCustomTypeYouDefined\u0026gt;();\n\nand the compiler automatically generates the necessary classes for you.\n\nHow does this differ from your reply? Well, suppose that I publish my class Baz in a library somewhere.\nThen, Alice, Bob and Eve all download my library and they want to instantiate a Baz with some custom data type. Well, no problem:\n\n    var a \u003d new Baz\u0026lt;AliceCustomType\u0026gt;();\n    var b \u003d new Baz\u0026lt;BobsCustomType\u0026gt;();\n    var e \u003d new Baz\u0026lt;EvesCustomType\u0026gt;();\n\nThey can just import my library and use it.\n\nIn your case, each of them should *modify my library* to change the type alias. It\u0027s not the same as generics at all, and you need to recompile everything if you change a type.\n\nEDIT: woah, my first gold :D Thanks, kind stranger!",
					"date": "2017-08-25",
					"id": "dm3mamj",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "winger_sendon",
					"content": "Correction: As CLR supports generics in the run-time, the type specialization is done at runtime. C# compiler only emits a generic type in IL.",
					"date": "2017-08-25",
					"id": "dm3qscf",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "DaBeechees",
					"content": "That\u0027s true, although I think that this is more of an implementation detail that does not affect the concept of generics in C#.\n\nA cool consequence is that since the compiler only generates the generic version of the method the assembly does not get bloated with multiple \"copies\" of the same method (the downside of course is that the CLR needs to re-instantiate the method every time you relaunch the application).",
					"date": "2017-08-25",
					"id": "dm3u9a8",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "throwawaybeginr",
					"content": "I understood this perfectly.  Yes, each of them should *modify your library* to change the type alias.  Yes, you need to recompile everything if you change a type.\n\nThis is why I said at the end of my comment:\n\n\u0026gt; (Obviously this just reduces copy and pasting in certain specific cases, letting you keep the type information in just one part of the codebase - it\u0027s only a small part of what generics enable.)\n\nCan you read carefully the sentence above, saying \"obviously this just reduces copy and pasting in certain specific cases, letting you keep the type information in just one part of the codebase - it\u0027s only a small part of what generics enable\" and suggest how I could edit it to match my intention?\n\nWhat I meant to write was \"Obviously this just reduces copy and pasting in certain specific cases, letting you keep the type information in just one part of the codebase - it\u0027s only a small part of what generics enable.\"\n\nThe only thing I meant is exactly what I wrote: that it can *reduce* copy and paste in certain cases.\n\nAfter this addition:\n\nYou write: \" each of them should modify my library to change the type alias\"\n\nBefore this addition:\n\nYou would have had to write: \" each of them should modify my library by searching and replacing every single occurrence of that type.  Well, maybe not EVERY occurrence, just the ones that refer to the part that needs to be changed.  Maybe there are other uses of the type that are unrelated.  So, you just have to go into the library you are modifying, click \"find\" on every single occurrence of the type that you are replacing, and decide if it refers to queueType or some unrelated usage of an int.  For example even floats could use an int in the course of the queueType function, as part of simple iteration or for unrelated reasons.  So you just have to spend a few hours, or days, or if it\u0027s very large, a couple of weeks, reading the library you want to change, and then find and replace each instance.  If you misunderstand a particular specific line you might accidentally break the whole library. \"\n\nSo this is the sense in which it seems to me that the limited generic programming this enables - forcing you to change a line in the library you are including - is still a small subset of generic programming.\n\nLet me close by [quoting wikipedia](https://en.wikipedia.org/wiki/Generic_programming#Programming_language_support_for_genericity):\n\n\u0026gt;Arrays and structs can be viewed as predefined generic types. Every usage of an array or struct type instantiates a new concrete type, or reuses a previous instantiated type. Array element types and struct element types are parameterized types, which are used to instantiate the corresponding generic type. All this is usually built-in in the compiler and the syntax differs from other generic constructs.\n\nI hope you understand that when you change the type of an array, you have to change the code all over the place.\n\nSo it is not a general \"generics\" mechanism.\n\nThe reason the article says \"arrays and structs can be viewed as predefined generic types\" is simply, because arrays and structs can be viewed as predefined generic types.\n\nThe reason \"type queueType \u003d int\" can be viewed as \"generic programming\" is because I can write a two thousand line library that does something very complicated with queues, and use the word \"queueType\" throughout.\n\nWhen you change \"type queueType \u003d int\" to a float, my entire library might still work.  Because it was written in a style that uses the word queueType.  It can also use integers, in an unrelated sense.\n\nIf you don\u0027t understand how this fits the definition of generic programming, then, given that I\u0027m the one who has been learning Go here for a couple of weeks, not you, let\u0027s say one of us is wrong and you should teach me why I am wrong to consider it a small subset of generic programming.\n\nCertainly it is not a general Generics solution.  I don\u0027t want you to put words in my mouth.\n\nThank you.",
					"date": "2017-08-25",
					"id": "dm3vjja",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "DaBeechees",
					"content": "There\u0027s no way I\u0027m ever reading a rant that long, sorry.",
					"date": "2017-08-25",
					"id": "dm3w8su",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "throwawaybeginr",
					"content": "Please remove or edit your comment.\n\nMy comment fits in 1 paragraph in Word - it\u0027s 200 words (1064 characters) and a code snippet.  According to [reading times](https://www.google.com/search?q\u003daverage+reading+time) it takes 12 seconds to read with 80% comprehension.\n\nI get that you don\u0027t want to address my beginner comments (I mention that I just learned go a couple of weeks ago) but I think it\u0027s very rude of you to call my comment a very long rant - it\u0027s a little over twice the size of this comment.  Please change or delete your comment.",
					"date": "2017-08-25",
					"id": "dm3wxtr",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "DaBeechees",
					"content": "/r/theydidthemath \n\nFine, I\u0027ll schedule 12 seconds.\n\n[A short time later]\n\n\u0026gt; and suggest how I could edit it to match my intention?\n\nYou could remove these two phrases:\n\n\u0026gt; Like, almost the same as generics.\n\n\u0026gt; And they say Go wouldn\u0027t get generics :D\n\nWhich are seriously misleading given your intention.\n\n\u0026gt; Before this addition: [...] You would have had to write: [...]\n\nOh god. This is horrifying. I get it why you are excited about the alternative, but it just makes Go slightly less broken. \n\n\u0026gt; When you change \"type queueType \u003d int\" to a float, my entire library might still work.\n\n... what if you need a queue of integers AND a queue of floats?\n\n\u0026gt; If you don\u0027t understand how this fits the definition of generic programming\n\nIt\u0027s still not a generic queue, it\u0027s a queue that supports a single specific data type and you have an almost-not-terrible-but-pretty-dumb way to change it to another datatype.\nBecause seriously, changing what the alias points to is in the end just a very fancy search and replace.\n\n\u0026gt; given that I\u0027m the one who has been learning Go here for a couple of weeks, not you, let\u0027s say one of us is wrong and you should teach me why I am wrong to consider it a small subset of generic programming.\n\nConsidering that:\n\n- I\u0027ve been using C# on and off for some years and I am currently working with it professionally;\n- C# has generics;\n- Go doesn\u0027t;\n\nplease excuse me if I don\u0027t consider your 2 weeks of experience with a programming language that doesn\u0027t have generics as a valid experience in programming with generics.\n",
					"date": "2017-08-25",
					"id": "dm3ybcq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "throwawaybeginr",
					"content": "Edit:\n\n\u0026gt;it just makes Go slightly less broken.\n\nThis is an accurate summary of the spirit of my comment.  I will put it at the top of my post.\n\nI agree with everything you\u0027ve written.",
					"date": "2017-08-25",
					"id": "dm3yl92",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DaBeechees",
					"content": "Peace, bro :)\n\n\u0026gt; I am currently working with it professionally\n\nand if I want to keep my job, I\u0027d better get back to it.\n",
					"date": "2017-08-25",
					"id": "dm3yooe",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "throwawaybeginr",
					"content": ":)",
					"date": "2017-08-25",
					"id": "dm3z6b1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TDTMMbot",
					"content": "\n/r/theydidthemonstermath\n\n[^^^Contact](https://www.reddit.com/user/alienpirate5)",
					"date": "2017-08-25",
					"id": "dm3ybf2",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Pythonistic",
					"content": "I\u0027m gonna take this seriously and help lift you up, and also so when someone finds this in a search later, they understand what they need to know.\n\n*_\"Generics\" in Go 1.x_*\n\nFirst, if you needed to declare a new `int` type, you\u0027d do it with:\n\n    type Color int\n\nYou do this because you want to strongly type `struct` fields, function parameters, and return values.  Using that specific type (`Color`) instead of a plain integer makes it very clear to your human readers (and the compiler) what you intend to use.\n\nThen to make it act like an enumeration:\n\n    const (\n        COLOR_UNKNOWN Color \u003d iota\n        COLOR_BLACK\n        COLOR_RED\n        COLOR_WHITE\n        COLOR_BLUE\n    )\n\nNow, we wanna do something with the color, so let\u0027s add a function with a receiver (aka a _method_) to it.\n\n    func (c Color) String() string {\n        switch c {\n        case COLOR_BLACK:\n            return \"black\"\n        case COLOR_WHITE:\n          return \"white\"\n        // . . .\n        }\n      \n        return \"UNKNOWN\"\n    }\n\nNow, let\u0027s say we also need to do some common functions on types like `Color`.  We\u0027ll define an _interface_ that describes what those behaviors or functions are.\n\n    type Squawker interface {\n        Squawk() string\n    }\n\nIf we want to make `Color` implement `Squawker`, it needs to provide a method.\n\n    func (color Color) Squawk() string {\n        return \"SQUAWK \" + color.String()\n    }\n\nI\u0027ll assume I have some other types that also implement Squawk().  If I want to work with that type generically, I\u0027ll declare the container (a slice or a map) to hold that interface.\n\n    var squawkers \u003d make([]Squawker, 0)\n    squawkers \u003d append(squawkers, COLOR_BLACK)\n    squawkers \u003d append(squawkers, Duck{Name: \"Donald\"})\n\nWhen I later retrieve a `Squawker` from the slice, I know it will implement the `Squawk()` method, but I won\u0027t know anything else about it.\n\nSee also a [Playground link with working code](https://play.golang.org/p/3H3APhEE2P).\n\n\n*_The point behind type aliasing_*\n\nType aliasing is intended to be a way to allow you to migrate from one version of an API to another without breaking compatibility with existing code.  Go programmers are _very_ conservative in how they change APIs -- or they should be -- and we try to keep the same signatures in place for as long a time as possible.  Type aliasing allows you go develop a new version of a type, give it a new name to differentiate it from an older version of the API, and alias it to maintain name compatibility.\n\nYou already had limited aliasing by naming your imports.  This just adds a new facility to allow you to alias (or rename) existing types.",
					"date": "2017-08-25",
					"id": "dm3lns6",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "throwawaybeginr",
					"content": "Thank you for this.\n\nCan you please read [my other comments](https://www.reddit.com/user/throwawaybeginr/).  Can you reply to those comments (in a reply to this comment)?\n\nThanks.",
					"date": "2017-08-25",
					"id": "dm4bmge",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "WintyBadass",
					"content": "That\u0027s just wrong on so many levels... I hope you are trolling.",
					"date": "2017-08-25",
					"id": "dm3ovmz",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "throwawaybeginr",
					"content": "As I mentioned \"I only just learned Go a couple of weeks ago\".  My name here is \"throwawaybeginr\".\n\nPlease explain why it\u0027s wrong for me to write code against queueType \u003d int but then later change it to queueType \u003d float32 ?\n\nIn the current case I would have to change all of my code that I wrote in my queue (or any other) function, whereas in the case I suggest I can just change the one line.\n\nSo please explain clearly why it\u0027s \"wrong on so many levels\", does not match best practices, and that I shouldn\u0027t do it.\n\nBy the way someone gave me gold for the above comment - so either they really massively agree with me or thought that I was making a very, very funny joke.\n\nWell, I wasn\u0027t joking *on purpose* but maybe I am very wrong, so please explain why: as I mentioned I literally learned Go a couple of weeks ago, so be kind!\n\nThank you.",
					"date": "2017-08-25",
					"id": "dm3v149",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TotesMessenger",
					"content": "I\u0027m a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:\n\n- [/r/negativewithgold] [\"Holy holy sh#$ is type aliasing huge!???I only just learned Go a couple of weeks ago so forgive me if...\" \\[-10\\]](https://np.reddit.com/r/NegativeWithGold/comments/6vy8lo/holy_holy_sh_is_type_aliasing_hugei_only_just/)\n\n[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don\u0027t vote in the other threads.) ^\\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to\u003d/r/TotesMessenger))*\n\n[](#bot)",
					"date": "2017-08-25",
					"id": "dm3uqas",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "notacreativeguy_",
					"content": "Is the gold a flair, or are people really getting gold?",
					"date": "2017-08-25",
					"id": "dm3ocpu",
					"isArchived": true,
					"isControversial": true,
					"score": -3
				},
				{
					"author": "__crackers__",
					"content": "Someone is *really* happy about 1.9.",
					"date": "2017-08-25",
					"id": "dm43ze0",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "robe_and_wizard_hat",
					"content": "Rob Pike probably has a budget to spend on stuff like this on every release.",
					"date": "2017-08-26",
					"id": "dm5zx4u",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "hunterloftis",
			"date": "2018-01-30",
			"id": "7twwhu",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "I wrote a physically-based 3D renderer to learn Go. It\u0027s been a blast.",
			"comments": [
				{
					"author": "rarlei",
					"content": "Most people start with a Hello World...but this is fine I guess",
					"date": "2018-01-30",
					"id": "dtga1k7",
					"isArchived": false,
					"isControversial": false,
					"score": 156
				},
				{
					"author": "hunterloftis",
					"content": "Ha - it [did start with Hello, World](https://github.com/hunterloftis/pbr/commit/f9245fa4ade113d0a4b66da365bfc2dcede09875)",
					"date": "2018-01-30",
					"id": "dtgpi2k",
					"isArchived": false,
					"isControversial": false,
					"score": 44
				},
				{
					"author": "hunterloftis",
					"content": "Source is here: https://github.com/hunterloftis/pbr\n\nI\u0027d appreciate any technical feedback more experienced Gophers have. It\u0027s gone through several iterations as I learned the language and patterns (and got help / suggestions from folks here).",
					"date": "2018-01-30",
					"id": "dtftym5",
					"isArchived": false,
					"isControversial": false,
					"score": 50
				},
				{
					"author": "sh41",
					"content": "It looks really great.\n\nSome minor stuff, but https://godoc.org/github.com/hunterloftis/pbr#Scene.ReadHdr should probably be ReadHDR. See https://github.com/golang/go/wiki/CodeReviewComments#initialisms.\n\n~~Its documentation also mentions `SetEnv`, but I\u0027m not finding that available (perhaps it was renamed or removed).~~ **Edit:** This has since been fixed in [`2cd3b15e`](https://github.com/hunterloftis/pbr/commit/2cd3b15eadb2ec2b8e9153df40ca133afe064d08).",
					"date": "2018-01-30",
					"id": "dtg0ple",
					"isArchived": false,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "hunterloftis",
					"content": "Thanks for the feedback! I\u0027ll go over all the docs and examples this week to be sure it\u0027s actually all current. Lots has been in flux as I\u0027ve figured things out / realized I was doing something in a terrible way.",
					"date": "2018-01-30",
					"id": "dtg5b8p",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "icholy",
					"content": "Hdr isn\u0027t an initialisms or acronym, so that rule doesn\u0027t apply here.",
					"date": "2018-01-30",
					"id": "dtgz4mw",
					"isArchived": false,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "dasacc22",
					"content": "hdr stands for high dynamic range, so i would think otherwise.",
					"date": "2018-01-30",
					"id": "dtgzevg",
					"isArchived": false,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "icholy",
					"content": "Oh, I assumed it meant header.",
					"date": "2018-01-30",
					"id": "dtgzh5g",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "shazow",
					"content": "A license would be appreciated, ideally a permissive open source one. :)\n\nI [opened an issue](https://github.com/hunterloftis/pbr/issues/24) to help track it.",
					"date": "2018-01-30",
					"id": "dthibsp",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "hunterloftis",
					"content": "Thanks! I\u0027ll probably MIT license it.",
					"date": "2018-01-30",
					"id": "dthjcfy",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "shazow",
					"content": "Yay, thanks!",
					"date": "2018-02-01",
					"id": "dtleqbv",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Pancakepalpatine",
					"content": "I tried for 2 weeks to even get the scaffolding together for this project. Like I spent some of the last two weeks of 2017 trying to do THIS. \n\nThank you so much for sharing!\n\nEdit: woah, my standards were way lower than this project\u0027s status, though. Great stuff.",
					"date": "2018-01-30",
					"id": "dtg4ebf",
					"isArchived": false,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "hunterloftis",
					"content": "Thanks! I started - and stopped - several times as I ran into concepts, math, or code that I wasn\u0027t sure about. If you pick up your project again, feel free to reach out with questions and I\u0027ll help if I can, one amateur to another.",
					"date": "2018-01-30",
					"id": "dtg59ia",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-01-30",
					"id": "dtglip7",
					"isArchived": false,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "hunterloftis",
					"content": "If you knew the nights I spent struggling to figure this stuff out you\u0027d just consider me crazy instead.",
					"date": "2018-01-30",
					"id": "dtgotu8",
					"isArchived": false,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "cogle9469",
					"content": "What resources did you use to learn rendering? Super impressive work.",
					"date": "2018-01-30",
					"id": "dtgi2yt",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "hunterloftis",
					"content": "Thanks! I can point you towards (probably too) many resources because I started from zero and made notes whenever something was useful:\n\n- https://github.com/hunterloftis/pbr/blob/master/NOTES.md#overviews\n- https://github.com/hunterloftis/pbr/blob/master/NOTES.md#adaptive-sampling\n- https://github.com/hunterloftis/pbr/blob/master/NOTES.md#geometry\n- https://github.com/hunterloftis/pbr/blob/master/NOTES.md#focal-length-focus-depth-of-field\n- https://github.com/hunterloftis/pbr/blob/master/NOTES.md#materials\n- https://github.com/hunterloftis/pbr/blob/master/NOTES.md#refs\n\nI also referenced useful resources near specific functions, for example:\n\n- https://github.com/hunterloftis/pbr/blob/master/surface/tree.go#L10",
					"date": "2018-01-30",
					"id": "dtgp9v1",
					"isArchived": false,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "Entropian",
					"content": "How did you go about finding relevant resources? I\u0027m having a hard time working through the book Physically Based Rendering because of how dense and math-heavy it is. Looking at your list, it makes me wonder if I would\u0027ve had a better time had I just looked around online for learning material.",
					"date": "2018-03-02",
					"id": "dv2fj7w",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hunterloftis",
					"content": "I had the same experience with the book. It served me best as a final resource when I had a general grasp of a concept and needed explicit examples, or when I needed to find out the industry term for something in order to Google.\n\nI found the rest by meandering through the Internet and reading a ton of university papers :)",
					"date": "2018-03-28",
					"id": "dwfqq5u",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "qu33ksilver",
					"content": "Great stuff !\n\nYou might want to make `Render` operations safe for concurrent use. Just wrap them in a mutex and you should be good to go. Especially things like `Start()`, `Stop()`, `Active()` are just checking for variable state without mutexes.\n\nAlso, tests are always a good thing ;)",
					"date": "2018-01-30",
					"id": "dtggnmy",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "hunterloftis",
					"content": "That\u0027s a great suggestion, thanks! One of the things I\u0027ve been trying to figure out with Go is how to know (other than just through docs) whether or not something is concurrent-safe.\n\nAgree re: tests, with the caveat of *when you understand the domain enough to write tests for it! I could write tests now, but was just feeling my way a few months ago.",
					"date": "2018-01-30",
					"id": "dtgpf08",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "qu33ksilver",
					"content": "\u0026gt; One of the things I\u0027ve been trying to figure out with Go is how to know (other than just through docs) whether or not something is concurrent-safe.\n\nThat\u0027s easy. Write tests and use the race detector. You don\u0027t need to be super thorough about the tests. Just do some basic operations, if you have races, it will catch it.",
					"date": "2018-01-30",
					"id": "dtgv7ys",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "_zombiezen_",
					"content": "While the race detector is helpful, having the tests complete without triggering the race detector does not mean that your code does not have data races. (It is similar to asserting that if your code compiles, it does not have bugs.)\n\nIn general, it is safe to read from a data structure from multiple goroutines, but it is not safe to write to a data structure while other goroutines are reading from or writing to it.  In a renderer, usually your scene state can be shared among the goroutines without locking, but things that mutate (like a PRNG) cannot.  Using something like Context can help you pick up the cancellation signal without having to think too much about it.",
					"date": "2018-01-30",
					"id": "dthnfu9",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "esimov",
					"content": "Great work! The next Go project in my todo list hopefully will be raytracing engine.",
					"date": "2018-01-30",
					"id": "dtge27g",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "hunterloftis",
					"content": "Awesome! It was really a fun way to learn (the basics of) a language.",
					"date": "2018-01-30",
					"id": "dtgpnhl",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "esimov",
					"content": "I\u0027m glad that Go is getting used for graphics related projects too and not only for infrastructure and server side programming.",
					"date": "2018-01-30",
					"id": "dtgtmpw",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "CreativeCoconut",
					"content": "Not really talking about your Go code which I think is fine (probably not better than you in Go anyways). But I think your commit messages could use some work. I tried to retrace how your project developed but could not learn much about it through the commit messages alone.\nSmall commits with more explicit messages might help there. Probably the best post I read on commit messages and how to write them was done by a guy called [Chris Beams]\n (https://chris.beams.io/posts/git-commit/).\n\nOtherwise, very lovely project. I am super impressed",
					"date": "2018-01-30",
					"id": "dtgfrt5",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "hunterloftis",
					"content": "Thanks! And agreed. If you\u0027d like to retrace the beginning, check this out (off master):\n\n- [the first page of commits](https://github.com/hunterloftis/pbr/commits/actually-collada?after\u003dae2a1cc3ea6a6792380eeaf72d04ce6f1f6b2d1f+139)\n\nAt some point, I checked in a massive 3d file and absolutely could not get rid of it. Everything I tried had issues with the git-lfs extension I have installed which was modifying every commit in the project\u0027s history for large binary blobs. So after a couple of hours I just blew away master and stopped trying with git.",
					"date": "2018-01-30",
					"id": "dtgpm07",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "brokedown",
					"content": "I\u0027d just like to say that this is a really cool project and an impressive start with the language. Coming in to it as a new Go programmer and then using it in a novel project outside the realm most people are working. I love seeing Go used for things that aren\u0027t high throughput, low latency network services!",
					"date": "2018-01-30",
					"id": "dthg7m0",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "shuwatto",
					"content": "Geez, at first sight I thought this post came from /r/blender .\n\nGreat work!",
					"date": "2018-01-30",
					"id": "dthi9ny",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "hunterloftis",
					"content": "You just made my day.\n\nPS: I took the \"branched path tracing\" idea from Blender\u0027s Cycles.",
					"date": "2018-01-30",
					"id": "dthky3g",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "betamos",
					"content": "Just wow...",
					"date": "2018-01-30",
					"id": "dtgh37q",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "HanTheMan83",
					"content": "This is so cool! great work man!",
					"date": "2018-01-30",
					"id": "dtgkvfh",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hunterloftis",
					"content": "Thanks!",
					"date": "2018-01-30",
					"id": "dtgou1l",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "joushou",
					"content": "You should have given the Lambo a \"Hello World\" decal.\n\n(On the note of the Lambo, that front ~~left~~ right brake disk is making me twitch... It seems to lack its hub mount.)\n\nWhat\u0027s next? Ray bundling like Hyperion does? Seeing if you can get a noise-free output (how long did this noise-level take to render?)? Or do you feel like your for-fun project reached its end?",
					"date": "2018-01-30",
					"id": "dtgpa09",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hunterloftis",
					"content": "\u0026gt; You should have given the Lambo a \"Hello World\" decal.\n\nI\u0027m sadly not a 3D artist, so I\u0027ve been cobbling together models and environments from whatever I can find online. I would happily accept a \"Hello, World\" texture!\n\nThe problem with a hobby renderer is that [you can work on it indefinitely](https://github.com/hunterloftis/pbr/blob/master/NOTES.md#features-to-try). Given how long a 1080p image like this takes to resolve (this one took more than half a day, basically just left my computer on overnight), and that I work at Heroku, I\u0027d next like to make it network-distributed so I can scale it up and render something similar in a few minutes.",
					"date": "2018-01-30",
					"id": "dtgpsro",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "joushou",
					"content": "\u0026gt; so I\u0027ve been cobbling together models and environments from whatever I can find online\n\nThat explains why the lambo is parked on a skateboard ramp. :)\n\nI\u0027m glad you have something realistic to go forward on. Nothing is more annoying when you reach the end of a project and go \"now what?\".\n\nNetwork distribution is a great goal. How would one go about doing that? Restrict each node to a subset of the rays from the ~~light source~~ camera, merging the result?\n\nHow many bounces did you trace in the example photo, btw?",
					"date": "2018-01-30",
					"id": "dtgqhcp",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hunterloftis",
					"content": "\u0026gt; That explains why the lambo is parked on a skateboard ramp. :)\n\nYep! :)\n\n\u0026gt; Network distribution is a great goal. How would one go about doing that? Restrict each node to a subset of the rays from the camera, merging the result?\n\nThat\u0027s one way you could do it. I would probably try to minimize orchestration - as long as you pair the number of samples taken (per pixel) with the resultant light energy, you can just sum all of the results without distorting the value. So my plan is to have workers render one full frame at a time and then send back the frame as an rgbe image (with values \u0026gt; 255 and an alpha channel devoted to the number of samples taken). Then the collector can just sum everything together and act just as if it had taken all the samples itself!\n\n\u0026gt; How many bounces did you trace in the example photo, btw?\n\nJust the default (8). iirc, Pixar used 9 for Big Hero Six.",
					"date": "2018-01-30",
					"id": "dtgquxl",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "joushou",
					"content": "Orchestration is the root of all suboptimal parallelism...\n\nThat\u0027s a much simpler construct. I had forgotten the \"monte carlo\" part of \"monte carlo path tracer\", and thought for a moment that the slaves would have to be constrained in their tracing to avoid just creating the same output N times.",
					"date": "2018-01-30",
					"id": "dtgrrra",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "eid-a",
					"content": "What is a 3d physically based renderer\n\nIt sounds really cool, and complicated,  gonna look it up",
					"date": "2018-01-30",
					"id": "dtgy4gg",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hunterloftis",
					"content": "Pretty much my thoughts when I first heard of one :)\n\nHere are the two best quick/interesting intros to the ideas:\n\n- https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/\n- https://www.disneyanimation.com/technology/innovations/hyperion\n",
					"date": "2018-01-30",
					"id": "dtgyok8",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "eid-a",
					"content": "Thanks",
					"date": "2018-01-30",
					"id": "dtgyrkc",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "qspec02",
					"content": "Well this project taught me that I know dick about go...\n\nIncoming stupid questions:\n\nIn main.go\nWhat does `Loop:` do?  It looks like a goto label, but nothing seems to go to it.\n\nWhere is `options()` coming from?  It seems like it is the function from options.go, but options.go isn\u0027t imported anywhere into main.go.",
					"date": "2018-01-30",
					"id": "dth9pdx",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hunterloftis",
					"content": "Those are totally reasonable questions. Disclaimer: the first commit of this project was my first Go \"hello, world,\" so I\u0027m no expert either.\n\n\u0026gt; In main.go What does Loop: do? It looks like a goto label, but nothing seems to go to it.\n\nIn this case `Loop:` is a label so that the subsequent [break](https://github.com/hunterloftis/pbr/blob/eface2feaf493e995bdf172c1d81e64fc3fae4a8/cmd/pbr/main.go#L122) can break the `for` loop instead of the `select`.\n\n\u0026gt; Where is options() coming from? It seems like it is the function from options.go, but options.go isn\u0027t imported anywhere into main.go.\n\nYou couldn\u0027t access `options()` from outside of [the main package](https://github.com/hunterloftis/pbr/tree/eface2feaf493e995bdf172c1d81e64fc3fae4a8/cmd/pbr), but files in the same package can reference each other\u0027s private values. This is probably grossly inaccurate, but I think of all the files in a given package as being concatenated together into a single file.",
					"date": "2018-01-30",
					"id": "dthbk7k",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "theonlycosmonaut",
					"content": "That\u0027s amazing! I tried using Go to get some experience writing low-level GL but the furthest I got was some [basic lighting and mesh loading](https://scontent-syd2-1.xx.fbcdn.net/v/t34.0-12/22901307_10156294673597080_404434226_n.png?oh\u003d648c685dddd563f11d6d5b14771f6db1\u0026amp;oe\u003d5A7340FB). This blows it right out of the water!",
					"date": "2018-01-31",
					"id": "dthv2o0",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hunterloftis",
					"content": "I dunno, that actually looks pretty nice to me, just low-res. Is it OpenGL or a software rasterizer?",
					"date": "2018-01-31",
					"id": "dthw4m0",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "theonlycosmonaut",
					"content": "Thanks :). It\u0027s OpenGL, and it was for a game jam called lowresjam, so yep that was kind of deliberate! But still, thinking of how much effort it took to get it even to that stage... the mind boggles haha. Skimming the advanced parts of [learnopengl.com](https://learnopengl.com/) was terrifying.",
					"date": "2018-01-31",
					"id": "dthxtxg",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "letle",
					"content": "How much time did you spend on this project? Your master branch\u0027s history goes back 2 weeks but I felt like it\u0027s not all the effort you put in this project",
					"date": "2018-01-30",
					"id": "dtgotdw",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hunterloftis",
					"content": "I hacked on it months ago to the point where I knew enough Go to be useful at work, then put it away. Then over Christmas break I took it out again. I\u0027ve spent too many nights and weekends on it; my fiancee no longer endorses this project :)\n\nThe git history sucks; I chose to blow it away on master instead of continuing to fight with an accidentally-checked-in 3D blob under LFS that I couldn\u0027t, for the life of me, remove from the history. Once I realized Go uses github repos for dependency management, I didn\u0027t want to have megabytes of fixtures in what\u0027s essentially a released package.\n\n[Here is the actual first commit (Hello, World)](https://github.com/hunterloftis/pbr/commit/f9245fa4ade113d0a4b66da365bfc2dcede09875) from over six months ago.",
					"date": "2018-01-30",
					"id": "dtgpyp8",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-01-30",
					"id": "dtg1jcw",
					"isArchived": false,
					"isControversial": false,
					"score": -28
				},
				{
					"author": "Koala_T_User",
					"content": "Omg what have you done cynic ",
					"date": "2018-01-30",
					"id": "dtg3tkl",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "joushou",
					"content": "I\u0027m *really* curious what the deleted comment contained...",
					"date": "2018-01-30",
					"id": "dtgit47",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Koala_T_User",
					"content": "It said “who cares”",
					"date": "2018-01-30",
					"id": "dtgocxw",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "robvdl",
					"content": "Also I had a look at the authors reddit account, it seems all he does is post negative comments, seriously, what a horrible person.  I am pretty sure they thrive on negativity and hurting people.",
					"date": "2018-01-31",
					"id": "dtj8ewo",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Koala_T_User",
					"content": "Nah he’s just a troll that lacks talent. Nbd",
					"date": "2018-01-31",
					"id": "dtjc9fk",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "Just add \u0027emov\u0027 between r and e on reddit.com: https://www.removeddit.com/r/golang/comments/7twwhu/i_wrote_a_physicallybased_3d_renderer_to_learn_go/",
					"date": "2018-01-30",
					"id": "dtgmo2p",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "joushou",
					"content": "https://github.com/JubbeArt/removeddit/issues/1\n\nIt apparently hasn\u0027t worked for new threads since December... :(\n\nThanks though.",
					"date": "2018-01-30",
					"id": "dtgnzlo",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "It seems to have worked fine for this thread though.",
					"date": "2018-01-30",
					"id": "dtgom7y",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "joushou",
					"content": "Huh. I get the 401 error, even for the example thread on removeddit\u0027s frontpage...",
					"date": "2018-01-30",
					"id": "dtgpbe7",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "There have been quite a few of these before like ceddit. Most were shut down. Maybe this one have share the same fate. But anytime I have tried it on this subreddit it has worked. For example when I wanted to see the deleted comments of this thread, I took the URL: https://www.reddit.com/r/golang/comments/7twwhu/i_wrote_a_physicallybased_3d_renderer_to_learn_go/\n\nand simply added \u0027emov\u0027 between r and e: https://www.removeddit.com/r/golang/comments/7twwhu/i_wrote_a_physicallybased_3d_renderer_to_learn_go/",
					"date": "2018-01-30",
					"id": "dtgplu6",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "joushou",
					"content": "https://screenshots.firefox.com/IUINOyx1n4Y3L45k/www.removeddit.com\n\nOh well. Another kind soul shared the comment. I\u0027ll keep it on my list, in case it works some other time. Thanks!",
					"date": "2018-01-30",
					"id": "dtgq7f8",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-01-30",
					"id": "dtg86xv",
					"isArchived": false,
					"isControversial": false,
					"score": -31
				},
				{
					"author": "shovelpost",
					"content": "Speak for yourself. I think this is bloody amazing.\n\n\u0026gt; Oh no bringing the bots in to downvote my comment. I’ll just post another and another.\n\nAnd people will downvote again and again because this is not sane behavior. Really.",
					"date": "2018-01-30",
					"id": "dtgdg0c",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				}
			]
		},
		{
			"author": "HornedKavu",
			"date": "2017-02-16",
			"id": "5uhu4b",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.8 is released",
			"comments": [
				{
					"author": "ralfhaug",
					"content": "Google AppEngine is still stuck on 1.6. Would be nice if Google could get it up to date with 1.8. Anyone here from Google?\n\nSee also this https://groups.google.com/forum/#!topic/google-appengine-go/QTCsm5aLojU",
					"date": "2017-02-17",
					"id": "dduoqqj",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "UniverseCity",
					"content": "I believe they update on every other iteration, so expect one around the time 1.8.1 is released.",
					"date": "2017-02-17",
					"id": "ddv1q1p",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mcouturier",
					"content": "Just in time for the party!! Which I don\u0027t have, alone, here.. in Morocco...",
					"date": "2017-02-16",
					"id": "ddu65hn",
					"isArchived": true,
					"isControversial": false,
					"score": 36
				},
				{
					"author": "anacrolix",
					"content": "Dress up some goats as Gophers",
					"date": "2017-02-17",
					"id": "dduulum",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "titpetric",
					"content": "    __        __                _\n    \\ \\      / /__   ___   ___ | |\n     \\ \\ /\\ / / _ \\ / _ \\ / _ \\| |\n      \\ V  V / (_) | (_) | (_) |_|\n       \\_/\\_/ \\___/ \\___/ \\___/(_)\n    \n\nEdit: * i hate markdown",
					"date": "2017-02-17",
					"id": "ddvg3sr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "karma_vacuum123",
					"content": "`go forevever alone`",
					"date": "2017-02-17",
					"id": "ddvj3vu",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "vibbix",
					"content": "I can\u0027t wait to try it out on ARM! On a 1GHz single-core SoC like the CHIP, that can be all the difference.",
					"date": "2017-02-16",
					"id": "ddu7fbg",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "titpetric",
					"content": "That proved to be completely un-googlable.",
					"date": "2017-02-17",
					"id": "ddvg8bl",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "StormsMessenger",
					"content": "Do you do some Go programming for a CHIP?\n\nI\u0027ve always wanted to know how it performs. Can you provide some insight please?",
					"date": "2017-02-19",
					"id": "ddxma90",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "vibbix",
					"content": "Yes. For a single core processor, it handled pretty OK. I was doing like some light web servers, as well as some harder tests using ray tracing. It performs very well, especially compared to interpreted languages like Python which routinely chew up most of the CPU",
					"date": "2017-02-19",
					"id": "ddxwumw",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-02-17",
					"id": "dduoh15",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "fancy_pantser",
					"content": "Here are the tasks marked for 1.9 so far. This will be in flux, of course, but it\u0027s a good place to see where the biggest focus will be.\n\nhttps://github.com/golang/go/milestone/49",
					"date": "2017-02-17",
					"id": "ddupnf9",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "itsenov",
					"content": "On my ODROID C2  (arm64) build time is 25% faster (compared to 1.7.5). Binary size is 5% smaller. \nOn my Linux virtual machine, time is 15% faster. Binary size however is up by 1%.",
					"date": "2017-02-17",
					"id": "ddvpfq1",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Sir_not_sir",
					"content": "Damn it! I just installed Go last night!",
					"date": "2017-02-16",
					"id": "ddu3q9y",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "icholy",
					"content": "    sudo rm -rf /usr/local/go\n    curl https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz | sudo tar -C /usr/local -zx\n",
					"date": "2017-02-16",
					"id": "ddu5mdb",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "elingeniero",
					"content": "No `rustup update` ?\n\nGo is so far behind. Such a disgrace. ",
					"date": "2017-02-17",
					"id": "ddud6zj",
					"isArchived": true,
					"isControversial": false,
					"score": -27
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; Such a disgrace.\n\nI do not like your tone but it is true that Go could use some kind of tool to help automate the update of the installed version. \n\nThe first step to have a default GOPATH location is done. I think Andrew was brainstorming some kind of tooling that would help less experienced users with the procedure.",
					"date": "2017-02-17",
					"id": "ddufc2d",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "comrade-jim",
					"content": "It\u0027s called a \"package manager\"",
					"date": "2017-02-17",
					"id": "ddug50q",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; It\u0027s called a \"package manager\"\n\nNot really. I am talking about a tool that specifically updates the installed Go version. A package manager does a different job. It is not hard to use 3 commands but anything that makes the language more user friendly especially for newcomers is welcome in my opinion.\n\nEdit: I see now that you meant a package manager for the operating system. I was thinking of a programming language\u0027s package manager which might not even be called that. My bad.",
					"date": "2017-02-17",
					"id": "dduggsx",
					"isArchived": true,
					"isControversial": false,
					"score": -6
				},
				{
					"author": "mixedCase_",
					"content": "\u0026gt; Not really. I am talking about a tool that specifically updates the installed Go version. A package manager does a different job.\n\nWhy do you need one for a *specific* piece of software? Go doesn\u0027t suffer from the Rust divide between stable and nightly. It can depend on the system\u0027s package manager. I just ran `sudo pacman -Syu` and got the update to Go 1.8 and the go tools (godoc, gorename and so on).",
					"date": "2017-02-17",
					"id": "dduiint",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; I just ran sudo pacman -Syu and got the update to Go 1.8 and the go tools (godoc, gorename and so on).\n\nI do not need it myself necessarily. It is to help newer users. Great you did it with one command. Now tell me that one command for windows and MacOS. That tool would help install and update Go and it would be the same for all platforms. Andrew Gerrand was working on something like that.",
					"date": "2017-02-17",
					"id": "ddujgsx",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "mixedCase_",
					"content": "\u0026gt; Now tell me that one command for windows and MacOS\n\nmacOS:\n\n    brew update \u0026amp;\u0026amp; brew upgrade go\n\nWindows:\n\n    choco upgrade golang\n\nFor Windows I believe OneGet is an option as well, but it requires the Chocolatey provider anyway.\n\n",
					"date": "2017-02-17",
					"id": "dduk9hb",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; choco upgrade golang\n\nI do not use mac but I do use windows and I know that choco is not part of windows. You can\u0027t just tell a new user, \"Hey in order to install or update Go, go and install that 3rd party program\". The point is to have this case handled by the standard tooling and make it easier for everyone.\n\nAlso in some cases the package managers do not guarantee that you can install the latest version of Go. For example, at the moment of writing, in Ubuntu LTS, \nyou cannot get Go 1.8 through `apt`. Such a tool would also handle that case.\n\nAnyways I am not here to argue about this matter. I was only replying to elingeniero. I update Go just fine through the command line. I am not saying we *need* such a tool. All I am saying is that it would be nice if we had it especially for newer users.",
					"date": "2017-02-17",
					"id": "ddumiyw",
					"isArchived": true,
					"isControversial": false,
					"score": -3
				},
				{
					"author": "ur_0",
					"content": "Just use `gimme`.",
					"date": "2017-02-17",
					"id": "dduflvn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rodaine",
					"content": "https://github.com/travis-ci/gimme",
					"date": "2017-02-17",
					"id": "dduhvq2",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; Just use gimme.\n\nWhat is that?",
					"date": "2017-02-17",
					"id": "ddufwlk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "geodel",
					"content": "`rustup update` is for Rust.",
					"date": "2017-02-17",
					"id": "dduf21j",
					"isArchived": true,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "myzt",
					"content": "I\u0027m pretty sure this will make your OS package manager freak out eventually.",
					"date": "2017-02-16",
					"id": "ddu6761",
					"isArchived": true,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "ovulateworld",
					"content": "No it won\u0027t. `/usr/local` is the place where you\u0027re meant to install software that doesn\u0027t come from your package manager.",
					"date": "2017-02-16",
					"id": "ddu7k85",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "devopsia",
					"content": "Unless you\u0027re on OS X, in which case you\u0027ll probably piss of homebrew!",
					"date": "2017-02-16",
					"id": "ddu85gs",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Rican7",
					"content": "Yea, though that\u0027s because OS X isn\u0027t built with Homebrew in mind. It\u0027s a 3rd party package manager, not an \"OS package manager\"... if that makes any sense. :P",
					"date": "2017-02-16",
					"id": "ddubtbm",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "IAmSlar",
					"content": "FreeBSD puts packages in /usr/local as well and it\u0027s definitely built with packages (or ports) in mind.\n\n\nThe rationale is that outside of /usr/local is the operating systems files and should only be touched by operating system upgrades, not third party software.\n\n\nBut I can understand the Linux view as the boundary between base operating system and third party software is a bit blurry.",
					"date": "2017-02-17",
					"id": "dduhv6f",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "devopsia",
					"content": "Yeah, although it sure can get confusing if you also manually install packages in /usr/local!\nI really wish OS X had a real package manager.",
					"date": "2017-02-17",
					"id": "ddud6ut",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "epiris",
					"content": "Are their a lot of developers that use system packages for anything that isn\u0027t related to the window manager or desktop environment? Not asking in a snarky way I\u0027m just curious, doesn\u0027t seem worth any of the restrictions given how simple it is to setup dev envs for every language.",
					"date": "2017-02-17",
					"id": "ddujxhy",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TheMerovius",
					"content": "I use the package manager for everything that isn\u0027t go. a) It\u0027s annoying to need dev environments and b) it\u0027s stupid to opt out of the benefit of other people maintaining your system and applying the updates and security patches. If something isn\u0027t packaged I will usually just end up not using it, because ain\u0027t nobody got time for that BS.",
					"date": "2017-02-17",
					"id": "ddurfv3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "epiris",
					"content": "Eh, if it\u0027s stupid to opt out of the benefits of other people maiming .. *your* system why do you not use the Go package? That was rhetorical, the same value latest versions, sane configurations, but most of all much more secure. In general system Packages as designed today are an artifact of older times and it shows. \n\nThat said I can\u0027t think of anything that took me more than a minute or two to integrate securely into my system since you can usually download static linked bins, set an env var or two and be good to go. Even stuff I have to compile from source (mpv, ffmpeg, kernel, systemd, lx{dm,qt,panel,etc} and a few others) is pretty fast these days and mostly one command afks. I run the versions I choose and can fix things that annoy me as soon as they happen. So in my opinion big gains for very little cost.",
					"date": "2017-02-17",
					"id": "ddut3o3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; Eh, if it\u0027s stupid to opt out of the benefits of other people maiming .. your system why do you not use the Go package?\n\nBecause I often switch versions and in general use tip. Because it\u0027s something I\u0027m working on, so it makes sense to invest extra maintenance effort into it. But even there, I\u0027m not updating regularly enough (for example: I just updated from go1.8rc1 to go1.8. Meaning I didn\u0027t update for over a month. For anything connected to the internet that is a *horrible* update cadence).\n\n\u0026gt; That was rhetorical, the same value latest versions, sane configurations, but most of all much more secure.\n\nLooking at things I installed via the go tool, as opposed to my package manager, the times since last update go back until March 2016. And they would go back even further, but I only got this laptop in March. Claiming that manually keeping your software updated works is just a plain falsehood.\n\nAnother data point is given by Windows, where there is no centralized package management and it\u0027s insecure af. Because *no one updates their shit manually*.\n\n\u0026gt; I run the versions I choose and can fix things that annoy me as soon as they happen\n\nIf it works for you, that\u0027s great. But to me it seems to have zero advantages over just using automated updates for everything. Keeping up to date about updates and security patches (not to say the random breakages that happen when you install bleeding edge) for *every software I run* would easily take hours every day. These hours are better spent with other things, my computer is a tool to get my job done, not a job in and off itself.",
					"date": "2017-02-17",
					"id": "ddutoqr",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "epiris",
					"content": "\u0026gt;Because I often switch versions and in general use tip. Because it\u0027s something I\u0027m working on, so it makes sense to invest extra maintenance effort into it. But even there, I\u0027m not updating regularly enough (for example: I just updated from go1.8rc1 to go1.8. Meaning I didn\u0027t update for over a month. For anything connected to the internet that is a horrible update cadence).\n\nWhat extra maintenance effort? It\u0027s a few keystrokes to git clone \u0026amp;\u0026amp; ./all.bash. For anything connected to the internet- if you are relying on software updates to stay secure your system is not secure. Hardened systems (such as mine) assume their software running locally is vulnerable by default and treats them as such. Any of my internet facing software packages could have a remote code execution vulnerability in the next hour and I wouldn\u0027t care. If a application is internet facing the most data I have to lose is the data it persists in memory. What is my inconvenience for this security? Nothing, I download a prebuilt binary and configured the applications namespaces, cgroups env vars, launcher, whatever other tiny details and run it inside a stateless vm or container. People who use the system packages however- have all data owned by their user compromised. Sounds like I am better protected by security issues to me.",
					"date": "2017-02-17",
					"id": "ddvj4wl",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; It\u0027s a few keystrokes to git clone \u0026amp;\u0026amp; ./all.bash.\n\nThe effort is in keeping up to date on *when to do that*. Getting all important updates timely, while avoiding breakages. This is the value added by a package manager, not the difference between typing `apt-get upgrade` and `make \u0026amp;\u0026amp; make install`.\n\n\u0026gt; For anything connected to the internet- if you are relying on software updates to stay secure your system is not secure.\n\nYou can not seriously believe, that updates are irrelevant to security.\n\n\u0026gt; Any of my internet facing software packages could have a remote code execution vulnerability in the next hour and I wouldn\u0027t care.\n\n[You should, though](https://en.wikipedia.org/wiki/Defence_in_depth_(non-military))\n\n\u0026gt; What is my inconvenience for this security? Nothing, I download a prebuilt binary and configured the applications namespaces, cgroups env vars, launcher, whatever other tiny details and run it inside a stateless vm or container. \n\n\"What is my inconvenience? Nothing. Just this massive amount of work I need to do and tune every time something changes\"\n\nAgain, if that works for you, that is fine. But the answer to your original question\n\n\u0026gt; Are their a lot of developers that use system packages for anything that isn\u0027t related to the window manager or desktop environment? \n\nis \"yes\". Most people, developers or not, value their own time too much to not accept the convenience of having other people manage their software.",
					"date": "2017-02-17",
					"id": "ddvorqd",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "epiris",
					"content": "\u0026gt; You can not seriously believe, that updates are irrelevant to security.\n\nYou can not seriously believe, that I said that? To start, the text is not there! I did not say that with mutual exclusion nor is it implied implicitly through any tone. You understand that this specific straw man makes you look just silly right? It sets me up to put you in a straw man that has a stronger implication. \n\nSince you believe that my additional security measures imply I must not update my software *(which is funny since the benefit I annotate in my posts is how you may use more up-to-date software)*, you must believe that updating software is all you need to do to keep a system secure. Right? Maybe you don\u0027t believe that, maybe you know being secure means covering all your surface area, mitigating risks across N unknown vectors and that keeping software up to date is just a small portion that by itself leaves you insecure. You are accepting all of the risk between windows of software updates needlessly. \n\n\u0026gt; \"What is my inconvenience? Nothing. Just this massive amount of work I need to do and tune every time something changes\"\n\nWow, you took it up a notch from straw mans to just rewriting my sentences to suit your position. That is impressive! Here let me try.\n\n\u0026gt; \"I can\u0027t refute the amount of time those things take directly because I don\u0027t understand them. I\u0027ll just say it\u0027s a massive amount of work and tuning every time something changes. I won\u0027t define what change is because I would have to understand the process- it will be easier to simply discard his repeated argument that he spends very little additional time doing these things.\n\nAm I doing it right?! This is fun! WEEEEE!!!!",
					"date": "2017-02-17",
					"id": "ddvt1bi",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "stone_henge",
					"content": "I use the package manager as much as possible. It makes it easier to... manage packages. I\u0027m not sure what you mean by restrictions either. If I really, really need something that isn\u0027t in the package manager, I\u0027ll usually get it and install it manually somewhere in $HOME. It\u0027s just that when I don\u0027t, the package manager has a huge advantage in that it will maintain the installed software by delivering software updates as they are available. As for development environments, I guess Unix is sort of a lifestyle to me in a sad and creepy way. I want my tools available in the same environment because when I\u0027m at the computer I use them all the time. Every environment is my dev environment!\n\nMy ideal system is one that can be replicated by getting a list of installed packages and copying $HOME.",
					"date": "2017-02-17",
					"id": "ddvbz7h",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shard_",
					"content": "\u0026gt; I\u0027m not sure what you mean by restrictions either.\n\nWell, you\u0027re restricted to a single version of a package at a time, and you don\u0027t get to choose that version. If you were working on an application where stability is important then you probably don\u0027t want dependencies and toolchains randomly being updated. Or, if you were working on something more bleeding-edge then you might want a more recent version of a package than is provided by your package manager. Or, you might be working with developers who prefer a different distro with a different system package manager. Or, you might want a special version of a package, such as one built in debug mode. Or, all of those things at the same time...",
					"date": "2017-02-17",
					"id": "ddvgo33",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "stone_henge",
					"content": "\u0026gt; Well, you\u0027re restricted to a single version of a package at a time, and you don\u0027t get to choose that version.\n\nThe question isn\u0027t \"are you *only* using the system package manager\", it\u0027s \"are you using the system package manager\". I very much get to choose when not to use it, and I do so when I need to. At a previous job, this meant using chroot bundles, docker and virtual machines at times. My principle is still to avoid it to the greatest extent possible. In general it has been more applicable to my personal projects than my professional work. At work, it\u0027s more of a \"compilation environment\" and an \"execution environment\", distinct from my idea of a \"development environment\".\n\n\u0026gt; If you were working on an application where stability is important then you probably don\u0027t want dependencies and toolchains randomly being updated. Or, if you were working on something more bleeding-edge then you might want a more recent version of a package than is provided by your package manager.\n\nYou can provide your own packages to the package manager. At my current workplace we have a Debian repository of the tools we need to develop, and it\u0027s not that hard to whip up a .deb.\n\n\u0026gt; Or, you might be working with developers who prefer a different distro with a different system package manager.\n\nThen *they* are free to virtualize and use some sort of immutable development environment. For all I care, other developers may be running NetBSD.",
					"date": "2017-02-17",
					"id": "ddvj7o3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "epiris",
					"content": "Restrictions are due to the package maintainers being bound by the complexities of dependency management. Linux distributions create their own work with the way software is packaged today. Ubuntu \"snap\" I think was a step in the right direction conceptually, but I hear the implementation isn\u0027t sound (they use algorithms based on the current package system to generate dependencies.. so you end up with many versions of a package on your system as each needs its own copy). Arch has a slightly more pragmatic approach but also suffers from the same fixation on dynamic linking, they just alleviated the pain points by release cycles and deprecation rather then remove the reason of the pain.\n\nWhich I believe is dependencies and linking. Requiring software package A to depend on software package B. You just increased the connectivity of your entire directed graph. For vertices with many edges in your largest SCC\u0027s with minimal (or no) dependent vertices dynamic linking makes sense. These are often the types of libraries that most software depends on like libc*, libstdc++*, libgcc, zlib* and the really large notoriously difficult to build libraries for desktop envs/win mngrs like libqt, libx11*, gtk and gnome families, etc. These make sense to be distribution specific, like stated in my post. For the 95+% of software libs that have 1-10 dependencies it\u0027s not worth the massive inflation to graph complexity. The core libs sacrifice cycles to the busy work of all the other libraries. All of this so you.. didn\u0027t use 250kb of diskpace? It\u0027s the only reason I think that has merit (as little as it has) as I find every other argument invalid.\n\nSecurity is often the BIGGEST reason I hear for dynamic linking. But this paradigm itself is a large contributor to security vulnerabilities and bugs in general, it creates the demand for \"PATCHES\". The reason they are called patches by you and /u/TheMerovius is because of updating to the latest version of the vulnerable software is often so difficult due to the sheer number of vertices in the graph affected it\u0027s impossible to get the hundreds of contributors to come in and push the packages forward with any sort of haste. Even thought a security vulnerability may only affect a dozen packages, you can not update it to the latest version which likely has many other fixes (possibly security) because of maybe a single set of far vertices that lead to larger SCCs (which if simply static linked, could split the SCC). So instead of using the latest versions, with many other bug fixes.. they apply security patches. Sometimes these patches cause additional bugs or miss a vector of the attack because other, outdated portions of the code is not covered. Can you imagine being a dedicated library maintainer for a widely depended on Go library, being on version 3.8.. and fixing a security bug in one of the hottest and central pieces of your software? Imagine the bug has been there since version 2.1, but the surrounding regions and it\u0027s call site, callers and so on have changed over the last lets say, 15 minor versions.\n\nNow CVE, distros have to patch 2.8, 3.0, 2.3.4-beta (WTF This was only out for 1 week?) and so on. The patches are often not directly apply-able to these versions so people who are not SME\u0027s in the domain of the problem, security in general and the code base have to adapt them. They may or may not reach out to the developers to verify the validity of patches. So you can see where bugs (or ineffective security patching) often stems from. Security patches cause bugs, or don\u0027t fix security. Above happens, but inverse, a nasty bug has users whining on the bug trackers, they downstream a \"fix\" adapted by a dedicated, bless his heart 10 year package maintainer, but the fix in this specific version assumes the call site is guarded from overflow by a different call path which is not always followed in this release. Bug fixes can cause security flaws.\n\nThis in my eyes is incredibly silly, a bunch of people creating their own work. I get how we got their- I get how we are in many ways stuck here. You have thousand+ contributors to debian for example doing very difficult work for free, with a large infrastructure built for this paradigm. This isn\u0027t me shitting on them. I commend them and it helps a lot of users out there and makes linux more accessible.\n\nI just think overtime refactoring the paradigm for these distros would be a huge benefit, shift more of the burden of distribution on developers of software. Create .{debian|arch|ubuntu|dist}.yml whatever similar to travis.yml for CI into their systems. Enforce the same signing requirements for security and restrict build environment to have the minimal set of shared libraries so applications can benefit from regular bug fixes and immediate security fixes. Have a approval process if needed to review commits as you upstart- but remove the busy work of the middle man and ultimately remove the middle man all together. This is how we are building software today.\n\nThat said- doing the above myself, takes zero effort on my part. While allowing me to enjoy a very secure and trouble free workstation that I can quickly fix annoying bugs (or disable features) in my desktop env with a quick *make* and *systemctl restart lxdm*. Just food for thought, came out a bit lengthy but I\u0027ve had this conversation with friends too who don\u0027t really understand my position, taking a \"reinvent the wheel\" side and I have somewhere to direct them to now. :- ) Have a good one.",
					"date": "2017-02-17",
					"id": "ddvi8ja",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "icholy",
					"content": "How so?",
					"date": "2017-02-16",
					"id": "ddu71u1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "scottjbarr",
					"content": "Install multiple versions to different locations if you want, and set your GOPATH and PATH accordingly.\n\nI keep a few different versions in ~/.go/versions as it gives me a nice way to take a look at beta and rc versions without uninstalling/installing a working version.\n\n    $ ls -1 ~/.go/versions/\n    go1.7.5\n    go1.8\n\nI have a default config that I source from my ~/.bashrc\n\n    $ cat ~/.goconfig \n    export GOROOT\u003d$HOME/.go/versions/go1.8\n    export GOPATH\u003d$HOME/p/go\n    export PATH\u003d$GOPATH/bin:$GOROOT/bin:$PATH\n\nIt keeps me happy.",
					"date": "2017-02-17",
					"id": "dduquxq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TheMerovius",
					"content": "I only have one location. But it takes less than 2m to rebuild a different go version, so why bother?",
					"date": "2017-02-17",
					"id": "ddurgpt",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "driusan",
					"content": "I misread that as \"ms\" and was wondering what kind of insane dev machine you have..",
					"date": "2017-02-17",
					"id": "ddvqxot",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "godeb install",
					"date": "2017-02-16",
					"id": "ddubam2",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "titpetric",
					"content": "If there ever was a case for docker: `docker pull golang:1.8` \u0026amp; joy",
					"date": "2017-02-17",
					"id": "ddvgcbt",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "H1Supreme",
					"content": "The sort feature on slices is a nice addition.",
					"date": "2017-02-17",
					"id": "ddv39l1",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "robert_zaremba",
					"content": "\u0026gt;  When explicitly converting a value from one struct type to another, as of Go 1.8 the tags are ignored. Thus two structs that differ only in their tags may be converted from one to the other.\n\nDoest this creates a copy or any additional memory footprint?",
					"date": "2017-02-17",
					"id": "dduvl68",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ooesili",
					"content": "Converting one struct to another type will create a copy, because the old value has to remain usable, but 1.8 did not add or change that fact. 1.8 simply allows more types to be converted between each other (the copying has always been there). TL;DR; memory usage has not been affected.",
					"date": "2017-02-17",
					"id": "ddvmq6c",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "j7b",
					"content": "I like how every one liner from Effective Go is becoming a function or type (or package as of 1.7) in the standard library. ",
					"date": "2017-02-18",
					"id": "ddwuia6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "CodeHex",
					"content": "I have been got gopher\u0027s doll at go1.8 release party.\nSo, I am very happy!!\n\nHappy release go1.8!!",
					"date": "2017-02-17",
					"id": "dduo9vj",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "neofreeman",
					"content": "Won\u0027t be using it right away, have heard about some performance slow down in HTTP packages. But can\u0027t wait to try it for other stuff.\n\nEdit: Dear down voters I use golang to run servers on RPi level SoC boards and I gave you an observation. I just brought it up so anyone should know. Microseconds or Milliseconds don\u0027t matter if there is a regression there is one and there is nothing wrong in reporting it. ",
					"date": "2017-02-17",
					"id": "dduo6py",
					"isArchived": true,
					"isControversial": false,
					"score": -12
				},
				{
					"author": "jy3",
					"content": "You\u0027re right, 0.5 microseconds will totally impact you ...",
					"date": "2017-02-17",
					"id": "ddut3y2",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "Damien0",
					"content": "Where did you see http slowdowns specifically?",
					"date": "2017-02-17",
					"id": "dduoohp",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "vsmetal",
					"content": "it is true there has some reported slowdowns, but it\u0027s reslly negligible unless you are uber or google.\n\nhttps://github.com/golang/go/issues/18964",
					"date": "2017-02-17",
					"id": "dduoucg",
					"isArchived": true,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "groob_mobile",
					"content": "More importantly, it\u0027s negligible unless you\u0027re running hello world example servers in production.\n\nThe reported \"slowdown\" is a bit of a nonissue when you take into account all the 1.8 performance improvements that show up in a production server which does more than a hello world app. \n\nPS: Having the issue littered by unconstructive comments by a known troll makes it harder to take serious. ",
					"date": "2017-02-17",
					"id": "ddup5nh",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "Damien0",
					"content": "Thanks for the link. Interesting thread. Agree, it\u0027s quantifiable non-issue... The performance overhead is literally 0.5us. I mean come on!",
					"date": "2017-02-17",
					"id": "dduqadm",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "very-little-gravitas",
					"content": "\u0026gt; Microseconds or Milliseconds don\u0027t matter \n\nWell, if your concern is about performance, then yes, the unit of measurement and the overall timing do matter :) For example a *100% increase* in latency from 0.0001ms to 0.0002ms wouldn\u0027t concern me, but a 10% increase from say 10ms to 11ms might a little more. \n\nThis slowdown https://github.com/golang/go/issues/18964 is actually a great lesson about just how worthless microbenchmarks are. Not sure if people will learn that lesson though. \n\nIf this is your only concern about 1.8, I\u0027d jump in - the water\u0027s fine, some large sites have been testing it and finding nothing but performance increases (GC and CPU time). \n\n",
					"date": "2017-02-17",
					"id": "dduv3ae",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				}
			]
		},
		{
			"author": "KEANO_",
			"date": "2016-08-15",
			"id": "4xwhph",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.7 is released",
			"comments": [
				{
					"author": "mwholt",
					"content": "Go 1.7 is Go 1.7 RC6, no code changes. 😎",
					"date": "2016-08-15",
					"id": "d6izqi7",
					"isArchived": true,
					"isControversial": false,
					"score": 46
				},
				{
					"author": "bradfitz",
					"content": "We finally did it!",
					"date": "2016-08-16",
					"id": "d6j5z6o",
					"isArchived": true,
					"isControversial": false,
					"score": 70
				},
				{
					"author": "TheOldBladeRunner",
					"content": "Thanks for all the hard work.",
					"date": "2016-08-16",
					"id": "d6jbs5y",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "dlsniper",
					"content": "It actually has a small code change :) ",
					"date": "2016-08-16",
					"id": "d6jeuol",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "KEANO_",
					"content": "Without looking into the repo: Could it be possible that this change affects the output of \"go version\"? :D",
					"date": "2016-08-16",
					"id": "d6jicai",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "dlsniper",
					"content": "No. Hint, it\u0027s related to testing ;)",
					"date": "2016-08-16",
					"id": "d6k93n7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "broady",
					"content": "Yes, that and docs are the only changes.\n\nhttps://github.com/golang/go/compare/go1.7rc6...go1.7\n\nNot sure what /u/dlsniper is referring to.",
					"date": "2016-08-18",
					"id": "d6m5v6a",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "timbutlerau",
					"content": "Initial tests certainly show an anecdotal build time improvement on a few tests I\u0027ve run, haven\u0027t compared the binary sizes yet.\n\nNice release!",
					"date": "2016-08-16",
					"id": "d6jd6ok",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "nyoungman",
					"content": "One of the binaries I recompiled was 64% the size. Even after zipping the binaries, there was a noticeable half-a-MB difference. Pretty nice to see.",
					"date": "2016-08-16",
					"id": "d6jdqqo",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "GBACHO",
					"content": "Saving 512k in the day where online storage is like $.02 / gig. Super important!\n\nCompile and execution times are huge wins though",
					"date": "2016-08-16",
					"id": "d6jdsuu",
					"isArchived": true,
					"isControversial": false,
					"score": -15
				},
				{
					"author": "nyoungman",
					"content": "IMO they are all big wins. Size isn\u0027t just about storage space, it\u0027s also about download times and bandwidth used.",
					"date": "2016-08-16",
					"id": "d6je5pp",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "GBACHO",
					"content": "Fair enough.",
					"date": "2016-08-16",
					"id": "d6jfeeq",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "MrPhatBob",
					"content": "There\u0027s been a load of push-back from my team on Go because of its executable size, saving 512k on our embedded platform is significant.",
					"date": "2016-08-16",
					"id": "d6jeggr",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "earthboundkid",
					"content": "The solution is just to write *all* your code in Go as a busy box so you only pay once for static linking. :-)",
					"date": "2016-08-16",
					"id": "d6jjo4n",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "MrPhatBob",
					"content": "My plan for v2 is to use mbedOS and Go.\n\n",
					"date": "2016-08-16",
					"id": "d6jnyki",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "darkmagician2",
					"content": "Wouldn\u0027t Rust be better for embedded systems? ",
					"date": "2016-08-16",
					"id": "d6jrqdr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "MrPhatBob",
					"content": "It has some strong arguments for it, and is on the cards for future bench marking. I am pragmatic regarding the *right* solution, it has to be as much about the community support, the tooling and peripheral projects as pure code size and speed.",
					"date": "2016-08-16",
					"id": "d6jwud5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "leidegre",
					"content": "Binary size or code size actually makes a performance difference to. Code bloat (large function bodies for comparatively small functions) are less efficient. It\u0027s all really good news. And given the track record of past releases I expect to see a small trend of further improvements being made on top of this release.\n\nStorage is cheap but you want your executable to be sitting in the L1 instruction cache. Which is somewhere between 32K and 64K on modern x86 CPUs...",
					"date": "2016-08-16",
					"id": "d6jezwx",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "cogman10",
					"content": "Not really true.\n\nIt is a complex problem and \"smaller is better\" isn\u0027t necessarily true.\n\nFor example,  a method like\n\n    func a() {\n      b();\n      c();\n      d();\n    }\n\nwill pretty much universally get faster by inlining methods b, c, and d.\n\nHowever, something like\n\n    func a() {\n      if (x) {\n        b();\n      }\n      if (y) {\n        c();\n      }\n      if (z) {\n        d();\n      }\n    }\n\nMay or may not get faster depending on how often x, y, and z are true.\n\nThere are many optimizations that make things larger.  Inlining, loop unrolling, and even things like code alignment for instruction cache optimization.  It is a tricky problem and a general \"bigger/smaller is better\" is not true.\n\nBinary size and performance are loosely related.",
					"date": "2016-08-16",
					"id": "d6k0uwx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "leidegre",
					"content": "I thought I made it super clear when I said large for comparatively small amount of \"something\". C++ templates are a good example of this. Template instantiation can lead to a ridiculous code/binary size.\n\nToo much inlining will slow things down to. Like you said it\u0027s a complex problem. I only made the comment in reference to the size argument. Nothing more.",
					"date": "2016-08-16",
					"id": "d6kacea",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "cogman10",
					"content": "C++ templates are actually the opposite example you are trying to make.  The reason C++ templates explodes things is because it is making new functions for every type.  While compilation time goes up, runtime goes way down doing this.  This is because the compiler doesn\u0027t have to insert type checks and conversions into the runtime.  Further, templates allow the compiler to avoid things like virtual tables and can result in some of the specific methods getting smaller in some cases.\n\nCPU instruction caches are smart.  They aren\u0027t just blindly loading blobs of code that is near the instruction pointer, they are loading up code based on the call sites in the current method and the instruction pointer.  Data caches have to be a little dumber because it is very hard for them to know exactly where in data the program is going to next.  However, where the instructions are going next (or could go next) fall out pretty naturally.  It is a problem that already has to be solved for branch prediction.",
					"date": "2016-08-16",
					"id": "d6kbwnm",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "leidegre",
					"content": "You are intentionally trying to misunderstand me.",
					"date": "2016-08-16",
					"id": "d6kcssn",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "cogman10",
					"content": "What am I misunderstanding?\n\n\u0026gt; Binary size or code size actually makes a performance difference to.\n\nYou are saying that code and binary size is correlated with performance.  I\u0027m not sure I agree with this.\n\n\u0026gt; Code bloat (large function bodies for comparatively small functions) are less efficient.\n\nHere you are saying that if you have a large function and a small function doing the same thing, the large function will be slower.  Correct?  If so, then that is not true. Look at inlining and loop unrolling as counter examples.\n\n\u0026gt; Storage is cheap but you want your executable to be sitting in the L1 instruction cache. Which is somewhere between 32K and 64K on modern x86 CPUs...\n\nHere you are saying your entire executable should fit in L1 cache. Again, not true.  Having an executable that is larger than L1 cache and one that is smaller than L1 cache won\u0027t have major impacts on performance because the CPU is going to work hard to make sure L1 is populated with instructions that are relevant to the current execution.  There is little to no benefit in shooting for small executable size.  Especially since the CPU instruction caches are really pretty smart.  For an application that is 1mb vs 20kb in size doing the same thing, there will be no real performance difference due to the size difference.\n\n\u0026gt; I thought I made it super clear when I said large for comparatively small amount of \"something\". C++ templates are a good example of this. Template instantiation can lead to a ridiculous code/binary size.\n\nYou are trying to make the point that templates will increase the size of the executable which will ultimately harm performance.  That is nonsense.  I don\u0027t misunderstand you, you are simply wrong.  Executable size has nothing to do with execution performance.  End of story.\n\nFurther, Templates don\u0027t result in larger functions (which is what you imply).  Rather, they result in lots of small functions.\n\nWhat am I misunderstanding?",
					"date": "2016-08-16",
					"id": "d6kdcf6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "leidegre",
					"content": "You are clearly knowledgable enough to understand how this stuff works. Yet, you\u0027ve interpreted what I\u0027ve written in ways which seem wrong to you.\n\nNothing I\u0027ve said is wrong or incorrect however you seem to think that my comment is framed as if it\u0027s an all or nothing proposition. \n\nI encourage you to look at these slides as they may do a better job explaining the situation than I have managed so far.\n\nhttps://www.slideshare.net/mobile/DICEStudio/executable-bloat-how-it-happens-and-how-we-can-ght-it\n\n",
					"date": "2016-08-17",
					"id": "d6ktadm",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jakub_h",
					"content": "Inlining does not necessarily have to make things larger, at least locally. Locally, I\u0027d expect it to make things smaller.",
					"date": "2016-08-17",
					"id": "d6l91t0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "cogman10",
					"content": "I\u0027m not sure what you mean.  Certainly inlining decreases the number of instructions executed by any given method (which is sort of the whole point).  But generally it increases the size of the binary by (number of places method is use) * (method size).\n\nThat isn\u0027t to say that tricky magic doesn\u0027t/can\u0027t happen (in fact one of the benefits of SSA optimizers is that these tricky magic things are easier to do).  The inlined method can be decreased in size locally because the compiler can eliminate branches, variable allocations, etc because it can prove more about the use of the method locally.  These kinds of optimizations are likely where a large amount of the binary size decreases came from.\n\nBut generally, I would say that inlining more frequently increases the size of the binary than it decreases.  Even though there are cases where it can result in a decreased binary size.",
					"date": "2016-08-17",
					"id": "d6lgngi",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jakub_h",
					"content": "Yes, that\u0027s exactly what I meant.",
					"date": "2016-08-17",
					"id": "d6llmw6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "JokerSp3",
					"content": "But saving that much when an application is downloaded a million times is important (and makes it faster)",
					"date": "2016-08-16",
					"id": "d6je79r",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "cogman10",
					"content": "Faster? Nah. Many optimizations result in larger binaries.  Size and performance are loosely related at best.",
					"date": "2016-08-16",
					"id": "d6jyos9",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "JokerSp3",
					"content": "I meant that smaller binaries result in faster downloads",
					"date": "2016-08-16",
					"id": "d6jz7fp",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "mcouturier",
					"content": "I often deploy over 3g. Please tell me where you are working so I can avoid playing with your software.",
					"date": "2016-08-16",
					"id": "d6jix6k",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "GBACHO",
					"content": "I write services, as do most people who use Go. Size is irrelevant. If you\u0027re having trouble with executable sizes I surely hope you\u0027re not using docker",
					"date": "2016-08-16",
					"id": "d6johnj",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "mcouturier",
					"content": "Well, in your case it is not relevant. For some others it is, and they even told you how. Yet you still believe its not relevant. And you bring a 3rd party tool into the mix which comes out of nowhere (your narrow view of development). So again, I hope I won\u0027t have to deal with your work, where I guess you consider your use case to be the absolute truth for everybody else.\n",
					"date": "2016-08-16",
					"id": "d6js7st",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "therocketofpoop",
					"content": "I have seen your attitude in the Python community. \"It makes no sense to me, thus it makes no sense at all\", which is one of the reasons the language sucks. Don\u0027t bring that attitude here.",
					"date": "2016-08-16",
					"id": "d6k4c7k",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "GBACHO",
					"content": "Nope, you\u0027re right. I didn\u0027t expect that people were using Go in embedded and ship-to-customer packages. Thats my bad",
					"date": "2016-08-17",
					"id": "d6krk60",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "pinpinbo",
					"content": "It\u0027s true that Go binary size is already small, but in general, small binary size is important when provisioning 1 app per container/VM",
					"date": "2016-08-16",
					"id": "d6jtm04",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jakub_h",
					"content": "Instruction caches.",
					"date": "2016-08-17",
					"id": "d6l8yi2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "frikkasoft",
					"content": "can confirm, up to 30% reduction in binary size when compiling 1.7 instead of 1.6",
					"date": "2016-08-16",
					"id": "d6jk434",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "itsenov",
					"content": "My binary went down 15% and build time 38%",
					"date": "2016-08-16",
					"id": "d6jplp6",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "metamatic",
					"content": "Ugh, now to rework all my xhandler.HandlerC code back into http.Handler + req.Context(). I don\u0027t suppose anyone\u0027s written an automatic tool to do the transformations?\n\nEdit: [Found the other thread about that](https://www.reddit.com/r/golang/comments/4xzf9j/ctxfix_provides_rudimentary_rewriting_to_assist/). Excellent.",
					"date": "2016-08-16",
					"id": "d6jpjz1",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "codygman",
					"content": "Any comparison of 1.7 compile times to 1.4?",
					"date": "2016-08-16",
					"id": "d6jc77s",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "broady",
					"content": "See the link \"observed\" in the blog post.",
					"date": "2016-08-16",
					"id": "d6jcu47",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mostlywaiting",
					"content": "More anecdotal, but the [gonum](https://travis-ci.org/gonum) compile and test CI runs look about 10-30% faster.  Nice work!",
					"date": "2016-08-16",
					"id": "d6juwo7",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "vpol",
					"content": "waiting for brew formula",
					"date": "2016-08-15",
					"id": "d6j07vj",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Discrete_Number",
					"content": "is there any good reason to prefer the homebrew way over the plain pkg install?",
					"date": "2016-08-16",
					"id": "d6j8wa6",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "If the rest of your toolchain is built around brew.\n\nAnd maybe some other reasons.",
					"date": "2016-08-16",
					"id": "d6j9nap",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "nyoungman",
					"content": "One good reason is if you want to install delve (debugger) via Homebrew, since Homebrew\u0027s version of Go is a dependency.",
					"date": "2016-08-16",
					"id": "d6jdopg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hipone",
					"content": "Shouldn\u0027t then delve formula be fixed to use system Go instead if available? (by system I meant existing one)",
					"date": "2016-08-16",
					"id": "d6jh0lp",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "lolomfgkthxbai",
					"content": "Damn it, here I was, thinking that we\u0027re talking about a beer recipe designer written in Go.",
					"date": "2016-08-16",
					"id": "d6jg615",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "zeayes",
					"content": "`brew switch go 1.6.3`",
					"date": "2016-08-16",
					"id": "d6jh5qp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "26julio",
					"content": "package management",
					"date": "2016-08-16",
					"id": "d6jxgtu",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Ploobers",
					"content": "https://github.com/Homebrew/homebrew-core/pull/3921",
					"date": "2016-08-16",
					"id": "d6j1y0m",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "m3wm3wm3wm",
					"content": "Been brewing for 3 hours now. Not ready yet :(",
					"date": "2016-08-16",
					"id": "d6j84qh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "xargon7",
					"content": "It\u0027s ready now!",
					"date": "2016-08-16",
					"id": "d6j8ow5",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "devsquid",
					"content": "I like installing dev tools via Brew. Is there any reason not to use Brew to install the Go tools? Does it update well? I\u0027ve found updating Go to be a bit of a pain and I could a package manager might not do it \"properly\".",
					"date": "2016-08-16",
					"id": "d6jce3m",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "broady",
					"content": "Updating Go is straightforward. Remove the old version and extract the new one.",
					"date": "2016-08-16",
					"id": "d6jctnu",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "gerbs",
					"content": "It\u0027s so easy! If only someone would create a script to automate it....\n\nWhy do manually what can be automated? I understand the reasoning to want to install things yourself: You get a better understanding of how it works and how it\u0027s set up, you know better how to troubleshoot and repair. But once you know that, why bother doing the work yourself? Let tools automate it when you can.",
					"date": "2016-08-16",
					"id": "d6jslap",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "broady",
					"content": "That wasn\u0027t what the person asked. They asked \"does it update well\" and the answer is yes.\n\nOf course there is some slight value to using Homebrew.",
					"date": "2016-08-16",
					"id": "d6jtcsx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-08-16",
					"id": "d6jibb5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "KEANO_",
					"content": "https://www.reddit.com/r/golang/comments/4xwhph/go_17_is_released/d6j07vj",
					"date": "2016-08-16",
					"id": "d6jicqy",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nekron",
					"content": "Congrats! Next downloading and rebuilding :-)",
					"date": "2016-08-16",
					"id": "d6jg23a",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "CAZ_au",
					"content": "Any benefits to upgrading? Im using Ubuntu repo packages 1.6. Not sure if they get upgraded or back ported. ",
					"date": "2016-08-16",
					"id": "d6jdnb5",
					"isArchived": true,
					"isControversial": false,
					"score": -8
				},
				{
					"author": "brogrammingsins",
					"content": "Surely you can\u0027t be serious about this question given that you literally have the features of this release linked as the topic... ",
					"date": "2016-08-16",
					"id": "d6jex4d",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "CAZ_au",
					"content": "Im more asking is there any disadvantage to staying with 1.6 like security bugs over going to all the trouble of setting up 1.7 seeing as i already have repo packages installed and am not sure if they will get updated. ",
					"date": "2016-08-16",
					"id": "d6jfoe7",
					"isArchived": true,
					"isControversial": false,
					"score": -4
				},
				{
					"author": "brogrammingsins",
					"content": "The setup \"trouble\" for me is downloading the tar file, unpack, remove /usr/local/go and moving the unpacked version there. That\u0027s it. \n\nWhat do you mean you have repo packages installed? How do you install these said packages? If they contain the source code, then it\u0027s not a problem at all.",
					"date": "2016-08-16",
					"id": "d6jfyzn",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "sh41",
					"content": "\"Trouble\" setting up Go 1.7:\n\n    # Install Go on Linux.\n    curl -L https://golang.org/dl/go1.7.linux-amd64.tar.gz | sudo tar zx -C /usr/local/\n    # Add to ~/.bash_profile.\n    export GOPATH\u003d$HOME/GoWork\n    export PATH\u003d\"$PATH:/usr/local/go/bin:$GOPATH/bin\"\n    gocd() { cd $(go list -f \u0027{{.Dir}}\u0027 $1 | grep -v /vendor/); }",
					"date": "2016-08-16",
					"id": "d6jgo4v",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "SSoreil",
					"content": "Are you on LTS or 6 monthly cycle for Ubuntu? Go brings security fixes to current release -1 normally as well as current. You should be fine as long as you keep your version of 1.6 up to date.",
					"date": "2016-08-16",
					"id": "d6jfdmo",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Paradiesstaub",
					"content": "On Ubuntu the easiest/best way to get golang is to install `ubuntu-make`. Then all you need to do is to run `umake go` and your done.\n\nSee the [wiki](https://wiki.ubuntu.com/ubuntu-make) for a detailed ubuntu-make description.",
					"date": "2016-08-16",
					"id": "d6jstoe",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "andradei",
					"content": "Oh nice, I didn\u0027t know that `umake` added support for Go (been a while since I last used it to install Firefox Aurora and Nightly)",
					"date": "2016-08-16",
					"id": "d6jvbce",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Discrete_Number",
					"content": "Just curious.. have you tried to install idea or idea-professional with ubuntu-make? I ask because as a far as I can recall, IntelliJ IDEA needs Oracle JDK (won\u0027t work with OpenJDK), and the Oracle JDK is only available with a PPA.\n\nI don\u0027t have an Ubuntu install to try it right now, but I really would like to know how ubuntu-make does the trick.",
					"date": "2016-08-17",
					"id": "d6kmokg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Paradiesstaub",
					"content": "I used to install the Android plugin, which installs the Android flavor of IntelliJ IDEA using OpenJDK (works great).",
					"date": "2016-08-17",
					"id": "d6kxfg2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Discrete_Number",
					"content": "Cool, that\u0027s interesting. Thanks!",
					"date": "2016-08-17",
					"id": "d6l2xsc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "nhooyr",
			"date": "2018-02-16",
			"id": "7y1acf",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.10 is released",
			"comments": [
				{
					"author": "mwholt",
					"content": "Love the smell of deploying on a Friday",
					"date": "2018-02-16",
					"id": "duct0zm",
					"isArchived": false,
					"isControversial": false,
					"score": 93
				},
				{
					"author": "aaaqqq",
					"content": "yeah - a major release on a Friday takes big brass balls but I guess it\u0027s also a testament to the solid design, testing and release processes the Go devs follow\n\nEdit: what\u0027s causing this gilding madness?",
					"date": "2018-02-16",
					"id": "dud0hpw",
					"isArchived": false,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "theQuandary",
					"content": "Seems like a decent time. Serious projects won\u0027t deploy a new version on Friday, so the weekend warriors have until Monday to find problems.",
					"date": "2018-02-16",
					"id": "dud3ilu",
					"isArchived": false,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "thefixer9",
					"content": "Good point, I know I\u0027ll be tinkering with it over the weekend ",
					"date": "2018-02-16",
					"id": "dud6bsa",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "arp242",
					"content": "\u0026gt; Edit: what\u0027s causing this gilding madness?\n\nFor some reason this is common in Go release announcements. Dunno why or who\u0027s doing it either.",
					"date": "2018-02-17",
					"id": "dudc04h",
					"isArchived": false,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "Creshal",
					"content": "Take that, Javascript devs!",
					"date": "2018-02-17",
					"id": "dudu5zx",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "lamados",
					"content": "wow someone\u0027s got a lot of gold to throw around",
					"date": "2018-02-17",
					"id": "dudcp3x",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "epiris",
					"content": "Thanks to all involved!\n\n\u0026gt; The Fields, FieldsFunc, Split, and SplitAfter functions have always returned subslices of their inputs. Go 1.10 changes each returned subslice to have capacity equal to its length, so that appending to one cannot overwrite adjacent data in the original input.\n\nThis is a nice change, has always caught people by surprise.",
					"date": "2018-02-16",
					"id": "ducuy8r",
					"isArchived": false,
					"isControversial": false,
					"score": 34
				},
				{
					"author": "Jelterminator",
					"content": "I\u0027m really glad that it made it in as well. The initial comments on the issue I created were not very encouraging: https://github.com/golang/go/issues/21149",
					"date": "2018-02-16",
					"id": "ducy1bl",
					"isArchived": false,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "alasijia",
					"content": "but it is a good comment.",
					"date": "2018-02-17",
					"id": "dudmcqg",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "kidovate",
					"content": "It\u0027s because they had not seen the beauty of just setting cap \u003d len to fix this. It\u0027s both backwards compatible and simple. Good one!",
					"date": "2018-02-17",
					"id": "due9zaq",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thajunk",
					"content": "Im also glad it made it in, nice job man!",
					"date": "2018-02-17",
					"id": "dudzj8u",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "fechan",
					"content": "You’re the only top level comment not guilded — are you behind all this?",
					"date": "2018-02-17",
					"id": "duecygb",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ar1819",
					"content": "New [strings.Builder](https://golang.org/pkg/strings/#Builder) has very interesting things under the hood - I recommend reading it to anyone who wants to understand how slices of bytes and strings can relate to each other.",
					"date": "2018-02-16",
					"id": "dud0tf6",
					"isArchived": false,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "HaveSomeFreeKarma",
					"content": "Is there much benefit to using strings.Builder over bytes.Buffer? They seem functionality equivalent and pretty much the same under the hood unless I\u0027m missing something.",
					"date": "2018-02-17",
					"id": "dudss8o",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ar1819",
					"content": "The difference is - `bytes.Buffer.String` allocate a completely new object, where Builder does not - it reuses internal state. Those you can decrease allocation count, used memory and GC pressure. And the best part - you can call String method as many times as you want, mixing with new Writes and it will be completely safe (not thread safe tho). ",
					"date": "2018-02-17",
					"id": "dudue0c",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "HaveSomeFreeKarma",
					"content": "Oh huh, that\u0027s kind of sketchy",
					"date": "2018-02-17",
					"id": "duefnb6",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ryeguy",
					"content": "Why are all these random comments gilded? 1.10 must be exciting the hell out of someone.",
					"date": "2018-02-16",
					"id": "dud4rty",
					"isArchived": false,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "shilch",
					"content": "Some anonymous person does this with every \"new go version\" post. :D",
					"date": "2018-02-16",
					"id": "dud592x",
					"isArchived": false,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "UniverseCity",
					"content": "Go team sharing the love",
					"date": "2018-02-17",
					"id": "due68ei",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mokbel",
					"content": "\u0026gt; The go test command now caches test results \n\nThis is big for us - some of our projects have large test suites. Very excited to see what improvements come of it.",
					"date": "2018-02-16",
					"id": "ducw4s2",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "Jelterminator",
					"content": "We saw improvements from 14 minutes Travis times go to 6 minutes with the release candidate. ",
					"date": "2018-02-16",
					"id": "ducy6e9",
					"isArchived": false,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "__woofer__",
					"content": "On our side, from 15 minutes  to 42 seconds :) ",
					"date": "2018-02-17",
					"id": "dudbqsa",
					"isArchived": false,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "kisielk",
					"content": "Where does Travis cache the results?",
					"date": "2018-02-17",
					"id": "due6ck1",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Jelterminator",
					"content": "It doesn\u0027t in-between builds (at least not by default, but that might be possible to make work. However, if you test multiple packages then those packages their dependencies are only compiled once. This should be possible with previous go versions if you use the correct compile options as well, but I couldn\u0027t get it to work with coverage enabled. Now it just works automatically, which I really like. ",
					"date": "2018-02-17",
					"id": "duebehe",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kisielk",
					"content": "Ah ok, that makes more sense.",
					"date": "2018-02-19",
					"id": "duh90yb",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "t4nkbusta",
					"content": "Every release has someone gifting gold :thinking:\n\nBut seriously, excited to play with 1.10 this weekend :) ",
					"date": "2018-02-16",
					"id": "ducwyv1",
					"isArchived": false,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "pdp10",
					"content": "I hear Reddit regrets dumping Common Lisp and is now looking at migrating to Go.\n",
					"date": "2018-02-17",
					"id": "dud9d40",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Yojihito",
					"content": "I thought Reddit is working with Python under the hood?",
					"date": "2018-02-17",
					"id": "due2rw1",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "pdp10",
					"content": "Prior to Python, Reddit was in Common Lisp.\n",
					"date": "2018-02-17",
					"id": "duefzrz",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "BubuX",
					"content": "I can\u0027t thank Go team enough. Such a solid piece of technology that keeps getting better while resisting the temptation of adding useless fluff.",
					"date": "2018-02-16",
					"id": "dud2g2y",
					"isArchived": false,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "papers_",
					"content": "\u0026gt; Happy Friday, happy weekend! Today the Go team is happy to announce the release of Go 1.10. You can get it from the download page\n\n🤔🤔\n\n\u0026gt; Happy Friday, happy weekend! Today the Go team is happy to announce the release of Go 1.10. You can **go** get it from the download page\n\n🙂 ",
					"date": "2018-02-17",
					"id": "dud81mw",
					"isArchived": false,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "e3b0c442",
					"content": "Awesome.\n\n\u0026gt;File adds new methods SetDeadline, SetReadDeadline, and SetWriteDeadline that allow setting I/O deadlines when the underlying file descriptor supports non-blocking I/O operations. The definition of these methods matches those in net.Conn. If an I/O method fails due to missing a deadline, it will return a timeout error; the new IsTimeout function reports whether an error represents a timeout.\n\n\u0026gt;Also matching net.Conn, File\u0027s Close method now guarantee that when Close returns, the underlying file descriptor has been closed. (In earlier releases, if the Close stopped pending I/O in other goroutines, the closing of the file descriptor could happen in one of those goroutines shortly after Close returned.)\n",
					"date": "2018-02-16",
					"id": "ducyqqc",
					"isArchived": false,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "Bake_Jailey",
					"content": "I really wish all of that could get combined with `context`, somehow. It\u0027d be really cool for arbitrary io.Reader/Writer/Copy stuff to be cancelled if possible, but those interfaces are absolutely going to have to remain the same. For now, at least for File, I\u0027m sure you could do `context.Deadline()` and then call those new functions like stuff in `net` does.\n\nHopefully, context finds its way into the core language somehow...",
					"date": "2018-02-17",
					"id": "dud88vq",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "elagergren",
					"content": "Yeah, somebody made an issue about making `io.Reader`\n\n    type Reader interface{\n        Read(ctx context.Context, p []byte) (n int, err error)\n    }\n\nin Go 2, but that got nixed because it\u0027d be terribly annoying and a bit overkill for most reads. They mentioned making `context` a thing that\u0027s integrated with the language, but nothing concrete.",
					"date": "2018-02-18",
					"id": "duffebu",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "vopi181",
					"content": "THANK ROB FOR BETTER AVX SUPPORT\n\nI\u0027m tempted to start writing programs in goasm. It it possible to just compile the asm to a raw object file?",
					"date": "2018-02-16",
					"id": "dud3htg",
					"isArchived": false,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "ptman",
					"content": "I\u0027m not sure, but maybe this will get you started: https://www.manniwood.com/2016_07_03/fun_with_go_assembler.html",
					"date": "2018-02-17",
					"id": "dued0td",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "vopi181",
					"content": "Thanks I\u0027ll clean it out",
					"date": "2018-02-17",
					"id": "duef7t5",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "driusan",
					"content": "Yes, you just run \"go tool asm filename.s\" and it\u0027ll output filename.o.\n\nBut note that \"go build\" automatically assembles things with the .s extension, so you can just define the prototypes in Go and write all your real code in assembly if you wanted.",
					"date": "2018-02-18",
					"id": "duew05a",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "vopi181",
					"content": "Yeah but does that object file have the go runtime do you know? ",
					"date": "2018-02-18",
					"id": "duextnn",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "driusan",
					"content": "The go runtime comes from the linking step (if you\u0027re doing things manually, when you explicitly call `go tool link`, otherwise `go build` is effectively a wrapper around `go tool compile`, `go tool asm`, `go tool pack`, and `go tool link`). The object file won\u0027t have the runtime, it\u0027ll just have the code from the .s file.\n\nAre you trying to make sure you *do* or that you *don\u0027t* have the Go runtime linked? If you have a file with a `.s` extension in a package main and define your asm prototypes in Go, it\u0027ll be linked by `go build`. If you\u0027re trying to avoid linking it, the best I\u0027ve been able to do is [this](https://github.com/driusan/noruntime) since `go tool link` doesn\u0027t have any \"don\u0027t link the runtime\" flag.",
					"date": "2018-02-18",
					"id": "dueyb9s",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "vopi181",
					"content": "I want to make sure it doesn\u0027t have it. So I could use it just like nasm or gas",
					"date": "2018-02-18",
					"id": "duez7ub",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "driusan",
					"content": "The above link is the closest I\u0027ve been able to get to that.\n\nThe object files generated by Go aren\u0027t ELF object files, so they need to be linked with `go tool link` and can\u0027t be directly used by your system linker which doesn\u0027t know anything about the Go object format. `go tool link` always links runtime, and the link above is a fake runtime that tries to strip out as much as it can while still compiling a valid executable.",
					"date": "2018-02-18",
					"id": "duezzms",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "vopi181",
					"content": "Ah damn ok that makes sense. Thanks",
					"date": "2018-02-18",
					"id": "duf0tp2",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Ribice",
					"content": "Incoming brew update and upgrade, wohooo",
					"date": "2018-02-16",
					"id": "ducwctu",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "lukechampine",
					"content": "I\u0027ve been eagerly waiting for this! Way back in September I wanted to write a package built on the `flag` package, but it was missing some functionality I needed. I [submitted an issue](https://github.com/golang/go/issues/21888), the proposal was accepted, and someone implemented the feature! Now I can post my project publicly. Really neat to see the open-source process in action. :)",
					"date": "2018-02-16",
					"id": "ducyj54",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "PaluMacil",
					"content": "I took a look right away when you posted this because I\u0027ve wondered if I\u0027d ever see something it used. That didn\u0027t take long! :) Good work.",
					"date": "2018-02-17",
					"id": "dud9ckc",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "TheBeasSneeze",
					"content": "Xml NewTokenDecoder! Ducking finally! SOAP/WSDL lookout",
					"date": "2018-02-16",
					"id": "ducufwj",
					"isArchived": false,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "patrick_mcnam",
					"content": "Is there any easy way to update on Windows or do I just install again?",
					"date": "2018-02-16",
					"id": "ducx6j6",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "PaluMacil",
					"content": "For Windows just install again. It\u0027ll ask if you want to just install or also remove the old version.",
					"date": "2018-02-17",
					"id": "dud9dzx",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "shilch",
					"content": "Haha, who is the person giving all this gold in every post about a new go version?",
					"date": "2018-02-16",
					"id": "dud4nrw",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "hakaari",
					"content": "I haven\u0027t seen so many golds in a single thread ! \n\n",
					"date": "2018-02-17",
					"id": "dud8pi9",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "joyrida12",
					"content": "Props to the anonymous gilder, pretty awesome of you.",
					"date": "2018-02-17",
					"id": "dud8t1d",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "note_bro",
					"content": "Excited about the string builder!",
					"date": "2018-02-17",
					"id": "dudc92m",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Skiddie_",
					"content": "Damn right before my long weekend too.",
					"date": "2018-02-16",
					"id": "ducvfn2",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ericzhill",
					"content": "Sweet. Keep up the awesome work guys. ",
					"date": "2018-02-16",
					"id": "dud1m9w",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "pinpinbo",
					"content": "You know what this mean, people?\n\nFriday afternoon prod deployment!!!\n\n/s",
					"date": "2018-02-16",
					"id": "dud349i",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "oylenshpeegul",
					"content": "I love how easy it is to install Go!\n\n    $ go version\n    go version go1.9 linux/amd64\n    \n    $ sha256sum go1.10.linux-amd64.tar.gz \n    b5a64335f1490277b585832d1f6c7f8c6c11206cba5cd3f771dcb87b98ad1a33  go1.10.linux-amd64.tar.gz\n    \n    $ sudo mv /usr/local/go /usr/local/go1.9\n\n    $ sudo tar -C /usr/local -xf go1.10.linux-amd64.tar.gz\n    \n    $ go version\n    go version go1.10 linux/amd64\n",
					"date": "2018-02-17",
					"id": "dudexau",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "shinda-sekai-sensen",
					"content": "The benefits of static compilation! ",
					"date": "2018-02-17",
					"id": "dudghhv",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "picklednull",
					"content": "But that also means you won\u0027t receive any (security) updates without manual intervention...",
					"date": "2018-02-17",
					"id": "due3id3",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "likebike2",
					"content": "Thank you Go Team!  Especially Ian Lance Taylor (the creator of gccgo and one of the top-contributors to Go).  Your work improving the interface between Go and C is really important!\n\nThe new CGo features in 1.10 is also a good step forward.  Eventually, Go won\u0027t feel so much like programming in a bubble.",
					"date": "2018-02-17",
					"id": "dudtkt7",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "R2A2",
					"content": "Yay, math.Round",
					"date": "2018-02-17",
					"id": "duddlun",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "vicky-gill",
					"content": "Why everyone has got gold?",
					"date": "2018-02-16",
					"id": "dud5jal",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "onnoonesword",
					"content": "not everyone",
					"date": "2018-02-17",
					"id": "dud7w7z",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "DeathstrokePHP",
					"content": "Cant wait for weekend!",
					"date": "2018-02-17",
					"id": "dud98ub",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "DeathstrokePHP",
					"content": "wow! first gold ever!",
					"date": "2018-02-17",
					"id": "dudjh29",
					"isArchived": false,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "Bone_Man",
					"content": "Awesome, this is great news!",
					"date": "2018-02-17",
					"id": "dudbzte",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "concatMap",
					"content": "The new String build is great",
					"date": "2018-02-17",
					"id": "duddj3r",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Ilyes512",
					"content": "Nice! Can’t learning the new improvements made :) \n\nedit:\nwtf, did I wrote there? Probably should have been \"Can\u0027t wait to learn about the new improvements made!\"",
					"date": "2018-02-17",
					"id": "duddwsw",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Jemaclus",
					"content": "How long should I wait before using this in production? I\u0027m assuming there will be some minor patches in the first few weeks(?)\n\nOr was all this hashed out during release candidates?",
					"date": "2018-02-17",
					"id": "dudepcz",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nhooyr",
					"content": "Yea, should be good.",
					"date": "2018-02-17",
					"id": "duderpy",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "You run your codes test-suite with the new release, you build your code with it your CI process, you deploy to staging,  you monitor it, you hammer it, then you  promote to production once you\u0027re happy it performs well.\n\nOnce you\u0027ve deployed your new binaries to production you rely upon your performance/metrics/monitoring to catch problems.\n\nRight?\n\nYou don\u0027t just randomly build a binary on a developers laptop, `scp` it to a host, and restart the service. ",
					"date": "2018-02-17",
					"id": "due42ue",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Jemaclus",
					"content": "Of course.",
					"date": "2018-02-17",
					"id": "due93gn",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Tacticus",
					"content": "Do it now?\n\nwe\u0027ve been canarying the RCs for a week with no issues.",
					"date": "2018-02-17",
					"id": "dudul7a",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Jemaclus",
					"content": "Cool, thanks :)",
					"date": "2018-02-17",
					"id": "due93q7",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "bioxcession",
					"content": "go test caching yessss",
					"date": "2018-02-17",
					"id": "dudf7xe",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "theephie",
					"content": "Besides stretch-backports, what\u0027s the recommended way of using newer Go on Debian?",
					"date": "2018-02-17",
					"id": "dudkdau",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "Download the zip binaries, put them into /usr/local/go (or wherever else you want), add that location/bin to your PATH, add $HOME/go/bin to PATH (assuming that $HOME/go is where your GOPATH is), and enjoy Go.",
					"date": "2018-02-17",
					"id": "dudknnq",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SnookyMcdoodles",
					"content": "Super excited to see how the new caching and build times work out",
					"date": "2018-02-17",
					"id": "dudo9c7",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "samsonx",
					"content": "Nice, I will be testing some windows dll creation over the weekend.",
					"date": "2018-02-17",
					"id": "dudu7il",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "samsonx",
					"content": "Update : It worked just fine, created a windows dll and dynamically loaded it into a very non standard GUI system.\n\nThis means I can use simple GUI frontend languages with my golang programs doing the hard work.\n\nIt does require gcc to be installed but that\u0027s cool, I have that for my C DLLs.",
					"date": "2018-02-17",
					"id": "duethk4",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jimmeyotoole",
					"content": "Excited by the test updates, although mine are usually very unit test driven and minimal IO wise, it\u0027s the kind of philosophy I love about go. Make good practice a part of the language release and update cycle to make it easy to implement good testing and choice standards.",
					"date": "2018-02-17",
					"id": "dudvwov",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rlouf",
					"content": "Thanks guys, great work! Been waiting for ‘DisallowUnknownFields’ in JSON decoding for a while :)",
					"date": "2018-02-17",
					"id": "dudwbfx",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Arnhallr",
					"content": "This is very nice, I\u0027m loving the new strings.Builder.",
					"date": "2018-02-17",
					"id": "dudx24s",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kaeshiwaza",
					"content": "With 1.9, when building on linux for windows i could\u0027nt cache with go build -i because of permission denied on /usr/local/go/pkg_window..., the build for a very small app was 4s, now it\u0027s 0.150s !",
					"date": "2018-02-17",
					"id": "dudx4yj",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "FryDay444",
					"content": "Glad to see I’m not the only one that releases on Fridays! :D",
					"date": "2018-02-17",
					"id": "due1g6k",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "emdeka87",
					"content": "Hi guys, I love Go!!!",
					"date": "2018-02-17",
					"id": "due5off",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neopointer",
					"content": "Can\u0027t wait to see go 2 PRs being discussed \u0026amp;\u0026amp; implemented :)\nKeep good work",
					"date": "2018-02-17",
					"id": "due5sun",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "iends",
					"content": "You mean Go 1.11?",
					"date": "2018-02-18",
					"id": "duevxnz",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neopointer",
					"content": "That hasn\u0027t been decided, right? But it would be good if it was 1.11",
					"date": "2018-02-19",
					"id": "duhnw5g",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "h00s",
					"content": "Kudos to the whole Go team!!! I\u0027m soon starting working on my side project\u0027s microservice, powered by Go and Gin! Exciting times \u003d)",
					"date": "2018-02-17",
					"id": "due6cuj",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "return_of_the_ring",
					"content": "Like the go install update. Makes my CI installs of dep more streamlined. Yay!",
					"date": "2018-02-17",
					"id": "due8taa",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sacado",
					"content": "That\u0027s great news! There were sensible performance improvements in 1.10rc versions, I\u0027m glad to be able to use it for production code.",
					"date": "2018-02-17",
					"id": "duebarm",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "pubgftw",
					"content": " what is the price of a gold?",
					"date": "2018-02-17",
					"id": "duefj1j",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "robe_and_wizard_hat",
					"content": "i\u0027d post something meaningful in this thread but i\u0027ve already got gold.",
					"date": "2018-02-17",
					"id": "duejaun",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "philiplb",
					"content": "The test caching is the big one for us in CI!",
					"date": "2018-02-18",
					"id": "dufh4la",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-02-16",
					"id": "ducunz8",
					"isArchived": false,
					"isControversial": true,
					"score": -10
				},
				{
					"author": "dlsniper",
					"content": "Nope, hopefully in 5-6 years so I can enjoy a peaceful existence until then.",
					"date": "2018-02-16",
					"id": "ducwivn",
					"isArchived": false,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "mvpmvh",
					"content": "I\u0027ve never seen a gilded post with only downvotes lol",
					"date": "2018-02-16",
					"id": "dud6fod",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Bone_Man",
					"content": "/r/negativewithgold",
					"date": "2018-02-17",
					"id": "dudc0pf",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "ExpertGamerJohn",
					"content": "Maybe",
					"date": "2018-02-17",
					"id": "dudfiqv",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "patientzero_",
					"content": "I never got reddit gold, am I late to the party already?",
					"date": "2018-02-17",
					"id": "dudv650",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "spicy_indian",
					"content": "Damn. I just updated to Go 1.9.4",
					"date": "2018-02-17",
					"id": "dud9baw",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "binaryblade",
					"content": "Here I come, native wimdows plugins.",
					"date": "2018-02-17",
					"id": "duda92h",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "avmakt",
					"content": "Annoyingly, the latest CylancePROTECT agent quarantines a file during the install on Windows:\n\n    C:\\Go\\src\\cmd\\internal\\buildid\\testdata\\a.pe",
					"date": "2018-02-17",
					"id": "dudeaf9",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Mittalmailbox",
					"content": "It\u0027s showering gold.",
					"date": "2018-02-17",
					"id": "dudku4s",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "crackdroid",
					"content": "Somewhere an orange president is getting excited",
					"date": "2018-02-17",
					"id": "dudwrm9",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "BiosElemental",
					"content": "Clearly sometime likes making Reddit rich :p",
					"date": "2018-02-17",
					"id": "dudetvi",
					"isArchived": false,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "segag",
					"content": "Can I get some gold as well? Plz",
					"date": "2018-02-17",
					"id": "dudcp6o",
					"isArchived": false,
					"isControversial": false,
					"score": -12
				},
				{
					"author": "unix15e8",
					"content": "Sure, why not (づ｡◕‿‿◕｡)づ ġ̵̖̣͂̌̎̇̃̀͊̈͂̊̽́ơ̷̡̨̡̨̢̨̡̛͖͉͓͎̱͕̟̟͇̱̝̪͚̫̳̯̝͖̩͎̙̯̖̳̺͖̹̝̟̹̟̮̝̹͈̗̟̰̞̤̯͍̪̞̩̯̭̠̫̜̭̠̮̪̞̞̺̩̱̜͚̻͓͇̱̠̱̠̙͎̝͚̳̄̓̒̓͂͛̍̔̈́̂̓̃͛̾͋̊̆̔̒̽̅̏͒́͂̈́̀̃̔͛̍͌̿͛͋́̄̇̎͂́̐̐̑̓͋͛̑̀̐͌̐̄͌̊̉̀̐͌̋́̏̌̏̒̾̐͊͌̓͂̽̾̃̆̃̕̚̚̚͘͜͝͝͝͝͝͝͝͝͝͝͝͝l̵̨̧̢̧̧̡̛̛̛̗͓͉̱̖̯̭̘̪̻̘̦̠̱̘͕̞̼̣̝̘̜̬̞͉̫͓̜̦̖̤͇̫̬̬̜̙̜̝͉͂̿͂̈́͛̀͗͛̏̄̌̽̓̍͌̂̐̒̽͒̏́͌̈́̆̓͐̈̂̅̌̓̎͗̇͂̍͋̐̿̎͂̎̆̔̓̉͋̆̋̔̔͒͗̐͗̾͆̽̋́͂́́̒͛̔̄́͛̈͌́̋̓̅̑͋̉̎͊̈̔́̀͐̍̃̿̐̇̿͗̿̆́̋́̏͑̑̽̋̕͘͘̚͘̚̚̚̚̕͜͝͠͝͝͠͠͝ḑ̷̢̧̡̡̨̛͈̯̳̤̰͖̦̲̬̥͕̟̼͇̜̫̝̬͎̯̩̹̞̰̺͙̤̳̙̮͉̲̼͈͔̝̻̰̼̪͉̝͙͕̮͇͕̤̥͖̮͚͎̝̗͎͕̓̽͑̊̄̓̀̌͊̆́͆͒͛̂̔̽͆̈́̄͒͋̄͊͒̈́̒̃̓̓̿̍̑̈́͐̓̑̿͛̂̍̔̇͗̕̚͝͝͝͝͝͝͝ͅ",
					"date": "2018-02-17",
					"id": "dudji1o",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				}
			]
		},
		{
			"author": "ericzhill",
			"date": "2017-11-30",
			"id": "7gogdy",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "Just announced at re:Invent, Go becomes a first class citizen on Lambda.",
			"title": "AWS Lambda to Fully Support Go",
			"comments": [
				{
					"author": "emostafa",
					"content": "Do you guys find it weird that Google Cloud Functions doesn\u0027t support Go ? only nodejs at the moment.",
					"date": "2017-12-01",
					"id": "dql3avn",
					"isArchived": false,
					"isControversial": false,
					"score": 42
				},
				{
					"author": "chuyskywalker",
					"content": "GCF is really behind on this front :(",
					"date": "2017-12-01",
					"id": "dqlck12",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "ryankearney",
					"content": "They don’t even support IPv6 on their EC2 competitor.",
					"date": "2017-12-01",
					"id": "dqlswtp",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "014a",
					"content": "Google is startlingly far behind in every cloud product they offer, both in depth and breadth. I could make a list a mile long; GCPS doesn\u0027t support FIFO queues without involving Dataproc, Cloud Monitoring\u0027s strange reliance on the old StackDriver interface, Postgres still being beta in CloudSQL...\n\nAWS isn\u0027t perfect, but they\u0027re incomprehensibly far ahead in the cloud game. Like, playing on a totally different planet while GCP is still learning rocketry 101.\n\nBut they will throw $200k at any startup that wants to use them.",
					"date": "2017-12-01",
					"id": "dqm8xwi",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "djhworld",
					"content": "BigQuery, DataFlow and BigTable are the only services I\u0027ve seen from GCP that seem to be much better than what the others are currently providing ",
					"date": "2017-12-03",
					"id": "dqp8gwv",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tech_tuna",
					"content": "Google\u0027s behind in the cloud period.  Now that Amazon has EKS, good luck to Google and Microsoft on catching up.",
					"date": "2017-12-02",
					"id": "dqo11g5",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "lonahex",
					"content": "Not really. Google is quite a diverse group engineering wise and we\u0027ve seen many times how one group would not necessarily favor tech from another just because they are both from Google. GCF is just doing what makes sense from market perspective. Get the most common languages supported first and then move to other less common ones. ",
					"date": "2017-12-01",
					"id": "dqlgxjg",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "smantziaris",
					"content": "azure did not support .net core either at the beginning but aws did... ",
					"date": "2017-12-01",
					"id": "dqljuup",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "CannedCorn",
					"content": "Just call the go program from a JS wrapper.",
					"date": "2017-12-01",
					"id": "dqlecpb",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "curiousGambler",
					"content": "could do the same thing to get Go on AWS Lambda now that you mention it...",
					"date": "2017-12-01",
					"id": "dqlxbe8",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "CannedCorn",
					"content": "And that’s exactly what apex does\n\nYou can run any language on lambda but the entry point has to be JS.",
					"date": "2017-12-01",
					"id": "dqlxf21",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "lonahex",
					"content": "or python or java",
					"date": "2017-12-20",
					"id": "drjic3s",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jerf",
					"content": "\u0026gt;only nodejs at the moment.\n\nAs much as I like statically-typed languages in general, one legit advantage that the dynamically-typed languages tend to have is that it really is easier to just load in a new chunk of text that is the new program code you want to run, with the new code every bit as much as integrated with the rest of the program as any other code is, since that\u0027s how _all_ the code is loaded.\n\nGo has a much harder time with that. Yes, I am aware that it can be done, I could with some weeks allocated write the system to do it myself on a local scale. But \"with some weeks allocated\" is rather more than \"feed the text to `eval`\", and that\u0027s still my estimate for something that work for me _locally_; I\u0027m not sure what \"cloud scale\" would take, because the long tail of issues you encounter in that case gets pretty long.\n\nSo, honestly, the weird thing to me is that _Go_ is supported at all, not that a dynamic language is supported first.\n\nPersonally, I\u0027m going down a route where I will route my handlers dynamically to various bits of Go code, and not trying to jam my stuff into the Lambda model in the first place. If a particular instance of a Go program has /v1/rest_handler version 1.4, and I bring up version 1.5 in another process, it\u0027s no great skin off my nose that the original process keeps running to handle the rest of what it can serve in the meantime. I feel like Lambda et al are optimizing on some dimensions that will ultimately be seen to have been far less useful than it initially seemed, especially considering the cost that it imposes on the rest of your code, especially for the people who seem to be implementing whole systems in it. I expect to see some \"serverless\" frameworks to start gaining traction that in 3-4 years may well entirely supplant the hosted offerings.",
					"date": "2017-12-01",
					"id": "dqm0eab",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsspy",
					"content": "I think you\u0027re confusing several topics here.  There\u0027s a big difference between a dynamically typed language and an interpreted language.\n\nThat you can (only) move code around in text form is not particularly interesting here.  I regularly load code (as text) in haskell, your web browser loaded external compiled C code when you started using it, and everything that does anything with java is dynamically loading an intermediate form of code all the time.  Python code is typically loaded from source form, but it doesn\u0027t need to be.\n\nI\u0027m not that familiar with AWS Lambda, but if they have any sort of ABI, then all languages are on equal footing.  Go compiles to many targets and nacl.  Something like Lambda would require heavy isolation (which processes provide naturally), so \"run process on x64 that expects this input and provides that output\" would be a pretty natural way to do things.\n\nIn any case, static vs. dynamic is not particularly interesting here.  IME, dynamic types are mostly just useful for surprising yourself and your users with errors much later in the development process.",
					"date": "2017-12-01",
					"id": "dqm6loe",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "jerf",
					"content": "\u0026gt;  I regularly load code (as text) in haskell,\n\nNot in production you don\u0027t. GHCI is not performant enough for that. This is not a coincidence.\n\n\u0026gt; your web browser loaded external compiled C code when you started using it\n\nFrom an effectively-static list of pre-existing C code modules. This is not comparable to how Lambda works.\n\n\u0026gt; and everything that does anything with java is dynamically loading an intermediate form of code all the time\n\nWhich is, unsurprisingly, \"in between\" in the complexity of loading it in real time between the fully-compiled languages and the dynamic languages.\n\n\u0026gt; I\u0027m not that familiar with AWS Lambda\n\nWith all due respect, that is a problem for you in this argument, yes. You\u0027re pretty clearly operating on the mental model of servers with set functionality in them when they start, regardless of the underlying tech. This is the exact thing that \"serverless\" is trying to get away from.\n\n(My contention is precisely that it ultimately isn\u0027t that hard to get a lot of the \"serverless\" features out of servers, with just a bit of tweaking and tuning and maybe some kubernetes-like support, and accepting that it\u0027s not necessarily that big a deal in the vast majority of cases to start up a server that may have some extra code in it for some particular use case. While lambda is always improving and getting better, I\u0027m deeply unconvinced it was worth throwing away _all the other infrastructure we already have for servers_ for what I find to be rather dubious benefits that I expect frameworks to start popping up to service better and cheaper.)",
					"date": "2017-12-01",
					"id": "dqm6s6y",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "lonahex",
					"content": "Totally awesome! Go is such a great fit for Lambda!",
					"date": "2017-11-30",
					"id": "dqklw9f",
					"isArchived": false,
					"isControversial": false,
					"score": 39
				},
				{
					"author": "jmking",
					"content": "Is it? Go being a compiled language seems like a weird fit for Lambda - the compile step is surely going to hurt performance.",
					"date": "2017-11-30",
					"id": "dqkn4gl",
					"isArchived": false,
					"isControversial": false,
					"score": -44
				},
				{
					"author": "devsquid",
					"content": "ROFL... There\u0027s no way they\u0027ll compile the go app each time an API is called. ",
					"date": "2017-12-01",
					"id": "dqlfx42",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "mustafaakin",
					"content": "I really hope it is binary only, not depending on source code",
					"date": "2017-11-30",
					"id": "dqkntaz",
					"isArchived": false,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "IrishLadd",
					"content": "At my last job we ran a Go binary in Lambda via NodeJS. Node would handle the request and execute the Go binary (Hugo). Pretty easy since go runs anywhere.\n\nI\u0027m assuming this will let you just run the go code directly. Though I\u0027m sure it will compile it on upload rather than in each request.",
					"date": "2017-12-01",
					"id": "dqlipig",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "XANi_",
					"content": "Not if amazon wants to earn more money ;)",
					"date": "2017-12-01",
					"id": "dqlxb9f",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ryeguy",
					"content": "This would be interesting, because if it\u0027s just a binary that means you could in theory use it with any language that can compile to one. There might be some protocol reverse engineering or something, but it could work.",
					"date": "2017-12-01",
					"id": "dqlg1su",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "circuitously",
					"content": "It supports Java currently",
					"date": "2017-11-30",
					"id": "dqkn8ey",
					"isArchived": false,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "Manbeardo",
					"content": "Fun thought: since lambdas work best as microservices with very little code, compiling a typical go lambda will probably take less time than launching a JVM on the same instance.",
					"date": "2017-12-01",
					"id": "dqlnli7",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "amd_ryzen",
					"content": " don\u0027t forget spring overhead! i\u0027m looking into go for this exact reason. ",
					"date": "2017-12-04",
					"id": "dqrgr26",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "lonahex",
					"content": "1. Lambda does not run a fresh container/instance on every invocation. It keeps the program running for some time and re-uses the same instance on new requests. Then kills off the instance if it doesn\u0027t get requests for some time. AWS has not disclosed these numbers yet.\n\n2. Even if they did boot up a new instance on every call, why would they compile from source every single time? That needs to happen only on new deployments/code-changes and then they can just invoke pre-built binary every time they need to run the function.",
					"date": "2017-12-01",
					"id": "dqlgspv",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "andrewmwatson",
					"content": "I\u0027m sure you\u0027ll cross compile the go binary for linux and deploy it as a zip file like you do now with the JS shim in place... or maybe not! Go compilation is incredibly fast and only has to be done when the function is updated, not when it is run.",
					"date": "2017-11-30",
					"id": "dqkna63",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "media_guru",
					"content": "FINALLY!",
					"date": "2017-11-30",
					"id": "dqkiwfu",
					"isArchived": false,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "dgryski",
					"content": "Here\u0027s a tweet: https://twitter.com/AWSreInvent/status/936301451566972930",
					"date": "2017-11-30",
					"id": "dqkidhn",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Walkedairplane",
					"content": "This and Kubernetes are the big announcements I was hoping for this year. Heck yeah",
					"date": "2017-11-30",
					"id": "dqkqjma",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "TheSwissArmy",
					"content": "Combine this with Far Gate and we have a stellar solution\nhttps://aws.amazon.com/blogs/aws/aws-fargate/",
					"date": "2017-12-01",
					"id": "dqlejrs",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "tech_tuna",
					"content": "Not only that. . . now there\u0027s a runtime continuum in AWS.  Want to run a function, Lambda.  Want to scale up a basic or simple service in Docker, run Fargate.  Need more flexibility and power, run ECS.  What\u0027s that you need to run hybrid/bare metal or don\u0027t want vendor lock-in?  Run EKS.  Hey, containers just don\u0027t cut it for my use case. . . nbd, EC2 is still there and still improving.  \n\nNever mind how much better all the built-in services are becoming. . .\n\nAWS is killing it in the cloud.  I\u0027m a huge fan and occasional critic - there are rough spots and inconsistencies here and there, but it\u0027s also getting a bit scary.  Amazon is everywhere.",
					"date": "2017-12-02",
					"id": "dqo199i",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "rpk788",
					"content": "what was the Kubernetes announcement? i think i missed that.",
					"date": "2017-11-30",
					"id": "dqkwip9",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Your_CS_TA",
					"content": "EKS: https://aws.amazon.com/eks/ -- Amazon Elastic Container Service for Kubernetes",
					"date": "2017-11-30",
					"id": "dqky8j3",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "IndomitableCentrist",
					"content": "AWS announces  Elastic Kubernetes Service (EKS) which is essentially container orchestration managed by AWS with k8s\n\nIt is priced similar to Azure Kontainer Service (AKS), free to spin up clusters, pay only for nodes running in the cluster",
					"date": "2017-11-30",
					"id": "dqkybu8",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "redlandmover",
					"content": "https://aws.amazon.com/eks/\n",
					"date": "2017-11-30",
					"id": "dqky90k",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mustafaakin",
					"content": "But not available yet on console",
					"date": "2017-11-30",
					"id": "dqkk94b",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Your_CS_TA",
					"content": "It was a bit obscured, but on the announcement slide this was labeled as a \"pre-announce\". It is not available yet :(\n\nStill, this is like the best thing ever. I personally was not a fan of the programming selection we had (only two typed languages, and Java is a bit too heavyweight for me) and when I heard this was happening, I got super excited.\n\n** Disclaimer: I work for Lambda, but this is my own opinion and not that of AWS.",
					"date": "2017-11-30",
					"id": "dqkoo90",
					"isArchived": false,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "synthdrunk",
					"content": "Is there an announced date for general availability?",
					"date": "2017-11-30",
					"id": "dqkzbyg",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Your_CS_TA",
					"content": "shazam: https://aws.amazon.com/blogs/compute/announcing-go-support-for-aws-lambda/ :)",
					"date": "2018-01-16",
					"id": "dsqp607",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "synthdrunk",
					"content": "very excited, thanks for the reply :3",
					"date": "2018-01-16",
					"id": "dsrvuz6",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Your_CS_TA",
					"content": "Sorry man, I personally do not know any publicly announced date :(",
					"date": "2017-12-01",
					"id": "dql3tjp",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "amd_ryzen",
					"content": "any idea on a date when this will appear in the console as an option for lambda?",
					"date": "2017-12-04",
					"id": "dqrgtkm",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "circuitously",
					"content": "Just keep hitting refresh...",
					"date": "2017-11-30",
					"id": "dqklpx2",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "amd_ryzen",
					"content": "still not available :(",
					"date": "2017-12-04",
					"id": "dqrgsyn",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "stretchwithme",
					"content": "You probably didn\u0027t keep refreshing :-) \n\nNot sure what the holdup is. It\u0027s still not in the list in Oregon or Virginia regions.",
					"date": "2017-12-21",
					"id": "drjrdzp",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "amd_ryzen",
					"content": "I\u0027m not seeing it anywhere. Have you?",
					"date": "2017-12-21",
					"id": "drlacos",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "terramorpha",
					"content": "sorry, i am a noob. But can anyone explain to me what is this lambda thing ?\n",
					"date": "2017-11-30",
					"id": "dqkvclj",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "greyeye77",
					"content": "lambda is a function as a service on AWS.  \nyou upload the code (usually zip) and it will be executed when its called, usually via a web hook(http) or AWS internal triggers.  \n\nso, instead of uploading code to your own VM (ec2), you just upload the code. The benefit is that you do not pay a cent when these functions arent running, but within limit (eg a single cycle cannot go over 5min, memory of 1.5G, etc)  \n\nAWS lambda supports node.js, java, .net, python. So previsouly if you wanted to run Go or any other language, you had to upload it inside the wrapper (eg node.js to execute go binary)  \n\nnot only AWS but Azure and google compute is also doing serverless\n",
					"date": "2017-11-30",
					"id": "dqkw6wl",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "jjolla888",
					"content": "how about libraries? what if your code needs to import them ? where are they uploaded or made available ?",
					"date": "2017-11-30",
					"id": "dqkxu0z",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Your_CS_TA",
					"content": "Today, the main mechanism we see when it comes to multiple file uploads (e.g. bringing in node modules, configs, etc.) is uploading a single zipped file (or jar in java\u0027s case) that has all of those necessities bundled in it.\n\nCurrently, the total aggregate upload size is capped at 250mb unzipped in total.",
					"date": "2017-11-30",
					"id": "dqkyi3s",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "greyeye77",
					"content": "for nodejs, you zip node_modules and source code, then upload",
					"date": "2017-11-30",
					"id": "dql18bn",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "lonahex",
					"content": "You vendor in the libs and push them as part of your deployment. Many tools automate this by bundling your virtual env or node_modules inside a zip file. Then you just upload that file. Only real limitation right now is that the file cannot exceed 50mb in size.",
					"date": "2017-12-01",
					"id": "dqlh08l",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "amd_ryzen",
					"content": "in java at least you can export your entire working project as a \u0027fat\u0027 jar with all the dependencies bundled within the jar itself. you deploy all your own code as well as the dependencies. this is awesome for convenience and terrible for performance but there\u0027s no better way to do it yet.",
					"date": "2017-12-04",
					"id": "dqrgxaf",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ericzhill",
					"content": "https://aws.amazon.com/lambda/",
					"date": "2017-11-30",
					"id": "dqkyn8z",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "royge",
					"content": "This made my day!!!!",
					"date": "2017-12-01",
					"id": "dql7iwv",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "titpetric",
					"content": "Even as a second class citizen, Go with [apex](https://github.com/apex/apex) isn\u0027t half bad, but I\u0027ll be happy to drop the shim.",
					"date": "2017-12-01",
					"id": "dqls1uv",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "grantmoore3d",
					"content": "https://venturebeat.com/2017/11/30/aws-lambda-gets-go-support-and-a-tool-for-sharing-serverless-apps/",
					"date": "2017-12-01",
					"id": "dql67al",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "cartesian_bear",
					"content": "I used to really look forward to it, but now feel like this announcement is a bit lacklustre, given that [other solutions](https://github.com/eawsy/aws-lambda-go-shim) (nearly as good as native) already exist, so this seems like an incremental improvement without other enhancements.\n\nDisclaimer: we have moved on from Lambda for unrelated reasons. They really ought to fix things like\n\n1. no DB connection pooling due to processes not getting reused,\n2. awkward configuration management,\n3. or having to pay for a NAT gateway if you want a function to talk to VPC resources and the internet at the same time.\n\nBut even then, given their Kubernetes announcement, I feel like we can just run our ex-Lambda stuff as Kubernetes jobs and use uniform tooling, so there is no reason for us to consider Lambda.",
					"date": "2017-12-01",
					"id": "dqlxtg1",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "scarhill",
					"content": "They announced [concurrency limits for Lambda](https://aws.amazon.com/about-aws/whats-new/2017/11/set-concurrency-limits-on-individual-aws-lambda-functions/) too. So now you can have each function open and hold a single DB connection for its lifetime. Pooling of functions takes the place of the connection pool and you can limit the number of connections with the concurrency limit.\n\nWhat do you find awkward about configuration management? [Environment variables](http://docs.aws.amazon.com/lambda/latest/dg/env_variables.html) don\u0027t work for you?",
					"date": "2017-12-03",
					"id": "dqogesi",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "cartesian_bear",
					"content": "\u0026gt; So now you can have each function open and hold a single DB connection for its lifetime.\n\nThat\u0027s not solving the problem, though. You are reopening and closing a connection each time, so you still have no connection pooling.\n\nYou already have to do that even now, regardless of concurrency limit. The original problem was that after execution, a Lambda process does not necessarily terminate, it may be frozen and still consume a DB connection, so unless you close it explicitly at the end of the request, so eventually you may run out of connections. There doesn\u0027t appear to be any rhyme or reason in a way the processes are created or destroyed.\n\n\u0026gt; What do you find awkward about configuration management? Environment variables don\u0027t work for you?\n\nEnvironment variables are not enough for doing anything more complex than key-value pair map of basic values. I have a nested config (a map of string -\u0026gt; section, each section with its set of key-value pairs).",
					"date": "2017-12-03",
					"id": "dqom28z",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "uttles",
					"content": "If you have a web server that compiled everything into a single binary, could you just upload that binary? Or would that defeat the purpose of this since it would be running all the time (listening for requests?)",
					"date": "2017-12-01",
					"id": "dqlewag",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "scottjbarr",
					"content": "Not exactly, but it isn\u0027t difficult.\n\nWe have HTTP API\u0027s that we have now deployed as Lambda functions behind API Gateway. The projects are built so that we can run them as a \"normal\" HTTP server, or we can deploy it as a Lambda function. If the layers in your services are decoupled it isn\u0027t very hard.\n\nI found this post helpful in working out how to get it up and running https://medium.com/capital-one-developers/building-a-serverless-rest-api-in-go-3ffcb549ef2\n\nIt will be really nice not to worry about the shim.",
					"date": "2017-12-01",
					"id": "dqli8bj",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "uttles",
					"content": "Thanks, I will give that a read. Good info.",
					"date": "2017-12-01",
					"id": "dqlxb4n",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheSwissArmy",
					"content": "I had the same thought. The googs and msft are getting left in the dust. ",
					"date": "2017-12-02",
					"id": "dqo32hw",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mgdepoo",
					"content": "I work with a traditional stack (no serverless goodies whatsoever), and maybe I\u0027m missing something very obvious here, but isn\u0027t one of the core features of Go the ability to compile to binary for any system? Why is a runtime needed at all? Shouldn\u0027t a Go compiled binary run in almost any thingy?",
					"date": "2018-01-10",
					"id": "dsgkndx",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mellett68",
					"content": "Wheeeeeee",
					"date": "2017-11-30",
					"id": "dqkklke",
					"isArchived": false,
					"isControversial": true,
					"score": 2
				}
			]
		},
		{
			"author": "dlsniper",
			"date": "2016-12-15",
			"id": "5ihs99",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "Hi all,\n\n\nI\u0027m very excited to announce a new episode in the life of the Go plugin for IntelliJ.\n\n\nAbout three years ago, Sergey Ignatov and Alexander Zolotov (working at JetBrains back then) started a major rewrite of the plugin that took it to a working state. Since then they\u0027ve made more than 3000 commits, working day and night and even weekends to make sure that Go programmers have a good experience with the existing plugin.\n\n\nBack then, the plugin had little over 80K downloads. Now it’s got more than 640K downloads, the Go community is growing at an impressive rate, and there’s a high demand for a better developer experience compared to everything else available. Noting all this, JetBrains has decided to put its full support behind it and create a world class editor which will deliver the same quality and functionality that you may be familiar with in their other IDEs like IntelliJ IDEA, PyCharm, etc.\n\n\nToday, they\u0027ve just announced their new dedicated Go IDE codenamed Gogland, which picks up where the open-source plugin left off and introduces a number of changes with many many more to come.\n\n\nTo name a few of these exciting new features:\n\n- type comparison features\n  - go to inheritor structures\n  - go to super interfaces\n  - type based \"smart completion\"\n- extract function refactoring\n- built-in formatter equal to gofmt\n- sub-tests support (running, navigation, gutters)\n- tests debugging\n- semantic highlighting and parameter name hints\n- more Inspections and Quickfixes\n\n\nThe IDE is currently in private beta and while it\u0027s under heavy development, it\u0027s already in a very good shape. On my current setup, with a GOPATH of over 7 GB of Go sources only, it takes about 5 minutes to have it fully indexed (a one-time operation). The IDE starts in less than 10 seconds with the project ready to be edited.\n\n\nIf you wish to become an early adopter of the IDE or get more information about it, please go to its dedicated page, https://www.jetbrains.com/go/. You also have a chance to give the final name for the IDE, so I encourage you to join in.\n\n\nFinally, I\u0027d like to thank Sergey and Alexander and all the other contributors for all their hard work on this. It\u0027s been wonderful to work with them on this project.\n\n\nEdit: the list of differences between the open-source plugin and Gogland: https://www.jetbrains.com/help/go/1.0/faq.html#d3e52\n\n\nKind regards,\n\nFlorin",
			"title": "Announcing Gogland – Brand New Go IDE from JetBrains",
			"comments": [
				{
					"author": "m3wm3wm3wm",
					"content": "Intelligo.",
					"date": "2016-12-15",
					"id": "db895pm",
					"isArchived": true,
					"isControversial": false,
					"score": 50
				},
				{
					"author": "andradei",
					"content": "IntelliG",
					"date": "2016-12-15",
					"id": "db89ch7",
					"isArchived": true,
					"isControversial": false,
					"score": 31
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-15",
					"id": "db8fuul",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "natefinch",
					"content": "This is not an appropriate comment for this forum.",
					"date": "2016-12-15",
					"id": "db8jkjv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "defmacro-jam",
					"content": "[deleted] doesn\u0027t even follow JetBrains\u0027 IDE naming convention.",
					"date": "2016-12-15",
					"id": "db8y7rp",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "DeedleFake",
					"content": "And people think that \u0027Go\u0027 is unsearchable. Google won\u0027t even care about those brackets.",
					"date": "2016-12-16",
					"id": "db9q859",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "watr",
					"content": "Intelligo sounds like a disease... what about G-UNITelli ?",
					"date": "2016-12-15",
					"id": "db8l0hn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Dummies102",
					"content": "it only affects the gogland though",
					"date": "2016-12-15",
					"id": "db8omo3",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ReimersOH42",
					"content": "...",
					"date": "2016-12-16",
					"id": "dbae28v",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Yojihito",
					"content": "\u0026gt; built-in formatter equal to gofmt\n\nWhat was wrong with gofmt that it needed a replacement?",
					"date": "2016-12-15",
					"id": "db8ayq6",
					"isArchived": true,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "dlsniper",
					"content": "The way the IDE works does not allow for a good interaction with gofmt and provide a great development experience.",
					"date": "2016-12-15",
					"id": "db8bjk4",
					"isArchived": true,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "Yojihito",
					"content": "I thought gofmt is a service with an API, you put code in, it gives formatted code out, done. I\u0027m in no way versed with the internals of Jetbrains but every editor (Eclipse, VSCode) I used just included gofmt this way?",
					"date": "2016-12-15",
					"id": "db8bnvl",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "masklinn",
					"content": "I expect they\u0027d want to keep internal edition state like folds and selection, which is probably easy (or at least possible) if they use the Platform\u0027s built-in formatting tools but bordering on impossible if they have to pass raw text to an external tool, plus they\u0027d have to reprocess it for coloration \u0026amp; linting \u0026amp; al.\n\nAlso as an other commenter notes, the built-in formatter can be automatically applied to codegen or templates, or to only a subset of the edition buffer.",
					"date": "2016-12-15",
					"id": "db8folc",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "danredux",
					"content": "Curious to hear the reasoning. As far as I know the \"go\" package and subpackages in std would give you the more fine-grained control over formatting etc, without needing to write a whole parser or anything...",
					"date": "2016-12-15",
					"id": "db8g13m",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "masklinn",
					"content": "They have to write a parser either way in order to perform structural analysis \u0026amp; linking (search type/symbol, jump to definition, …), syntax highlighting, suggestions, fixers \u0026amp; refactorings Jetbrains IDEs are known for.\n\nAnd here again I expect the Platform has a pretty significant set of tools to build a parser integrated with the rest of the system.",
					"date": "2016-12-15",
					"id": "db8i3oj",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "danredux",
					"content": "I would have thought it would be easier to use the stdlib Go parser to implement all of those things, though? It already parses and tell you what symbols you\u0027re looking at, you could very efficiently search the AST, etc. I understand not wanting to exec binaries like gofmt and parse the stdout, that\u0027s ugly and slow, but using an existing library to do all the heavy lifting just seems logical to me.",
					"date": "2016-12-15",
					"id": "db8lnur",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "masklinn",
					"content": "\u0026gt; I would have thought it would be easier to use the stdlib Go parser to implement all of those things, though? […] using an existing library to do all the heavy lifting just seems logical to me.\n\n1. Parsing is far from \"all the heavy lifting\", especially for Jetbrains (russian developers apparently say that Jetbrains cooks parsers for breakfast), I\u0027m sure they\u0027ve got extensive tooling to facilitate that.\n\n2. And Go was written specifically to be fast and easy to parse, understand that Jetbrains has their own Swift, PHP, SQL or C++ parsers (in fact IIRC they\u0027ve got two of that one, as the ReSharper C++ and the CLion teams independently implemented theirs).\n\n3. Furthermore the Go parser is written in Go, requiring JNI bindings to CGO bindings to Go, that\u0027s a fair amount of complexity for what it is.\n\n4. Finally Jetbrains IDEs need lots of deep contextual knowledge of the code for syntactic and flow analysis, code rewriting (refactoring), code generation, and things which just don\u0027t make sense in the language parser like *language injection* where a Go string is parsed and analysed as SQL.\n\n   This is all infrastructure which already exists, having been built in the platform over 15 years or so, it \"just\" needs a parser fitting in.\n\nThus writing their own parsers is the most natural course of action, it lets the new system fit right in the platform\u0027s ecosystem, and allows them to benefit from improvements to the core platform without a mismatch between an external parser and their own tool.\n\nPlus it gives them freedom of movement, they\u0027re not beholden to an external group, though they\u0027re paying that in playing catch-up when the language changes.",
					"date": "2016-12-15",
					"id": "db8mizw",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "bl00dshooter",
					"content": "\u0026gt; I would have thought it would be easier to use the stdlib Go parser to implement all of those things, though?\n\nI believe this IDE, like all other Jetbrains products, is written in Java, not Go. ",
					"date": "2016-12-15",
					"id": "db8q9fn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "I\u0027ll reply in more detail in a couple of hours.",
					"date": "2016-12-15",
					"id": "db8d7xx",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "dlsniper",
					"content": "I think /u/masklinn had a very good explanation above. There\u0027s also another reason. Cursor jumping is irritating when having an external program format the source as the IDE can\u0027t reuse the position in the file correctly anymore. Moreover, the formatting is done on the fly which means that you rarely will need to format anyway.\nFinally, the Platform already offers the tools needed to handle the formatting so it makes sense to use it.",
					"date": "2016-12-15",
					"id": "db8n211",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "uzimonkey",
					"content": "Well it better work _exactly_ like gofmt does.  I\u0027ve had problems with editors wanting to format code one way and stylecops another way and it\u0027s just not good.  If you\u0027re going this route it really does need to behave exactly like gofmt.",
					"date": "2016-12-15",
					"id": "db8q7y0",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "dlsniper",
					"content": "When it will be released in stable I\u0027m sure it\u0027s going to be 100% identical, otherwise JetBrains would not mention it :)",
					"date": "2016-12-15",
					"id": "db8qawp",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "natefinch",
					"content": "When they do that, can they publish a spec about what exactly gofmt does?  It irks me that there\u0027s no written spec for it.",
					"date": "2016-12-16",
					"id": "db9475a",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dlsniper",
					"content": "I\u0027ll pass the question along. We\u0027ve asked the Go devs a long while ago about a formal spec and the answer was that the spec is in the implementation and that\u0027s enough.",
					"date": "2016-12-16",
					"id": "db94vtb",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "natefinch",
					"content": "That would be awesome.  I totally disagree that the implementation is good enough.  If it\u0027s not good enough for the language, it seems like it should not be good enough for the standard formatting for the language.",
					"date": "2016-12-16",
					"id": "db989ws",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "onwuka",
					"content": "I sympathize with the thought though. A spec means it is possible that gofmt doesn\u0027t confirm to a spec it created (a bug) which would be awkward. Right now whatever it does is the law. ",
					"date": "2016-12-16",
					"id": "db9em1e",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "natefinch",
					"content": "That has happened with the language itself - where the implementation deviated from the spec.  So, you decide which one wins (usually the implementation for backwards compatibility) and then you fix the other one.\n\nIt would mean that alternate implementations of gofmt, like the one jetbrains is building, could ensure they match the spec.",
					"date": "2016-12-16",
					"id": "db9wvyx",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-16",
					"id": "db90kcg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "Probably because Atom isn\u0027t an IDE.",
					"date": "2016-12-17",
					"id": "dbblhgs",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-18",
					"id": "dbbq77t",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "[deleted]",
					"content": "Yeah, but you have to rely on libraries like gofmt. Atom doesn\u0027t actually do any building, testing, or running. It\u0027s just a text editor. ",
					"date": "2016-12-18",
					"id": "dbc36of",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "I always thought that was the beauty of the Go ecosystem. Having rich tooling that allow you to write with any editor you want and not needing any IDE.\n\nJudging by the reception in this thread I guess I was wrong.\n\nBut yes I agree. Atom is not an IDE.",
					"date": "2016-12-18",
					"id": "dbc3shh",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Mandack",
					"content": "Atom also does not offer the amount of info, refactorings etc. typical JetBrains IDEs do.",
					"date": "2016-12-16",
					"id": "db9ml0z",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-16",
					"id": "db9qwlo",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Mandack",
					"content": "This is very much staying on topic; Atom is able to use gofmt directly, because it does not need to maintain the amount of metadata JetBrains IDEs do in order to give the features they want.",
					"date": "2016-12-17",
					"id": "dbbg7gw",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "That\u0027s pretty much on point, just happens that you don\u0027t want to agree with it.",
					"date": "2016-12-17",
					"id": "dbbhq2q",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-18",
					"id": "dbbq9f7",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "dlsniper",
					"content": "The other reasons are exactly the reason why IntelliJ isn\u0027t happy an external app changing the formatting (or the code in general). For the most part, you can do gofmt if you call it explicitly. However, if you\u0027d have to do it on save, IntelliJ would offer a very bad experience because the save action can happen while you type, switch focus, something else might trigger it, like a refactoring action.\nAnd speaking of, doing a refactoring action is another reason to have a builtin formatter, because gofmt does not work on broken code, IntelliJ does.",
					"date": "2016-12-18",
					"id": "dbbqx60",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "callcifer",
					"content": "Without losing cursor position and folding?",
					"date": "2016-12-16",
					"id": "dba05m7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "cheptsov",
					"content": "the built-in formatter works with selected text and is also applied when code generation.",
					"date": "2016-12-15",
					"id": "db8cmmt",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dlsniper",
					"content": "Also applies when pasting code, which means you don\u0027t have to do anything and the code is automatically formatted upon pasting.",
					"date": "2016-12-18",
					"id": "dbcgtii",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dobegor",
					"content": "Absolutely excited.\nJust get HiDPI support on Linux properly (FONTS, fix \u0027em).\n\u0026lt;3",
					"date": "2016-12-15",
					"id": "db8d4xf",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "XMLHttpWTF",
					"content": "On the latest GNOME, if you up the font-scaling in `gnome-tweak-tool`, I find the IntelliJ products fine on a 4k screen.",
					"date": "2016-12-16",
					"id": "db9p05h",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "BadMoonRosin",
					"content": "\"Go... *gland*\"?  That a rather... uh, biological sounding name.\n",
					"date": "2016-12-15",
					"id": "db88cjx",
					"isArchived": true,
					"isControversial": false,
					"score": 44
				},
				{
					"author": "PaluMacil",
					"content": "It\u0027s only a project codename, not a product name, but it is a bit odd to English speakers. The FAQ points out that it\u0027s an island off Finland and sounds a little like Kotlin.",
					"date": "2016-12-15",
					"id": "db891ge",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "[deleted]",
					"content": "To French speakers too...",
					"date": "2016-12-15",
					"id": "db8dc14",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rberenguel",
					"content": "Catalan/Spanish, too",
					"date": "2016-12-16",
					"id": "db9ll2h",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "AlekSilver",
					"content": "It\u0027s an island near Kotlin. https://en.wikipedia.org/wiki/Gogland",
					"date": "2016-12-15",
					"id": "db89p0t",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "BorgClown",
					"content": "Gonad it is, then.",
					"date": "2016-12-15",
					"id": "db8rrv3",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "metamatic",
					"content": "No, that\u0027s already the name of the project to support monads in Go.",
					"date": "2016-12-17",
					"id": "dbbkwgp",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "sh41",
					"content": "On the topic of names, what about simply \"Goland\"? A piece of land for Go. Simple, no awkward second \u0027g\u0027.",
					"date": "2016-12-15",
					"id": "db8id9t",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "kariudo",
					"content": "I love JetBrains\u0027 IDEs and their VS extensions, but yeah... that name is not so English friendly... ",
					"date": "2016-12-15",
					"id": "db8ee3d",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Greymarch",
					"content": "If this new IDE will let me run AND debug my go code in MacOS inside the IDE, I will be a rabid user of this IDE.\n\nRight now, I am trying to use Visual Studio Code to run and debug my code inside VSC on MacOS, and it\u0027s giving me all kinds of problems.  Delve is really, really buggy on MacOS.",
					"date": "2016-12-15",
					"id": "db8dm0f",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "nomadProgrammer",
					"content": "Webstorm with go plug in works fine",
					"date": "2016-12-16",
					"id": "db98bp3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Greymarch",
					"content": "I have IntelliJ with the Go plug-in.  It does not allow debugging on MAC-OS.  I specifically mentioned MacOS in my first post.",
					"date": "2016-12-16",
					"id": "db99o1w",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-16",
					"id": "dba85ca",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Greymarch",
					"content": "Wow.  Unreal.  Read my first post.  Simply stunning.",
					"date": "2016-12-17",
					"id": "dbas6rd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "callcifer",
					"content": "\u0026gt; If this new IDE will let me run AND debug my go code in MacOS inside the IDE, I will be a rabid user of this IDE.\n\nYou can already do that, today, with the IDEA Go plugin.",
					"date": "2016-12-15",
					"id": "db8hwjv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Greymarch",
					"content": "The IDEA GO plugin WILL NOT run and debug golang code inside the IDE FOR MAC-OS.  It requires installation of delve on MacOS, which is extremely buggy.  You can follow these wiki issues at the delve github project to understand the underlying problem.  This problem still exists with IntelliJ and the current IntelliJ Go plug-in.\n\nhttps://github.com/derekparker/delve/issues",
					"date": "2016-12-15",
					"id": "db8k6vn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "vetinari",
					"content": "The 10.2.1 update has broken all debuggers, that\u0027s why you need Xcode 8.1 on the C/ObjC side too. Delve was also updated and it works, in 10.2.2 too.\n\nIf you have any problems, make sure it is codesigned properly.",
					"date": "2016-12-17",
					"id": "dbbesur",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "callcifer",
					"content": "Ah, sorry. I\u0027m on Linux and I thought it\u0027d work the same way on OS X. ",
					"date": "2016-12-15",
					"id": "db8t5ue",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "infinii",
					"content": "Delve doesn\u0027t support debugging of tests. I\u0027ve found this feature in Gogland to be extremely helpful.",
					"date": "2017-02-21",
					"id": "de15nrg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SupersonicSpitfire",
					"content": "Why not? I think you can debug tests with Delve via LightIDE.",
					"date": "2017-04-21",
					"id": "dgk78k8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neopointer",
					"content": "I hope there will be a community edition of this IDE since it looks like the open source plugin is gonna die.",
					"date": "2016-12-15",
					"id": "db8c3j9",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "mixedCase_",
					"content": "There won\u0027t be, apparently.",
					"date": "2016-12-15",
					"id": "db8du1m",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "VedVid",
					"content": "Yeah, most probably won\u0027t be, but... there is small hope, I think. In FAQ they stated that *pricing [will be] similar to PhpStorm, PyCharm, RubyMine*. Sounds like they are considering PyCharm as not free IDE, but there is Community Edition available for download.",
					"date": "2016-12-15",
					"id": "db8nuvp",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "mixedCase_",
					"content": "I don\u0027t think there\u0027s any \"hope\" here. They\u0027re no longer making newer IDEs free. If there was to be a community edition, it would be on the FAQ.",
					"date": "2016-12-15",
					"id": "db8o5oo",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "dlsniper",
					"content": "I\u0027m not going to get into the details of pricing and licensing as I don\u0027t have any knowledge of them. But based on the FAQ, if they price this in the same range as PyCharm et al smaller IDEs I think it will make the IDE quite approachable as a price paid per month (around ~€20 / month~ (that is companies), €9 / month right now).\n\nIf you spend all your time developing Go apps, I think it\u0027s a reasonable price. They are spending all their time to develop a product, fix all the bugs, add features and so on.\n\nIf you don\u0027t like paying JetBrains, I suggest trying to donate to people like Dominik Honnef https://www.patreon.com/dominikh who are doing a lot of work in the open-source community to give developers tools like go-statickcheck or go-mode.el. Aside from VSCode and I maybe Atom, I don\u0027t think any other editor out there for which the developers are paid to work on and the only tool that I can think of as being paid for is guru.",
					"date": "2016-12-16",
					"id": "db9ujdg",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dlsniper",
					"content": "I\u0027ve made a terrible mistake. I was looking at the price for companies when I said €20 / month for license. For individual developers, the price is only €9 / month (for PyCharm \u0026amp; co.). I apologize for this.",
					"date": "2016-12-17",
					"id": "dbaz7i9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "They still update the Python plugin even though they have PyCharm. ",
					"date": "2016-12-16",
					"id": "db9agpe",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "There will be a Go plugin for the paid IDEs, but in the beginning of 2017. The opensource plugin will not get the new features tho. ",
					"date": "2016-12-16",
					"id": "db9gpg9",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "amorphatist",
					"content": "Test debugging, hallelujah! ",
					"date": "2016-12-15",
					"id": "db8s8kt",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "Gog-land? Go-gland? Google-land?\n\nThe name...🤔",
					"date": "2016-12-15",
					"id": "db8avuj",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "ZeroCool2u",
					"content": "This is so exciting!! The JetBrains IDE\u0027s make the barrier to entry for starting to work with a new language super low, especially if you\u0027re already familiar with the others. \n\nI really hope I get a chance to try an early build!",
					"date": "2016-12-15",
					"id": "db8bapx",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "b4ux1t3",
					"content": "The problem being that there doesn\u0027t seem to be a community edition in the works, meaning developers looking to get in to Go who are coming from other JetBrains products will have to pay just to *try* Go. In the end, this looks like it will be more useful for developers whose companies are switching to a Go-based stack, or for ones that are already working in Go.",
					"date": "2016-12-17",
					"id": "dbanp4f",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "\u0026gt; meaning developers looking to get in to Go who are coming from other JetBrains products will have to pay just to try Go\n\nThat\u0027s incorrect. There will be a plugin for IntelliJ IDEA Ultimate and other paid IDEs according to a statement on the release announcement. Moreover, the IntelliJ Toolbox users will automatically get the new IDE without having to do anything for it. Both will happen when the IDE will go in public EAP during 2017. So people that already use other JetBrains products are well taken care of by JetBrains.\n\n\u0026gt; In the end, this looks like it will be more useful for developers whose companies are switching to a Go-based stack, or for ones that are already working in Go.\n\nActually it will be very useful for beginners as well. All other products are free for students and teachers, are free for open-source project maintainers and are discounted for graduates and startups. While I don\u0027t know what will happen when the IDE goes 1.0, there\u0027s strong evidence to support that it will continue in the same line, which will make it very attractive to a lot of people. Finally developers that really want to use this, will probably be able to pay the €9 / month subscription fee, which if you think about it, it\u0027s the cost of two coffees. And with the IDE having a trial, I\u0027m sure people will try it and figure out for themselves if they like what they see or not.",
					"date": "2016-12-17",
					"id": "dbbi1c0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "aminoglycine",
					"content": "Considering I use Intellij, PHPStorm, and Webstorm on a daily basis, this is awesome.",
					"date": "2016-12-16",
					"id": "db9lxf6",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "nomadProgrammer",
					"content": "Jetbrains  are the best at doing ides I love all their products I have tried",
					"date": "2016-12-16",
					"id": "db98d6r",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "npyde",
					"content": "1. Do the plug-in developers cease to work on the plug-in and instead work on the JetBrains Go IDE?\n\n2. Is Gogland a fantasy name? I read it as Go gland, which I find odd.",
					"date": "2016-12-15",
					"id": "db88f28",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "PaluMacil",
					"content": "If you look at the features, it lists differences between the plugin and the new IDE, which I\u0027m guessing will remain in place.\n\nIn the FAQ, they mention it\u0027s a working project codename, not a product name. They also mention it\u0027s an island off Finland and also sounds like Kotlin. Overall, a product codename is not terribly important, but it is a bit odd to English speakers.",
					"date": "2016-12-15",
					"id": "db88zin",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dlsniper",
					"content": "See here the full list of differences: https://www.jetbrains.com/help/go/1.0/faq.html#d3e52",
					"date": "2016-12-15",
					"id": "db8asm3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "masklinn",
					"content": "\u0026gt; Is Gogland a fantasy name?\n\nIt\u0027s an island near Kotlin[0] which is an island near Saint Petersburg (where one of their offices is located).\n\n[0] name of Jetbrains\u0027s JVM-based language",
					"date": "2016-12-15",
					"id": "db8funn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "skelterjohn",
					"content": "Cool, I put in a request to try it out.",
					"date": "2016-12-15",
					"id": "db88lv7",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "KEANO_",
					"content": "Any estimates on average request processing time? :D I want to try this",
					"date": "2016-12-15",
					"id": "db88v8g",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "\u0026gt; Any estimates on average request processing time? :D I want to try this\n\nWhat do you mean? For feature requests?",
					"date": "2016-12-15",
					"id": "db89yet",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "KEANO_",
					"content": "The EAP Request. I had to enter an e-mail address and I\u0027m desperately waiting for the download link :D",
					"date": "2016-12-15",
					"id": "db8lkl5",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dobegor",
					"content": "For getting early build.",
					"date": "2016-12-15",
					"id": "db8fzot",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "I think it\u0027s planned for a couple of weeks at most. That\u0027s the usual period from previous IDEs",
					"date": "2016-12-15",
					"id": "db8lguo",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dobegor",
					"content": "Fine then. What\u0027s about Linux HiDPI issues?  (https://www.reddit.com/r/golang/comments/5ihs99/announcing_gogland_brand_new_go_ide_from_jetbrains/db8d4xf/)\n\nI guess some people experience that too (it\u0027s upvoted), it\u0027s barely usable on 1080p@12.5\" screen.\n\nP.S. Sorry, I know that might be unrelated to you personally, but we\u0027ve got no way to reach out devs directly. ",
					"date": "2016-12-15",
					"id": "db8ofg6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "I\u0027d recommend looking up the issue here: https://youtrack.jetbrains.com/issues?q\u003dhidpi and if you can\u0027t find it open an issue, they are very quick to reply to these.",
					"date": "2016-12-15",
					"id": "db8p2hc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "\u0026gt; P.S. Sorry, I know that might be unrelated to you personally, but we\u0027ve got no way to reach out devs directly.\n\nYes, you can. Please open an issue on their tracker or add a comment here: https://blog.jetbrains.com/go/2016/12/15/announcing-gogland-brand-new-go-ide-from-jetbrains/\n\nBelieve me, their developers look at all of this but they need support from the community in order to identify and fix issues quickly so the more help you can give them in order to reproduce the problem, the better your chances are.\n\nAlso, ping them on https://intellij-support.jetbrains.com/hc/en-us/community/topics or on Twitter.\n\nAnd finally, if you are a paying customer contact their support.\n\nAll of those work, but you need to be explicit about the problem. It\u0027s also a matter of priorities for them and, as you can see, they can be really busy.\n\nSorry I can\u0027t do more to help you out.",
					"date": "2016-12-15",
					"id": "db8q62x",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "qu33ksilver",
					"content": "Very nice ! This will go a long way in spreading the language to a larger mass.",
					"date": "2016-12-15",
					"id": "db8jiwx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "konrain",
					"content": "why not call it just goland",
					"date": "2016-12-15",
					"id": "db8x1si",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "It\u0027s the name of an island https://en.wikipedia.org/wiki/Gogland near the https://en.wikipedia.org/wiki/Kotlin_Island which is near St. Petersburg where a big dev center for Jetbrains is located. It\u0027s a pun / codename for it, they are happy to get suggestions for the final name.",
					"date": "2016-12-15",
					"id": "db8x55g",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "j7b",
					"content": "\u0026gt; GOPATH of over 7 GB of Go sources only\n\nI always wondered what \n\n    go get github.com/...\n\nwould do.",
					"date": "2016-12-16",
					"id": "db90emk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "No, that would be around 50GB or so, if I remember correctly from Dominik H. I haven\u0027t done it yet, but I plan to quite soon. However it\u0027s important to be able to measure the performance and have a reference for it.",
					"date": "2016-12-16",
					"id": "db90x44",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tscs37",
					"content": "Exciting news!",
					"date": "2016-12-16",
					"id": "db9ejaf",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hugthemachines",
					"content": "I think full IDEs are great. I have tried using go a couple of times with Eclipse and it didn\u0027t work as smoothly as I hoped. Perhaps this will be a bit better. I look forward to trying out go a little bit more when I can get hold of this.",
					"date": "2016-12-16",
					"id": "db9un02",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Yojihito",
					"content": "What didn\u0027t work as smoothly? I had no problems with the Goclipse plugin so far.",
					"date": "2016-12-17",
					"id": "dbbmbd8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hugthemachines",
					"content": "I don\u0027t even remember anymore. I tried to get it running twice but there was a lot of configuration to be done and then it did not work fully anyway. Comparing that to for example the python plugin where it works with very little trouble.\n",
					"date": "2016-12-18",
					"id": "dbbtjyv",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Yojihito",
					"content": "\u0026gt; a lot of configuration to be done\n\nHuuu?\n\n* Install Goclipse (~5 mouse clicks).\n\n* Go into the settings / Go / Tools and download+install all things (gofmt, oracle etc) with one click automatically\n\n* Done",
					"date": "2016-12-18",
					"id": "dbc8ddf",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "hugthemachines",
					"content": "It really looked good. I installed newest go, downloaded the newest source also and put it in the src dir of the go installation to be safe downloaded a neon and installed it by the instructions of goclipse. \nMade a go project and made a hello world file.\nUnfortunately it was not happy.\n\n\n\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Starting Go build  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n************  Building Go project: firsttry  ************\n  with GOPATH: D:\\KOD\\GO;D:\\kod\\go\\go_neon\\firsttry\n\u0026gt;\u0026gt; Running: C:\\Go\\bin\\go.exe install -v -gcflags \"-N -l\" ./...\n9fans.net\\go\\acme\\Dict\\Dict.go:8:2: cannot find package \"golang.org/x/net/dict\" in any of:\n\tC:\\Go\\src\\golang.org\\x\\net\\dict (from $GOROOT)\n\tD:\\KOD\\GO\\src\\golang.org\\x\\net\\dict (from $GOPATH)\n\tD:\\kod\\go\\go_neon\\firsttry\\src\\golang.org\\x\\net\\dict\ngithub.com\\golang\\lint\\lint.go:24:2: cannot find package \"golang.org/x/tools/go/gcimporter\" in any of:\n\tC:\\Go\\src\\golang.org\\x\\tools\\go\\gcimporter (from $GOROOT)\n\tD:\\KOD\\GO\\src\\golang.org\\x\\tools\\go\\gcimporter (from $GOPATH)\n\tD:\\kod\\go\\go_neon\\firsttry\\src\\golang.org\\x\\tools\\go\\gcimporter\ngithub.com\\golang\\lint\\lint.go:25:2: no buildable Go source files in D:\\KOD\\GO\\src\\golang.org\\x\\tools\\go\\types\ngolang.org\\x\\tools\\cmd\\html2article\\conv.go:21:2: cannot find package \"golang.org/x/net/html\" in any of:\n\tC:\\Go\\src\\golang.org\\x\\net\\html (from $GOROOT)\n\tD:\\KOD\\GO\\src\\golang.org\\x\\net\\html (from $GOPATH)\n\tD:\\kod\\go\\go_neon\\firsttry\\src\\golang.org\\x\\net\\html\ngolang.org\\x\\tools\\cmd\\html2article\\conv.go:22:2: cannot find package \"golang.org/x/net/html/atom\" in any of:\n\tC:\\Go\\src\\golang.org\\x\\net\\html\\atom (from $GOROOT)\n\tD:\\KOD\\GO\\src\\golang.org\\x\\net\\html\\atom (from $GOPATH)\n\tD:\\kod\\go\\go_neon\\firsttry\\src\\golang.org\\x\\net\\html\\atom\ngolang.org\\x\\tools\\playground\\socket\\socket.go:37:2: cannot find package \"golang.org/x/net/websocket\" in any of:\n\tC:\\Go\\src\\golang.org\\x\\net\\websocket (from $GOROOT)\n\tD:\\KOD\\GO\\src\\golang.org\\x\\net\\websocket (from $GOPATH)\n\tD:\\kod\\go\\go_neon\\firsttry\\src\\golang.org\\x\\net\\websocket\n   ^^^ Terminated, exit code: 1 ^^^\n************  Build terminated.  ************\n\"",
					"date": "2016-12-18",
					"id": "dbcnjek",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "Did you add the Gopath to the Windows System path?\n\nWhat\u0027s showing up for \"go env\" in the command line?",
					"date": "2016-12-18",
					"id": "dbcugo1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hugthemachines",
					"content": "Nope, there is nothing in the base directory where the Gopath environment variable path points to that I have not created myself. I mean file wise, so I don\u0027t see why it should be added to Path.\n    \n    go env gives this:\n    \n    set GOARCH\u003damd64\n    set GOBIN\u003d\n    set GOEXE\u003d.exe\n    set GOHOSTARCH\u003damd64\n    set GOHOSTOS\u003dwindows\n    set GOOS\u003dwindows\n    set GOPATH\u003dD:\\KOD\\GO\n    set GORACE\u003d\n    set GOROOT\u003dC:\\Go\n    set GOTOOLDIR\u003dC:\\Go\\pkg\\tool\\windows_amd64\n    set CC\u003dgcc\n    set GOGCCFLAGS\u003d-m64 -mthreads -fmessage-length\u003d0 -fdebug-prefix-map\u003dC:\\Users\\\n    e\\AppData\\Local\\Temp\\go-build778486750\u003d/tmp/go-build -gno-record-gcc-switches\n    set CXX\u003dg++\n    set CGO_ENABLED\u003d1\n    \n    I tried copying the content of go\\src into the gopath src directory. That probably was not a good plan :-) got lots of lines about imports use of internal package not allowed.\n",
					"date": "2016-12-18",
					"id": "dbcvrao",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hugthemachines",
					"content": "I found out i had some stuff in the src directory under the gopath. I moved them out of there and retried building my hello world project and it said like this:\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  Starting Go build  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n************  Building Go project: firsttry  ************\n  with GOPATH: D:\\KOD\\GO;D:\\kod\\go\\go_neon\\firsttry\n\u0026gt;\u0026gt; Running: C:\\Go\\bin\\go.exe install -v -gcflags \"-N -l\" ./...\nwarning: \"./...\" matched no packages\n   ^^^ Terminated, exit code: 0 ^^^\n************  Build terminated.  ************\n\nI can\u0027t find any .exe-file anywhere in the project directory.",
					"date": "2016-12-18",
					"id": "dbcx7ko",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "If it compiles it should be in the \"Projectname\\bin\" folder.",
					"date": "2016-12-18",
					"id": "dbcz8kj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hugthemachines",
					"content": "I hadn\u0027t seen this comment yet so i responded to your other. I got the damn thing to compile at last but it did not accept me using a normal project and go from there and put stuff in relative paths. \n\nThe installation did really not work as easy as you said. I know this because I tried it from scratch, uninstalling go, changing the godir to an other disk and setting all variables there etc, cleaning out anything old to make sure nothing causes trouble and it still did not work by just installing it, making a go project, adding a source file to that and compiling it. \n\nThat results in no binary file and that is how at least I think it should work after an installation of an eclipse plugin. You must have some other stuff set up if it works that easy or you put the project in the only accepted path.",
					"date": "2016-12-18",
					"id": "dbczvbs",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "I hadn\u0027t installed Go or Eclipse/Goclipse on my notebook under Windows yet (only on my Fedora partition), it was a fresh install.\n\nWhat I noticed is that you seem to put your projects under your Gopath - that\u0027s not where your stuff should be. The Gopath is for stuff you download via \"go get\".\n\nProjects must be created via the Eclipse interface, you normally have a default \"workspace\" folder that is set upon the first start where your project folders then are created.",
					"date": "2016-12-18",
					"id": "dbd05ht",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "hugthemachines",
					"content": "Apparently, it is not ok to have your own project directory wherever you config it in eclipse, but if I put my project in a directory like this:\n\nD:\\kod\\go\\src\\github.com\\heyagain\\fourthtry\n\nI can compile it and the binary ends up in.\n\nD:\\kod\\go\\bin\n\nI think that is very weird. I think the project directory should be able to be anywhere and the binary files should end up in a directory relative to the project.\n\n",
					"date": "2016-12-18",
					"id": "dbczj53",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "I just tested it under Windows with Goclipse and with the same folder structure as yours and I get the binary into the bin folder of my project folders.\n\n\u0026gt; D:\\kod\\go\\src\\github.com\\heyagain\\fourthtry\n\nHow do you create projects? You must create them through Eclipse, New Go Project -\u0026gt; src folder -\u0026gt; another folder -\u0026gt; go files.\n\n",
					"date": "2016-12-18",
					"id": "dbczs45",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hugthemachines",
					"content": "I looked at the goclipse site now. They say this:\n\n\"The project location is not part of any GOPATH entry. In this case the project location will implicitly be added as an entry to the GOPATH, and a Go workspace structure with the bin, pkg, and src directories will be used in the project. Note that the project\u0027s implicit GOPATH entry will only apply to the source modules in that project. It will not be visible to other Goclipse projects (unless the entry is explicitly added to the global GOPATH).\"\n\nThis does not seem to work then, if they mean it like i understand it.",
					"date": "2016-12-19",
					"id": "dbd0d9i",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "You have your GOROOT - the place where you installed Go.\n\nYou have GOPATH - the place where your stuff is placed from \"go get\" and which you have to include as a Path variable under Windows.\n\n\u0026gt;  with GOPATH: D:\\KOD\\GO;D:\\kod\\go\\go_neon\\firsttry\n\n- that\u0027s your problem, you are trying to use a project in your GOPATH directory, don\u0027t do that.\n\nYou have your Eclipse workspace - the place where your Go projects are created, Eclipse asks you on startup for a folder for the Workspace directory.\n\nIf all 3 are set you can just create a new Go project via \n\n* File\n* New\n* Project\n* Go/Go Project\n* Enter Projectname\n* Finish\n\nThen create a folder under the \"src\" folder and create your \"main.go\" file into it via \"right click/new/go file\". Then enter your go code, press the big green arrow (after creating a Run configuration for Go) and it gets compiled and placed into your project bin folder.\n\nScreenshot from my new installation a few minutes ago with Eclipse project on the left side, Go environment variables on the right top and my Workspace directory with the compiled binary from Eclipse on the bottom. I just used the default workspace Eclipse suggests me.\n\n* http://imgur.com/a/mJYBQ\n\nAnd then you can go under \"Windows / Preferences / Go / Tools\" and one click install gocode, guru and godef (and don\u0027t forget to activate \"Format automatically on editor save\" at the bottom).",
					"date": "2016-12-19",
					"id": "dbd0pv0",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hugthemachines",
					"content": "Thanks, I\u0027ll check it out when I get home.",
					"date": "2016-12-19",
					"id": "dbdhmty",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hugthemachines",
					"content": "I did like that now, it worked out. I forgot to make a folder under the src dir, i was surprised that it was needed but that is ok. Now I was able to compile it and the bin ended up in the bin of my project.\n\nThanks alot for the help!",
					"date": "2016-12-19",
					"id": "dbecfq7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "You\u0027re welcome :).",
					"date": "2016-12-19",
					"id": "dbecqf1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "vanrysss",
					"content": "Go is a real language now!",
					"date": "2016-12-15",
					"id": "db8gs4c",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "b4ux1t3",
					"content": "I know this was a joke, and I laughed at it, but for some reason it also made me irrationally angry.",
					"date": "2016-12-17",
					"id": "dbansxa",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "slantview",
					"content": "Why use this over VS Code?",
					"date": "2016-12-15",
					"id": "db8jlmo",
					"isArchived": true,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "PaluMacil",
					"content": "I love JetBrains products, but I do a lot of my Python work in VS Code right now despite my paid PyCharm subscription. For me the choice is usually about my mood. VS Code competes more directly with Atom and Sublime Text. JetBrains products usually feel heavier and slower, but the GIT tooling, refactoring, and configuration GUIs are pretty rich. When Project Rider is released for C# et al, I anticipate it will compete with Visual Studio, not Visual Studio Code. Go, on the other hand, doesn\u0027t really have a rich feature filled option. The difference might not be large enough for me, but if I wanted a GUI to configure Docker stuff, it might already be worth it.",
					"date": "2016-12-15",
					"id": "db8lh98",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dlsniper",
					"content": "I think you\u0027ll find plenty of reasons here: https://www.jetbrains.com/go/features/",
					"date": "2016-12-15",
					"id": "db8o6ai",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "slantview",
					"content": "Not really honestly. Getting delve working in VS Code has been pretty great experience. Granted, getting delve working was a challenge that should be easier, I ended up installing it through Atom\u0027s go plugins (go-debug I want to say).\n\nI do think jetbrains stuff is nice and if you are used to big IDE\u0027s I\u0027m sure this is your best option. But I\u0027m a vim and sublime text guy, so VS Code hits a sweet spot for me.\n\nEdit: autocorrect ",
					"date": "2016-12-15",
					"id": "db8ozt5",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dlsniper",
					"content": "You can have database integration directly from your editor and auto-completion for it while at it.\nYou can have quickfixes for the errors which means that you can fix stuff a lot faster and across your whole code base.\nYou can get Docker integration, deployment to various platforms, support for a lot of languages and configuration formats (CloudFormation, Terraform etc.)\nBut yeah, if you ask the question and are still not satisfied with those, I guess you probably won\u0027t be a target user for this kind of editors.",
					"date": "2016-12-15",
					"id": "db8pit3",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "s0uly",
					"content": "Yes!",
					"date": "2016-12-15",
					"id": "db8cpbm",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "I\u0027m happy with vim-go(https://github.com/fatih/vim-go)...",
					"date": "2016-12-16",
					"id": "db96pv3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "Fatih is doing an amazing job with vim-go, I\u0027m glad to hear you are happy with it. Please make sure he knows that as well. ",
					"date": "2016-12-16",
					"id": "db9j4de",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Nazariglez",
					"content": "Awesome!! I will try it for sure. But I have some doubts, that means the current IntelliJ plugin will be discontinued?",
					"date": "2016-12-15",
					"id": "db87zc9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "BadMoonRosin",
					"content": "They created a fork of the open source plugin about six months ago.\n\nIt\u0027s too soon to say what relationship there will be (if any) between the upstream open source plugin and this proprietary downstream.  JetBrains may continue to write new features in the free version, as they do for many of their other IDE language plugins.  Or they may not.\n\nAll I know is that the open source plugin moved at a snail\u0027s pace until three years ago, when JetBrains started donating paid developer time to it.  Then it became a professional-grade Go programming environment very quickly.  I haven\u0027t noticed a drop-off in the past six months, but it\u0027s only been six months.\n\nSo we\u0027ll see.\n",
					"date": "2016-12-15",
					"id": "db893un",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "masklinn",
					"content": "My understanding is the current plugin is a third-party project to which two Jetbrains devs started contributing some time ago.",
					"date": "2016-12-15",
					"id": "db8a2ud",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dlsniper",
					"content": "See here the full list of differences: https://www.jetbrains.com/help/go/1.0/faq.html#d3e52",
					"date": "2016-12-15",
					"id": "db8as2x",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "lsl_bot",
					"content": "Just a note–it\u0027s pretty irritating to advertise something you can\u0027t download. I understand it\u0027s in beta testing, but why bother announcing anything?",
					"date": "2016-12-15",
					"id": "db8xjy0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "Because they want to gauge the interest of people, for example, see if it\u0027s worth doing it as much as they thought it does.\n\nAnd to give all the people that were asking for one an answer.\n\nAnd to let people know they care.",
					"date": "2016-12-15",
					"id": "db8yjyf",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Zeffas",
					"content": "As I understand its based on Webstorm, similar to PHP, Pythong IDEs. \n\nWas just planning to buy Webstorm since my Intellij license is about to expire. Wondering if they would provide some upgrade option or you\u0027ll just need to by new license.",
					"date": "2016-12-16",
					"id": "db90sfk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "Please contact their sales department, they are the best to answer this one.",
					"date": "2016-12-16",
					"id": "db90us3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dbot77",
					"content": "Really excited about this! \nPlease do not settle on the name, it is terrible.",
					"date": "2016-12-16",
					"id": "db913ay",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "This is just the codename of the IDE, JetBrains is looking for a name for the IDE and they are looking forward for suggestions :)",
					"date": "2016-12-16",
					"id": "db91v3b",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "368F",
					"content": "Can I use delve debugger on tests?",
					"date": "2016-12-16",
					"id": "db9g464",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "Yes",
					"date": "2016-12-16",
					"id": "db9gmd9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "xuqingyi",
					"content": "Did it mean that Gogland uses delve either?",
					"date": "2016-12-18",
					"id": "dbc6goa",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "Yes, that\u0027s correct, Gogland uses the only debugger known to work with Go, delve. ",
					"date": "2016-12-18",
					"id": "dbc6sm7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "xuqingyi",
					"content": "There are still a lot of bugs in delve, hang, go to wrong line while step out, can not print local variables.... ",
					"date": "2016-12-18",
					"id": "dbc6y3n",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "Sadly those can\u0027t be fixed without people contributing to delve",
					"date": "2016-12-18",
					"id": "dbc70my",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-16",
					"id": "dbac24z",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "\u0026gt; In French, Gogland means \"Godickhead\".\n\u0026gt; Just sayin.\n\nAnd in Russian it is the name of an island: https://en.wikipedia.org/wiki/Gogland. In English it means nothing. And neither does it mean anything in Romanian.",
					"date": "2016-12-16",
					"id": "dbacnsu",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "eggsampler",
					"content": "This sound great, I use the go plugin in IntelliJ a lot. Would definitely switch over if they support go templates!",
					"date": "2016-12-16",
					"id": "dbafwmp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "I suggest you add your vote here: https://youtrack.jetbrains.com/issue/GO-2953 as that would signal the developers that they should spend their time on this instead of other issues. I\u0027m confident this will be supported at some point.",
					"date": "2016-12-18",
					"id": "dbbsibm",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "eggsampler",
					"content": "Thanks for the link, done!",
					"date": "2016-12-18",
					"id": "dbbx08r",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "_nefario_",
					"content": "i would love to see some kind of concurrency diagram to visualise goroutines and channels,  in the same vein as the concurrency diagram for the pycharm",
					"date": "2017-02-21",
					"id": "de0u5l9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "I\u0027ve created this issue to track the feature: https://youtrack.jetbrains.com/issue/GO-3528 Hope it helps.",
					"date": "2017-02-21",
					"id": "de0v9hf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mingrammer",
					"content": "It\u0027s so cool XD\n",
					"date": "2016-12-15",
					"id": "db87o7m",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "andyantrim",
					"content": "This is super important, I\u0027ve been using Go this week for a uni project (needed an excuse to learn it anyway!) And trying to learn a language without an IDE is pretty tricky. I think this will encourage the uptake of Go a bit more, as it bridges over the learning gap",
					"date": "2016-12-15",
					"id": "db8mrvn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "v0idl0gic",
					"content": "\u0026gt;trying to learn a language without an IDE is pretty tricky.\n\nI think being able to do this is super important, IDEs are def. a nice productivity boost, but if you can\u0027t get by with just stock vim/emacs/nano and your compiler, I would worry you really don\u0027t understand how your tool chain works. When I was a Java TA I always make sure my students could compile and run Java from the commandline as a starting session.\n\nAlso, at the risk of getting all \"get off my lawn\", I want to point out the Go toolchain is super simple to use compared to most C toolchains and note that when I started using Go in 0.8 you had to use makefiles to call the 6g (compile) and 6l (linker). Now it is super easy... go build/install/run/fmt...\n\nAlso, as mentioned below:\n\n\u0026gt;there is also pretty decent LiteIDE.\n\nI\u0027ve been using LiteIDE since like Go 1.1... :p Before that I was using gedit with some custom scripts.",
					"date": "2016-12-16",
					"id": "db93tm6",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "VedVid",
					"content": "It\u0027s slightly off-topic, but if you don\u0027t want tinker with plugins for VS Code or IntelliJ, there is also pretty decent [LiteIDE](https://github.com/visualfc/liteide/releases).",
					"date": "2016-12-15",
					"id": "db8nz8t",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "Not to forget Eclipse with the Go plugin which I use.",
					"date": "2016-12-15",
					"id": "db8uwsm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "Eclipse + Goclipse plugin gets stuff done :).",
					"date": "2016-12-17",
					"id": "dbbmi0d",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "dlsniper",
					"content": "Judging by the other comments in this thread it doesn\u0027t look like that sadly. ",
					"date": "2016-12-19",
					"id": "dbd4drz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "howesteve",
					"content": "Although I\u0027ll probably be a customer, I\u0027m not sure if I find this right. So they build on open source code, contributed by #28 developers atm, then hire the main developers and bye open source project ? ",
					"date": "2016-12-16",
					"id": "db936qq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "To give you some insight into this, Sergey and Alexander were always part of JetBrains and the plugin had a CLA attached to the contributions as well as a corresponding license. I was asked how I would feel about them using the plugin as a starting point for the IDE a while ago and the answer was DEFINITELY YES!!! because I knew that the Go developers would get an excellent experience. \n\nSergey and Alexander worked their asses off during weekends, at night, for the past years to make what is the plugin that we have today and without them things would have been a lot worse. Even when they contributed the reworked plugin to the community, they asked me and Mihai Toader, the original maintainer of the original plugin, how we\u0027d feel about them doing so and if we\u0027d like to help them out build it. \n\nJetBrains has been nothing but professional about it. They\u0027ve sent previews invites to people who opened a even just single issue to the plugin or a small contribution as a sign of thank you so please rest assured they\u0027ve been beyond reproach. ",
					"date": "2016-12-16",
					"id": "db94l7v",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-16",
					"id": "db9g1m5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "Yes, the and all the new features will be closed source. But given that there\u0027s a lot of effort put into it, I\u0027m happy with that. ",
					"date": "2016-12-16",
					"id": "db9gm4o",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-16",
					"id": "db9hcsf",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "neoasterisk",
					"content": "Such a waste for the open source world. At least if it ends up being good and helps make companies adopt Go easier, that will be a nice indirect contribution.",
					"date": "2016-12-16",
					"id": "db9ibfb",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "The current plugin will still be open sourced, just not updated with the new features. People are still invited to contribute to it if they\u0027d like to do so. However please bare in mind that from the first four contributors, I was the only one not employed by JetBrains. Aside from 3-4 regular contributors, the plugin never really had the community behind it to a large extent.",
					"date": "2016-12-16",
					"id": "db9j79u",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "neoasterisk",
					"content": "Fair enough. Sorry if I sound negative. I just do not understand what the big deal is. When I saw all those comments and upvotes, my first thought was that this is something big, like \"Whoa... someone must have written a full blown IDE in pure Go\" or something. But nope, it\u0027s just a (good-old) Java IDE.\n\nMany of us got tired of using bloated, sluggish Java IDEs and embraced the simplicity of writing Go with a simple text editor. It feels weird to me that we are trying to go back to the place we escaped from. I suppose this is just my personal perspective. Many !\u003d all.\n\nAlso, as I mentioned, if solutions like this IDE help Go get adopted easier in enterprise environments then that is still a big win even for people like me.\n\nAgain sorry if I sound negative. Obviously, nobody is forcing me to use this IDE. I just had different expectations when I clicked this thread.",
					"date": "2016-12-16",
					"id": "db9js81",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "dlsniper",
					"content": "\u0026gt; But nope, it\u0027s just a (good-old) Java IDE.\n\nThe IntelliJ platform is extremely powerful, and a good evidence of that is the fact that it basically provides support for almost all languages under the Sun (at least the mainstream ones). Not to mention all the additional features it has. While I understand where you are coming from, realistically speaking, Go is a terribly bad language to write an IDE in and it will continue to be so for a while.\n\n\u0026gt; Many of us got tired of using bloated, sluggish Java IDEs and embraced the simplicity of writing Go with a simple text editor\n\nMany seems to be more like \"some\" or even, dare I say, \"a few\" in this case, seeing the overwhelming positive reaction this got.\n\nAs for bloated Java IDEs, I can\u0027t comment on your experience, but I would at least ask you to give this one a try before labeling as such.\n\n\u0026gt; if solutions like this IDE help Go get adopted easier in enterprise environments\n\nBeginners also benefit dramatically from having a proper development environment that\u0027s easy to configure and use, not only corporations.",
					"date": "2016-12-16",
					"id": "db9ty2t",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sgndave",
					"content": "Just gonna point out... the current name sounds like \"go gland.\" Eww.",
					"date": "2016-12-16",
					"id": "db9ggmo",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "dlsniper",
					"content": "It\u0027s a codename, they are looking for the final one. It\u0027s also an island.",
					"date": "2016-12-16",
					"id": "db9gn16",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "Yeah. Glands, cockroaches... I know picking names is hard but come on.",
					"date": "2016-12-16",
					"id": "db9gmv1",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				}
			]
		},
		{
			"author": "AlekSilver",
			"date": "2017-07-13",
			"id": "6n2g8w",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go2 is real",
			"comments": [
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk6hcvy",
					"isArchived": true,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "alficles",
					"content": "C++ has done the \"still compiles, but works differently\" thing, too. They are more careful to avoid common idioms when they do, though. Not much of value was lost by redefining `auto x \u003d 3.14;`.",
					"date": "2017-07-14",
					"id": "dk7k1t1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-14",
					"id": "dk87a03",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "alficles",
					"content": "Aye, this is what I was saying. Previously it declared x as an int with the value of three (and ideally a compiler warning!). Now x is a float with a value of 3.14 This is bad, but the former code is incredibly uncommon, confusing, and definitely horrible code. ",
					"date": "2017-07-14",
					"id": "dk8efs6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DualRearWheels",
					"content": "Funny enough most Py2-\u0026gt;3 migration tutorials start with \"print is now function, don\u0027t forget ()\" like it was that easy. Little later they mention unicode is now default, and strings are little different.\n\nA lot of time later, lost nerves and **run time** problems encountered, you see that fixing all those \"simple\" string/encoding issues are just not worth it in most cases. That was last straw that made me quit interpreted languages for any complex projects, stick with Py2 for legacy stuff and keep away from Py3.",
					"date": "2017-07-15",
					"id": "dk97t5y",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "skadooshpanda",
					"content": "Yeah, Python folks should have just stopped maintaining 2.x when the 3.x was released, and removed the downloads, and deleted the source code for 2.x. Their soft approach was a huge mistake, allowing 2.x to live for a day longer.",
					"date": "2017-07-14",
					"id": "dk86bb9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DualRearWheels",
					"content": "That would doom a lot of Linux distros that depended on Py2 at the time (a lot of them still do). D did something similar with 1-\u0026gt;2 but didn\u0027t end well either. And MS finally dumped support for XP and started uploading malicious (\"discouraging\") patches years ago via updates but significant number of people steel keep XP around.\n\nGood things tend to stay alive.",
					"date": "2017-07-15",
					"id": "dk984bp",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "wjkohnen",
					"content": "Oh please, please do not repeat the history of Python 3.",
					"date": "2017-07-13",
					"id": "dk6cxqb",
					"isArchived": true,
					"isControversial": false,
					"score": 70
				},
				{
					"author": "Orange_Tux",
					"content": "From the blog:\n\n\u0026gt;  Go 2 must also bring along all the existing Go 1 source code. We must not split the Go ecosystem. Mixed programs, in which packages written in Go 2 import packages written in Go 1 and vice versa, must work effortlessly during a transition period of multiple years. We\u0027ll have to figure out exactly how to do that; automated tooling like go fix will certainly play a part. ",
					"date": "2017-07-13",
					"id": "dk6l16m",
					"isArchived": true,
					"isControversial": false,
					"score": 35
				},
				{
					"author": "tywkeene",
					"content": "God I hope they stick to this. I really don\u0027t want to have to deal with some python level shit in my favorite language, even moreso now that I use it at work.",
					"date": "2017-07-14",
					"id": "dk7rgnf",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "bureX",
					"content": "I\u0027m grabbing my popcorn *and* a hefty supply of strong liquor.",
					"date": "2017-07-13",
					"id": "dk6gsl5",
					"isArchived": true,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "DualRearWheels",
					"content": "Who needs drugs?",
					"date": "2017-07-13",
					"id": "dk6ina2",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "Killing_Spark",
					"content": "Me",
					"date": "2017-07-13",
					"id": "dk6qljz",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-14",
					"id": "dk7t0f2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bureX",
					"content": "Strong liquor? Nah, we only drink \"tea\"... yup.",
					"date": "2017-07-14",
					"id": "dk7t3qy",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tech_tuna",
					"content": "Angular 2 Electric Boogaloo.",
					"date": "2017-07-13",
					"id": "dk6v3y5",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "markole",
					"content": "Well, if the do include generics, they will give a lot of boost to people to upgrade their codebases from Go 1 to Go 2.",
					"date": "2017-07-14",
					"id": "dk7ayjv",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "yami_odymel",
					"content": "I don\u0027t think so..",
					"date": "2017-07-14",
					"id": "dk7cyzc",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Jigsus",
					"content": "I have never really needed generics. I can work around them. ",
					"date": "2017-07-14",
					"id": "dk85q3j",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hooluupog",
					"content": "Agree.One of biggest reasons not to upgrade to Python 3 was lack of big incentives.\n\n",
					"date": "2017-07-15",
					"id": "dk8pz5p",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "metamatic",
					"content": "Just like Java did?\n\n _sigh_",
					"date": "2017-07-14",
					"id": "dk80sy2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "CritJongUn",
					"content": "Can you explain that statement to someone who started using Python after v3?",
					"date": "2017-07-14",
					"id": "dk7es5y",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "harnash",
					"content": "Python3 brought some libs/semantic changes that rendered some \"old\" packages incompatible with Python 3.x. There were some tooling to help conversion from 2.x to 3.x but still in some cases some parts needed to be rewritten. Since there was no clear incentive to move to Python 3.x some developers opted to stay with 2.x because work needed to port to 3.x was substantial and didn\u0027t bring major benefits and/or they were forced to use 2.x due to some packages lacking support for 3.x. Now situation is much better but it took a lot of effort.\nTo be honest Python wasn\u0027t the first, there was Perl before that and PHP also had similar issues with PHP6 (although it was after Py3.x IIRC).",
					"date": "2017-07-14",
					"id": "dk7f4f6",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "weberc2",
					"content": "Given that Go is a small, statically typed language, I think it should be much easier to make a porting tool than with Python. Besides, I suspect most of the larger changes will be additions to the language (generics, v2 libraries, etc) that won\u0027t break compatibility. Python has a harder time because it\u0027s fully dynamic.",
					"date": "2017-07-14",
					"id": "dk7kob3",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "CritJongUn",
					"content": "Changes like print \"Hello\" to print(\"Hello\") I suppose?",
					"date": "2017-07-14",
					"id": "dk7fj8e",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "quodlibetor",
					"content": "Almost all the syntax and standard library changes were pretty easy, actually. The big problem was changing the default string type to unicode, and changing the way that string \u0026lt;-\u0026gt; unicode conversions happened and reported errors. Low level libraries (and their authors) had a hard time, which slowed down everything else.",
					"date": "2017-07-14",
					"id": "dk7ju2p",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "arp242",
					"content": "The `print` statement-to-function change was a part of it; I definitely had to get used to typing `print()` instead of `print`. I still see a lot of new programs being written that would work equally well on both Python 2 and 3, except for the `print` statements.\n\nBut by far the biggest problem in migrating existing programs is the Unicode change (I wrote a [brief explainer of the changes here](https://stackoverflow.com/a/21689447/660921)). Due to Python dynamic nature it is very very hard to completely audit a Python 2 program and verify it can run on Python 3 without problems. Experience shows that in at least a few cases you\u0027re going to mix up `str` and `byte` types, resulting in unhandled exceptions or – even worse – the wrong output.\n\nThe new way of handling Unicode is vastly superior to the old Python 2 way; Python was created at time when Unicode didn\u0027t even exist, so it was \"tacked on\" later. It was a common source of errors in Python 2 (there\u0027s an entire FAQ section in the Python 2 manual for it) and Python 3 fixed a lot of that. But migrating existing programs? It\u0027s a pain, even for relatively small programs.\n\nA second related pain point is that it\u0027s very difficult to write programs that work well in both Python 2 and 3. Some things are easy (`from __future__ import print_function`, or `try: import py2_lib_path except ImportError py3_lib_path`), but again, the Unicode thing is hard. The same function will have a different return type, and handling it all correctly in both Python 2 and 3 is full of subtle caveats...\n",
					"date": "2017-07-14",
					"id": "dk7nr80",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "nagai",
					"content": "\u0026gt;For example, I\u0027ve been examining generics recently, but I don\u0027t have in my mind a clear picture of the detailed, concrete problems that Go users need generics to solve. As a result, I can\u0027t answer a design question like whether to support generic methods, which is to say methods that are parameterized separately from the receiver. If we had a large set of real-world use cases, we could begin to answer a question like this by examining the significant ones.\n\nIdk, just look at the hundreds of widely used libraries that deal with interface{} everywhere and you should get a rough idea.",
					"date": "2017-07-13",
					"id": "dk6e3fk",
					"isArchived": true,
					"isControversial": false,
					"score": 57
				},
				{
					"author": "siimphh",
					"content": "Please complete that analysis and write up a report. That would be helpful.",
					"date": "2017-07-13",
					"id": "dk6hz6f",
					"isArchived": true,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "jo-ha-kyu",
					"content": "I have my doubts that even if this was done, not much would change. Haven\u0027t there been people working on \"good\" generics for a while now, but unable to do it to a satisfactory standard in terms of performance?\n\nIt\u0027s quite shocking to me that auto-genereting code is considered fine or normal practice as a substitute for generic programming in a modern programming language.",
					"date": "2017-07-13",
					"id": "dk6o87h",
					"isArchived": true,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "daveddev",
					"content": "It is not actually shocking that some problems are difficult, and maybe impossible, to solve without requiring compromises which are unpleasant and/or objectionable.",
					"date": "2017-07-13",
					"id": "dk6s26m",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "robertmeta",
					"content": "I can\u0027t overstate (coming from C++ land) how scared I am of compile time regressions -- we have already had a few.  ",
					"date": "2017-07-13",
					"id": "dk6thk9",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk6rzsx",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "robertmeta",
					"content": "First of all -- I forgot who, already wrote and demoed a tool to scan the entire go ecosystem, and if I remember correctly it only cost a few dollars to run. \n\nSecondly, and more importantly, I don\u0027t think nearly every use of a interface{} is a place for generics, not even the majority. ",
					"date": "2017-07-13",
					"id": "dk6tpzq",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk6u3qr",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "4ad",
					"content": "\u0026gt; Everywhere there is a use of interface{} means that Go cannot express the type that is wanted at first place at compile time.\n\nNo, it doesn\u0027t mean such a thing at all. It can simply mean a variable can be of any type, as for example in fmt.Printf. fmt.Printf would not benefit from generics; interface{} is perfectly appropriate there.\n\n",
					"date": "2017-07-14",
					"id": "dk7hc41",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "dragonfax",
					"content": "I agree with you. interface{} could mean.\n1. I don\u0027t have a type for this.\n2. I can\u0027t create a type for this\n3. I want this to allow any type at all.",
					"date": "2017-07-15",
					"id": "dk8w1c0",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "robertmeta",
					"content": "Which would require human review and context for every line, making the scan pointless. ",
					"date": "2017-07-13",
					"id": "dk6u4r1",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "winger_sendon",
					"content": "How would you implement printf using generics?",
					"date": "2017-07-14",
					"id": "dk6yar2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "throwdemawaaay",
					"content": "Printf in go atm is already generic as provided by the runtime. There\u0027s nothing about printf that makes it somehow impossible to type in a language with generics. If the language supports dependent types you can even statically check that the format string matches the varargs used. Look at the Idris printf example if you want to see how that works.\n\nPersonally I think dependent types would be a step too far for golang, but again that\u0027s only needed if you want to type check the *content* of the format string. If you just want to be sure the printf implementation can handle whatever type you\u0027re using at a specific call site, this can be done without them.\n\nPrintf is not an example of something that makes generics impossible or invalid.",
					"date": "2017-07-14",
					"id": "dk7blzt",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "4ad",
					"content": "\u0026gt; Printf in go atm is already generic as provided by the runtime.\n\nNo, it isn\u0027t, it\u0027s a standard library function anyone can write: https://github.com/golang/go/blob/f3e6216450866f761cc22c042798c88062319867/src/fmt/print.go#L189.\n",
					"date": "2017-07-14",
					"id": "dk7hfi6",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "SafariMonkey",
					"content": "[Here](https://github.com/golang/go/blob/f3e6216450866f761cc22c042798c88062319867/src/fmt/print.go#L946) and [here](https://github.com/golang/go/blob/f3e6216450866f761cc22c042798c88062319867/src/fmt/print.go#L604) is where the magic happens.",
					"date": "2017-07-18",
					"id": "dkdptrd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "winger_sendon",
					"content": "Indeed. I didn\u0027t say printf would make generics unwanted or invalid. Didn\u0027t even imply that. Printf uses interface{} and runtime reflection. How do you mean it\u0027s generic? I meant, `interface{}` has it\u0027s place in places like printf. Even C# uses `object` in `string.Format`.\nInterface is bad when it\u0027s used in places where other features like generics would be better.",
					"date": "2017-07-14",
					"id": "dk7f2l2",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "throwdemawaaay",
					"content": "Ah, apologies if my post read as argumentative.\n\nWhat I mean by saying printf is generic is that has parametric polymorphism.\n\nI think in c# the use of object for string.Format is largely historical, and it\u0027s also instructive for golang. The longer golang takes to find a solution, the more code will pile up that uses interface{}, code generation, etc. I\u0027m pretty sure a couple years from now we\u0027ll look at that code with the same kind of \"geh\" as object in C#.",
					"date": "2017-07-14",
					"id": "dk7fbue",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ellisonch",
					"content": "You\u0027d miss all the MyCollectionOfInts, MyCollectionOfStrings, etc.",
					"date": "2017-07-14",
					"id": "dk7njlv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "youstolemyname",
					"content": "Oh for fucks sake",
					"date": "2017-07-14",
					"id": "dk72m39",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "slowratatoskr",
					"content": "he not wrong though",
					"date": "2017-07-14",
					"id": "dk7f8ue",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TheMerovius",
					"content": "It doesn\u0027t explain why interface{} isn\u0027t good enough though. Did you suffer a production outage because of the usage of interface{}? Then write up an experience report :) That\u0027s pretty much the point.",
					"date": "2017-07-13",
					"id": "dk6nozp",
					"isArchived": true,
					"isControversial": false,
					"score": -15
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk6s1cd",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "TheMerovius",
					"content": "No. See also my follow-up comment below that one. \"Compile time safety\" is not a specific failure mode; it\u0027s not even a problem (it\u0027s, again, a solution). Saying \"we wanted to do this refactoring and it broke/was delayed a lot/was very costly/impossible…\" would be. That\u0027s why he asked for *experience reports*.",
					"date": "2017-07-13",
					"id": "dk6vf6x",
					"isArchived": true,
					"isControversial": true,
					"score": -4
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-14",
					"id": "dk719h7",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "weberc2",
					"content": "A production outage isn\u0027t necessary to explain why interface{} isn\u0027t good enough; the reasons for why `interface{}` isn\u0027t good enough in generic contexts is the same for any other context. There is no upper-bound on quality-assurance; more is always better. Please don\u0027t take this as an argument for generics; there are still tradeoffs (they will probably fundamentally change the way Go is written, for example) and the benefit of static analysis may not outweigh those tradeoffs--none of that makes the use case for generics less obvious.",
					"date": "2017-07-13",
					"id": "dk6okxd",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; A production outage isn\u0027t necessary to explain why interface{} isn\u0027t good enough\n\nIt is, though. Go is an engineering language; it is driven by looking at real needs of large scale systems. You need to demonstrate a need and \"I like X better\" does not demonstrate a need to an engineering team.\n\nI mean, yeah, you don\u0027t necessarily need an outage, but you need to demonstrate the actual, practical pain and how your usage of interface{} prevented or hindered you from achieving the kind of large scale engineering that go is meant for. \"We needed to use `interface{}`, which then crashed production\" is a way to do that. \"We did $refactoring, which got held up by $y time, costing $z engineering hours\" is a way to do that. \"It\u0027s not statically type safe!\" doesn\u0027t do that.\n\n(also, for better or for worse, whether you agree that it\u0027s needed to demonstrate that it\u0027s bad is secondary; what Russ is saying is that it\u0027s what *he* needs to understand what the best way to solve the underlying problems are and how to build generics - and if they are needed)\n\n\u0026gt; There is no upper-bound on quality-assurance; more is always better.\n\nI strongly disagree. That\u0027s why I code go and not agda, which would be the epitome of static type safety I know of.",
					"date": "2017-07-13",
					"id": "dk6r5ro",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "weberc2",
					"content": "The argument isn\u0027t \"I like generics better\" it\u0027s that interface{} is inherently error-prone. Discussing production failures does little to quantify the risk, nor does it address the problem that \"acceptable risk\" is largely a matter of personal preference. \n\n\u0026gt; That\u0027s why I code go and not agda, which would be the epitome of static type safety I know of.\n\nIs it because agda is too type safe or because it makes other tradeoffs? In other words, if the next Go compiler (or linter) automatically caught more bugs with no programmer changes, I don\u0027t think you would spurn it. There isn\u0027t an upper bound on QA, the problem is getting more of it always requires some tradeoffs. So we need to debate tradeoffs instead of debating whether or not more static analysis is useful.",
					"date": "2017-07-14",
					"id": "dk7khar",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; it\u0027s that interface{} is inherently error-prone\n\nIt would seem to me, more and more, that this is empirically false. If it was inherently error-prone, it wouldn\u0027t be as impossible to get people to point out actual errors caused by it. Russ painted a very specific picture of the kind of experience reports he is looking for and, so far, no one actually came up with anything like that. So far, all people are saying, is repeating over and over \"we want generics\" and \"interface{} sucks\". That might or might not be true, but either case, it\u0027s not something that you can use to actually make decisions about how the solution should look.\n\n\u0026gt; Is it because agda is too type safe or because it makes other tradeoffs?\n\nThe former. Just like Haskell or Rust are too type-safe. If I know my code works, I have no patience to convince a machine of it. I want the strictness of the compiler to be *just* enough to help me avoid mistakes, I don\u0027t want it to patronize me.\n\n\u0026gt; So we need to debate tradeoffs \n\nGreat. Start by pointing out *what currently doesn\u0027t work well*, so we know what the problem is that needs solving. And don\u0027t come with \"we need a generic set\"; even if you consider that answer enough, it\u0027s evidently not what\u0027s needed to convince other people, so you should recognize the need to rethink your approach.",
					"date": "2017-07-14",
					"id": "dk7mpv2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "xienze",
					"content": "\u0026gt; It would seem to me, more and more, that this is empirically false. If it was inherently error-prone, it wouldn\u0027t be as impossible to get people to point out actual errors caused by it.\n\nThis is staring you right in the face: type-safe collections.  Let\u0027s say I want a tree that only takes int values.  Or strings.  Or a certain struct.  With interface{} you don\u0027t get the compiler telling you that you can\u0027t stuff a string value in an int tree and at runtime you _must_ do a type check when pulling values out because there\u0027s nothing stopping you from putting that string in at runtime.  With a generic solution you get type safety and improved performance.\n\nI mean that it\u0027s the most obvious, oft-repeated example of where generics come in handy, but the impossible standard the Go developers live by is \"well if you can do it another way then generics aren\u0027t necessary.\"  Well yeah, you certainly can do it another way but copying and pasting for every data type you need, or code generation but yeesh, it\u0027s such an ugly hacked-up way to do something that\u0027s so useful.",
					"date": "2017-07-14",
					"id": "dk7oxik",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "weberc2",
					"content": "I don\u0027t think the objection to providing examples is because examples are rare, but because there\u0027s no apparent value add. We already know what the primary problem is--the type system can\u0027t guarantee correctness for certain abstractions. Providing additional examples isn\u0027t going to clarify that at all; the issue now is what (if any) tradeoffs can we make to address that. There are also secondary problems--that `interface{}` is unergonomic, etc.\n\n\u0026gt; Just like Haskell or Rust are too type-safe. If I know my code works, I have no patience to convince a machine of it. I want the strictness of the compiler to be just enough to help me avoid mistakes, I don\u0027t want it to patronize me.\n\nThese are tradeoffs. A Sufficiently Smart Type Checker could infer as well as you that your program is correct without additional ceremony and wouldn\u0027t get in your way unless you have an error. Your objection isn\u0027t to \"too much correctness\", it\u0027s that the additional safety comes at the cost of additional ceremony.\n\nThe frustration with the \"playing dumb about generics\" attitude taken by parts of the Go community (including some of the team at various points in time) is legitimate in my opinion.",
					"date": "2017-07-14",
					"id": "dk7ui0t",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; but because there\u0027s no apparent value add.\n\nSo, convincing people who could actually fix your problem doesn\u0027t add value?\n\nAgain, you might consider it unreasonable, but Russ has told you what\u0027s needed if you want to convince them and help them come up with a good solution. If you want generics to happen, sooner rather than later, it should be apparent what has to happen. That it doesn\u0027t, seems to illustrate that it\u0027s not that important that it happens soon after all (it\u0027s not important enough to put aside one\u0027s pride and actually go through the steps one was told, after all).\n\n\u0026gt; Providing additional examples isn\u0027t going to clarify that at all\n\n\"additional\" would imply that there was one. So far, from what I can tell, there was none (in the spirit that Russ laid out in his talk and that I laid out here repeatedly). Instead, people are repeating the abstract advantages of generics again and again and insisting that it wouldn\u0027t help, if they\u0027d provide experience reports demonstrating actual real conflicts with go\u0027s design goals and how the current solutions proofed to be not enough.\n\n\u0026gt; the issue now is what (if any) tradeoffs can we make to address that.\n\nBut for that you need to actually *demonstrate the problem to be solved*. It is impossible to talk solutions, if the problem isn\u0027t actually clear. And, for better or for worse, a) the decision makers have made clear that this is not the case to them and b) they have lined out clear and direct steps of *how* you can make it clear.\n\n\u0026gt; These are tradeoffs.\n\nThat is literally the opposite of what you said before, which is \"more is always better\". It being a tradeoff is literally my point.\n\n\u0026gt; The frustration with the \"playing dumb about generics\" attitude taken by parts of the Go community (including some of the team at various points in time) is legitimate in my opinion.\n\nNo one is playing dumb. There have been clear instructions. Instead of arguing about those requirements being dumb on reddit, why not just invest 10% of that effort into actually following them? Would be less frustrating for literally everyone involved.",
					"date": "2017-07-14",
					"id": "dk80bj2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "weberc2",
					"content": "You seem to be confused. The generics vs no generics debate is about balancing tradeoffs between type-safety, expressiveness, consistency, ergonomics, etc. No serious person disagrees that more type-safety is a bad thing if there were no tradeoffs to be made--you think you do, but your justification was just enumerating tradeoffs made by particular languages; you\u0027re simply confused. The problem is well understood and entirely uncontroversial, and more examples aren\u0027t going to persuade anyone that type safety is important nor will they inform what sorts of tradeoffs to make.",
					"date": "2017-07-14",
					"id": "dk87jvf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; You seem to be confused.\n\nThen you are misreading me.\n\n\u0026gt; you think you do\n\nBecause I am. Don\u0027t put thoughts into my head, that\u0027s just rude. I know what I\u0027m talking about and I know that better than you; that should be the default assumption, everything else is just being a jerk.",
					"date": "2017-07-14",
					"id": "dk89mwu",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "youstolemyname",
					"content": "56k is good enough.",
					"date": "2017-07-14",
					"id": "dk72nt7",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "CountyMcCounterson",
					"content": "It\u0027s really slow and bad",
					"date": "2017-07-13",
					"id": "dk6twlh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bupku5",
					"content": "Just please break everything you need to break...if you are going to cause confusion, cause it all at once and we will just deal with it",
					"date": "2017-07-13",
					"id": "dk68yov",
					"isArchived": true,
					"isControversial": false,
					"score": 72
				},
				{
					"author": "devalshah",
					"content": "From the text posted on the golang blog : \"To minimize disruption, each change will require careful thought, planning, and tooling, which in turn limits the number of changes we can make. Maybe we can do two or three, certainly not more than five.\"\n\nhttps://blog.golang.org/toward-go2",
					"date": "2017-07-13",
					"id": "dk6chdh",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "everdev",
					"content": "Sounds like it\u0027ll be a slow process:\n\n\"Go 2 must also bring along all the existing Go 1 source code. We must not split the Go ecosystem. Mixed programs, in which packages written in Go 2 import packages written in Go 1 and vice versa, must work effortlessly during a transition period of multiple years.\"",
					"date": "2017-07-13",
					"id": "dk6f18t",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "TheMerovius",
					"content": "Because that has worked so well for Python 3. People \"just dealt with it\". Right? /s",
					"date": "2017-07-13",
					"id": "dk6d21b",
					"isArchived": true,
					"isControversial": false,
					"score": 31
				},
				{
					"author": "Thaxll",
					"content": "One of the Python problem is having the runtime up to date on your distro, Go doesn\u0027t have that issue. When Python 3 released it was nowhere on CentOS / Debian ect ... ",
					"date": "2017-07-13",
					"id": "dk6e8ic",
					"isArchived": true,
					"isControversial": false,
					"score": 40
				},
				{
					"author": "[deleted]",
					"content": "That was never really a problem in Python. \n\nThe hard problem with python migration was that there was no way to realistically automatically port and statically check certain types of programs, and the string/bytes/unicode change often required a complete rewrite in those programs. The changes in twisted (an async network library) amounted to about 40,000 lines of code.\n\nIf 3.5+ has been released earlier there would have been much more incentive to port, but 3.0 took a while to get going, and no-one really wants to manually port 40,000 lines of code unless there\u0027s good reason.",
					"date": "2017-07-14",
					"id": "dk7pt6z",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "nevyn",
					"content": "\u0026gt; Python 3.0 final was released on December 3rd, 2008\n\nIt\u0027s 8.5 years later, and the python3 migration is still a dumpster fire. Anything that looks remotely like it would be a complete failure, IMNSHO.",
					"date": "2017-07-14",
					"id": "dk702e7",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "doppel",
					"content": "To be honest, python 3.0 did the mistake of sort-of, kind-of breaking things, but it wasn\u0027t until 3.5 that it was stable/fast/exciting enough to warrant a change. Lots of distributions are now changing to dual-distributions (python2.7 + 3.5+) or python3 default.",
					"date": "2017-07-14",
					"id": "dk7gheb",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "MattieShoes",
					"content": "Python is an integral part of those distros, as tools like yum are written in Python.  Go benefits from being far less popular :-)",
					"date": "2017-07-13",
					"id": "dk6iwwv",
					"isArchived": true,
					"isControversial": false,
					"score": -8
				},
				{
					"author": "4ad",
					"content": "No, Go benefits from being statically linked by default.\n",
					"date": "2017-07-13",
					"id": "dk6jdft",
					"isArchived": true,
					"isControversial": false,
					"score": 55
				},
				{
					"author": "Creshal",
					"content": "It also benefits from static compilation. With a python ecosystem, you have to either update all your tools at the same time, or you\u0027re forced to ship ~200 MiB of duplicate runtime libraries to support python 2 and 3 at the same time.",
					"date": "2017-07-13",
					"id": "dk6jdwi",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "MattieShoes",
					"content": "Yeah, that\u0027s a good point -- there\u0027s that uncomfortable time where you need to support both if you\u0027re going to switch, and you largely avoid that with statically linked stuff.  ",
					"date": "2017-07-14",
					"id": "dk70hks",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "metamatic",
					"content": "While looking at Python for examples of what not to do, look at Ruby 2 for examples of how to make breaking changes and succeed.",
					"date": "2017-07-13",
					"id": "dk6g7f1",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "nevyn",
					"content": "Having used python and not ruby I would disagree with this, it\u0027s **much** easier to see what you did that caused large amounts of pain (or, at least, come up with a viable list) than it is to see what you did that didn\u0027t cause any pain.",
					"date": "2017-07-14",
					"id": "dk70bh5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "metamatic",
					"content": "The point isn\u0027t which is better for programming, it\u0027s that the Ruby 1.x to 2.x transition went smoothly, and nobody uses Ruby 1.x any more -- whereas the Python 2.x to 3.x transition was a disaster, and lots of people still use Python 2.x and refuse to switch.",
					"date": "2017-07-14",
					"id": "dk80m03",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk6dgx1",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "bupku5",
					"content": "precisely, and that was my point...if you are going to do this, break hard and give people a real reason to get off the old version",
					"date": "2017-07-13",
					"id": "dk6ee16",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "adiabatic",
					"content": "Wasn\u0027t the string/bytes change the big change that made migration fantastically difficult? Go won\u0027t have _that_ pitfall, so I\u0027d expect the chance of a Python-style colossal failure to be very slim. ",
					"date": "2017-07-13",
					"id": "dk6ieqc",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "nevyn",
					"content": "IMO the biggest problem was that they decided once there was a big migration problem it was open season on tons of small migration problems that would never have been approved otherwise.\n\nThat and the fact that every single piece of code **STILL NEEDS** to be in either python2 or python3.",
					"date": "2017-07-14",
					"id": "dk707p8",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "These days you can write Python code to run on both 2 and 3, using various porting libraries like `six`.",
					"date": "2017-07-14",
					"id": "dk7q2gf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thomasfr",
					"content": "I had \"fun\" bugs from the fact that py3 started to auto convert integer divisions into floats when the result are not even.  As long as Go\u0027s changes breaks the build I would personally not worry about it too much. \n\n I\u0027m a bit worried that the suggestion that Go might start to auto convert int to some kind of bigint type could produce errors as well, although the likenesses of bugs is much lower there.",
					"date": "2017-07-14",
					"id": "dk7bv5q",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "lonahex",
					"content": "Py3 didn\u0027t really break everything it could. It kind of broke stuff but was still not radical enough. IMO they missed a good opportunity to really break stuff.",
					"date": "2017-07-14",
					"id": "dk6xozl",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "eikenberry",
					"content": "Based on their pre-1.0 model they will have 100% computer aided updating. Going from weekly to weekly release you just ran gofix and it just worked.",
					"date": "2017-07-14",
					"id": "dk7en5x",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TheMerovius",
					"content": "Not even the post-1.0 model was 100% computer aided updating. There are a bunch of \"you need to go and manually fix your code\" breakages after that.\n\nWe will see, how exactly any potential breakage for go2 will look. I fully trust the go team to do it better than Python 2-\u0026gt;3. But either way, \"just break stuff already, people will deal with it\" is certainly not the answer, because writing the automated fixers will take *more* work and care, not less.",
					"date": "2017-07-14",
					"id": "dk7mwqs",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "eikenberry",
					"content": "I don\u0027t remember any manual fixes but I didn\u0027t have any major projects pre-1.0, so gofix only had to handle my small test/learning code. I mainly remember the evolution from the Makefile setup to the go tools.\n\nI\u0027m betting in the end they will have automated fixers that handle the majority of what\u0027s out there along with a backward compatibility mode for the rest, maybe set with a build flag or something.\n",
					"date": "2017-07-14",
					"id": "dk890te",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheMerovius",
					"content": "Sure. I assume something like that too. But that\u0027s going to be seen in the future; we definitely can\u0027t just make the bold claim that everything\u0027s going to be backwards compatible :)",
					"date": "2017-07-14",
					"id": "dk89oqt",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "On the other hand, the 2/3 fragmentation is still a much better world than a solely-Python 2 world.",
					"date": "2017-07-13",
					"id": "dk6otxs",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TheMerovius",
					"content": "I disagree. The value proposition of Python 3, from what I can tell, doesn\u0027t justify the fragmentation.",
					"date": "2017-07-13",
					"id": "dk6qs9x",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "nevyn",
					"content": "You are getting downvotes, but it\u0027s been 8.5 **years** since python3 was released and most (all?) of the major python programs I use are still python2. Python3 was a huge failure, IMNSHO. The fact that upstream has decided to stop backporting features to python2 is just another signal of their stupidity and inability to learn.",
					"date": "2017-07-14",
					"id": "dk70hti",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "thomasfr",
					"content": "Almost nothing I use doesn\u0027t support py3 at this point, it\u0027s not unusual that new libraries are py3 only. A bunch of libs are removing py2 support now.. the migration is happening",
					"date": "2017-07-14",
					"id": "dk7by3e",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kaeshiwaza",
					"content": "The py2/py3 transition convinced me to migrate... to Go...",
					"date": "2017-07-14",
					"id": "dk7duto",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "Support for python 2 will end in 2020. Many people thought that some big tech company like RedHat would fork the interpreter and carry on supporting it, but RedHat are now busy porting to 3.x.\n\n3.5 is significantly better than the train wreck that was 3.0\n\nVFX might be screwed. Python\u0027s built-in to Maya and Maya is on 2.x. They won\u0027t able to port until Maya ports, and Maya hasn\u0027t (as far I know) said anything about it.",
					"date": "2017-07-14",
					"id": "dk7q889",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "3.6 is really, really good.",
					"date": "2017-07-14",
					"id": "dk7q4xg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "derkonigistnackt",
					"content": "worked well enough with Swift though",
					"date": "2017-07-13",
					"id": "dk6g9r5",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "Creshal",
					"content": "Because all three Swift developers could port their six months old codebases. ",
					"date": "2017-07-13",
					"id": "dk6hxye",
					"isArchived": true,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "derkonigistnackt",
					"content": "you are underestimating the hype that lang was carrying",
					"date": "2017-07-13",
					"id": "dk6kjmr",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk6n7kz",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "[deleted]",
					"content": "Of course, but Go isn\u0027t larger, is it? Anyway, Swift programmers didn\u0027t really have an alternative. I think that\u0027s an important factor.",
					"date": "2017-07-13",
					"id": "dk6mqae",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Creshal",
					"content": "Still, it was (and still is) a fresh language with little/no legacy code sticking around. With python there\u0027s heaps of libraries that haven\u0027t seen updates in 5 or 10 years that are still actively used. Who\u0027s gonna update *those*?",
					"date": "2017-07-13",
					"id": "dk6ojml",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk698bh",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "samnardoni",
					"content": "If it wasn\u0027t breaking, would it even be Go 2?",
					"date": "2017-07-13",
					"id": "dk6d4v2",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "eikenberry",
					"content": "They mean breaking in that Go 1 code won\u0027t run without running it through gofix first. ",
					"date": "2017-07-14",
					"id": "dk7eowf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheMerovius",
					"content": "When the linux Kernel moved from 2 to 3 it didn\u0027t break anything. Windows regularly moves from N to N+M without breaking anything.\nJust because you do an evolution, not a revolution, doesn\u0027t mean there isn\u0027t significant change.",
					"date": "2017-07-13",
					"id": "dk6nmc0",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "samnardoni",
					"content": "But Go follows semantic versioning doesn\u0027t it?",
					"date": "2017-07-13",
					"id": "dk6np1m",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "TheMerovius",
					"content": "So does the Kernel.",
					"date": "2017-07-13",
					"id": "dk6r7bm",
					"isArchived": true,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "central_marrow",
					"content": "SemVer stipulates a major version bump when the interface changes in such a way that existing code that consumes that interface would break. The kernel\u0027s interface is to user space and one of the main stated principles is to never break user space, i.e. once an interface is public it is to remain working in perpetuity. Linus has been known to be [pretty vociferous](https://www.theregister.co.uk/2013/01/04/torvalds_kernel_bug_rage/) about this. So in that sense the Linux kernel would never qualify for a major version bump under SemVer.\n",
					"date": "2017-07-13",
					"id": "dk6w3su",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "TheMerovius",
					"content": "But it did bump the major version, at least twice (we\u0027re now at 3). That was pretty much my point; this thread started as someone saying go uses SemVer, so bumping to 2 would imply breaking compatibility. I used the Linux kernel as an example of how that direction of the implication isn\u0027t true. It\u0027s breakage ⇒ version bump, not version bump ⇒ breakage.",
					"date": "2017-07-14",
					"id": "dk6wzib",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "central_marrow",
					"content": "It did bump the major version (currently at 4) but has never claimed to follow SemVer afaik.",
					"date": "2017-07-14",
					"id": "dk6x84o",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "XANi_",
					"content": "No, it doesn\u0027t, in any way, shape or form. Jumps to 3.x and 4.x were because Linus didn\u0027t want second number to be bigger",
					"date": "2017-07-14",
					"id": "dk7h6v0",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "spaztheannoyingkitty",
					"content": "I was at the talk and he suggested the possibility that it won\u0027t be breaking, but since none of the details have been decided on its unsure at the moment.",
					"date": "2017-07-13",
					"id": "dk6ceoh",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TheBallPeenHammerer",
					"content": "He very specifically said it can\u0027t/won\u0027t be breaking. It takes maybe ten seconds to click into the post.",
					"date": "2017-07-13",
					"id": "dk6l910",
					"isArchived": true,
					"isControversial": false,
					"score": -3
				},
				{
					"author": "PsyWolf",
					"content": "Actually if you read to the end, he specifically says\n\n\u0026gt;Once all the backwards-compatible work is done, say in Go 1.20, then we can make the backwards-incompatible changes in Go 2.0. If there turn out to be no backwards-incompatible changes, maybe we just declare that Go 1.20 is Go 2.0.\n\nSo there\u0027s definitely a possibility of backwards incompatible changes.  If you don\u0027t consider a backwards incompatible change to be \"breaking\", then you use that word differently than most developers. ",
					"date": "2017-07-14",
					"id": "dk6y0x5",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "youguess",
					"content": "Python thought so too\n\nWe *still* have a fractured ecosystem even though Python 3 is way better",
					"date": "2017-07-13",
					"id": "dk6fran",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk6q5y2",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "[deleted]",
					"content": "Significant parts of the python community such as VFX are stuck on Python 2 due to using embedded interpreters (in software like Maya). You just don\u0027t hear about them as they don\u0027t post in r/python. However if you look on computer graphics forums, you will see Python 2 code.",
					"date": "2017-07-14",
					"id": "dk7qsx5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nevyn",
					"content": "\u0026gt; Not really anymore, though\n\nAnsible is still python2 only, yum on CentOS-7 is python 2 and will be for another 5+ years (python3 might be old enough to drink before it\u0027s gone).\n\nThen again python3 isn\u0027t significantly better.",
					"date": "2017-07-14",
					"id": "dk70t0a",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "\"Angular 2\".",
					"date": "2017-07-14",
					"id": "dk8b798",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dericofilho",
					"content": "So it seems https://github.com/golang/go/issues/15292 will be revived...",
					"date": "2017-07-13",
					"id": "dk66oz5",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "kris-nova",
					"content": "Sitting in Russ\u0027 talk now - it\u0027s very much happening 😍😍",
					"date": "2017-07-13",
					"id": "dk66qpa",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "earthboundkid",
					"content": "I take it the talk is over now. Does anyone know of a good source online or do we just have to wait for Russ to post his slides on his website?",
					"date": "2017-07-13",
					"id": "dk6axwb",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "devalshah",
					"content": "From sourcegraph, who are live blogging the event - https://about.sourcegraph.com/go/the-future-of-go",
					"date": "2017-07-13",
					"id": "dk6cleh",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "AlekSilver",
					"content": "https://blog.golang.org/toward-go2",
					"date": "2017-07-13",
					"id": "dk6cc0t",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "alecthomas",
					"content": "https://blog.golang.org/toward-go2",
					"date": "2017-07-13",
					"id": "dk6ccl8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "devalshah",
					"content": "https://blog.golang.org/toward-go2",
					"date": "2017-07-13",
					"id": "dk6ccrq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Remi1115",
					"content": "https://blog.golang.org/toward-go2",
					"date": "2017-07-13",
					"id": "dk6jktl",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nhooyr",
					"content": "Can\u0027t wait to see what\u0027s new.",
					"date": "2017-07-13",
					"id": "dk672fv",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "pope_nefarious",
					"content": "Can we please call this GoTo",
					"date": "2017-07-13",
					"id": "dk6rzwl",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "KermitP",
					"content": "As if it\u0027s not already begging for someone to finish the thought with \"...considered harmful\"",
					"date": "2017-07-14",
					"id": "dk7t8u3",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "aaaqqq",
					"content": "As if the game of thrones hype wasn\u0027t enough to kill me...",
					"date": "2017-07-13",
					"id": "dk6boba",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "colezlaw",
					"content": "My hope is that Go 2 is developed with the same care as Go 1 was. I know generics are one of the things that many, many people complain about, but one of the most beautiful things about Go is its simplicity and that you can honestly learn the whole API in an afternoon, and that many simple programs use most of the syntax. While generics could be useful, that\u0027s an example of something that might get used infrequently enough that you have to go back to documentation every time you intend to write a generic type.",
					"date": "2017-07-14",
					"id": "dk71hp0",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "SeerUD",
					"content": "This is something I came to appreciate much more as I used Go more. I value it\u0027s simplicity far more than having the occasional convenience of generics, as instead generics can often lead to more complex solutions. I\u0027ve found the style of programming I use now is a lot different (in a good way) thanks to that, and I go back to languages like Java or PHP and think \"why on earth am I dealing with all of this other crap that\u0027s not necessary, it could be so much simpler\". ",
					"date": "2017-07-14",
					"id": "dk7h50u",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "neopointer",
					"content": "Please, please, please, with sugar on top: make debugger/debugging a first class citzen!!!",
					"date": "2017-07-14",
					"id": "dk77jvk",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "google_you",
					"content": "Real no generics",
					"date": "2017-07-13",
					"id": "dk68onp",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Paradiesstaub",
					"content": "I would really like to see [uniform-function-call-syntax](https://en.wikipedia.org/wiki/Uniform_Function_Call_Syntax).\n\nUFCS would increase readability and improve the expressiveness of the code – while needing less syntax to express the same things as before – plus add some new functionality. Maybe the `(f *Foo)` part of the function declaration `func (f *Foo) name() string` could be dropped altogether (`func name(f *Foo) string`), resulting in cleaner \u0026amp; less noisy code.\n\nInstead of:\n\n    strings.ToUpper(\"foo\")\n\nIt would be possible to write:\n\n    \"foo\".ToUpper() or strings.ToUpper(\"foo\")\n\nExtending foreign structs from another package should be possible too, just without access to private fields.\n\nOther than that, if-as-expression would be nice to have, too.",
					"date": "2017-07-13",
					"id": "dk6iaek",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "SingingLemon",
					"content": "Not sure if I missed your point about UFCS, but I think you can do something like that already.\n\nhttps://play.golang.org/p/DcEBiT6Qcg\n\nEDIT: Why downvote OP? I don\u0027t see anything in their post breaking this subreddits rules and the posts seems to be expressing OPs opinion in a reasonable manner.",
					"date": "2017-07-13",
					"id": "dk6kec2",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "saturn_vk",
					"content": "He wants it the other way around, using functions with a method syntax. It\u0027s similar to extension methods in other languages, which I think is a nice idea",
					"date": "2017-07-14",
					"id": "dk7buuy",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "comrade-jim",
					"content": "I don\u0027t see a point. Looks like it comes down entirely to style. Why change things or add new features just for aesthetics? ",
					"date": "2017-07-14",
					"id": "dk7i3c7",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "robertmeta",
					"content": "Agreed entirely. ",
					"date": "2017-07-13",
					"id": "dk6tul6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Paradiesstaub",
					"content": "UFCS would be a simplification. Current syntax would still be vailid, plus allow for a nicer/unified call-syntax.",
					"date": "2017-07-13",
					"id": "dk6wfl6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "WikiTextBot",
					"content": "**Uniform Function Call Syntax**\n\nUniform Function Call Syntax (UFCS) or sometimes Universal Function Call Syntax is a programming language feature in D, Rust and Nim that allows any function to be called using the syntax for method calls (as in object-oriented programming), by using the receiver as the first parameter, and the given arguments as the remaining parameters. UFCS is particularly useful when function calls are chained, (behaving similar to pipes, or the various dedicated operators available in functional languages for passing values through a series of expressions). It allows free-functions to fill a role similar to extension methods in some other languages. Another benefit of the method call syntax is use with \"dot-autocomplete\" in IDEs, which use type information to show a list of available functions, dependent on the context.\n\n***\n\n^[ [^PM](https://www.reddit.com/message/compose?to\u003dkittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to\u003dWikiTextBot\u0026amp;message\u003dExcludeme\u0026amp;subject\u003dExcludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/golang/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]\n^Downvote ^to ^remove ^| ^v0.24",
					"date": "2017-07-13",
					"id": "dk6iahs",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "andradei",
					"content": "This is exciting! I\u0027m not a programming language designer, but I think compilation time would increase significantly with the inclusion of generics, right? Can someone with a better understanding on this voice their opinion?",
					"date": "2017-07-13",
					"id": "dk69qeu",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ryeguy",
					"content": "I doubt it would be significant, and it would only be as they are used. For example, if you have a generic function `add\u0026lt;T1, T2\u0026gt;` then using `add\u0026lt;int, int\u0026gt;` and `add\u0026lt;float, float\u0026gt;` would just generate twice the code (this is assuming they do it rust/C++ style, where a function body is generated per argument set). If they did it java style (where everything is boxed) then I\u0027m not sure there\u0027s a compilation overhead, but it would be less efficient during runtime.",
					"date": "2017-07-13",
					"id": "dk6bvqs",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "gnu-user",
					"content": "I really hope that they finalize an official package manager, go get works to an extent but it needs something much more integrated, especially for specifying the exact versions of libraries to use.\n\nCurrently there are a lot of different tools for this but nothing official. All Go 2 needs is an official tool akin to setup.py for Python or package.json for Node.",
					"date": "2017-07-14",
					"id": "dk81v5v",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "illotum",
					"content": "This will most probably happen before Go 2: https://github.com/golang/dep/wiki/Roadmap\n\nAnd it\u0027s indeed official. they closed GopherCon today with advising everyone to switch to `dep`.",
					"date": "2017-07-15",
					"id": "dk8mvdn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jugalator",
					"content": "Maybe a transition from Unicode encoding to ASCII by default? ;-)",
					"date": "2017-07-13",
					"id": "dk6ey31",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "b4ux1t3",
					"content": "Are you serious? If so, why? ",
					"date": "2017-07-13",
					"id": "dk6i687",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "DualRearWheels",
					"content": "He is referring to Python 3 -\u0026gt; 2",
					"date": "2017-07-13",
					"id": "dk6khls",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "tristan957",
					"content": "Needless to say I\u0027m excited",
					"date": "2017-07-13",
					"id": "dk68ogb",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "AlekSilver",
					"content": "So far Twitter is the best source: https://twitter.com/hashtag/golang?f\u003dtweets",
					"date": "2017-07-13",
					"id": "dk675aq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk6b3t6",
					"isArchived": true,
					"isControversial": true,
					"score": -7
				},
				{
					"author": "Sythe2o0",
					"content": "Rust\u0027s ownership model is great, but I don\u0027t think it fits Go, if Go is trying to be simple. ",
					"date": "2017-07-13",
					"id": "dk6b99m",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk6dbfp",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Sythe2o0",
					"content": "Don\u0027t put words in my mouth. Go absolutely could use an immutable keyword for non constants.",
					"date": "2017-07-13",
					"id": "dk6du8a",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "metamatic",
					"content": "I\u0027d much rather have a `mutable` keyword, so you don\u0027t end up with a situation like Java and `final`.",
					"date": "2017-07-13",
					"id": "dk6gf8t",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "tristan957",
					"content": "Can you explain the Java and final thing for those of us who are out of the loop",
					"date": "2017-07-13",
					"id": "dk6scm2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "metamatic",
					"content": "Sure can, [I have a post about it](http://lpar.ath0.com/2008/08/26/java-annoyance-final-parameters/).",
					"date": "2017-07-13",
					"id": "dk6t0be",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Sythe2o0",
					"content": "I\u0027d only lean towards an immutable keyword because `const` is already in the language, and it would be perhaps not breaking to just allow the keyword `const` to be used in more contexts.",
					"date": "2017-07-13",
					"id": "dk6glo9",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "I want destructors and generics. I\u0027m okay with not changing the ownership model (though it\u0027s nice as well), since you can get most of the features of ownership with those two features.\n\nDestructors would probably need to be deterministic though to really get a benefit, and if they do that, it\u0027s competing with `defer` for some use-cases, which may make it less desirable for the design team.",
					"date": "2017-07-13",
					"id": "dk6fb5v",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Testiclese",
					"content": "How does that make sense considering Go is a garbage collected language and Rust has deterministic allocation/deallocation? ",
					"date": "2017-07-15",
					"id": "dk8ngje",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Xenepa",
					"content": "Ternary operators maybe :3\n\nor more oop\n\n",
					"date": "2017-07-13",
					"id": "dk68fto",
					"isArchived": true,
					"isControversial": false,
					"score": -8
				},
				{
					"author": "leimy",
					"content": "Please no to both....",
					"date": "2017-07-13",
					"id": "dk68tlr",
					"isArchived": true,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "konart",
					"content": "\u0026gt;or more oop\n\nThe whole point was to be less oop to be more oop in the first place.\n\nhttp://spf13.com/post/is-go-object-oriented/\n\nIf you need a \u0027classic\u0027 oop for whatever needs you have - welcome to java\\c# world.",
					"date": "2017-07-13",
					"id": "dk69ldu",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk6g2ml",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Xenepa",
					"content": "I mostly miss it when instantiating some structure, eg. this would be very handy\n\n    xyz :\u003d somestruct{\n        Foo: (x \u003d\u003d y ? \"bar\" : \"baz\"),\n    }\n\nCurrently I see four options: wrap entire thing in `if`, create a function that will do the comparison, create additional variable to hold temporary result or anonymous function. First one is very inelegant, if the struct is larger it is a lot of replicated code. \n\nCreating a function such as\n\n    func cmp(arg1 string, arg2 string, ret1 string, ret2 string) string {\n        if(arg1 \u003d\u003d arg2) {\n            return ret1;\n        } \n        return ret2;\n    }\n\nis problematic since we need separate one for each type we may want to compare and each result we may want. I came across this issue when constructing html template - basically needed to add certain css class to some objects and different to others. Temporary variable is probably most clean but I don\u0027t think it\u0027s very elegant either. Anonymous function is okay but it\u0027s even less readable than standard ternary. I also saw some even worse solution with `map[bool]string{ true: \"bar\", false: \"baz\" }[x\u003d\u003dy]` but that is even more magic.\n\nThis became quite lengthy response, but just wanted to show why I would consider them useful. Can still live without :)\n\n\nOh and about multiple ways.. I still don\u0027t know what\u0027s better: create Load() function returning *somestruct with initialized, loaded data, or creating uninitialized and calling Load(\u0026amp;foo) or maybe foo.Load()\n\nOh yes I also forgot what I miss most from ruby: operator overloading, even to existing, base classes like Fixnum. But this is probably everything go hates :)",
					"date": "2017-07-13",
					"id": "dk6ib9q",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-13",
					"id": "dk69fmy",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "Morgahl",
					"content": "Unfortunately ternary operators get really hard to mentally parse when someone throws all their logic into a single massive nested ternary operation. This is fairly counter to Go\u0027s general idiomatic feel. If the ternary was going to be added it would very quickly become a situation where the full \"power\" of the ternary would be generally considered un-idiomatic.",
					"date": "2017-07-13",
					"id": "dk69sia",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "I really like the `Rust`/`Python` solution:\n\n    // Rust\n    val \u003d if condition { x } else { y }\n\n    // Python\n    val \u003d x if condition else y\n\nIf Go makes conditionals into expressions, we get the same behavior for free, and then some (you could do it for `switch` and `else if` as well).",
					"date": "2017-07-13",
					"id": "dk6f6y9",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "MattieShoes",
					"content": "Eww, not a fan of the python way.  \"val \u003d x if condition\" parses the same in English, but tacking else onto the end breaks that.\n\nThe Rust way seems super nice but Go isn\u0027t all that expressiony, is it?\n",
					"date": "2017-07-13",
					"id": "dk6jmco",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "\u0026gt;  Go isn\u0027t all that expressiony, is it?\n\nNo, it\u0027s not, but it would be a welcome change. I\u0027m not sure how that would jive with the way newlines are treated though (Rust gets away with it since `;` turns an expression into a statement). If Go goes (ha!) halfway and just does it for conditionals, I think that\u0027s not too weird for someone learning the language, and it\u0027s much nicer than `condition ? x : y`. I just don\u0027t like stuff like this:\n\n    x :\u003d 2\n    if condition {\n        x \u003d 3\n    }\n\nWhen it could be:\n\n    x :\u003d if condition { 2 } else { 3 }\n\nWhich helps when you want to shadow *some* variables in multiple assignment, such as:\n\n    x :\u003d if val, err :\u003d fn(); err !\u003d nil {\n        3\n    } else {\n        2\n    }\n\nIf this is ugly, they can introduce a keyword, like `yield` (which could also be used to do generators or returning values from `for`):\n\n    x :\u003d if val, err :\u003d fn(); err !\u003d nil {\n        yield 3\n    } else {\n        yield 2\n    }\n\n    x :\u003d for _, c :\u003d range arr {\n        if condition {\n            yield c // or do \"break c\" and change labels to use a different notation\n        }\n     }\n\n     // obviously incompatible with \n     func generator() Stream\u0026lt;int\u0026gt; {\n        var i int\n        return for {\n            yield i\n            i +\u003d 1\n        }\n     }\n\nThis is a fair amount of bikeshedding, so take it with the understanding that I spent literally less than 5 minutes coming up with this.",
					"date": "2017-07-13",
					"id": "dk6mcqs",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "MattieShoes",
					"content": "I\u0027m too new to go (4 days) to have a well thought out opinion.  So far, the things that made me frown were:\n\n1. No generics.  Not really a problem, and I see that there\u0027s some advantage to the way interfaces work in go that make generics a bit more difficult.  But I definitely noticed.\n\n2. I miss Perl\u0027s string concatenation operator.  \n\n3. No operator overloading.\n\n4. limited complex number support (e.g. no complex bytes).\n\n5. No unions (which i mostly wanted to use as a cheaty way to avoid no operator overloading)\n\n6. I don\u0027t miss while() at all but there isn\u0027t a nice drop-in replacement for do..while()",
					"date": "2017-07-13",
					"id": "dk6tge6",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "\u0026gt; I miss Perl\u0027s string concatenation operator. \n\nI\u0027m guessing you miss automatic number -\u0026gt; string conversions then, right? I can see that, but I also don\u0027t like the surprises that go along with it, especially for languages that don\u0027t declare types. If it\u0027s allowed both directions (number -\u0026gt; string), then you end up with complicated rules to do one direction vs the other, which increases the chance of bugs.\n\n\u0026gt; No operator overloading.\n\nThis is sometimes useful, but it can also make things a bit confusing. For example, C++ uses `\u0026gt;\u0026gt;` for bitshift and \"streaming\" in the standard library, which are two completely different things. When you have operator overloading, people will abuse it, and it\u0027s really difficult to search for an operator.\n\nI used to think that operator overloading was amazing, and I even hoped that languages would allow me to define my own operators. And then I ran into some really odd uses of operator overloading and realized that being more verbose is a good thing since it makes things much more clear.\n\n\u0026gt; limited complex number support (e.g. no complex bytes)\n\nI didn\u0027t know anyone actually used anything besides 64 and 128 bit complex numbers. Interesting.\n\n\u0026gt; No unions\n\nThis is something I missed, but mostly because I want to save on logic for wire protocols. I really wish they had tagged unions (enums) like Rust has, which would really help in this regard.\n\n\u0026gt; there isn\u0027t a nice drop-in replacement for do..while()\n\nEh, you can do a regular, non-terminating `for` with the condition check at the end:\n\n    for {\n        if !condition {\n            break\n        }\n    }",
					"date": "2017-07-13",
					"id": "dk6uph9",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "MattieShoes",
					"content": "Re: types -- I enjoy the ease that comes with automatic type conversion in very short scripts, but I *much* prefer typed languages for anything longer.  I\u0027m very glad that Go is typed. :-)  But I still miss the ability to append a unit to a number like val .\u003d \" KiB\" or whatever.  Sprintf works, just takes a smidge longer for me to parse it in my brain.  Perl is an ugly language, but regex built into the language and lots of built in string manipulation is fantastic for quick and dirty scripts.  Eh, maybe it\u0027s just hammer vs screwdriver. :-D\n\nRe: operator overloading, I get the problems with it, but like I mentioned, there\u0027s no complex bytes.  One could make one easily enough, but then one can\u0027t define those operators, which makes it cumbersome to write.  The \u0026gt;\u0026gt; overloading stuff in C++ is one of my big annoyances with it, so I get the downside.  The lack just made me frown a bit. :-)\n\nComplex uint8 is definitely used -- for instance, those USB software defined radios are sending high data rate complex bytes -- I/Q data.  Which means things like fourier transforms will be taking in complex byte data as well, and so on...\n\nI know there\u0027s ways to make a fake do..while loop, but it looks less clean to me.  I\u0027ll get over it.  I like that they\u0027ve sort of smooshed together while, for, and foreach, but it just happens to leave do..while out.\n",
					"date": "2017-07-14",
					"id": "dk6zi0p",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "\u0026gt; USB software defined radios are sending high data rate complex bytes\n\nBut to be fair, you probably won\u0027t be writing such software with Go, since it probably won\u0027t run on those small devices. If you do, then you probably want specialized hardware, like a GPU or DSP. Even so, I get the point, and it seems pretty simple for them to add, so it\u0027s a little odd it hasn\u0027t happened yet, though it\u0027s probably the same reason `float16` isn\u0027t a thing.\n\nAnyway, you\u0027re right that Go leaves a bit to be desired. I mostly want deterministic destructors and generics, but I guess we can\u0027t all have what we want :)",
					"date": "2017-07-14",
					"id": "dk72r8k",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Pulse207",
					"content": "\u0026gt;\"val \u003d x if condition\" parses the same in English, but tacking else onto the end breaks that.\n\nHow so?\n\n`val \u003d x if condition` -\u0026gt; val is x if condition is met \n\n`val \u003d x if condition else y` -\u0026gt; val is x if condition is met, else/otherwise it\u0027s y. \n\nThat said, I prefer the Rust way as well.",
					"date": "2017-07-13",
					"id": "dk6mcnd",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "MattieShoes",
					"content": "It\u0027s just a problem with the way my brain wants to parse it -- it\u0027s like a [garden path sentence](https://en.wikipedia.org/wiki/Garden_path_sentence).\n\n`val \u003d x if condition` --\u0026gt;  `if condition { val \u003d x }`  \n\nSo as I parse left to right\n\n`val \u003d x if condition else y` --\u0026gt; `if condition { val \u003d x } else { y }`\n\nAnd then I have to stop my thought process and rearrange it  \n`val \u003d (if condition {x} else {y})`\n\nMaybe it\u0027s a problem unique to me, I dunno.",
					"date": "2017-07-13",
					"id": "dk6scls",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Pulse207",
					"content": "Oh, I see where you\u0027re coming from. Not much to be done about a difference in how we read it haha",
					"date": "2017-07-14",
					"id": "dk856gk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jeffrallen",
					"content": "It is a super nice solution to an unimportant problem. Read Russ\u0027s blog.",
					"date": "2017-07-13",
					"id": "dk6o0zo",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "\u0026gt; Unfortunately ternary operators get really hard to mentally parse when someone throws all their logic into a single massive nested ternary operation.\n\nWell, doesn\u0027t the same apply to pretty much any language construct that can be nested or generally misused?\n",
					"date": "2017-07-13",
					"id": "dk6vueo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ants_a",
					"content": "With generics you can build your own ternary if you are so inclined.",
					"date": "2017-07-13",
					"id": "dk6aerj",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Sythe2o0",
					"content": "Well, if you also have operator overloading",
					"date": "2017-07-13",
					"id": "dk6b11l",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ryeguy",
					"content": "and a ternary operator to overload in the first place",
					"date": "2017-07-13",
					"id": "dk6gcd8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "Maybe he meant a generic function that would act like one?",
					"date": "2017-07-13",
					"id": "dk6vqrx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DualRearWheels",
					"content": "That is valid reason I support, only way ternary could work is if limited to one level (no nesting) so readability won\u0027t suffer.",
					"date": "2017-07-13",
					"id": "dk6kklu",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "NichtMitCommander",
					"content": "Having no ternary operator is a feature of Go that I would miss.",
					"date": "2017-07-13",
					"id": "dk6nhmq",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "lluad",
					"content": "So is Python 3 ...\n\n... and Perl 6.",
					"date": "2017-07-13",
					"id": "dk6bo7b",
					"isArchived": true,
					"isControversial": false,
					"score": -9
				},
				{
					"author": "[deleted]",
					"content": "[The last set of stats I saw](https://www.jetbrains.com/pycharm/python-developers-survey-2016/) said that 40% of Python programmers are using Python 3 the most. But however you look at it, outside of embedded interpreters, it\u0027s clearly growing and version 3 may even be the majority for 2017.",
					"date": "2017-07-14",
					"id": "dk7zsbv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Pulse207",
					"content": "What was the gameplan here?",
					"date": "2017-07-13",
					"id": "dk6mup1",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				}
			]
		},
		{
			"author": "denholmsdead",
			"date": "2017-11-17",
			"id": "7dk1wr",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "i create a set of open source related pictures in playing cards style and upload in high resolution to github for free personal use. this is the go one. links to hi-res are in the comments.",
			"comments": [
				{
					"author": "denholmsdead",
					"content": "the hi-res of this print in [white](https://github.com/jstpcs/lnxpcs/blob/13623317b4de9aa34a5f53f6dc36717a92a213f8/cards/classic/golang-card.png) and in [black](https://github.com/jstpcs/lnxpcs/blob/13623317b4de9aa34a5f53f6dc36717a92a213f8/cards/black/golang-card-black.png) colors\n\nall the other [cards](https://github.com/jstpcs/lnxpcs/tree/master/cards).\n\nthe github [repo](https://github.com/jstpcs/lnxpcs) with all my pics (mainly related to linux).\n\nmy [site](https://linux.pictures/) with preview of all images.",
					"date": "2017-11-17",
					"id": "dpyc5gj",
					"isArchived": false,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "epiris",
					"content": "Hi there, you may want to consider a proper license to protect all the hard work you put into these. There are some crappy people out their and if your efforts are really exploited (though I’m not a lawyer, so anyone feel free to correct me) it would probably be hard (costly) to defend that license in court, if at all. Maybe one of the Creative Commons licenses would be compatible with your philosophy.",
					"date": "2017-11-17",
					"id": "dpysghy",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "denholmsdead",
					"content": "i tried once with cc license and when i found that my pics where sold on shirts on one of online shops, i asked the administrators to remove the pics without any penalties to the person that uploaded it. as a proof that the works where mine, i provided the links to github, but i was requested to fill and sign 6 different papers. it was needed only to to open an dispute. i make the pics as a small hobby for relax, i don\u0027t make my living from it, so i decided to distribute it as is. most people respect the work, but those that don\u0027t can be stopped by any license. what\u0027s more, i\u0027m not a professional artist and very often purchase some elements from graphic stock (for example when i have an idea but have not enough skills to implement it).",
					"date": "2017-11-17",
					"id": "dpywqkr",
					"isArchived": false,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "epiris",
					"content": "For the stocks photos- be careful that you are redistributing your work within their guidelines. A lot of them use cc-by licenses which your current \"idgaf\" license would not be legally distributing derivative works.\n\nI totally get that you may never plan to pursuit someone exploiting your efforts, most people don\u0027t. I failed to mention that licenses can allow people who are excluded by corporate policies (or legal reservations) from enjoying your work as well though. So omitting a standard license doesn\u0027t just take away a protection from your work, it can limit the audience that can enjoy it and even create personal liabilities. If someone wants to claim your work brought them financial hardships- frivolous as it may be without legal precedence you are entering a completely unknown (expensive) territory. For images this probably isn\u0027t as important as software.. but I have no idea, not super savvy in this area just known enough to try to stay out of trouble. Best of luck to you whatever you do, the pictures are super cool.",
					"date": "2017-11-17",
					"id": "dpyy7xh",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "kuenx",
					"content": "There are different CC licenses for every purpose. You can allow or disallow commercial use, making derivative work, and so on, and make attribution mandatory, and you can say whether derivative work must use the same license.\n\nIf someone ends up selling t-shirts based on your work in violation of your terms you should always demand that they remove it and demand compensation, or find a deal so you get your cut. \n\nIf you don\u0027t want to do that then just allow commercial use in your license.\n\n",
					"date": "2017-11-18",
					"id": "dpzjt9e",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "onedr0p",
					"content": "I was going to request a black one, but you have it here. thanks!",
					"date": "2017-11-17",
					"id": "dpyh97q",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "denholmsdead",
					"content": "you are welcome!",
					"date": "2017-11-17",
					"id": "dpyhohj",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "I love the Arch calendar, I might have to order one for my office. How hard would it be to auto-generate a new calendar each year with a script? If you haven\u0027t already done it, I might take a crack at it.",
					"date": "2017-11-17",
					"id": "dpyndtw",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "denholmsdead",
					"content": "i will think about auto generation for next year, the calendar itself is easy, but adjustments, colloring and allignment are tricky. if you have some ideas, you are welcome.",
					"date": "2017-11-17",
					"id": "dpyqczk",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "knome",
					"content": "Gentoo should be a [hand drawing itself](https://upload.wikimedia.org/wikipedia/en/b/ba/DrawingHands.jpg)\n\n/ because all that time spent recompiling itself",
					"date": "2017-11-17",
					"id": "dpyhf68",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "denholmsdead",
					"content": "great idea!",
					"date": "2017-11-17",
					"id": "dpyhp1f",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jonathanmh",
					"content": "Got the cron one hanging at the office, love your work!",
					"date": "2017-11-17",
					"id": "dpyfg45",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "denholmsdead",
					"content": "thanks a lot!",
					"date": "2017-11-17",
					"id": "dpyfpuk",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-11-17",
					"id": "dpycvbo",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "denholmsdead",
					"content": "thatnks, i like this quote very much:\n\nThe details are not the details. They make the design. \n\nCharles Eames\n",
					"date": "2017-11-17",
					"id": "dpyec0a",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "PrincipalButt",
					"content": "Sick! It should be possible to create a card game with these.. which rules would you create? ",
					"date": "2017-11-17",
					"id": "dpycns9",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "denholmsdead",
					"content": "i was asked several times about a deck of cards, but now i just create pics in this style. maybe one day it will be a game, anyway i\u0027m always open to ideas.",
					"date": "2017-11-17",
					"id": "dpyee7p",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "PrincipalButt",
					"content": "Great, btw the super user one is my fav, the combination of details it\u0027s just purrfect\n ",
					"date": "2017-11-17",
					"id": "dpyfaym",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Aeaex",
					"content": "This is actually sick.  Well done all round!",
					"date": "2017-11-17",
					"id": "dpyd0l9",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "denholmsdead",
					"content": "glad that you like it.",
					"date": "2017-11-17",
					"id": "dpyeaow",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Spirit_of_Stallman",
					"content": "Wow. Impressive job.",
					"date": "2017-11-17",
					"id": "dpye2iy",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "denholmsdead",
					"content": "thanks for your kind words.",
					"date": "2017-11-17",
					"id": "dpyeaxu",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "trycat",
					"content": "Wonder if you’re allowed to sell these on T-shirts, I’d buy one or two. ",
					"date": "2017-11-17",
					"id": "dpyf9x9",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "denholmsdead",
					"content": "the links to ready shirts for all my pics are in repos [readme](https://github.com/jstpcs/lnxpcs) file. or you can browse the [site](https://www.linux.pictures/), under the every image on the right there are links to ready shirts and github for hi-res. also i really don\u0027t mind if you get the hi-res and make a tee yourself.",
					"date": "2017-11-17",
					"id": "dpyfm4x",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "danO1O1O1",
					"content": "Da Real MVP",
					"date": "2017-11-17",
					"id": "dpzay15",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rggarou",
					"content": "I loved it! Really great job!\n\nI want a lot of shirts now… But I live in Brazil… ;.;",
					"date": "2017-11-17",
					"id": "dpyfhc3",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "denholmsdead",
					"content": "the tees are shipped worldwide, you can use the [links](https://github.com/jstpcs/lnxpcs) in repo\u0027s readmy, but i really don\u0027t mind if you get the hi-res from github and print the shirts at the nearest location in brazil for you and for your friends. if you have some troubles with images or need bigger ones, just pm me.",
					"date": "2017-11-17",
					"id": "dpyfoqo",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "BaconBytes42",
					"content": "Beautiful!",
					"date": "2017-11-17",
					"id": "dpyhivx",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Sarenord",
					"content": "I\u0027ve seen these cards posted all over the place and they never fail to impress me, awesome work!",
					"date": "2017-11-17",
					"id": "dpykyv0",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "denholmsdead",
					"content": "thank you",
					"date": "2017-11-17",
					"id": "dpyre4a",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "vhodges",
					"content": "Nice! You can get custom decks made up at (among others a quick google turned up) https://legendsplayingcards.com/ (though there\u0027s a MOQ of 1000)",
					"date": "2017-11-17",
					"id": "dpynf5h",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "denholmsdead",
					"content": "thanks, i hope that one day i have enough cards",
					"date": "2017-11-17",
					"id": "dpyrbiw",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Virtual-Go",
					"content": "Very nice! Kudos!\n\nReally like your art style.",
					"date": "2017-11-17",
					"id": "dpyt3qw",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "phonkee",
					"content": "This is awesome!!",
					"date": "2017-11-17",
					"id": "dpywet3",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ChristophBerger",
					"content": "Awesome design! But... just a tiny tiny question... would you - just maybe - consider making a second version... without \"lang\"?  :) \n\nʕ◔ϖ◔ʔ ",
					"date": "2017-11-17",
					"id": "dpzbkml",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "brontitall",
					"content": "I agree, the language is called “go”",
					"date": "2017-11-18",
					"id": "dpzt7k2",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "cat-gun",
					"content": "Beautiful work!",
					"date": "2017-11-17",
					"id": "dpyzyme",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "sleepyj222",
					"content": "Cool",
					"date": "2017-11-17",
					"id": "dpz377y",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "JoeSnuffy37",
					"content": "These are dope AF. Great work!",
					"date": "2017-11-17",
					"id": "dpzbsbt",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DurianBurp",
					"content": "I just spent way too long going through your repo.  These are incredible!  ",
					"date": "2017-11-18",
					"id": "dpzknom",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "NeverUse-YouPromised",
					"content": "Why can\u0027t you make these vector images?",
					"date": "2017-11-18",
					"id": "dpzodwf",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gnu-user",
					"content": "Awesome, thanks for creating these, I recognize your work I remember asking months ago for a golang version!",
					"date": "2017-11-18",
					"id": "dpzoo8u",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "0xjnml",
					"content": "Nice picture. Why is the domain name on the banner missing the \u0027.org\u0027 suffix?",
					"date": "2017-11-18",
					"id": "dpzv7zq",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "iam_root",
					"content": "Awesome!",
					"date": "2017-11-18",
					"id": "dpzvq6n",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "raughit",
					"content": "This is so cool",
					"date": "2017-11-18",
					"id": "dq0ba7x",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "caspervonb",
					"content": "Wow these are amazing, awesome work! ",
					"date": "2017-12-21",
					"id": "drk2oqv",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "pier25",
			"date": "2017-08-23",
			"id": "6vjkem",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Replacing Node with Go",
			"comments": [
				{
					"author": "kevinherron",
					"content": "Isn\u0027t this backwards?\n\nAs depicted, the Gopher is the sack of sand and Node is the idol.",
					"date": "2017-08-23",
					"id": "dm19xqa",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "NOLAnuffsaid",
					"content": "Correct. \n\nIndiana Jones had to replace the idol with the sand. ",
					"date": "2017-08-24",
					"id": "dm1llso",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Hunterbunter",
					"content": "without setting off the trap",
					"date": "2017-08-24",
					"id": "dm1pxtp",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "nilium",
					"content": "Honestly, I feel like a gopher would have the mass and general feel that a bag of sand would. Like, heavy and a little squishy, but not too squishy.",
					"date": "2017-08-24",
					"id": "dm1q98w",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "comrade-jim",
					"content": "Is there a reason to use node or ruby over Go for new projects?\n\nI use to be a node programmer but about a year ago I switched to Go for everything I use to use node for and I don\u0027t know why I would go back. ",
					"date": "2017-08-23",
					"id": "dm0t8gp",
					"isArchived": true,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "i_got_the_tools_baby",
					"content": "I constantly ask myself the opposite question. Is there a reason to use Go over X for any project?\n\n\nI do full stack web dev in go/ember.js for a major tech company. To me Go is an optimizing language that can take whatever you wrote in X and make it run faster/more efficient. I believe the relative speed/efficiency advantage is minuscule (I\u0027d be curious to see node 8.3+ benchmarks vs go), but could potentially save your company a lot of money on your AWS/GCP/Azure bill if you have a high traffic product. Go also shines if you have a computationally expensive feature that your project has to do, but this is almost never the case for web dev. \n\nAs a trade off, I believe go code takes longer to write and you end up writing more due to its lower level design. Package management and debugging are not first first class citizens (community implementations are not as good imo) which can turn into time sinks for many devs.\n\n\nTo get back to the original point, I believe that very few projects benefit from go ESPECIALLY in the early stages when there is uncertainty about the future of the project and dev time is the biggest cost.",
					"date": "2017-08-23",
					"id": "dm0ygvp",
					"isArchived": true,
					"isControversial": false,
					"score": 37
				},
				{
					"author": "recurrency",
					"content": "well I would argue that dev time decreases dramatically with go, even for small programs/apis/what have you.\n\nI find myself writing fairly large chunks of code without hitting the compiler once and striking luck at first or second try. would never have happened in e.g. python. there I\u0027d need to continously hit the run button and reach for the docs (even with tests)\n\nI would argue that go is an excellent fit for prototyping, startups doing mvps etc. \n\nps: it\u0027s gone as far as me even starting to use go as a scripting language. bootstrapping our kubernetes deployments? easier to write a few lines of go code than yamls. doing some one-off etl? let\u0027s see... go :) ",
					"date": "2017-08-23",
					"id": "dm1aafh",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "RevMen",
					"content": "Only 25 keywords means you can hold the whole language in your head. I\u0027m amazed at how much code I can write correctly on the first try sometimes.",
					"date": "2017-08-23",
					"id": "dm1b9sh",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "The \"25 keywords\" thing is technically true but misleading at best. It\u0027s a kind of a lawyer\u0027s trick - see [my comment here](https://www.reddit.com/r/golang/comments/6p5g1k/dotgo_2015_rob_pike_simplicity_is_complicated/dknu7de/). Regarding the simplicity claim, see my comment a bit higher in the same thread. TL;DR it\u0027s only partially true at best.\n",
					"date": "2017-08-24",
					"id": "dm2a2gx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "pcopley",
					"content": "Did... did you just link to one of your own comments? That is some aalewis level euphoria.",
					"date": "2017-08-24",
					"id": "dm2p3mz",
					"isArchived": true,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "\"In this moment, I am euphoric. Not because of any phony commander\u0027s blessing. But because I am elightened by my ability to understand complexities of programming languages\" ―spaghettiCodeArtisan",
					"date": "2017-08-24",
					"id": "dm2qiny",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Uncaffeinated",
					"content": "The first version of Javascript was also extremely simple.",
					"date": "2017-08-24",
					"id": "dm2lccw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "albgr03",
					"content": "\u0026gt; I find myself writing fairly large chunks of code without hitting the compiler once and striking luck at first or second try. would never have happened in e.g. python\n\nIt can happen with any language if you’re familiar enough with it tbh. I do that with Python, for instance.",
					"date": "2017-08-24",
					"id": "dm20n1u",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "earthboundkid",
					"content": "Package management has traditionally been a weak point in Go, but I think that with dep, it\u0027s basically catching up to gem/npm. It\u0027s definitely much easier to make work than the hell that is pip.",
					"date": "2017-08-23",
					"id": "dm11as8",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "AllHailStarscream",
					"content": "PIP is hell? That\u0027s news to me. It\u0027s quite simple.  It\u0027s CocoaPods that I don\u0027t like. So finicky.",
					"date": "2017-08-24",
					"id": "dm1xhrx",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "earthboundkid",
					"content": "Simple as Sunday: explain the difference between setup.py, setup.cfg, requirements.txt, venv, and virtualenv. :-p I love Python, but the setuptools ecosystem is the worst package manager I have to interact with. ",
					"date": "2017-08-24",
					"id": "dm22m98",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "NeedsMoreTests",
					"content": "I completely agree. However as someone who used Python before pip and such existed....it\u0027s far better than it used be that\u0027s for sure especially with regards to C-extensions.",
					"date": "2017-08-24",
					"id": "dm2c9b0",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "metamatic",
					"content": "Don\u0027t forget SCons.\n\nGenerally, if a package requires building from source and it\u0027s in Python, I look for an alternative.",
					"date": "2017-08-24",
					"id": "dm2prwn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "earthboundkid",
					"content": "I forgot about MANIFEST.in. There\u0027s also [pyproject.toml](https://www.python.org/dev/peps/pep-0518/), which I\u0027ve never seen in the wild yet, but why not add one more thing?",
					"date": "2017-08-24",
					"id": "dm2yc6g",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thomasfr",
					"content": "Yeah, I don\u0027t see large problems with pip, could be better but it works very well. \n\nThe fact that npm allows multiple versions of a package in node_modules firmly puts it in the worst package manage practices bunch. ",
					"date": "2017-08-24",
					"id": "dm1yi4y",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Redundancy_",
					"content": "Both pip and easy install aren\u0027t terribly robust, iirc. I\u0027ve seen so many CI failures due to them poking a repo and failing to get an answer in time on the first attempt.\n\nThings have gotten a lot better with the advent of wheels, so that at least in concept you don\u0027t need to deal with compiling all the C modules.",
					"date": "2017-08-24",
					"id": "dm2bp5a",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "thomasfr",
					"content": "I haven\u0027t seen pip fail to talk to the packaging server enough to see it as a\nreal problem, npm has been down far more than PYPI. I do however always assume\nthat repository servers can be down so I always run CI configured with caching\nproxies for npm/pypi/gem/apt/... so that the outside world can\u0027t mess with CI\njobs regardless of why.\n\nI don\u0027t really mind compiling and having the right libraries installed. I don\u0027t\nknow how windows does it these days but the complete lack of standardization on\nlibrary/source/headers/version is a really problematic design. Every time I\ninstall windows I start by installing mingw and the microsoft c++ toolchain and\nthen some libraries but I don\u0027t use windows as a development workstation\noperating system so I have it easier.\n\nI think we need more well designed packaging tools good enough that everyone\nwants to use them:\n\n1. C/C++ library manager which all other package managers can use for the\n.so/.dll/.h connection.\n\n2. A functional way to define locations of packages. I have not tried it myself\nis nixpkg but the way it works is a very good step towards something simple and\nuniversal which can be shared among package managers\nhttps://nixos.org/nix/about.html . In this specific case it\u0027s not windows\ncompatible but it\u0027s the way designs may be heading which is interesting.\n\n",
					"date": "2017-08-25",
					"id": "dm3ogqc",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Redundancy_",
					"content": "See, for example: https://github.com/buildout/buildout/issues/211 and the advice to use allow-hosts\u003d*.python.org\n\nCompiling libraries with C dependencies and other libraries that need installation, especially on Windows (which just never got any attention) was really just miserable.",
					"date": "2017-08-25",
					"id": "dm3wkwo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thomasfr",
					"content": "One thing I like a about Go is btw that a project almost always can be written either in pure Go which means that the only thing I have to do to secure that a reproducible build can be done is to check in my `vendor/` directory into VCS.",
					"date": "2017-08-25",
					"id": "dm3oo8c",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "8lall0",
					"content": "Try to work with multiple OSes with libraries that requires DLLs or .so.\nHere is where pip fails. A lot.",
					"date": "2017-08-24",
					"id": "dm2crzx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Drugba",
					"content": "\u0026gt; I believe the relative speed/efficiency advantage is minuscule (I\u0027d be curious to see node 8.3+ benchmarks vs go), but could potentially save your company a lot of money on your AWS/GCP/Azure bill if you have a high traffic product. Go also shines if you have a computationally expensive feature that your project has to do, but this is almost never the case for web dev.\n\nI work in Node and Go at work (Like 80/20 Node to Go) in a very high traffic environment and Go just kills Node when it comes to performance. As our company has grown we\u0027ve shifted a lot of our micro services from Node to Go and seen between a 3x to 15x boost in performance, depending on what the service does.\n\nThe fact that Node isn\u0027t multi-threaded really limits it when you start writing high through put services.\n\nNode\u0027s main strengths in my mind are npm\u0027s ease of use and the fact that it\u0027s easy easy for people who are used to front-end work to get up to speed on back-end services very quick. It\u0027s a powerful language and it has it\u0027s place, but from what I\u0027ve seen in production, it just can\u0027t compete with Go in performance.",
					"date": "2017-08-24",
					"id": "dm1vcdp",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "cyrusol",
					"content": "Wouldn\u0027t the usual thing to do for Node services to split up a server into single-core VMs or at least start as many processes as cores and put a load balancer in front of them?",
					"date": "2017-08-24",
					"id": "dm1wtpk",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Drugba",
					"content": "Yea, everything we do is already behind a load balancer and it\u0027s not like the node services were breaking, it\u0027s just at peak traffic we were running far more instances of a node version of a service than the equivalent Go version. We made Node work for a long time, it was just costing us more. ",
					"date": "2017-08-24",
					"id": "dm2grfr",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "cyrusol",
					"content": "I see, it makes sense putting it this way.",
					"date": "2017-08-24",
					"id": "dm2hawi",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ihsw",
					"content": "Node has supported clustered listening on single ports, ie: running an application in clustered mode on 8-core machines is trivial. No need to spin up N number of single core VMs and round-robin reverse proxy in front, I have seen excellent performance numbers from cluster Node.\n\nBut then again it pales in comparison to Go.",
					"date": "2017-08-24",
					"id": "dm24q88",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Olreich",
					"content": "Go can skip the VMing portion of that and act as its own load balancer. Node is getting fairly fast, but is not likely to beat anything with proper multi threading support.",
					"date": "2017-08-24",
					"id": "dm20hrr",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "xPerplex",
					"content": "I go to Egypt",
					"date": "2017-08-23",
					"id": "dm13xpz",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "i_got_the_tools_baby",
					"content": "Google: Nest but yeah, Twitch uses a very similar stack to us",
					"date": "2017-08-23",
					"id": "dm188o5",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "cyrusol",
					"content": "\u0026gt; As a trade off, I believe go code takes longer to write and you end up writing more due to its lower level design.\n\nMaybe someone who used Go and something else for the same project (after a rewrite) is willing to share his numbers.",
					"date": "2017-08-24",
					"id": "dm1wlt1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Uncaffeinated",
					"content": "I once rewrote the same project in both Go and Rust as an experiment. They took about the same amount of time, but the Rust version was twice as fast, and required less code. It also had half as many bugs make it past the compiler.",
					"date": "2017-08-24",
					"id": "dm2lhlc",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "holyjeff",
					"content": "\u0026gt; Rust\nCan i ask what kind of project ? Can you share the code ?\n\n",
					"date": "2017-08-24",
					"id": "dm2n6i6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Uncaffeinated",
					"content": "Sure\n\nhttps://medium.com/@robertgrosse/my-experience-rewriting-enjarify-in-rust-723089b406ad\nhttps://medium.com/@robertgrosse/parallelizing-enjarify-in-go-and-rust-21055d64af7e\nhttps://github.com/google/enjarify/tree/1ac4c5728eede44fa161c514aa946aa277490b99\n",
					"date": "2017-08-24",
					"id": "dm2pwb4",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Thaxll",
					"content": "In most companies  people cost more than servers, so working quickly is more important than running fast software on the servers.",
					"date": "2017-08-24",
					"id": "dm29vor",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Redundancy_",
					"content": "That assumes equal quality code being produced, and the same cost of maintenance. Go is aimed at reducing the cost of maintenance.\n\nGiven maintenance anecdotally accounts for 4x the initial cost of writing it, your numbers could be significantly affected by that.",
					"date": "2017-08-24",
					"id": "dm2btj5",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Thaxll",
					"content": "I don\u0027t have that much experience with Ruby but it\u0027s an easy language to maintain I guess?",
					"date": "2017-08-24",
					"id": "dm2by7i",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "comrade-jim",
					"content": "I didn\u0027t ask about language X. Seems language X is ALWAYS better than language Y. I specifically mentioned Ruby and Node. And there are good reasons to use Go over JavaScript. Go is almost always faster and safer than JavaScript, and in my experience requires less \"magic\" without adding any more complexity. \n\nAnother thing you didn\u0027t consider is maintenance. JavaScript code bases are a shit show. Almost all Go code looks like it was written by the same person and is typically easier to maintain in the long run. \n\nSo let\u0027s see, with Go I get:\n\n - Fast development\n - Better performance\n - Better Safety\n - Easier to maintain\n - Generally cleaner code that\u0027s easier to reason about\n - Statically compiled binary\n - Amazing tooling\n \nWith JavaScript I get:\n\n - Supposedly faster prototyping\n - Lot\u0027s of third party libraries (which are actually unavoidable)\n - Cheaper (worse) developers?\n\nLast time I used npm it was shit so package management is not a plus for JS. I\u0027m tired of hearing about how language X is better than Go but no one ever names the language, or when they do they name some unemployable language like haskell or rust (which has a slew of other problems) or erlang. If you want a job, you only have a few languages to choose from, Go happens to be the best one for most purposes IMO. The latest versions of C++ are actually kind of good, but C++ changes so often that a code base from five years ago will require a dev with an entirely different skill set than someone who knows modern C++, same with JavaScript. Ruby is basically a toy language, it\u0027s fun for learning but why a polyglot would choose Ruby over any other popular language is beyond me. Java is hell. Java has mile long class hierarchies, massive try-catch error blocks that pollute the code, and indentation is thicker than my neck. Every Java IDE is shit and it\u0027s a language designed for idiots who need half their app generated for them. \n\nThis post is going to piss a lot of people off but it\u0027s the cold hard truth. Go is the happy middle ground between C and JavaScript that people have been looking for. C doesn\u0027t have generics. Rust has every feature anyone can think of and the language is going no where. Just because a language has a lot of features doesn\u0027t make it \"better\". In fact, I\u0027d argue it makes it much worse for enterprise development. Develop your app with C++? Now you have 10 different kinds of C++ programmers to wade through when you want to hire a new dev. Develop your app in Go? Any Go developer will be able to understand it. Languages like C++ and Rust cost much more and end up having more bugs in the long run than apps developed with \"simpler\" languages. \n\nThe \"standards\" found in other languages don\u0027t come close to those found in Go. ",
					"date": "2017-08-24",
					"id": "dm1jaf5",
					"isArchived": true,
					"isControversial": true,
					"score": -7
				},
				{
					"author": "xPerplex",
					"content": "He looked at the stars",
					"date": "2017-08-23",
					"id": "dm13wy8",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "titpetric",
					"content": "From what I can tell, VueJS/Angular/React have a toolchain for Node. That being said, you can develop some of at least VueJS in the browser directly, so I\u0027m not exactly sure if Node is a hard requirement. You\u0027ll definitely be better off if you have node in that combination to implement webpack/unit testing workflows, and possibly SSR (server-side rendering) of those kind of apps, if you need that thing.\n\nIn terms of API services, concurrency and the like, I\u0027m never touching Node again. If there\u0027s anything that I learned, I [definitely learned that](https://leanpub.com/api-foundations).",
					"date": "2017-08-23",
					"id": "dm0uql3",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "zanven42",
					"content": "I started doing golang and react commercially and yeah it is a bit of a pain point on the workflow, I either run webpack to do pure UI testing usually in the beginning then I evolved it to watch the directly and spit out builds to a folder when changes are made that golang is serving from. \n\nStill haven\u0027t worked out if I can get the best of both worlds easily besides simply proxying requests to a webpack server to get hotloading then doing a final test without proxying before deploying. \n\nI haven\u0027t played around with server side rendering yet simply because I don\u0027t miss node and don\u0027t really want to give up golang unless I need too and I love the idea of simply deploying a docker container with a scratch container with a static binary and the build files. ",
					"date": "2017-08-23",
					"id": "dm1dcve",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "pier25",
					"content": "Just bought your book!",
					"date": "2017-08-23",
					"id": "dm1291f",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "titpetric",
					"content": "Always feel free to DM me if you have any comments/feedback/questions, I love to help :)",
					"date": "2017-08-23",
					"id": "dm1368y",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "pier25",
					"content": "Awesome, thanks.",
					"date": "2017-08-23",
					"id": "dm13cal",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "the_web_dev",
					"content": "If you need something quick I think their are quite a few situations where Node or Ruby can be the better option. Especially if you have a team with a lot of experience, give me someone with 5 years of Ruby on Rails experience and they could probably pump out new features faster then you can say the words \u0027CRUD app\u0027.",
					"date": "2017-08-23",
					"id": "dm0yzwx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mgutz",
					"content": "One of the things I miss in node is using the same validation everywhere. We were able to write our validation rules once and share them on the server and client. We could also share utility packages like lodash on the front end and back end. \n\nI love Go. I chose it over node for our startup. Go has more predictable resource usage and I can diagnose any production issue reasonably well. With that said I can knock things out much quicker with node + react. If I want to get a project done over a weekend, I\u0027m more likely to reach for node.",
					"date": "2017-08-23",
					"id": "dm1fe5l",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "HugoWeb",
					"content": "In those cases, which is your backend?\nI ask because I feel like Laravel or Flask would be much easier for me.",
					"date": "2017-08-24",
					"id": "dm2ib5i",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jayman_ah_ah",
					"content": "Node is supported in more cloud services than Go (e.g. AWS Lambda).",
					"date": "2017-08-24",
					"id": "dm23uz3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tiberiousr",
					"content": "I only use node for the build tools for VueJS. I used to use Node for server side code but Go is just so much nicer to develop test and deploy.",
					"date": "2017-08-23",
					"id": "dm12kjm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "throwawaybeginr",
					"content": "are you full-stack or did you just do the back-end work for someone else?  Doesn\u0027t Node have a robust package system (npm) where lots of things that you would want to do with users are already built by someone?  Are your web apps user-facing?  Do you work on the interface parts too?",
					"date": "2017-08-29",
					"id": "dm9lns0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-08-23",
					"id": "dm0w47s",
					"isArchived": true,
					"isControversial": false,
					"score": -10
				},
				{
					"author": "verandaguy",
					"content": "Generally not a golang programmer -- but aren\u0027t synchronization primitives, including most kinds of locks, implicit if you follow the language\u0027s patterns?\n\nI did read a fair bit back that while they\u0027re made available in the standard library, they\u0027re discouraged because of Go\u0027s concurrency model.",
					"date": "2017-08-24",
					"id": "dm1nr1c",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "pier25",
					"content": "[Source](https://twitter.com/maria_nynfa/status/900074666425020416)\n\nShe also made [replacing Ruby with Go](https://twitter.com/maria_nynfa/status/898983625546375168)",
					"date": "2017-08-23",
					"id": "dm0nyz3",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "mcandre",
					"content": "How do you version lock developer tools? Node.js answered this beautifully with per-project dependency directory: .node_modules\n\nIn contrast, Go tends to pile everything in $GOROOT/bin, so for example gometalinter tip often breaks CI as it adds new linters.\n\nI suppose one could move dev tools into a stable Docker image, but this requires Docker in Docker hacks for CI. Node generally handles this stuff much more reliably and conveniently.",
					"date": "2017-08-23",
					"id": "dm1052c",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "rottenanon",
					"content": "Go vendor works in a very similar fashion I suppose. I use this tool *gvt* for vendoring. Though it\u0027s not as advanced a package manager as NPM",
					"date": "2017-08-24",
					"id": "dm1ngsk",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Tallkotten",
					"content": "I would also recommend the tool govendor, works great!",
					"date": "2017-08-24",
					"id": "dm1uii4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "robbert229",
					"content": "Take a look at retool. Its essentially glide but for tooling. Not as good as i would like it to he but still does the job and saves my bacon.",
					"date": "2017-08-23",
					"id": "dm19rjv",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "rottenanon",
					"content": "Go vendor works in a very similar fashion I suppose. I use this tool *gvt* for vendoring. Though it\u0027s not as advanced a package manager as NPM",
					"date": "2017-08-24",
					"id": "dm1ngsq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "HugoWeb",
					"content": "For me, Go is less productive because people around here are anti-ORM in principle... so I never fully embraced ORMs in Go as well... and I keep loving and hating it.",
					"date": "2017-08-24",
					"id": "dm2ilmg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "pier25",
					"content": "I use ORMs in other languages because I don\u0027t know much SQL, but to be honest if I could I\u0027d rather just make SQL queries for everything.",
					"date": "2017-08-24",
					"id": "dm2lfyc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "HugoWeb",
					"content": "I find SQL very elegant but also tedious, in Go at least (In Clojure it maps much better IIRC).\n\n I want to do FindUser(25).Delete() instead of SQL and error checking.",
					"date": "2017-08-24",
					"id": "dm2lsc0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "daveddev",
					"content": "The amblyopia makes the scene feel odd, but the concept and overall quality are fantastic.",
					"date": "2017-08-23",
					"id": "dm0song",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "joematpal",
					"content": "This is genius!",
					"date": "2017-08-23",
					"id": "dm0x2jq",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "Greymarch",
					"content": "#GoLang \u0026gt; #NodeJS",
					"date": "2017-08-23",
					"id": "dm0ygcy",
					"isArchived": true,
					"isControversial": false,
					"score": -9
				},
				{
					"author": "Creshal",
					"content": "[Twitter is over here.](https://twitter.com/)",
					"date": "2017-08-24",
					"id": "dm1zml8",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Greymarch",
					"content": "#GoLang \u0026gt; #NodeJS",
					"date": "2017-08-24",
					"id": "dm2d5ct",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "usernameliteral",
			"date": "2015-08-19",
			"id": "3hlu26",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.5 is released",
			"comments": [
				{
					"author": "QThellimist",
					"content": "`go run` command just got 2-3x slower :(",
					"date": "2015-08-20",
					"id": "cu93z1n",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Zilog8",
					"content": "Yup. A lot of attention has been given to the Go tools being completely written in Go, but not as much has been given to the way this was done: [Large chunks of the original C code were automagically translated to Go code using a custom tool. As you can imagine, this resulted in a lot of un-idiomatic and/or inefficient Go code. Original slowdown was in the order of 10x. They were able to bring that down some for the 1.5 release, but that aspect is still a work in progress and a lot of effort is going into it](https://talks.golang.org/2015/gogo.slide#1). Hopefully by next release, Go tool performance will be back to around where it was before.",
					"date": "2015-08-20",
					"id": "cu95tld",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "kisielk",
					"content": "It\u0027s worth pointing out it\u0027s not the `go run` tool itself that is slower, but the compiler toolchain it calls to compile your program.",
					"date": "2015-08-20",
					"id": "cu96syx",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "tucnak",
					"content": "Go1.6 is coming soon and compilations ain\u0027t got any faster.",
					"date": "2015-12-23",
					"id": "cy94sib",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "gngl",
					"content": "Make it work, *make it right, make it fast*? Parts in italics TBD? ;)",
					"date": "2015-08-22",
					"id": "cubpi29",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sh41",
					"content": "It might also be because you just changed your Go version, invalidating all your installed packages. Clear your $GOPATH/pkg, then do `go install` and try again.",
					"date": "2015-08-20",
					"id": "cu97ju3",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "QThellimist",
					"content": "I wish that was the problem but it is 3x slower :(",
					"date": "2015-08-20",
					"id": "cua2xfz",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thockin",
					"content": "That makes me sad.  Our build is already too slow.",
					"date": "2015-08-22",
					"id": "cubdn43",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dilap",
					"content": "yeah, it\u0027s cuz the go compiler is now written in go, and got slower. it\u0027s a bummer buuut....\n\n....long-term having the go compiler in go will bring great wins, and they *just* ported -- we can expect performance to improve significantly in future releases.\n\nand even the 2-3x slower go compilers is still waaay faster than many other compilers (rust, scala, c++, ...). :)",
					"date": "2015-08-20",
					"id": "cu95z6z",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gngl",
					"content": "Well, the obvious solutions for the future would be 1) parallelizing the compilation process (now that it\u0027s probably much easier), 2) daemonizing the compiler process so that it could run almost instantly, especially if it uses any amount of caching.",
					"date": "2015-08-22",
					"id": "cubpj7u",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dilap",
					"content": "daemonization \u0026amp; caching are sort of orthogonal -- always handy, but with increased complexity and chances of things going wrong. in an ideal world, you don\u0027t need to do it because you\u0027re compiler\u0027s so fast in the first place. :)",
					"date": "2015-08-22",
					"id": "cubuzci",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "captncraig",
					"content": "Glad to see it. Is this the same as rc1, or are there further changes?",
					"date": "2015-08-19",
					"id": "cu8g4is",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "jbuberel",
					"content": "There were several changes from rc1 to final:\n\nhttps://github.com/golang/go/compare/go1.5rc1...master",
					"date": "2015-08-19",
					"id": "cu8gxmt",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "sh41",
					"content": "Don\u0027t you mean https://github.com/golang/go/compare/go1.5rc1...go1.5 ?",
					"date": "2015-08-20",
					"id": "cu97h6v",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "jbuberel",
					"content": "Yep - your link is better. Mine was only correct for about 24 hours ;-)",
					"date": "2015-08-20",
					"id": "cu9o8l4",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "anacrolix",
					"content": "Yes",
					"date": "2015-08-19",
					"id": "cu8gwug",
					"isArchived": true,
					"isControversial": false,
					"score": -16
				},
				{
					"author": "koalefant",
					"content": "Changed to Go 1.5 and looks like the Mongo driver mgo stopped working. Anyone else have this issue? :/",
					"date": "2015-08-19",
					"id": "cu8ukqw",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "CaptaincCodeman",
					"content": "Could be the same issue I had - connecting to localhost failed but it worked if I used 127.0.0.1 ... I *think* it\u0027s something todo with the network resolving perhaps looking for an IPv6 connection first rather then IPv4 but that\u0027s just a guess. Normally localhost resolves to ::1 and 127.0.0.1 and the default for MongoDB is only to listen on IPv4.",
					"date": "2015-08-19",
					"id": "cu8vpvi",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "alexwhoizzle",
					"content": "Could this have something to do with the new Go DNS resolver in 1.5 no longer using cgo? https://golang.org/doc/go1.5#net ",
					"date": "2015-08-20",
					"id": "cu98093",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "alexwhoizzle",
					"content": "Looking at the minor changes at the bottom of https://golang.org/doc/go1.5 I saw this:\n\n\u0026gt; The net package will now Dial hostnames by trying each IP address in order until one succeeds. The Dialer.DualStack mode now implements Happy Eyeballs (RFC 6555) by giving the first address family a 300ms head start; this value can be overridden by the new Dialer.FallbackDelay. \n\nLooking at the wiki for [Happy Eyeballs](https://en.wikipedia.org/wiki/Happy_Eyeballs) it states:\n\u0026gt; An application that uses a Happy Eyeballs algorithm checks both IPv4 and IPv6 connectivity (with a preference for IPv6) and uses the first connection that is returned.\n\nWhen you stated that you had to manually enter in 127.0.0.1 instead of the hostname \u0027localhost\u0027 to get the connection to work, it makes me think that this new Dialing scheme is returning the ipv6 address ::1 instead of 127.0.0.1 when dialing for \u0027localhost\u0027. Might be worth looking into further. ",
					"date": "2015-08-20",
					"id": "cu99v23",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "nwidger",
					"content": "I ran into issues with \u0027host\u003dlocalhost\u0027 in my DB connect string using lib/pq when I upgraded to Go 1.5.  Similarly, changing it to \u0027host\u003d127.0.0.1\u0027 fixed the problem for me.",
					"date": "2015-08-20",
					"id": "cu8xhsz",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "koalefant",
					"content": "Oh I see. I didn\u0027t have much time look into it but I\u0027ll check it out later tonight. Thanks for the heads up! :)",
					"date": "2015-08-20",
					"id": "cu8y3fy",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "cogman10",
					"content": "Is the Go GC written in go?  How does that work out with the compiler?",
					"date": "2015-08-19",
					"id": "cu8sl7b",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "bradfitz",
					"content": "The runtime package (which includes the GC, maps, channels, scheduler, etc) is written in Go, but the Go code is a bit gnarly and uses the unsafe package in places. The compiler has a special mode for the runtime package to prevent it from doing certain things like implicit memory allocation. You can almost think of the Go used in the runtime as a subset (but like 98% subset) of the full Go language. ",
					"date": "2015-08-19",
					"id": "cu8uug2",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "cogman10",
					"content": "So somewhat similar to the way RPython is doing things? (Though, a little different.  IIRC RPython is compiled to C)",
					"date": "2015-08-19",
					"id": "cu8v97w",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kisielk",
					"content": "So really not at all like RPython :)",
					"date": "2015-08-20",
					"id": "cu96s5u",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "gngl",
					"content": "Probably more like how Oberon does GC, I\u0027d imagine.",
					"date": "2015-08-22",
					"id": "cubpjqa",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "codekoala",
					"content": "I\u0027m really excited about this release! It\u0027s so awesome to me that they\u0027ve managed to build the whole toolchain with Go. I know it\u0027s not an uncommon thing with programming languages, but it\u0027s still an amazing milestone.\n\nCongratulations Go team!",
					"date": "2015-08-19",
					"id": "cu8r8df",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "koalefant",
					"content": "So excited about the easier cross compiling!",
					"date": "2015-08-20",
					"id": "cu958ve",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "zeroXten",
					"content": "And they\u0027ve included a FreeBSD build again \\o/",
					"date": "2015-08-20",
					"id": "cu9aj49",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "enneff",
					"content": "Glad it\u0027s appreciated! :-)",
					"date": "2015-08-20",
					"id": "cu9fc3m",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sedmonster",
					"content": "Go team delivers consistent, measured, leaping enhancements to the language and platform. Congrats on doing it again!",
					"date": "2015-08-19",
					"id": "cu8qss9",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "no1youknowz",
					"content": "Can\u0027t wait to start using this.  Nearly all of my apps require multiple processors.",
					"date": "2015-08-19",
					"id": "cu8khez",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "dmikalova",
					"content": "This release shouldn\u0027t change much on that regard, you just no longer set GOMAXPROCS.",
					"date": "2015-08-20",
					"id": "cu98zne",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "qu33ksilver",
					"content": "Aaah finally, I don\u0027t have to download different repos to cross compile for my pi !",
					"date": "2015-08-20",
					"id": "cu94od1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "AnimalMachine",
					"content": "One of the things that keeps getting brought up is GC pause time and how it affects real-time applications like games. In a 60 FPS game, one frame is roughly 16 ms. This is a short window to get stuff done, so a significant delay can mess things up.\n\nIt\u0027s my understanding that in Go 1.5 the GC is concurrent so that application code still executes during the \u0027pause\u0027 phase and that Go 1.4 that would have stopped everything. Ref: [Go GC Solved pdf](https://talks.golang.org/2015/go-gc.pdf) -- especially slide 14.\n\nSO ...\n\nThat means that in my 16 ms slot to do work, with a GOMAXPROCS \u0026gt; 1, the application is running even if the GC has been triggered by heap growth, right? Further, the GC runs (concurrently) only when heap growth has triggered a GC pass, right?",
					"date": "2015-08-20",
					"id": "cu9efk0",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "wirther",
					"content": "\u0026gt; Related improvements to the scheduler allowed us to change the default GOMAXPROCS value (the number of concurrently executing goroutines) from 1 to the number of logical CPUs.\n\nSo this means that goroutines default to running in parallel now, instead of concurrently, right? That is, assuming your computer has multiple cores.",
					"date": "2015-08-19",
					"id": "cu8kd83",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "echophant",
					"content": "Parallel execution and concurrency are related concepts, not opposites. So if your code is set up to run concurrently (uses goroutines), it\u0027s more likely that it\u0027ll be running on multiple cores simultaneously.",
					"date": "2015-08-19",
					"id": "cu8tl0h",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "dmikalova",
					"content": "FYI at Gophercon I learned a phrase that made parallelism and concurrency easy for me - \"parallelism is doing many things at once, concurrency is managing many things at once.\" Concurrency would be managing all the Go routines at once, even in a single thread, parallelism would be 2 goroutines running side by side on two different threads/cores.",
					"date": "2015-08-20",
					"id": "cu98wsa",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "jbuberel",
					"content": "In earlier releases, Go would only use a single core by default. But you can use GOMAXPROCS\u003dN to increase that number in Go 1.4.2 and earlier. \n\nNow, with Go 1.5, the GOMAXPROCS will default to the number of cores you have.",
					"date": "2015-08-19",
					"id": "cu8muqb",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "media_guru",
					"content": "Woohoo!",
					"date": "2015-08-19",
					"id": "cu8ge4z",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "nate510",
					"content": "Awesome! Congrats, Go team.",
					"date": "2015-08-19",
					"id": "cu8jswb",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bobappleyard",
					"content": "Looking forward to installing this and seeing how the concurrency and GC improvements play out.",
					"date": "2015-08-19",
					"id": "cu8mong",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "excited_by_typos",
					"content": "Woot! I think I\u0027ll boot up a compute-optimized EC2 instance and take this thing for a whirl. Congrats to the Go team.",
					"date": "2015-08-19",
					"id": "cu8mk8u",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "petulant_snowflake",
					"content": "Just install locally? They have binaries for Linux, OSX, Windows ...",
					"date": "2015-08-19",
					"id": "cu8vdwp",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "changtimwu",
					"content": "I\u0027d like to see someone  repeat [the same benchmark](\nhttps://docs.google.com/document/d/1At2Ls5_fhJQ59kDK2DFVhFu3g5mATSXqqV5QrxinasI) on a c4.4xlarge.\n\n",
					"date": "2015-08-20",
					"id": "cu90g8r",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "brokedown",
					"content": "After recompiling my packages with the new 1.5 chain, I can plainly say that I see huge improvements in GC. In one case I had to explicitly call runtime.GC() to keep things under control with 1.4.2, and that\u0027s no longer an issue. Excellent work by the Go team!",
					"date": "2015-08-20",
					"id": "cu9gbse",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "fr4nk3n",
					"content": "Does anyone know when Google App Engine SDK will move to Go 1.5? Current Go SDK (version 1.9.25) is using Go 1.4.2.",
					"date": "2015-08-21",
					"id": "cuamdqv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "QThellimist",
					"content": "`yum install golang` tries to download old version\n```\nPackage golang-1.4.2-2.12.amzn1.x86_64 already installed and latest version\nNothing to do\n```\n\nIs there another way to download to redhat linux using commandline?",
					"date": "2015-08-20",
					"id": "cu93use",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "Phr0ztByte",
					"content": "Build it by hand, or wait for someone to create a package. I do not now much about how EPEL works, but I guess it will end up there sooner or later.",
					"date": "2015-08-20",
					"id": "cu94wif",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dtoebe",
					"content": "If you are using current Fedora it may take a couple days to weeks for it to get updated in the repos.  On any other `Yum` distro (CentOS, RHEL),  you may have to wait until next distro version.  I would recommend downloading the binary or building it your self. ",
					"date": "2015-08-20",
					"id": "cu9dety",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tektektektektek",
					"content": "Unused variables still cause a compiler **error**? Go back to the drawing board. This is nothing but a toy language still.",
					"date": "2015-08-21",
					"id": "cuafa0u",
					"isArchived": true,
					"isControversial": false,
					"score": -3
				},
				{
					"author": "gngl",
					"content": "Maybe you\u0027re a toy programmer instead? /s",
					"date": "2015-08-22",
					"id": "cubpkp8",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "downvotes_puffins",
					"content": "Any support for user-defined generic types?",
					"date": "2015-08-20",
					"id": "cu9382j",
					"isArchived": true,
					"isControversial": false,
					"score": -16
				},
				{
					"author": "QThellimist",
					"content": "no",
					"date": "2015-08-20",
					"id": "cu93ku9",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "downvotes_puffins",
					"content": "Ok, so go is comparable to C++ circa 1992 in that regard. Got it, thanks.",
					"date": "2015-08-20",
					"id": "cu93rxh",
					"isArchived": true,
					"isControversial": false,
					"score": -20
				},
				{
					"author": "gngl",
					"content": "Actually, no. C++ at that time didn\u0027t have any features obviating the need for generic types in many situations. It didn\u0027t have reflective features in its standard library either to express many generic algorithms without the need for compile-type computation (although one might argue that partial evaluation of Go\u0027s reflective calls at compile time would be a beneficial form of non-template-based compile time genericity, improving performance without the need to change the language).",
					"date": "2015-08-22",
					"id": "cubpnku",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "LimEJET",
					"content": "Find something new to riff on. We\u0027ve all heard that one.\n",
					"date": "2015-08-20",
					"id": "cu9e7fk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "daishi-tech",
			"date": "2017-11-27",
			"id": "7fut70",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go has become the #9 most popular language and is the fastest growing language on GitHub in 2017",
			"comments": [
				{
					"author": "gogolang",
					"content": "This guy\u0027s prediction based on \u0027The eigenvector of \"Why we moved from language X to language Y\"\u0027 was right: \n\nhttps://erikbern.com/2017/03/15/the-eigenvector-of-why-we-moved-from-language-x-to-language-y.html\n",
					"date": "2017-11-27",
					"id": "dqeoye5",
					"isArchived": false,
					"isControversial": false,
					"score": 43
				},
				{
					"author": "daishi-tech",
					"content": "That\u0027s some impressive work. I\u0027m not surprised to see his career seems to be doing well. ",
					"date": "2017-11-27",
					"id": "dqf2nhz",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "BaconBytes42",
					"content": "I just started learning Go.   Things that are a bit complex in other languages can be done easier and builtin w/ Go.  http.Get for example.\n\nThings that are easy in other languages, can be really hard in Go.  WTF is everything a byte[].. all I want is a string and do regular string manipulation.\n\nHaving some serious growing pains.",
					"date": "2017-11-27",
					"id": "dqf9c4p",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "tristan957",
					"content": "You can just string([]byte). Not too hard to use",
					"date": "2017-11-27",
					"id": "dqfb7bc",
					"isArchived": false,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "GoHomeGrandmaUrHigh",
					"content": "And conversely, `[]byte(str)` to convert a string into a byte slice.",
					"date": "2017-11-27",
					"id": "dqfepxc",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Redundancy_",
					"content": "This assumes UTF-8 so hard that I think I should post https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/",
					"date": "2017-11-28",
					"id": "dqfubjg",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "tristan957",
					"content": "Thanks. I\u0027ll give this a read in the morning!",
					"date": "2017-11-28",
					"id": "dqg6xha",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "natefinch",
					"content": "Yeahbut, this isn\u0027t 1998.  Most everything *is* UTF8.  Maybe if you\u0027re parsing random text documents from godknowswhat, then things might not be utf8.  I haven\u0027t ever seen or heard of an encoding problem in 5 years of writing go 40 hours a week.",
					"date": "2017-11-29",
					"id": "dqhdsal",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Redundancy_",
					"content": "Yeah, I think that on average, you\u0027ll be totally fine to assume UTF-8, and at least it won\u0027t be like the days of working out how to upgrade ascii all the way through your stack, since Go strings are unicode. \n\nBut you are making an assumption, and it can bite you, and it seems only fair to ensure that people are aware of that around advice like that.",
					"date": "2017-11-29",
					"id": "dqi4m60",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "natefinch",
					"content": "Very good point.",
					"date": "2017-11-29",
					"id": "dqibxej",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ematap",
					"content": "What are you trying to do that you can\u0027t do with the `strings` library?",
					"date": "2017-11-27",
					"id": "dqfhu4x",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-11-28",
					"id": "dqfznt0",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "cs-guy",
					"content": "Coming in Go 1.10: [strings.Builder](https://tip.golang.org/pkg/strings/#Builder).",
					"date": "2017-11-28",
					"id": "dqg2qoz",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "petulant_snowflake",
					"content": "Depending on what your definition of \"efficiently\" means:\n\n    b :\u003d new(bytes.Buffer)\n    b.Write([]byte(\"string\"))\n\nOr:\n\n    a :\u003d make([]string)\n    a \u003d append(a, \"string\")\n    strings.Join(a, \" \") \n\nOr:\n\n    c :\u003d \"string\"\n    c +\u003d \"another string\"\n\n",
					"date": "2017-11-28",
					"id": "dqg7cxu",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ematap",
					"content": "lol, yeah that\u0027s why you have bytes.Buffer",
					"date": "2017-11-28",
					"id": "dqg0iox",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-11-28",
					"id": "dqg0mx7",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ematap",
					"content": "fair enough.",
					"date": "2017-11-28",
					"id": "dqg1new",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thelambeers",
					"content": "It takes a little bit, the learning curve appears steep at first glance, but just give yourself 3 solid months to tinker around with interfaces, structs, channels and goroutines. It\u0027s not as arduous as it may look right now. Tons of amazing examples online via the usual methods.\n\nThe hardest thing IMHO was changing my workflow habits in regards to having a gopath setup, but it\u0027s not to be confused with python\u0027s virtualenv; in fact most of the heavy lifting is done by some of my vim plugins (including running go-fmt on save *swoon*).\n\nGoogle created the language, along with Ken Thompson as one of the co-creators. Seriously, your resume and the time you\u0027ll save will thank you in the long run.\n\nMy $0.02USD.",
					"date": "2017-11-28",
					"id": "dqh3d1y",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "some_coreano",
					"content": "\u0026gt; byte[].. all I want is a string and do regular string manipulation.\n\nyou can probably build your own library for easier string manipulation.. doesn\u0027t seem too hard",
					"date": "2017-11-27",
					"id": "dqfaz2w",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "cholz",
					"content": "I admit that I don\u0027t fully understand the details of the post. Intuitively it seems like the predictions of \"the future of programming\" given in the table must be flawed somehow. Without saying anything about Go, as I know little of the language, I doubt that the most popular languages of the future will be C, Java, C++, and Python. It is definitely an interesting post though.",
					"date": "2017-11-27",
					"id": "dqf6c7o",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "daishi-tech",
					"content": "Are you talking about the table on [this site](https://erikbern.com/2017/03/15/the-eigenvector-of-why-we-moved-from-language-x-to-language-y.html)?\n\n\u0026gt;I doubt that the most popular languages of the future will be C, Java, C++, and Python. \n\nHe explained the reason people are still moving some stuff to C is because it was often written in a different higher level language originally and specific optimizations are often done in C for performance reasons. The google search results he analyzed are also not limited to only the last couple years but he points out that C is 45 years old and it\u0027s still the standard for low level stuff (For things like the Linux kernel C doesn\u0027t really have a competitor).\n\nThe table is an analysis of blog posts about \"Why we moved from \u0026lt;language X\u0026gt; to \u0026lt;language Y\u0026gt;\" so it\u0027s more of a measure of where things get moved from and to than a raw measure of popularity.\n\nThe people moving from Perl in his table are going mostly to Python and Python is still one of the [fastest growing major languages](https://stackoverflow.blog/wp-content/uploads/2017/09/growth_major_languages-1-1024x878.png) in popularity (chart [source](https://stackoverflow.blog/2017/09/06/incredible-growth-python/). Python lacks Go\u0027s performance but it\u0027s incredibly easy/fluid to write and has a lot of support.  Part of the popularity of Python on stack exchange is due in part to the number of people who aren\u0027t full time developers who pick up development as a second skill (devops, science, statistics, network, data viz, students etc.) to compliment their skillset. \n\nGo still has a [long way](https://stackoverflow.blog/wp-content/uploads/2017/09/growth_smaller_tags-1-1024x878.png) to go to catch the popularity of python \n\nThe popularity of C, and C++, and Java are [essentially flat](https://stackoverflow.blog/wp-content/uploads/2017/09/tag_growth_scatter-1-1-1024x896.png). The fact that Java is sometimes the only language taught at a lot of schools and is the primary language for android does a lot to ensure its popularity.\n\nGo seems well positioned to gain a lot of support. It\u0027s interesting that they rewrote the garbage collector from C to Go and saw a [performance increase](https://talks.golang.org/2015/state-of-go-may.slide#11). Go 1 is easier to write than Java. Android isn\u0027t the primary purpose of Go but if Google were to support Go for Android in the same way that Apple supported Swift it would cause a significant paradigm shift.\n\nThe performance and ease of Go would allow a lot of people to solve a lot of different problems with one language in a way that not a lot of other existing languages currently can. It appeals to me as someone who is not a full time developer because I don\u0027t want to need 2-3 different languages to solve different problems and Go has the potential of being the only language I\u0027ll need (as community/library support comes around anyway).\n\nThere is a lot of network automation stuff done in Python (NAPALM etc.) that will probably be awhile before the same kind of support is seen or ported to Go. The ease of python has allowed people to create a huge amount of libraries for it. The low barrier to entry for python will ensure it remains popular for a long time. \n\nThe closest advantage Go has in that space is the overlap between server and network devops and the fact that it\u0027s already fairly entrenched in scalable microservices. The language of choice for network automation is mostly Python but with docker, Kubernetes, and gRPC being in Go it would only take a couple of strategic projects for Go to have a better footing in network automation. ",
					"date": "2017-11-27",
					"id": "dqfhub2",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "grammerpendant",
					"content": "\u0026gt; to compliment their skillset\n\nO HAI skillset, you look very nice today.",
					"date": "2017-11-28",
					"id": "dqfr5cu",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "cholz",
					"content": "Yes you are right. I lost track of what I was replying to there. \n\nI don\u0027t disagree on your points about the present usefulness of Go, C, C++, Java, and Python. The author of the post in question does call their prediction the \"future popularity\" of the language. I would guess that those languages will remain influential for a long while, but languages like Rust, Swift, and Kotlin would be more likely to claim the top spots on the scale of future popularity.",
					"date": "2017-11-28",
					"id": "dqfketo",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-11-28",
					"id": "dqg87f6",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-11-29",
					"id": "dqj1pxh",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-11-29",
					"id": "dqj3rxw",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-11-30",
					"id": "dqjs9gx",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-11-30",
					"id": "dqjuce6",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-11-30",
					"id": "dqjvd02",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-11-30",
					"id": "dqjvnzs",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "Jamo008",
			"date": "2016-02-17",
			"id": "46b53t",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.6 is released",
			"comments": [
				{
					"author": "robxu9",
					"content": "Somehow nobody linked to the AMA here: https://www.reddit.com/r/golang/comments/46bd5h/ama_we_are_the_go_contributors_ask_us_anything/",
					"date": "2016-02-18",
					"id": "d045jw4",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "Jamo008",
					"content": "The Go Blog \"Go 1.6 is released\" https://blog.golang.org/go1.6",
					"date": "2016-02-18",
					"id": "d040vtg",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "waywardcoder",
					"content": "Unless you care about HTTP/2, this doesn\u0027t seem like a big release. I recompiled my go programs with no trouble. The binaries are marginally smaller, and run at pretty much the same speed. I\u0027m looking forward to--hopefully--some improved code generation in 1.7 when they move to SSA.  So, to me, the best thing about 1.6 is they can focus on 1.7 now!",
					"date": "2016-02-17",
					"id": "d03ufae",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "v0idl0gic",
					"content": "The GC has gotten even better too in this release",
					"date": "2016-02-17",
					"id": "d03urh2",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "weberc2",
					"content": "The release notes mention that they\u0027re lower, but they didn\u0027t quantify it, so I\u0027m guessing it\u0027s not going to be a dramatically improvement.",
					"date": "2016-02-18",
					"id": "d03x5c7",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "my gc times were measurably better.  Significantly lower, and very *very* consistent now.",
					"date": "2016-02-18",
					"id": "d047frs",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "djherbis",
					"content": "This [post](https://www.reddit.com/r/golang/comments/43cpy6/gc_pause_times_from_300ms_go_14_to_40ms_go_15_to/) has some metrics on the differences.",
					"date": "2016-02-18",
					"id": "d03ybxh",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "XANi_",
					"content": "they already did a long presentation about it but short version is \"sub 20ms GC on 250GB heap\"",
					"date": "2016-02-18",
					"id": "d04bma9",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "weberc2",
					"content": "Oh, I missed the presentation. Do you know what it was under 1.5?",
					"date": "2016-02-18",
					"id": "d04kqes",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "devsquid",
					"content": "150ms~ I think. Remember this is with insanely an large heap size",
					"date": "2016-02-18",
					"id": "d04sv5f",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "XANi_",
					"content": "http://s9.postimg.org/3v35bgnlr/go1_6_gc.png",
					"date": "2016-02-18",
					"id": "d04wpuf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nyoungman",
					"content": "You can find a presentation and Q\u0026amp;A on GC here: http://www.infoq.com/author/Rick-Hudson\n\nTesting on a machine with 96 cores and 250 GB of heap space. Wowzers.",
					"date": "2016-02-19",
					"id": "d05iw7z",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "Thanks for sharing. That was a great listen!",
					"date": "2016-02-20",
					"id": "d075p40",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Jamo008",
					"content": "The `vendor/` directory is now used by default, which is a big deal if your packages are always breaking due to dependent packages. Check out https://github.com/kardianos/govendor.",
					"date": "2016-02-18",
					"id": "d0410g5",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "thewhitetulip",
					"content": "I recompiled my code, it is strangely enough making a bigger binary\n\nAlso it takes more time to compile my entire project. Am I doing something wrong here? In go1.5 it took less than a few seconds to build the project, now it takes 40 seconds! I think I\u0027ll restart my machine and recheck",
					"date": "2016-02-18",
					"id": "d04lbsv",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "waywardcoder",
					"content": "I didn\u0027t notice any long build times when rebuilding with 1.6, but once \u0027go fmt\u0027 seemed to hang on me for like 5 seconds.  Not sure what that was about, since the machine wasn\u0027t busy, but it hasn\u0027t happened again.   ",
					"date": "2016-02-18",
					"id": "d04wet7",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thewhitetulip",
					"content": "It takes painfully long time for me to build it, maybe I need to go get all my deps and build them first :-)\n\nDo you have any suggestions as to how I should build my app\n\nhttp://github.com/thewhitetulip/Tasks",
					"date": "2016-02-19",
					"id": "d05iarp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "I also got a bigger binary.\nThey said the compile time doubled with 1.6.",
					"date": "2016-02-18",
					"id": "d04nj4b",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "SportingSnow21",
					"content": "They did not say compile time would double with 1.6.  That was c to Go (1.4-\u0026gt;1.5) and the initial measurement of [current to SSA](https://www.reddit.com/r/golang/comments/43dhhw/a_week_of_lowhangingfruit_fixes_and_ssa_has/), which is speculatively targeted to 1.7 cycle if they can get the speed back to at least break-even.  The only big change to the [compiler](https://golang.org/doc/go1.6#compiler) is supposed to be faster.",
					"date": "2016-02-18",
					"id": "d04oow0",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "thewhitetulip",
					"content": "doubled? No way, it took 4-5 sec to compile my small app earlier, \nhttp://github.com/thewhitetulip/Tasks\nnow it takes 40-50sec, it is 10 times as much!!",
					"date": "2016-02-18",
					"id": "d04nq16",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dilap",
					"content": "Hmm, sounds like something weird is going on. I hadn\u0027t upgraded to 1.6 yet, so I took the opportunity to compiling your app before and after. Here are my results:\n\n\t# 1.5 tasks + deps\n\treal\t0m22.172s\n\n\t# 1.5 just tasks\n\treal\t0m1.673s\n\n\t# 1.6 tasks + deps\n\treal\t0m22.289s\n\n\t# 1.6 just tasks\n\treal\t0m1.837s\n\nSo ever so slightly slower on 1.6, but nothing major, nowhere near 10x nor even 2x. (The 2x number was a preliminary results for the new SSA backend that\u0027s coming in 1.7; the Go devs have promised they won\u0027t merge the ssa backend w/o also improving compiler performance.)\n\n",
					"date": "2016-02-18",
					"id": "d04xpi9",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "thewhitetulip",
					"content": "Well, this is strange, I have an i3 processor and now it takes 22seconds to build my application, am I doing something wrong?\n\nYou know earlier I didn\u0027t even notice when my builds got completed, but now it is painful to sit for 40 sec to get the build complete\n\nI might have said my PC is too damn slow, but when i had go 1.5 it took quite short a time to build it, so something is weird",
					"date": "2016-02-19",
					"id": "d05i9if",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dilap",
					"content": "very strange indeed. i would try stuff like a fresh go path, going back to 1.5 and seeing if it\u0027s really faster now, making sure the binaries for other packages in pkg/ are not getting recompiled each time",
					"date": "2016-02-19",
					"id": "d05vvlg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dead_numbers",
					"content": "Good news)",
					"date": "2016-02-17",
					"id": "d03qrl9",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-02-17",
					"id": "d03ug36",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "croninsiglos",
					"content": "It\u0027s about time! I\u0027ve only been visiting the site, the github repo, and every developer\u0027s blog, every few hours, for the last two and half weeks for some kind of hint.\n\nStill wish they\u0027d have releases with xz compression instead of or in addition to gzip (kernel.org moved to xz and never looked back) ",
					"date": "2016-02-17",
					"id": "d03qe12",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "dsymonds",
					"content": "Feel free to file an issue for us to consider supporting xz downloads in the next release.",
					"date": "2016-02-17",
					"id": "d03urlf",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "4ad",
					"content": "What problem would that solve?\n",
					"date": "2016-02-17",
					"id": "d03qzd7",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "croninsiglos",
					"content": "xz makes the go download about 43 MB compared to the gzip 81MB. In my book that\u0027s a significant savings. Sometimes we get complacent with our broadband connections while in many parts of the world and even the US, people have speeds barely higher than dial up.",
					"date": "2016-02-17",
					"id": "d03rjeu",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "Funnnny",
					"content": "It saves a few megabytes at the cost of compression time and decompression memory requirement (which is not a problem with a machine can run go).\n\nWith just gz to xz, I can cut about 30-40% go source and the release file size. It will probably save a lot of bandwidth for golang.org.",
					"date": "2016-02-17",
					"id": "d03royd",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "bradfitz",
					"content": "Compared to YouTube, Go\u0027s bandwidth is a drop in the bucket (or drop in the ocean) for Google.",
					"date": "2016-02-18",
					"id": "d03x5pi",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "Funnnny",
					"content": "No, as an ISP any peering bandwidth reduction is a good thing, especially it comes for nearly free.",
					"date": "2016-02-18",
					"id": "d03y200",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "mwholt",
					"content": "Why would I want to help my ISP? They don\u0027t help me.",
					"date": "2016-02-18",
					"id": "d04mokh",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "genghisjahn",
					"content": "They don\u0027t provide internet access?",
					"date": "2016-02-18",
					"id": "d04t6vx",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "mwholt",
					"content": "No. https://twitter.com/mholt6/status/622229557504925697\n\nand \n\nhttps://twitter.com/mholt6/status/566787781544783872",
					"date": "2016-02-18",
					"id": "d04v16p",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TweetsInCommentsBot",
					"content": "[**@mholt6**](https://twitter.com/mholt6/)\r\n\r\n\u0026gt; [2015-07-18 02:21 UTC](https://twitter.com/mholt6/status/622229557504925697)\r\n\r\n\u0026gt; Real classy, @CenturyLink. Thanks for nothing. \n\n\u0026gt;[[Attached pic]](http://pbs.twimg.com/media/CKKaeoRUwAAtzmB.jpg) [[Imgur rehost]](http://i.imgur.com/rE9AovC.jpg)\r\n\r\n----\r\n\r\n[**@mholt6**](https://twitter.com/mholt6/)\r\n\r\n\u0026gt; [2015-02-15 02:35 UTC](https://twitter.com/mholt6/status/566787781544783872)\r\n\r\n\u0026gt; Current status: 35-75% packet loss, ping times above 15s. Tweeting from 3G. @CenturyLink \n\n\u0026gt;[[Attached pic]](http://pbs.twimg.com/media/B92ieRoIIAIvxyi.jpg) [[Imgur rehost]](http://i.imgur.com/LnioS5U.jpg)\r\n\r\n----\r\n\r\n^This ^message ^was ^created ^by ^a ^bot\r\n\r\n[^[Contact ^creator]](http://np.reddit.com/message/compose/?to\u003djasie3k\u0026amp;amp;subject\u003dTweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot)\r\n",
					"date": "2016-02-18",
					"id": "d04v1hl",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "woopwoopskadoop",
					"content": "how many wifi networks are near you? that could just be loses between your computer and the router. (unless you\u0027re using a wired connection?) use MTR to figure out where the packet loss is occurring.",
					"date": "2016-02-18",
					"id": "d051oa8",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Funnnny",
					"content": "Google is also an ISP. ",
					"date": "2016-02-19",
					"id": "d0596dd",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "enneff",
					"content": "Is it really free, though? xz is not ubiquitous like gzip.",
					"date": "2016-02-19",
					"id": "d05e0j4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "croninsiglos",
					"content": "It is ubiquitous if you\u0027ve used the tar utility at least in the last 5-6 years. Kernel.org has been using it exclusively for three years now. It\u0027s supported in Windows via 7zip and Unix variants through tar. tar is included in most Linux distros and comes preinstalled on every OSX build. I mean unless you think tar isn\u0027t ubiquitous in the Unix world haha... and Andrew, my girlfriend thinks you\u0027re hot.",
					"date": "2016-02-19",
					"id": "d05hsq9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "enneff",
					"content": "TIL that `tar` on OS X supports xz compression! I assumed that since the `xz` command wasn\u0027t available on my OS X system, it wouldn\u0027t be available in the system `tar` command either.",
					"date": "2016-02-19",
					"id": "d05hyij",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "My first serious go project was a daemon that downloads and archives data from a sensor network. That\u0027s 50 GiB per month compressed down to 25 MiB with xz / lzma2. I would love to have a native xz library, so I could get rid of exec.Command, external OS dependent binaries and error-prone deployment. :)\n\nFor the source code, I just do a git pull. ",
					"date": "2016-02-18",
					"id": "d042adr",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "kune13",
					"content": "I\u0027m working on a native Go xz library: https://github.com/ulikunitz/xz\n\nBe warned the library is work in progress. If you are concerned about compression ratio and performance check the dev branch.",
					"date": "2016-02-18",
					"id": "d049d2x",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Pulse207",
					"content": "xz has a better compression ration and is quicker to download. Not a large issue by any means, but a nice convenience.",
					"date": "2016-02-17",
					"id": "d03rarx",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "4ad",
					"content": "So, it would solve no problem then.\n\nApart from not solving any problem, xz takes longer to decompress and it\u0027s more unknown to users.\n",
					"date": "2016-02-17",
					"id": "d03rdjw",
					"isArchived": true,
					"isControversial": false,
					"score": -17
				},
				{
					"author": "croninsiglos",
					"content": "An xz archive of Go takes about 2 seconds to decompress and you can untar it with the exact same command as a tar.gz file. Modern versions of tar don\u0027t require the filter on the command line to decompress, therefore it\u0027s still just: tar -xf somefile.tar.xz",
					"date": "2016-02-17",
					"id": "d03rylz",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "lolomfgkthxbai",
					"content": "By that logic, you might as well get rid of compression altogether and just release uncompressed .tar files.\n\nBut, I admit that this does not seem like a huge priority compared to improvements to go itself unless it\u0027s used as a chance to dogfood xz support in the standard library.",
					"date": "2016-02-18",
					"id": "d04b03s",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Jamo008",
					"content": "Would be awesome if someone with `brew`-fu could update https://github.com/Homebrew/homebrew/blob/master/Library/Formula/go.rb",
					"date": "2016-02-18",
					"id": "d0413k5",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "carbocation",
					"content": "It looks like there is an active pull request, but the build is failing:\n\nhttps://github.com/Homebrew/homebrew/pull/49279",
					"date": "2016-02-18",
					"id": "d04hawa",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kaeshiwaza",
					"content": "Please french speakers, can you help to make a \"dépêche\" on http://linuxfr.org ?\n\nMerci",
					"date": "2016-02-18",
					"id": "d04k30f",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "yay!",
					"date": "2016-02-17",
					"id": "d03s0m4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "NicholasTheGr8t",
					"content": "I\u0027d love to see a true Packaging Manager for Go, I\u0027m hoping vendor/ help\u0027s but something similar to PIP(Python), NPM(Node), or Cargo(Rust) would make my day.",
					"date": "2016-02-18",
					"id": "d04wnmi",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "RedSquareCircle",
					"content": "Hooray, now http://isgo1point7.outyet.org/ :D",
					"date": "2016-02-18",
					"id": "d052uqe",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "balkierode",
					"content": "Releasenotes?",
					"date": "2016-02-18",
					"id": "d04792o",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sandokan1572",
					"content": "https://golang.org/doc/go1.6",
					"date": "2016-02-18",
					"id": "d04apwr",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				}
			]
		},
		{
			"author": "enneff",
			"date": "2016-02-17",
			"id": "46bd5h",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "Russ (/u/rsc) and I thought that a fun way to celebrate the [1.6 release](https://blog.golang.org/go1.6) would be to have the Go contributors answer questions from the community.\n\nYou can identify contributors by the little gopher beside their name. ~~A bunch of us will be here answering questions for the next 24 hours.~~\n\n**Update:** Thanks everyone for asking so many great questions! We\u0027re still working on answering them all (all of them asked before [this post](https://www.reddit.com/r/golang/comments/46bd5h/ama_we_are_the_go_contributors_ask_us_anything/d05bqot)), but we will get there. We have to stop taking new questions now, sorry! :-) **Thanks again!**",
			"title": "[AMA] We are the Go contributors: ask us anything!",
			"comments": [
				{
					"author": "dlsniper",
					"content": "Hi all,\n\n\nCongrats on the 1.6 release.\n\nI have two questions to ask:\n\n- when will the Go team focus a bit more on the debugging side of things and help the current debugging efforts lead by Delve to get the information it needs in order to produce a better experience. Could this be addressed in 1.7?\n\n- would you be open to changes in the Go vendoring with regards to the various issues which are yet to be addressed in 1.6 (as an example the whole go test ./... which should exclude vendors, or include it if a flag is sent)\n\nLooking forward for your answers.\n\nThank you!",
					"date": "2016-02-17",
					"id": "d03rjfg",
					"isArchived": true,
					"isControversial": false,
					"score": 26
				},
				{
					"author": "ianlancetaylor",
					"content": "The debugging issues on the compiler side will be affected by the new SSA compiler that may become part of 1.7.  I don\u0027t know that anything will be noticeably better in 1.7, but I think we will be in a better position for improvements in 1.8.\n\nAs you know this has not been a priority of the core Go team.  We are very much aware of the issue, but the fast compilation time in Go means that we have mostly gotten accustomed to a build/log/run cycle while working, rather than a build/debug/run cycle.  So while I would certainly like to see this get better, and I\u0027d be happy to support anybody doing the work via code reviews and the like, I can\u0027t promise that it will get better.",
					"date": "2016-02-17",
					"id": "d03sxm3",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "elazarl",
					"content": "I really think that you do not address the real need for a debugger.\n\nNo one needs debugger during development cycle. Nice thing to have, but as you said, if you don\u0027t have insane compilation speed you should be OK.\n\nEveryone needs debug desperately for production apps that fail in unusual ways, and one want to take a look a the coredump, grab a critical piece of data from a process that can\u0027t be restarted, etc.\n\nHave a look at Joyent\u0027s blog for their usage of mdb in production.\n\nI\u0027m not having an opinion of what the Go roadmap should be, ~~but~~ and I personally don\u0027t mind this for my Go hobby usage, but if I\u0027ll use that in production I\u0027d better have debugger at the hand.",
					"date": "2016-02-18",
					"id": "d04f5zc",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "rsc",
					"content": "Re Delve, our plan is to [work with Derek Parker](https://groups.google.com/d/msg/golang-dev/TerfinvPffw/2gUIkUg3AAAJ) this cycle to fix these issues. In addition to that public message I\u0027ve exchanged emails with him off-list. We should be able to make this happen.\n\nRe vendoring and wildcards, that\u0027s a contentious issue, and there are reasonable arguments on both sides. I\u0027ll explain my view below; please see [issue 11659](https://golang.org/issue/11659) for additional discussion.\n\nOne of the important early criteria for Go was that features be *orthogonal*; what that means to us is that if you use independent features A and B you get the effect A+B, not something with unexpected interactions or special cases. \n\nIn this case, I personally believe that package wildcard pattern matching and vendor trees are independent features, and therefore one should not affect the other. The wildcard syntax is about traversing the file system to find packages matching that wildcard. The pattern `./...` matches `./foo/x` and `./bar/x`. Why should `./vendor/x` be a special case? That is, why should wildcard pattern matching have an unexpected interaction with vendor trees? The most compelling answer given is \"because I don\u0027t want to run those tests every time,\" but that\u0027s still pretty difficult to accept as a reason for introducing such a non-orthogonality. An alternative way to address the \"I don\u0027t want to run those tests every time\" question would be for the go command to do a better job caching test results, so that if you haven\u0027t modified any code that might affect the tests, a second \"go test ./...\" will not re-test them. \n\nDone right, test caching would benefit nearly all use of Go, not just the single case of vendor directories. But it\u0027s a tough problem on its own, because you have to identify every possible \"input\" to a test, including things like test data files and maybe even environment variables. I took a stab at this in [rsc.io/gt](https://godoc.org/rsc.io/gt) but it\u0027s a large topic, and I haven\u0027t returned to it.\n\nUntil test caching is done right, a simple workaround if you want to exclude vendor (or any other) directories is to replace `go test ./...` with `go test $(go list ./... | grep -v /vendor/)`.\n",
					"date": "2016-02-18",
					"id": "d042qgo",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "yeoldgo",
					"content": "Looks like delve recently added Windows support!\nhttps://github.com/derekparker/delve/wiki/Building#windows\n\nSorry if I shouldn\u0027t have distracted from the discussion, but this is good news for people using windows!",
					"date": "2016-02-17",
					"id": "d03sxah",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "[deleted]",
					"content": "Gophers!  Are there any plans to make context a first class citizen in net/http?  Would be awesome to have stdlib mux be context friendly.  PS. Thanks for the AMA!",
					"date": "2016-02-18",
					"id": "d03vgkn",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "dsymonds",
					"content": "It is planned for context to be in its own package, net/context, in Go 1.7. The net/http package should mesh with it well in a few places (e.g. request cancellation), but won\u0027t be able to integrate with it fully due to backward compatibility.",
					"date": "2016-02-18",
					"id": "d03vsix",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "Akkifokkusu",
					"content": "Could that include adding an exposed `Context` field to `http.Request`? Or would that be considered backwards-incompatible?",
					"date": "2016-02-18",
					"id": "d0439h8",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dsymonds",
					"content": "Adding fields to an existing struct is backward compatible, so it\u0027s a possibility.",
					"date": "2016-02-18",
					"id": "d043q08",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "nyoungman",
					"content": "What is the benefit of the SSA compiler that golang-dev is always talking about for a future release?",
					"date": "2016-02-17",
					"id": "d03rtoi",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "ianlancetaylor",
					"content": "Better run-time performance.",
					"date": "2016-02-17",
					"id": "d03s1ay",
					"isArchived": true,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "broady",
					"content": "It will enable some future compiler optimizations, resulting in smaller binary sizes and better performance.\n\nkhr says, in his [design doc](https://docs.google.com/document/d/1szwabPJJc4J-igUZU4ZKprOrNRNJug2JPD8OYi3i1K0/edit):\n\u0026gt; Total guesstimate, I think it would be fairly easy to make the generated programs 20% smaller and 10% faster.\n\nI\u0027m not sure if that estimate still stands :)",
					"date": "2016-02-17",
					"id": "d03s6n7",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "4ad",
					"content": "I think that estimate is extremely conservative.\n",
					"date": "2016-02-17",
					"id": "d03s8gc",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "brtzsnr",
					"content": "Currently the performance of the compiled code is about the same maybe a few percent faster on some tests and slower on others. There is room for a lot of improvement. The compiler is still missing stuff like bounds checking elimination and basic loop optimizations. I see the register allocator doing weird stuff occasionally. ",
					"date": "2016-02-17",
					"id": "d03uxsg",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dr2chase",
					"content": "Note however that we\u0027ve been prototyping bounds check elimination, and on a branch-predicting Intel box the real-application performance improvements from removing 50% of slice bounds checks is about zero.\n\nThere\u0027s a tension between loop optimizations and debugging (and code size and compilation time).  One profitable way to clean out loop invariant code while respecting order of other operations is to unroll the first iteration of the loop -- but that increases code size, and it creates two machine code locations for each line of code in the loop.  How much of a performance win does this need to be to be worth the additional debugging hair?",
					"date": "2016-02-18",
					"id": "d04lapu",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "4ad",
					"content": "One benefit would be that SSA is much easier to optimize in theory.\n",
					"date": "2016-02-17",
					"id": "d03s0j4",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "cahooon",
					"content": "I have loved reading the sleuthing \u0026amp; design analyses written in emails and CL summaries by rsc, khr, dvyukov, bradfitz, et al, over the years. It\u0027s been a real education. I remember the \"simpler, faster GC\" cycle was a particularly interesting and intense session. \n\nAny especially interesting design/debugging stories, recent or old, you might share? I figure some never made it to the mailing lists but perhaps circulated in smaller groups. ",
					"date": "2016-02-17",
					"id": "d03s9k9",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "rsc",
					"content": "When I first joined the Go team (in mid-2008), one of the warnings I was given was never to copy a built Go tree from a Linux server onto my Mac desktop. At the time, builds were by hand or barely automated with make, so it was easy to forget to rebuild something. And if you accidentally made an OS X system call with a Linux system call number, the OS X kernel would die and your machine would gray screen and reboot. The fact that Go object files now all have os+arch+version in their headers and that the linker insists they all match when creating an executable is a direct result of this kind of problem. I don\u0027t know if the OS X kernel is still that brittle. I hope not.",
					"date": "2016-02-18",
					"id": "d042z4g",
					"isArchived": true,
					"isControversial": false,
					"score": 30
				},
				{
					"author": "4ad",
					"content": "[Go can find CPU bugs](https://github.com/golang/go/issues/13854) (ok, this bug was know by the manufacturer, so it wasn\u0027t _discovered_ by Go, but still, it can find them!).",
					"date": "2016-02-17",
					"id": "d03stld",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "bradfitz",
					"content": "Before the migration to Github, I used to actually have a label on the issue tracker for cases where Go exposed OS bugs. There were a number of them, which surprised me for a while.",
					"date": "2016-02-18",
					"id": "d03vfiu",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "enneff",
					"content": "Turns out a lot of kernel maintainers were not expecting anyone but libc to make system calls (I\u0027m looking at you Darwin!).\n",
					"date": "2016-02-18",
					"id": "d03vo19",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "mdempsky",
					"content": "To be fair, most OSes develop their kernel and userland in tandem, so that\u0027s not an unreasonable expectation.  The Linux kernel is rather unique for being developed independently and having a stable kernel ABI.",
					"date": "2016-02-18",
					"id": "d03ywzz",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "bradfitz",
					"content": "You still shouldn\u0027t be able to panic the kernel from userspace, stable ABI or not. :)",
					"date": "2016-02-18",
					"id": "d041gf5",
					"isArchived": true,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "hegbork",
					"content": "Apple have based their kernel on ancient BSD code and aren\u0027t very good at keeping up with the trends. Want two kernel crashes for Darwin? I have one that I tested that it worked two versions ago and I have one that I haven\u0027t tested yet, but I\u0027m pretty sure I can exploit. I\u0027ve never managed to figure out how to contact Apple, so they remain unfixed. Both of them were fixed in the kernel I used to work in 10-15 years ago.\n\nThe dirty secret of kernel development is that user triggerable crashes are fixed unannounced every few months. Kernel is a beast and it\u0027s hard to get all the edge cases right. But it doesn\u0027t help that Apple doesn\u0027t seem to care.",
					"date": "2016-02-18",
					"id": "d048e45",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "ianlancetaylor",
					"content": "In the 1.6 release cycle I was quite surprised to discover that on NetBSD and DragonFly a newly created thread inherits the signal stack of the creating thread.  That took a while to figure out.",
					"date": "2016-02-18",
					"id": "d03xrqn",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "seufert",
					"content": "Some suggestions/wishes from my side:\n\n* Is see the subrepos under golang (for example golang.org/x/tools) growing and from time i find some really cool stuff there - but mostly by accident. Any chance that there will be better documentation/communication/overview on them?\n\n* Still i find the database/sql one of the weak points of Go, but there does not seem to be much activity around. Any chance for improvements? For example more sql.Null... types? Often it\u0027s not clear that DB-Type should/could be scanned into what. It differs much from driver to driver. I think a stronger core would help. Any plans there?",
					"date": "2016-02-17",
					"id": "d03t56j",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "enneff",
					"content": "\u0026gt; Any chance that there will be better documentation/communication/overview on them?\n\nYes, certainly. /u/broady and I are hoping to improve the doc situation in the next few months.",
					"date": "2016-02-17",
					"id": "d03v4a4",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "rsc",
					"content": "/u/bradfitz may have more to say about database/sql. I know the driver story in particular is a bit of a weakness. It would be nice if it was clearer what the standard set is and if they were more clearly consistent.\n",
					"date": "2016-02-18",
					"id": "d045gv9",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "nosmileface",
					"content": "Hello. I\u0027m using Go for web development and that\u0027s may day to day job, I\u0027m happy about it. But my hobby projects usually have something to do with graphics (games) and this is one of the areas I have hard time even trying to use Go and these are the reasons why. But before I describe the reasons I want to mention that I use C++ and C# (via mono) instead. My question is what do you think about the problems I mention, maybe I\u0027m even wrong about them and if there is anything that can be changed in Go to make it easier to do what I\u0027m trying to do.\n\n1. First problem is that games are slightly different from any other applications. If you take a web server for example you just make it so that it handles as much requests as possible and if it cannot handle more or the response time becomes too low, you scale hardware. With games you cannot do that, gamer has always a fixed set of hardware and you have to design your program in such a way that it is able to select which things to do. And this is where Go becomes problematic to use as there are no goroutine priorities and you cannot really schedule goroutines on your own. Well, you can do something, invent some protocol and talk to a scheduler via channels or something like that, but it\u0027s not free performance wise. So, that\u0027s problem number one. Goroutines is a nice abstraction, unless you want slightly more control. For example I would like to be able to execute all I/O goroutines on a single dedicated thread with specific OS priority. It becomes even more important on OSes with bad schedulers (such as ms windows). I mentioend I use C#, there I just make my own coroutine system with generators (i.e. yield). Stackless coroutines become rather popular in many languages these days. Python added async/await in 3.5, C++ will get stackless coroutines very soon it seems. One of the advantages of stackless coroutines over goroutines is that they are first class citizens and you can do whatever you want with them. Is there a change we get stackless coroutines in addition to goroutines in Go? I understand it\u0027s a weird question though.\n\n2. And second problem is interaction with C APIs. We all know that overhead of a C API call in Go is rather large, but graphics APIs due to their proprietary nature will always be in a form of shared libs. OpenGL is already known and khronos recently released the new Vulkan API. Yes, vulkan shifts everything slightly towards more structured approach (you manage more state on your own), but still a plenty of cgo function calls are expected. Is there a change that we\u0027ll see some improvements in that area? For example escape analysis annotations when it comes to cgo functions. I know you guys think it\u0027s evil and all, but what other practical solution can we do? Also gaming is traditionally heavily middleware-based, same problem. Lots of C API calls. The problem gets worse when you combine it with problem number one. I can\u0027t really call C functions from goroutines right now as this action spawns threads like crazy. Scheduler is smart, but it thinks every cgo call potentially blocks. And what\u0027s worse, that\u0027s exactly my use case right now. Because C compilers are the best when it comes to optimizations, I use a high level language (C#) to do coroutines and work scheduling, but the actual work is done in C/C++ code. As a result the way Go scheduler works is just not acceptable for me and I use mono (not the most lightweight platform, but it works sort of).\n\nSo there. Sorry for a bit vague description, but these are my problems with Go and I would like to know what Go contributors think about these problems. Given Go\u0027s amazing garbage collection and a much better SSA-based compiler optimizations (not completely there yet) it all makes Go an attractive language for games, but...\n\n",
					"date": "2016-02-18",
					"id": "d049s6p",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "ianlancetaylor",
					"content": "Go has all the tools necessary to implement stackless coroutines as a library.  You can combine that with runtime.LockOSThread and appropriate system calls to set the thread priority.  I can\u0027t claim that that is simple but I don\u0027t yet see a compelling case to add them to the language.  I don\u0027t really understand what that would look like.",
					"date": "2016-02-18",
					"id": "d04ooit",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "ianlancetaylor",
					"content": "I\u0027m not sure what you mean by escape analysis annotations for cgo functions, but I assume that it has something to do with passing pointers between Go and C.  For 1.6 we pinned down rules that we can live with for pointer passing, which basically puts severe restrictions on passing Go pointers to C.  This isn\u0027t because we think it\u0027s evil, it\u0027s because we want to be able to write the garbage collector to maximize performance of pure Go programs.  This is an area where we have to make choices, and we\u0027ve chosen to optimize for pure Go.\n\nThis doesn\u0027t mean that you can\u0027t do what you want.  The solution is to allocate memory in C.  Then there are no escape analysis problems, though of course you lose most of the advantages of the Go garbage collector.\n\nThat aside, I would certainly like to speed up calls between Go and C.  It\u0027s tricky because of the stack issues, but I think we can do better than we do today.\n\nSorry this probably isn\u0027t much help.",
					"date": "2016-02-18",
					"id": "d04ovbo",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "hipone",
					"content": "Hey Go Team, Gophers\n\nCongrats on the 1.6 release!\n\nOne of Go developers said sometime ago on Twitter [0] you\u0027re developing some tooling for context.Context - is this still the case? Will it be publicly available?\n\n[0] https://twitter.com/Sajma/status/494161985219465217",
					"date": "2016-02-17",
					"id": "d03saby",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "dsymonds",
					"content": "Yes, it\u0027s still in development. It\u0027s built on Alan Donovan\u0027s go/types work, which has only relatively recently stabilised.",
					"date": "2016-02-17",
					"id": "d03torj",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "ianlancetaylor",
					"content": "I\u0027m just going to comment that go/types itself is mainly Robert Griesemer\u0027s work, though Alan has written many tools around it, notably guru (formerly called Oracle).",
					"date": "2016-02-17",
					"id": "d03u7d5",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "cahooon",
					"content": "I have gathered that code review is a huge amount of the job at Google. So, since you have to translate your gut feelings about how to write good Go into text in code reviews, I imagine that a lot of implicit/intuitive knowledge ends up having to be being communicated fairly frequently, and in clear enough terms to be useful.\n\nHow has your intuition for good Go design changed over the years? What kinds of habits do you try to train into new Go users whose code you are reviewing? (The stuff that hasn\u0027t made it into docs like Effective Go and the Tour).\n\nStuff like package boundaries, use of channels for coordination, patterns you\u0027ve noticed around handling errors well (and throughly). That sort of thing.",
					"date": "2016-02-17",
					"id": "d03t3o1",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "ianlancetaylor",
					"content": "This is a good question and I don\u0027t have a short answer.\n\nProgrammers new to Go often use channels way too much or way too little.  Some misunderstand slices--https://golang.org/blog/slices is a great resource.  It takes a while for people to understand how and when goroutines terminate.  People often don\u0027t realize that close on a channel is not necessary, and that it is purely a send operation.",
					"date": "2016-02-17",
					"id": "d03v3tw",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "crawshaw",
					"content": "Here is a set of common code review comments that have come up inside Google over the years: http://golang.org/wiki/CodeReviewComments",
					"date": "2016-02-17",
					"id": "d03u3l8",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "dsymonds",
					"content": "Yes, our intuition has certainly developed over the last 8 years or so. We publish a bunch of things on the Go blog (e.g. http://blog.golang.org/package-names, http://blog.golang.org/errors-are-values, http://blog.golang.org/constants), as well as places such as https://golang.org/s/style.",
					"date": "2016-02-17",
					"id": "d03u3s3",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "Dieter_be",
					"content": "http://blog.golang.org/profiling-go-programs said \"The goroutine blocking profile will be explained in a future post. Stay tuned.\" any news on this? every time i try to use the blocking profiler I get stuck. The original profiling article was great and I\u0027ld love a followup. is the blocking profiler ready for widespread use?",
					"date": "2016-02-18",
					"id": "d044j9t",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "rsc",
					"content": "I guess that\u0027s the problem with trying to predict the future. We clearly haven\u0027t written that post yet.\n\nWhat do you mean by \"I get stuck\" regarding the blocking profiler? \n\nWe do believe that the blocking profiler does what it is advertised to do, because there are tests for it. That said, I have never found the profiles particularly useful, and maybe that\u0027s what you meant by \"I get stuck\". To me, the fundamental issue is that what you really want is to distinguish good blocking (like a goroutine waiting for the next network request; that time is not the application\u0027s fault) from bad blocking (like excessive delay due to mutex contention). It\u0027s difficult to do that without some knowledge of the application, although perhaps we could do better by having just a mutex contention profile; that would be most useful if all the other kinds of blocking are \"good\" for your program. ",
					"date": "2016-02-18",
					"id": "d045pyd",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "breakingcups",
					"content": "What is something you\u0027d love to see in Go, but know is impossible until Go 2?",
					"date": "2016-02-17",
					"id": "d03s41s",
					"isArchived": true,
					"isControversial": false,
					"score": 38
				},
				{
					"author": "robpike",
					"content": "I would like the opportunity to rewrite the lower-level, earliest-written libraries to be more Go-like. There are a number of early decisions I regret. One easy one to explain is that os.Stdin and os.Stdout are concrete types, *os.File. It would be much nicer if they were io.Reader and io.Writer. Similarly, I would like the File type itself to be more abstract so it can be implemented by other packages transparently.\n\nSo much power cut off by those early mistakes. We live and learn.",
					"date": "2016-02-18",
					"id": "d040k2s",
					"isArchived": true,
					"isControversial": false,
					"score": 67
				},
				{
					"author": "gertcuykens",
					"content": "Can you make a GO Experimental playground please where all this ideas get actually a proof of concept we can test? Currently only people like you understand the big picture, users like me get locked out in the thinking process because our vision is to narrow to understand the benefits. I would like to read more blog post how GO language developers think and what they are drawing on their blackboard. I see many issues on github that feel like that idea was already tested a year ago because of the detailed description :) I want to see more issue failures that can be referenced as somebody tried that already and this is why idea xyz failed. I learn more about the mistakes you people make then the abstract solutions that result from it.",
					"date": "2016-02-18",
					"id": "d0480yw",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "4ad",
					"content": "I have always wondered why os.Stdin and os.Stdout are concrete types. Now I know!",
					"date": "2016-02-18",
					"id": "d04fn1i",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "4ad",
					"content": "Too many ways to declare a variable.\n\nI don\u0027t like the shadowing rules, too subtle.\n",
					"date": "2016-02-17",
					"id": "d03sfj3",
					"isArchived": true,
					"isControversial": false,
					"score": 47
				},
				{
					"author": "earthboundkid",
					"content": "My wish list:\n\n- No bare `return`s\n- No `new`\n- `error` with `Source() error` method added for chaining\n- Various library clean ups: more consistency between archive and compress packages and their methods, various io.Reader/Writer helpers in one easy to find place instead of ioutil plus bufio plus bytes, various depreciations removed ",
					"date": "2016-02-18",
					"id": "d041wxe",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "mdempsky",
					"content": "I wish that in\n\n    for x :\u003d range v {\n        wg.Add(1)\n        go func() {\n            defer wg.Done()\n            foo(x)\n        }()\n    }\n\n`x` would be scoped to the block, rather than to the whole `for` statement, so it would Just Work.  This is the most common mistake I still regularly make in quick one-off programs.",
					"date": "2016-02-17",
					"id": "d03tdvv",
					"isArchived": true,
					"isControversial": false,
					"score": 35
				},
				{
					"author": "nyoungman",
					"content": "The current scoping is consistent with scoping elsewhere.\n\n    if x, err :\u003d func(); err !\u003d nil {\n       // do something with err\n     } else {\n       // do something with x\n    }\n\n\nBut maybe range could behave differently in Go 2?",
					"date": "2016-02-17",
					"id": "d03ukx7",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "enneff",
					"content": "I was going to make the same comment.",
					"date": "2016-02-17",
					"id": "d03tpwo",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "dgryski",
					"content": "Also, the Go2 label on the issue tracker: https://github.com/golang/go/issues?utf8\u003d%E2%9C%93\u0026amp;q\u003dis%3Aissue+is%3Aopen+label%3AGo2",
					"date": "2016-02-17",
					"id": "d03tlub",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "djhworld",
					"content": "What editors do the Go team use when writing Go? \n\nI used to be staunchly anti-IDE, but I\u0027ve come around to the idea nowadays as I\u0027ve gotten older, haven\u0027t seemed to be able to find a decent Go IDE though. ",
					"date": "2016-02-17",
					"id": "d03t63x",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "dsymonds",
					"content": "Most people use Vim, Emacs, or an editor they wrote themselves. A few use Sublime Text these days too.",
					"date": "2016-02-17",
					"id": "d03ttvr",
					"isArchived": true,
					"isControversial": false,
					"score": 35
				},
				{
					"author": "[deleted]",
					"content": "\u0026gt; or an editor they wrote themselves\n\n\u0026lt;3\n\n",
					"date": "2016-02-18",
					"id": "d03v928",
					"isArchived": true,
					"isControversial": false,
					"score": 39
				},
				{
					"author": "rsc",
					"content": "For the past fifteen years or so I have used Rob Pike\u0027s editor acme. Rob wrote a [paper about it](http://9p.io/sys/doc/acme/acme.pdf) (PDF; or [html](http://9p.io/sys/doc/acme/acme.html) but the reformatting is not perfect). Acme is very difficult to understand without seeing it in action. It\u0027s an integrated environment but not the usual kind. A few years ago I recorded a [screencast of what it\u0027s like](http://research.swtch.com/acme). \n\nAcme originally required Plan 9 but now it runs on [basically all Unix systems](https://swtch.com/plan9port). Rob and I run it mainly on Linux and OS X these days.\n\nWhile I still use acme every day for nearly all my work, I\u0027m starting to believe strongly that the answer to text editor or IDE is neither. Those are fundamentally single-user systems. What we really need is a work environment that understands that people work together. A group of people can work interactively on a Google Doc in real time but not on a program. That seems wrong. And when you\u0027re done there\u0027s no guarantee of a clear log of what you did so that someone else can follow along or reproduce your work. That also seems wrong. Those are the kinds of improvements I\u0027d like to see in whatever I use for the next fifteen years.",
					"date": "2016-02-18",
					"id": "d03y8v0",
					"isArchived": true,
					"isControversial": false,
					"score": 32
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; A group of people can work interactively on a Google Doc in real time but not on a program. That seems wrong.\n\nWe prototyped the first steps of RobustIRC on an etherpad with a short bash script that would continuously download, compile and run the code in it. It was awesome :)",
					"date": "2016-02-18",
					"id": "d04i5kb",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "enneff",
					"content": "I use Vim with [vim-go](https://github.com/fatih/vim-go).",
					"date": "2016-02-17",
					"id": "d03uzhe",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "broady",
					"content": "I think most people on the Go team use pretty no-frills editors.\n\nI use vim, and you can see my [vimrc here](https://github.com/broady/dotfiles/blob/master/vimrc).\n\nFor work in the Google codebase, we have excellent tools available for code search, which is a large part of why IDEs are useful.",
					"date": "2016-02-17",
					"id": "d03tscz",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "rsc",
					"content": "Thanks everyone for all the great questions. The response has been overwhelming, in a very good way. I\u0027m going to unsticky this post since it\u0027s been well over 24 hours at this point. I\u0027m also going to make sure that all the questions older than this comment do get answered in the next few days. I know I personally have a bunch that I intend to reply to but haven\u0027t had time yet today.\n\n**Thanks again!**",
					"date": "2016-02-19",
					"id": "d05bqot",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "Hencq",
					"content": "Congrats on the release! The move to rewrite the compiler in Go itself initially led to an increase in compile times in Go 1.5. The expectation was that this would be gradually reclaimed as the Go codebase would be optimized. Can you comment on how far along this reclaiming effort is as of 1.6 and are there any big wins on the horizon for the 1.7 roadmap?",
					"date": "2016-02-17",
					"id": "d03rwur",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "ianlancetaylor",
					"content": "My understanding is that compile speed in 1.6 is pretty much the same as 1.5.  For 1.7 we hope to get the SSA compiler in, but the plan is to only do that if compile speed does not increase.  There are also some plans for a new parser and a new representation of export data and of the object file format, all of which should improve compile times.  I don\u0027t know that 1.7 will back to the 1.4 compile speed, but that is certainly the goal.",
					"date": "2016-02-17",
					"id": "d03t40p",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "breakingcups",
					"content": "How involved are the original creators of Go today? If absent, do you feel the original philosophy is still being well-guarded in practice?",
					"date": "2016-02-17",
					"id": "d03sz1c",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "ianlancetaylor",
					"content": "Ken is doing very little Go related work these days.  Rob is working in Go but has been doing less work on the standard tools and libraries--he is still contributing, but less.  Robert is still working on Go full time.\n\nPersonally I think the original philosophy is still well supported.",
					"date": "2016-02-17",
					"id": "d03txdb",
					"isArchived": true,
					"isControversial": false,
					"score": 33
				},
				{
					"author": "enneff",
					"content": "Robert and Rob are still actively working on the project. Ken is pretty much retired, but still gets pulled in to the odd design discussion.\n\nI\u0027ll let them say how they feel about the original philosophy. My take on it is that Go is still very true to its design goals.",
					"date": "2016-02-17",
					"id": "d03u88s",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "hippmr",
					"content": "Do you know of anything upcoming that would enable us to develop desktop GUI apps in go?",
					"date": "2016-02-17",
					"id": "d03s040",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "enneff",
					"content": "The shiny stuff looks promising, as do some of the other GUI libraries (I hope other people will point them out, as I can\u0027t vouch for them since I haven\u0027t used any of them).\n\nOn a different tack, I recently started using [gopherjs](https://github.com/gopherjs/gopherjs) to write a JavaScript front end and it is glorious. I have both the front- and back-ends written in Go, and the communicate using `net/rpc` over websockets. It all feels very natural and fun. Go\u0027s concurrency model works *really* nicely when combined with the DOM. For instance, here\u0027s some code that uses jQuery to bind a click handler to a button, and then block until the button is clicked:\n\n                ch :\u003d make(chan bool)\n                jq(\"button\").On(\"click\", func() {\n                        ch \u0026lt;- true\n                })\n                \u0026lt;-ch\n\nThere are some details here I\u0027ve painted over for the sake of illustration—like preventing event propagation—but in practice I have written helper functions to deal with those edge cases. The result is very comprehensible UI code for an environment I\u0027m familiar with (the browser). I like it a lot.",
					"date": "2016-02-17",
					"id": "d03u1w2",
					"isArchived": true,
					"isControversial": false,
					"score": 38
				},
				{
					"author": "sbinet",
					"content": "I have only dabbled a bit with gopherjs, but I believe it would gain tremendous traction if this kind of work would be integrated or at least on the roadmap:\n\nhttps://github.com/gophergala2016/cmd-go-js\n\n_ie:_ have `GOARCH\u003djs` be a regular target like the other `amd,386` and whatnot :)",
					"date": "2016-02-18",
					"id": "d04e6vl",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Klathmon",
					"content": "holy shit that would be incredible, and would rocket the ability to write front-end code in go into the mainstream.",
					"date": "2016-02-18",
					"id": "d04f42b",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "ianlancetaylor",
					"content": "The exp/shiny package (https://github.com/golang/exp/tree/master/shiny) is headed in that direction.  There\u0027s a long way to go, though.",
					"date": "2016-02-17",
					"id": "d03tdbk",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "kl0nos",
					"content": "I really wait for this for a while now. I would replace Qt with that and write even more Go. I think a lot of people are waiting for a proper cross-platform GUI solution.",
					"date": "2016-02-18",
					"id": "d03x2z3",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-02-18",
					"id": "d03xvyf",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "bradfitz",
					"content": "After months without smoke detectors (too lazy to put up the old ones, some of which I\u0027d already gotten rid of), I bought the 2nd Gen models (https://nest.com/support/article/How-can-I-tell-which-Nest-Protect-I-have) because I\u0027m ... an optimist? So far so good. It has a new sensor(s) apparently.\n\nThis has nothing to do with Go, but we did say it was an AMAnything I guess. :)",
					"date": "2016-02-18",
					"id": "d03zabz",
					"isArchived": true,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "zippoxer",
					"content": "You did let the old ones Go though.",
					"date": "2016-02-19",
					"id": "d06cft2",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Twirrim",
					"content": "What\u0027s the plan around improving crypto/ssl performance in Go?  There was the [interesting blog post from Cloudflare](https://blog.cloudflare.com/go-crypto-bridging-the-performance-gap/) in May last year, and a bunch of discussion about the conflicting licenses involved in the code. I fully understand why you can\u0027t import it as is.  From the email thread associated with that blog post it looks like some improvements have been added, is there a specific plan or resources around adding further improvements?\n\nThe performance bottlenecks as-is, even on 1.6rc2, are certainly something I keep running in to, in ways that are non-trivial to use, say [SpaceMonkey\u0027s openssl wrapper](https://godoc.org/github.com/spacemonkeygo/openssl).",
					"date": "2016-02-17",
					"id": "d03rpeg",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "robpike",
					"content": "A major missing piece here is good assembly language support for math/big and other crypto components on architectures other than x86. The ARM ecosystem on Go doesn\u0027t have enough assembly love, and significant performance improvements are possible. With the growing list of supported architectures (POWER, IBM z Systems, MIPS, etc.) this is ever more important. Legally unencumbered contributions welcome. And thanks to Cloudflare for their contributions so far.\n",
					"date": "2016-02-18",
					"id": "d03zj18",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "rsc",
					"content": "The Go team is working with engineers at both Cloudflare and Intel to improve the performance of any of Go\u0027s tight loops that could benefit from more careful coding (often in assembly), including but not limited to the crypto packages. \n\nIn fact on one microbenchmark recently we found that Go\u0027s \n\n    for i :\u003d range x {\n        x[i] \u003d 0\n    }\n\nran faster on at least one modern x86-64 Linux workstation than a C program calling glibc\u0027s memset. The Go compiler recognizes that pattern and calls its own memset, so really it\u0027s just a comparison of Go\u0027s memset assembly vs glibc\u0027s. And in this specific setup, Go\u0027s was faster, I suspect because machines change, and Intel engineers had tuned Go\u0027s more recently than they\u0027d tuned glibc\u0027s.\n\nThe point isn\u0027t that Go is always faster than glibc, which is certainly untrue, but rather that Go is moving toward the kind of optimization coverage you\u0027d expect from a mature standard library.\n\nI\u0027m not as confident as /u/dgryski that all Cloudflares optimization work is in, but we\u0027ll get there.",
					"date": "2016-02-18",
					"id": "d040ynu",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "nyoungman",
					"content": "Several of CloudFlare\u0027s crypto optimizations have landed for Go 1.6, but based on this issue, there is one that still has an outstanding licensing issue. https://github.com/cloudflare/go/issues/8",
					"date": "2016-02-17",
					"id": "d03s8dq",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "dgryski",
					"content": "I think both the RSA and the EC code landed for 1.6; both CLs were cherry-picked.",
					"date": "2016-02-17",
					"id": "d03tf07",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "tdewolff",
					"content": "Great work on the 1.6 release, congrats!\n\nThere have been some really good improvements to the GC in Go 1.5 AND in Go 1.6, especially for large memory usage. Garbage collection times have been significantly reduced. What has lead to those big improvements? What design decisions make the GC for Go so much faster? How different is this from Java\u0027s GC?\n\nAnd most interesting, what ideas and improvements are taken into consideration for future releases?",
					"date": "2016-02-17",
					"id": "d03up1n",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "aclements",
					"content": "The fundamental change in Go 1.5 was that we replaced the stop-the-world garbage collector with a collector that does almost all of its work concurrently while the program runs. Rick\u0027s talks give a great overview of how that works.\n\nGo 1.6 is still using the same basic algorithm; the wins come from lots of smaller improvements. The garbage collector still pauses the program briefly at the beginning and end of each GC cycle for \"sweep termination\" and \"mark termination,\" but we improved the behavior of these pauses.\n\nWe improved the pause times for large heaps by fixing some tasks during these phases that were O(n) in the heap size (~5ms/GB). Some we eliminated entirely, while others we figured out how to do during the concurrent phase, so now there\u0027s nothing really proportional to the heap size happening during the pauses. We moved a few other less common sources of latency out of the pauses as well, and we\u0027re aware of a few others that we\u0027re planning to address in Go 1.7 (I got concurrent stack shrinking working just today :).\n\nWe also \"decentralized\" the GC algorithm in Go 1.6. In 1.5, GC was coordinated by a single (internal) goroutine, though most of the work was done on worker goroutines. As a result, phase changes had to go through that coordinator, which meant they had to wait for the goroutine to get scheduled, which introduced delays. In Go 1.6, we\u0027ve eliminated this coordinator; instead, any goroutine can perform a phase change the moment it detects that it\u0027s necessary.\n\nThere were lots of other improvements, too. Take a look at my [Go 1.6 GC plan](https://docs.google.com/document/d/1kBx98ulj5V5M9Zdeamy7v6ofZXX3yPziAf0V27A64Mo/edit?usp\u003dsharing) if you want more details.\n\nA lot of these algorithmic choices are possible because Go has a non-moving garbage collector. This is quite different from Java, which uses a moving collector. The trouble with a moving collector is that it\u0027s *really hard* to move objects while the program is running (though not impossible, see [Sapphire](http://dl.acm.org/citation.cfm?id\u003d376810) and Azul). Since Go doesn\u0027t move objects, it can do much less during the stop-the-world phases (and doesn\u0027t need read barriers).\n\nFor the next few releases, we\u0027re planning to focus on GC throughput to reduce the total CPU time spent in the garbage collector. We\u0027re attacking this on both the \"microoptimization\" level, by improving how quickly the garbage collector can scan memory, and the \"macrooptimization\" level, by reducing the amount of memory the garbage collector has to scan by focusing on areas of the heap that are more likely to be fruitful.",
					"date": "2016-02-18",
					"id": "d03yvhj",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "joetsai",
					"content": "[Rick Hudson gave a talk at GopherCon](https://www.youtube.com/watch?v\u003daiv1JOfMjm0) with details of how the GC works. At a high-level, Go\u0027s GC tries to do as much of the mark-and-sweep work concurrently while the Go program is running and only needs to stop-the-world at the end of the mark phase. Of course, there is no free lunch, so while Go 1.5+ has lower GC latency, it does so by trading a little of throughput.\n\nI highly recommend watching the video; it\u0027s a interesting talk.",
					"date": "2016-02-17",
					"id": "d03uv8j",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "magikos",
					"content": "How and when did you start programming? What was your first programming language?",
					"date": "2016-02-17",
					"id": "d03sbfu",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "unixken",
					"content": "it was 1963 in a electrical engineering course.  it was a lecture\nor two on introduction to programming. the computer was a bendix\ng-15.  magnetic drum memory - 20 tracks of 100 words of 29 bits.\nan instruction had a next-instruction-address field. optimization\nwas to space instructions such that the next instruction was under\nthe read head just as the last instruction finished execution.\n\nnow isnt that a total waste of neurons?\n\nmy first language was intercom, an interpreter for mere mortals on\nthe G-15. i started coming in nights and soon progressed to assembly\non the machine.\n\nnext weeks in the e.e. course was analog computing.  i cheated and\nused the G-15 to time-scale the analog problems. that was the first\n\"real\" program that i wrote.\n\nrather simultaneously, i sought out most available computers on\ncampus. ibm 1620, ibm 1401, dec pdp-5, dec pdp-6, ibm 7090 and\nxds/sds 940.  languages were assembly, fortran, algol, smalgol and\nneliac. i knew cobol enough to consult, but never programmed in it.\n\nthe magic words: mea culpa. a prank in a time of weakness.\nmy only excuse - boredom.\n",
					"date": "2016-02-19",
					"id": "d05we57",
					"isArchived": true,
					"isControversial": false,
					"score": 53
				},
				{
					"author": "bradfitz",
					"content": "My dad taught me to program when I was 5 or 6 (so 1985/1986). I\u0027d always watched him program and was curious. He sat me down with a piece of paper at the dining room table and wrote a program on paper:\n\n    10 PRINT \"HELLO\"\n    20 GOTO 10\n\n\"What do you think that does?\", he asked.\n\"Print hello to the printer, forever?\"\n\"Well, no, it prints to the screen, not the printer. That would be LPRINT.\"\n\"Why?\"\netc\n\nThe computer was a homemade, bootleg Apple ][, with the ROM burned onto faulty memory chips with bits stuck high or low that my dad had got from a company\u0027s trash. If you have enough faulty chips, eventually you\u0027ll find one where the faulty bits are stuck high or low in the right places. Still amuses me.\n\nWe later got a 386 and a family friend \u0026amp; neighbor gave me Turbo C a few years later and I enjoyed being able to control the mouse and do better graphics than I could in BASIC.\n",
					"date": "2016-02-18",
					"id": "d041fam",
					"isArchived": true,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "enneff",
					"content": "My grandfather taught me to code when I was a little kid, starting with BASIC on a TRS-80. In primary school, one of my friends gave me a copy of Turbo Pascal and showed me how to use it, which is how I learned to code properly. That friend now works a few desks away from me at Google. :-)",
					"date": "2016-02-18",
					"id": "d03w9he",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "robpike",
					"content": "Early in high school took a worthless course using mark-sense cards programming BASIC on an HP minicomputer. Turnaround for jobs was three days*. I got fed up and taught myself FORTRAN using WATFOR on the UofT IBM/360; there was a public access room where you could run anything that fit on less than 2000 cards (one box) and consumed less than 3 seconds of total compile, link, run, and I/O spool CPU time. (It was about a 1MHz machine; work out what that means in terms of today\u0027s computer environment and understand why I bitch how slow everything is today.)\n\nI took a single year of a PL/I course in university, then discovered Unix (it was a heavily hacked v5) and learned everything that mattered from the guys in that room (The Dynamic Graphics Project): Tom Duff, Bill Reeves, Mike Tilson, and so on. I owe it all to Ron Baecker seeing something in my enthusiasm and letting me in the door. We got to use the PDP-11/45 starting at 5PM every day. It had 2.2 megabytes of disk space for all of us to share.\n\n* Bob Dewar once told me that he and Ken Belcher wrote SPITBOL with the same kind of turnaround to a remote batch machine, but of course in 360 assembly language. He is a much better programmer than me and did it in some remarkably few round trips. I wish I could remember the details.",
					"date": "2016-02-18",
					"id": "d04fgti",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "aclements",
					"content": "I got a chemistry book for my seventh birthday (1991) that had a BASIC program in the back for classifying chemicals. It was my first window in to how a computer worked. I asked my dad to type it in for me, then I started asking lots of questions about how it worked (luckily he\u0027s a software engineer, so he could answer them), then I started writing my own little programs in BASIC, and then I was hooked. :)\n\nIn fifth grade I read \"Moving From QBasic To C.\" My teacher thought that was a very strange book report.",
					"date": "2016-02-18",
					"id": "d0437r5",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "ianlancetaylor",
					"content": "My first program was written with a friend, entirely on paper, based on a description of BASIC that we read somewhere.  My first actual program was written in BASIC on a DECsystem-20 in 1977.\n\nEdited to add: my first experience with computers was when I was younger, when my mother would bring home stacks of punch cards from programs she wrote while getting her Ph.D. (in nutrition--why she had to write programs for that I don\u0027t know).  She did not like to program, but I liked playing with the punch cards.",
					"date": "2016-02-18",
					"id": "d03yb8q",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "rsc",
					"content": "My father worked on [speech coding](https://en.wikipedia.org/wiki/Speech_coding) and had a Commodore 64 at home, I suspect because it had a really great sound chip for the time. One of my earliest memories is being allowed to press the [paper advance button](https://en.wikipedia.org/wiki/Commodore_64_peripherals#/media/File:Commodore_Matrixdrucker_MPS-802_%28wei%C3%9Fen_hintergrund%29.jpg) on the printer after he printed something. I don\u0027t know how old I was, but clearly the fact that I could make the machine do something made an impression.\n\nEventually I started drawing on the C64 by moving the cursor all around the screen and typing using different foreground and background characters, and then I moved on to typing in BASIC programs from [Run magazine](https://en.wikipedia.org/wiki/Run_%28magazine%29), and then at some point I started changing them and figuring out how they worked.\n\nA few of my clearest learning-to-program memories, though, are from trying to learn C. By then we had a PC with MS-DOS and Turbo C, and my father had a copy of the original K\u0026amp;R. I typed in hello world from that book, something like:\n\n\tint main() {\n\t\tprintf(\"hello, world\\n\");\n\t\treturn 0;\n\t}\n\nTurbo C refused to run that program. It had some mysterious complaint about printf not having a prototype. I don\u0027t think my father understood the message either, and I had no one else to ask, so I gave up on learning C for a while. The problem was that Turbo C implemented the then-recent ANSI C standard and insisted on `#include \u0026lt;stdio.h\u0026gt;`, but the K\u0026amp;R book predated that.\n\nAnother memory from a bit later: once I had gotten the hang of #include and other parts of C, I understood that if you wrote:\n\n\tchar buf[20];\n\tgets(buf);\n\nthen you had to worry about what happened if the user typed more than 20 bytes into gets. But I made a great discovery! \n\nIf instead you wrote:\n\n\tchar *buf;\n\tgets(buf);\n\nthen the compiler (apparently) automatically arranged for buf to accept any number of bytes without problem. I had no idea how it worked, but it worked. What was really happening, of course, is that the uninitialized buf pointer reused whatever pointer or non-pointer bits might have been there on the stack from a previous call and scribbled over other memory. This was MS-DOS, though, and that technique had surprisingly few adverse consequences.\n",
					"date": "2016-02-19",
					"id": "d05jaio",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "robertgriesemer",
					"content": "As a kid I spent a lot of time playing in my father\u0027s office; there was a wonderful electro-mechanical desktop-calculator. The back of that machine could be opened and each key stroke caused wheels to churn with quite some noise. I wanted to see them run as long as possible, so the challenge was to find operations that took a long time. Division was the \"best\" operation, and division by 0 made the wheels run forever! The machine had a dedicated Stop button to get out of this situation. This early experience got me interested in machines, especially machines that could calculate.\n\nAround 1978 I bought a programmable pocket calculator, a TI-57. This was the best \"computer\" I could get my hands on as teenager. I ordered it from a catalogue. After several weeks a calculator arrived with damaged electronics - it didn\u0027t work at all. I returned the device but kept the documentation. While waiting for a new device, I memorized the manual and wrote my first program on paper, a routine that determined if a number was prime. When a working calculator finally arrived, I turned it on, typed in the program and ran it. It had one tiny bug but then just worked. I was hooked. Thus my first \"programming language\" was TI-57 keystroke sequences...\n\nIn high school I had access to an HP 9810A desktop machine on which I got 8 Queens running (representing the chess board in floating-point registers). Eventually I purchased a used Sharp MZ-80K together with my brother. We learned Basic and I taught myself Z80 assembly. That machine was a lot of fun because it was so easy to program. I remember writing another backtracking algorithm in assembly using the display memory for the stack: one could actually see the program run.\n\nMy first \"real\" programming language was Pascal which I learned as a student at ETH Zürich (1983).",
					"date": "2016-02-19",
					"id": "d068oct",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "mwhudsondoyle",
					"content": "I think my first language was logo on the amstrad pcw. it might have been mallard basic, but I think logo was first. I\u0027d have been about 7 I guess? Just another geeky kid lucky enough to have parents who bought a computer!",
					"date": "2016-02-18",
					"id": "d0431iw",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "4ad",
					"content": "When I was a child, I loved reading old FORTRAN manuals for Eastern Europe clones of western mainframe computers. I think they were System/360 clones, or maybe stolen designs, but with ferrite memory.\n\nThe first language that I wrote a program that actually ran on a computer was Pascal. However, I quickly came to my senses and learned C and assembly.\n\nMy first real program was an operating system like thing that let me run multiple DOS programs at the same time. In fact I started doing programming to solve this practical problem that I had.\n\nThis continues to this day, when I have a problem, I try to solve it, rather than find an awful library that \"solves\" it for me. I am a programmer, I can program.\n",
					"date": "2016-02-18",
					"id": "d04fc0g",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Sajmani",
					"content": "My first real program was a function to calculate the solution to any 4x3 Simplex method problem on my TI 81 calculator in middle school Pre-Algebra.  The 45 minute exam had 3 simplex method questions.  My teacher permitted me to use my program, so I was done in a few minutes.",
					"date": "2016-02-19",
					"id": "d0624rf",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "crawshaw",
					"content": "My father taught me Clipper, a dBase III clone on DOS that he was using to write software for his medical center in his spare time.\n\nIt was a great language to learn because it made it extremely easy to write to arbitrary positions in the terminal:\n\n    SET COLOR TO B+/W\n    CLS // clear the screen\n    SET COLOR TO W+/N\n    @ 10,10 TO 20, 20 DOUBLE // draw a box\n    SET COLOR TO B+/W\n    @ 11,11 SAY \u0027Hello\u0027\n\nCoupled with the file-based database the language was designed around and few-second compile times, it was really fun.\n\nSince then, every GUI system I have used has seemed too complex and tedious to bother with, so I have ended up doing ever more abstract kinds of programming. I really want to see easy programming made easy again.",
					"date": "2016-02-19",
					"id": "d062xfn",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "adonovan76",
					"content": "Like Brad, I first started programming in BASIC when I was 5 or 6 years old.  My brother had a ZX81, which was the first mass-market computer in the UK.  It came with only 1KB of RAM, but it had a great introductory manual (http://zxnext.narod.ru/manuals/ZX81_Manual.pdf).  The next year we got a ZX Spectrum.  Later I used an Acorn machine and learned ARM assembly.  From a high school friend I learned about fractals and isometric plotting; Brian and I used Go versions of these programs in our book (gopl.io).\n\nThe UK micro boom of the 1980s was a great time for young children to learn about computers because the machines of the time were affordable, simple enough to understand, basically indestructible, and not connected to a network.  And they booted into BASIC interpreters, so even if you just wanted to play a game, you had to write a one-line program to load it.",
					"date": "2016-02-19",
					"id": "d063a16",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "mwholt",
					"content": "I don\u0027t use cgo very often (if ever), although I can see why it\u0027s useful/necessary. Still, is there a reason CGO_ENABLED\u003d0 isn\u0027t the default value? Or, in other words, what are the disadvantages of a truly static Go binary?",
					"date": "2016-02-17",
					"id": "d03rmc9",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "ianlancetaylor",
					"content": "As of Go 1.5 and 1.6, the main disadvantage of CGO_ENABLED\u003d0 is that the os/user package will not work.  Because there is so much variety in how user information is represented, that package calls out to libc to get its information.  With CGO_ENABLED\u003d0, it will always return an error \"Lookup not implemented\".\n\nAlso, specifically on Darwin, the crypto/x509 package won\u0027t be able to access the root certificates on the system.\n\nBefore Go 1.5, the net package called into libc to do DNS lookups.  However, in Go 1.5 the default DNS resolver is pure Go code, and it only calls into libc in unusual situations.  Except on Darwin--on Darwin it again has to call into libc in all cases.\n\nSo if you don\u0027t care about os/user, and you aren\u0027t running on Darwin, and you don\u0027t actually use cgo yourself, then by all means set CGO_ENABLED\u003d0 for all your builds.  But for most people it\u0027s probably not the best default, at least not yet.",
					"date": "2016-02-17",
					"id": "d03rxqq",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "4ad",
					"content": "Complex name resolution environments like nis or ldap won\u0027t work. No os/user. Pretty minor things in my book.\n",
					"date": "2016-02-17",
					"id": "d03rxlr",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "scubatube69",
					"content": "Congrats on the 1.6 release!\nAre there any plans for reducing binary sizes produced by gc?  I\u0027ve read this can be accomplished by compiling without the debugging information, but I couldn\u0027t find information about this on the \"go build\" docs.",
					"date": "2016-02-17",
					"id": "d03rn14",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "4ad",
					"content": "This is issue 6853: https://github.com/golang/go/issues/6853",
					"date": "2016-02-17",
					"id": "d03rset",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "mdempsky",
					"content": "On POSIX systems, you can use the `strip` utility to remove non-essential debugging information from compiled binaries.\n\nThere\u0027s other debugging information still included in Go programs (e.g., the [symbol tables](https://golang.org/s/go12symtab)) that contribute substantially to binary size, but they\u0027d be more difficult to remove because they\u0027re used for things like precise garbage collection (need to know which values on the stack are pointers) and [runtime.FuncForPC](https://golang.org/pkg/runtime/#FuncForPC).",
					"date": "2016-02-18",
					"id": "d03vhog",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "RalphCorderoy",
					"content": "Why does package log format the date with slashes rather than hyphens? Seems such an odd choice for a modern design. And makes it tedious when searching, e.g. in less(1) with /2016\\\\/02\\\\/18.",
					"date": "2016-02-18",
					"id": "d03w82b",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "ianlancetaylor",
					"content": "I\u0027m not sure but I think it just copied a Google-internal logging library written in C++.  In retrospect it probably was not the best choice.",
					"date": "2016-02-18",
					"id": "d03yjvi",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "sleepydog",
					"content": "In the release notes, it says\n\n\u0026gt; Internally, the most significant change is that the parser is now hand-written instead of generated from yacc.\n\nCould you share the reasoning behind moving to a hand-written parser from yacc? Was it for better error messages? Performance? I have a soft spot for yacc :)",
					"date": "2016-02-18",
					"id": "d03xw9d",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "robpike",
					"content": "Yacc is a great tool, but it complicates the build process, requires maintenance, and means people who wish to work on the compiler must understand another tool and its input language. Translating the compiler to Go from C meant programmers didn\u0027t have to know C to contribute to the compiler; now they don\u0027t have to know yacc either.\n\nThere is also strong anecdotal evidence that error messages are easier to make high quality in a recursive descent parser than in a LALR(1) grammar.\n\nAnd yes, it is a little faster. Yacc\u0027s output isn\u0027t especially well handled in Go because of all the indexing operations, although I suppose as compiler technology improves that might help.\n\nOverall, it\u0027s nice to have one less tool to maintain and a cleaner, all-Go compiler.",
					"date": "2016-02-18",
					"id": "d03zx6f",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "aclements",
					"content": "The main advantage of the hand-written parser is that it can be analyzed and manipulated by the standard Go tools, so refactoring the compiler is far easier. My understanding is that the performance is about the same; while it\u0027s algorithmically somewhat less efficient, it\u0027s \"better\" Go code than what yacc generates.",
					"date": "2016-02-18",
					"id": "d04037p",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "very-little-gravitas",
					"content": "Thanks for all the work on Go 1.6. What do you think are the most helpful areas external contributors could help with on upcoming versions of Go, for different levels of contributor (beginner, intermediate, advanced)?\n\nAre there any areas which are neglected at present and would benefit from external help?",
					"date": "2016-02-17",
					"id": "d03rstm",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "ianlancetaylor",
					"content": "There are a lot of open issues at https://golang.org/issue.  Fixing those, or determining that they can be closed, would be very helpful.\n\nThe documentation is good and steadily improving, but where you see problems please send fixes or open issues.\n\nAt the more advanced level, there is plenty of room for improvement in the compiler, and this is an area where many people can usefully contribute.  For example, somebody asked about debug info above--this is mostly a compiler and linker issue.",
					"date": "2016-02-17",
					"id": "d03s8l7",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "enneff",
					"content": "The [HelpWanted label](https://github.com/golang/go/issues?utf8\u003d%E2%9C%93\u0026amp;q\u003dis%3Aissue+is%3Aopen+label%3Ahelpwanted) lists a bunch of issues that we need help with. Some of them are relatively straightforward and some are hard.\n\nNew issues are filed all the time and help with triaging and verifying those issues (getting more info from the reporter, etc) is always welcome.\n\nIn general, though, the best way to help Go is to improve the greater Go ecosystem by writing libraries, tools, articles, and so on. ",
					"date": "2016-02-17",
					"id": "d03shv5",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "nyoungman",
					"content": "One way to help triage Go issues is to sign up for the third-party tool CodeTriage. You can get one issue via email each day to take a look at. \n\nhttp://www.codetriage.com/golang/go",
					"date": "2016-02-17",
					"id": "d03sqtz",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "JDazzleGM",
					"content": "Hi!\n\nI\u0027ve been playing around with Go but I haven\u0027t found a good learning resource.  Are there any places you\u0027d recommend for those want to learn Go, along with good exercises?\n\nThanks!",
					"date": "2016-02-17",
					"id": "d03rlj7",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "enneff",
					"content": "The Tour is the canonical learning resource: https://tour.golang.org/\n\nThe codewalks are fun, and underutilized I feel: https://golang.org/doc/codewalk/\n\n[exercism.io](http://exercism.io/) is a fun site for practicing programming and getting feedback on your style. They have a strong Go track you can participate in.",
					"date": "2016-02-17",
					"id": "d03saiw",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "tiffanyfj",
					"content": "Dave Cheney put together a lot of good resources:\nhttp://dave.cheney.net/resources-for-new-go-programmers",
					"date": "2016-02-17",
					"id": "d03s54c",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Keblic",
					"content": "Congrats on the release!\n\nIn your [6 years post](http://blog.golang.org/6years) you mentioned:\n\n\u0026gt; Early next year we will release more improvements in Go 1.6, including ... an official package vendoring mechanism ...\n\nI was hoping that this went beyond the `GO15VENDOREXPERIMENT` and actually included an official package management tool.\n\nAre there any future plans to work towards this?",
					"date": "2016-02-17",
					"id": "d03s52m",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "enneff",
					"content": "I think the next step is to nail down the [vendor spec](https://github.com/kardianos/vendor-spec), a file format for describing dependencies. \n\nI\u0027m personally thinking about tools that can help with the greater vendoring story, but I don\u0027t have anything specific to discuss about it at this time.",
					"date": "2016-02-17",
					"id": "d03uqad",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "weitzj",
					"content": "What do you think of Gomobile? Will there be some focus on it? It feels like Hannah and David are most of the time on their own.\n\nThank you for Go",
					"date": "2016-02-17",
					"id": "d03sh89",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "shazow",
					"content": "- What is the roadmap for [golang.org/x/mobile](https://golang.org/x/mobile)?\n\nThere are a lot of great things in that package, and I have several experiments I\u0027ve prototyped against it but I\u0027m reluctant to commit until there is some clear future for the module.\n\nWill it ever be an officially supported module with some stability guarantees any time soon, or is it going to remain a testbed for experimental ideas for the foreseeable future? Any guidance on timeline and its intended future?\n\n- Any plans to go beyond just GL ES, when support is available?\n\n- Any plans to add windowing control when available (size, full screen, etc)? Possibly through some composition with x/exp/shiny?\n\n- Any plans for Vulkan? :D ([Some mentions here](https://github.com/golang/go/issues/11818#issuecomment-123697333), but I wonder if further planning materialized yet)",
					"date": "2016-02-18",
					"id": "d046giq",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "crawshaw",
					"content": "We don\u0027t have a roadmap right now.\n\nI personally intend to focus on x/exp/shiny for a while, part of which is maintaining the GL driver and the input event model.\n\nI don\u0027t expect to invest much beyond GL ES just yet, as while Vulkan is interesting, it will be a quite a while before it is generally usable across mobile operating systems. ES 3 is a possibility, but I won\u0027t build it myself until there is a need for it in shiny.",
					"date": "2016-02-18",
					"id": "d04de70",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dlsniper",
					"content": "What is a question (or set of questions) you\u0027d like to be asked and talk about but it never (or rarely) happens? Or anything that you\u0027d like to share with the Gophers in general?",
					"date": "2016-02-18",
					"id": "d04bxgj",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "rsc",
					"content": "This is not the answer to a question, but I think it\u0027s an important and relevant observation about the socialization of ideas and systems.\n\nOne of the perks of working on Go these past years has been the chance to have many great discussions with other language designers and implementers, for example about how well various design decisions worked out or the common problems of implementing what look like very different languages (for example both Go and Haskell need some kind of “green threads”, so there are more shared runtime challenges than you might expect). In one such conversation, when I was talking to a group of early Lisp hackers, one of them pointed out that these discussions are basically never dogmatic. Designers and implementers remember working through the good arguments on both sides of a particular decision, and they\u0027re often eager to hear about someone else\u0027s experience with what happens when you make that decision differently. Contrast that kind of discussion with the heated arguments or overly zealous statements you sometimes see from users of the same languages. There\u0027s a real disconnect, possibly because the users don\u0027t have the experience of weighing the arguments on both sides and don\u0027t realize how easily a particular decision might have gone the other way.\n\nLanguage design and implementation is engineering. We make decisions using evaluations of costs and benefits or, if we must, using predictions of those based on past experience. I think we have an important responsibility to explain both sides of a particular decision, to make clear that the arguments for an alternate decision are actually good ones that we weighed and balanced, and to avoid the suggestion that particular design decisions approach dogma. I hope this AMA as well as discussion on golang-nuts or StackOverflow or the Go Forum or at conferences help with that.\n\nBut we need help from everyone. Remember that none of the decisions in Go are infallible; they\u0027re just our best attempts at the time we made them, not wisdom received on stone tablets. If someone asks why Go does X instead of Y, please try to present the engineering reasons fairly, including for Y, and avoid argument solely by appeal to authority. It\u0027s too easy to fall into the \"well that\u0027s just not how it\u0027s done here\" trap. And now that I know about and watch for that trap, I see it in nearly every technical community, although some more than others.\n\nThanks.\n",
					"date": "2016-02-19",
					"id": "d05yyde",
					"isArchived": true,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "mibk",
					"content": "I just want to thank all Go contributors, especially the people who designed the language. The only downside of Go, as I see it, is that now I hate every other language.",
					"date": "2016-02-18",
					"id": "d04a16m",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "gorpherder",
					"content": "Any chance someone will fix https://github.com/golang/go/issues/9869 ? the resulting heap fragmentation is an issue when you have a model similar to the golang http server which forks a goroutine per request.  if you subsequently create a bunch of goroutines eventually the heap can become quite fragmented.\n\nThere are other ways to model the code but this seems like an obvious candidate for fixing in 1.7 (or at least mitigating - prevent fragmentation by using a dedicated allocator for the structures).\n\nbtw, thank you for Go.  if you\u0027re in mountain view there are a number of people who would be happy to buy you guys a beer.",
					"date": "2016-02-17",
					"id": "d03s81q",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "ianlancetaylor",
					"content": "It\u0027s a known problem (obviously) but it hasn\u0027t seemed high priority, at least not to me.  it\u0027s only a problem for a long-running program that has a one-time spike in the number of goroutines.  If you regularly spike the number of goroutines, that memory is being used.\n\nI mean, I\u0027d be happy to see it fixed, but is it really causing you trouble?",
					"date": "2016-02-17",
					"id": "d03ucpi",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "vruin",
					"content": "If hypothetically you could only program in 2 languages, which other language do you think would complement Go better and why?",
					"date": "2016-02-17",
					"id": "d03su3z",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "bradfitz",
					"content": "Let me modify the question a bit:\n\n\u0026gt; If hypothetically you could only use programs written in 2 languages, which other language do you think would complement Go better and why?\n\nI would pick Rust and Go. Rust can replace all the buggy C code out there (looking at you, CVE-2015-7547, and so many similar ones) and I can then only write in Go, and stop worrying about buggy C code on my computers.",
					"date": "2016-02-18",
					"id": "d03wav1",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "joetsai",
					"content": "That\u0027s interesting. I\u0027ve heard people compare and contrast Go and Rust as if they\u0027re competitors, but you seem to be treat them as complimentary.\n\nI\u0027ve never worked with Rust before, what would you find Rust to good at that Go wasn\u0027t suitable for?",
					"date": "2016-02-18",
					"id": "d03wtq5",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "ianlancetaylor",
					"content": "I don\u0027t see Go and Rust as significant competitors.  I think that in practice they will be used for different kinds of programs.",
					"date": "2016-02-18",
					"id": "d03y647",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "bradfitz",
					"content": "While Go is much safer than C, Rust is even more safe than Go.\n\nUnlike Go, Rust doesn\u0027t permit data races.\n\nThat safety comes with a fun-to-hack-with penalty though (IMO). Usually I can just be careful or use tools to find bugs via static analysis or runtime checks (e.g. Go\u0027s race detector), but it\u0027s nice to know a safer option like Rust exists.\n",
					"date": "2016-02-18",
					"id": "d03x2ce",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "4ad",
					"content": "Shell script, because it\u0027s easy to compose things out of smaller things.",
					"date": "2016-02-17",
					"id": "d03tdr9",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "enneff",
					"content": "Seconded. Go and shell are what I use most these days.",
					"date": "2016-02-17",
					"id": "d03uh64",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "847203413",
					"content": "Hi,\nthanks for the 1.6 release.\n\nA few questions:\n\n1. Are the any updates on generating Go code with Go (https://www.reddit.com/r/golang/comments/3680i6/generating_code_from_scratch/crcf98r)?\n2. What was the decision behind not adding syntactic sugar around maps and slices. For example a \"in\" keyword to check if an element is in a slice, or a convenient way to get the keys of a map as a slice?\n3. I think I read somewhere that the garbage collector will be reworked for Go 1.8? How, why and where can I find out more?",
					"date": "2016-02-17",
					"id": "d03sxk6",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "broady",
					"content": "I wasn\u0027t there for the original decision, but sugar like an `in` keyword would disguise the fact that presence test in a slice is an O(n) operation. That\u0027s not good.",
					"date": "2016-02-17",
					"id": "d03u4ba",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "TheMerovius",
					"content": "As anecdotal evidence: I was tutoring an introductory algorithm class which was held in python. People using `in` on lists and accidentally making a linear algorithm quadratic (or similar) easily made up 80% of the mistakes I had to correct.",
					"date": "2016-02-18",
					"id": "d03ve3f",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "dsymonds",
					"content": "I was there for some of the discussions, and can confirm that that was exactly the concern. Go tries to be reasonably transparent to read. This is also a reason why Go doesn\u0027t have operator overloading: it hides the expense of something that might otherwise be expected to be cheap.",
					"date": "2016-02-17",
					"id": "d03ub23",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "aclements",
					"content": "I wouldn\u0027t say we\u0027re planning to \"rework\" the garbage collector in the next few releases, but we are planning to keep improving it. In particular, we\u0027re focusing on GC throughput for the new few releases. We have an algorithm for efficiently garbage collecting objects that are never shared between goroutines, which we think will make the garbage collector much more efficient for HTTP and RPC-style servers. We\u0027re prototyping this now and plan to send a document about it to golang-dev in the near future once we\u0027ve hashed it out more.",
					"date": "2016-02-18",
					"id": "d03zw24",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "rsc",
					"content": "Re 1, no, I don\u0027t believe so. I\u0027ve spent a while using go/ast to refactor code (for example rsc.io/grind) and I found that just printing the code I wanted was much easier than trying to generate AST structures. It\u0027s fairly easy to print the code directly, since Go doesn\u0027t have many structural gotchas, and you can pass the result through gofmt easily enough, so I don\u0027t see significant benefit to using the AST form in a generator.\n\nIn a code rewriter starting with the AST form, it would be nice if modifying the AST worked better than it does today. Our focus is on other things, so the situation probably won\u0027t change soon. For [rsc.io/grind](https://godoc.org/rsc.io/grind), I used the position information in the AST to generate a list of textual edits I wanted to make and then applied them to the original source code bytes. That worked much better for me than AST manipulation, for what that\u0027s worth.",
					"date": "2016-02-18",
					"id": "d045ewt",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Entropy",
					"content": "Any updates on [plugin support](https://docs.google.com/document/d/1nr-TQHw_er6GOQRsF6T43GGhFDelrAP0NqSS_00RgZQ/edit?pli\u003d1#)? Specifically, the \"Go code as a shared library plugin with a Go style API\" and the \"Go code that uses a shared library plugin\" portions.",
					"date": "2016-02-18",
					"id": "d042wmk",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "ianlancetaylor",
					"content": "I would like to see this but I\u0027m not aware of anybody actively working on it.  We have all the pieces but it\u0027s a bit tricky in that it requires some careful thought to make sure that everything works if the same package appears in both the main executable and the plugin.",
					"date": "2016-02-18",
					"id": "d045gf4",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "1107d7",
					"content": "Howdy Golang team! Thanks for 1.6. When I was debugging the http2 library back when it was homed on github, it was hard to test because the httptest.NewRecorder() was unable to record http2.\n\nHas this changed? What is the canonical way to record http2 for play back in tests?\n\nedit: https://github.com/golang/net/blob/master/http2/server_test.go\n\nThanks again!",
					"date": "2016-02-17",
					"id": "d03t4i1",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "Congrats on the release.\n\nIs there any chance to create AndroidGo without Java?\n\nThank you all.",
					"date": "2016-02-17",
					"id": "d03tjc1",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "enneff",
					"content": "The [/x/mobile/app](https://godoc.org/golang.org/x/mobile/app) package is the entry point for a framework for developing native Go apps on Android. \n\nYou might find Hana Kim\u0027s [talk from GopherCon](https://www.youtube.com/watch?v\u003dsQ6-HyPxHKg) interesting.",
					"date": "2016-02-18",
					"id": "d03w64r",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "SportingSnow21",
					"content": "Congratulations on the 1.6 release and thank you for all the work you\u0027ve put into it.\n\nAre there any plans to add higher-level vectorization instructions/optimizations into the compiler/assembler?  I understand that this wouldn\u0027t be default (cross-compiler guarantees and the like) but more likely a compiler flag.",
					"date": "2016-02-18",
					"id": "d03yujv",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "joetsai",
					"content": "There was [work on a proposal](https://groups.google.com/forum/#!searchin/golang-nuts/intrinsics/golang-nuts/yVOfeHYCIT4/7L_mffslT84J) by /u/klauspost for intrinsics support. As far as I know, I haven\u0027t seen a full proposal sent out yet. I would love to see some easy way to use vector instructions (without dealing with assembly myself), but yet also done in a way that it doesn\u0027t dirty up the language. As in the proposal, separating access to intrinsics by package seems promising.",
					"date": "2016-02-18",
					"id": "d03z39w",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Dieter_be",
					"content": "Hi! Thank you so much for your continued investment in Go and its community. I was wondering how improvements in escape analysis may fit into the roadmap? Is this something that will be part of the SSA effort? I can imagine (and would understand) escape analysis improvements may not be very high prio, but i\u0027m still curious. Thanks.",
					"date": "2016-02-18",
					"id": "d043gdy",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "ianlancetaylor",
					"content": "There are some improvements in escape analysis in the 1.6 compiler, mostly by David Chase, and there will most likely be more in 1.7.  This is currently pretty much independent of the SSA compiler, although perhaps in the future it will be to take advantage of SSA information.\n\nIf you have any specific suggestions for additional forms of escape analysis, please open an issue.  I\u0027m sure there are things we haven\u0027t thought of.",
					"date": "2016-02-18",
					"id": "d045idj",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "bestform",
					"content": "Hey! Is there any chance we will see another episode of \"Hacking with Andrew and Brad\" anytime soon? I really enjoyed the two episodes that you\u0027ve published so far.",
					"date": "2016-02-18",
					"id": "d04lbmy",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "giovannibajo",
					"content": "Congrats on the 1.6 release!\n\n * Even without generics, I feel like Go could use a few builtin \"generic functions\", that is general basic function algorithms operating on builtin generics (slices and maps). Common examples that I happen to rewrite often are: sum(), min(), max(), any(), all(), index() (aka search()), plus keys() and values() for maps. Many of these would actually make code significantly more easy to read and reason about (even for people watching Go code for the first time). Without necessarily discussing any of my examples, what is the stance of the Go maintainers on adding builtin functions like these to the language? It doesn\u0027t sound like they would make the language itself bigger (they don\u0027t affect the syntax), nor they can be said to hide complexity (I don\u0027t think people will assume that a function call is expected to necessarily be O(1)).\n\n * Has there ever been any significant discuss on adding operator overloading to Go, even just for math operations and just between instances of the same struct? The Go FAQ basically says \"they\u0027re syntactic sugar so we can go without them\". While this is true, they\u0027re a basic need for any kind of serious scientific work. Just a few days I had to write this monstrosity: `mirror.SubFixed(vtx.cy.AddFixed(vtx.cw)).MulFixed(dy).AddFixed(vy0)` which would be `(mirror - (vtx.cy + vtx.cw)) * dy + vy0` with operator overloading.\n",
					"date": "2016-02-18",
					"id": "d03zih1",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "enneff",
					"content": "\u0026gt; Without necessarily discussing any of my examples, what is the stance of the Go maintainers on adding builtin functions like these to the language? \n\nI don\u0027t object on principle, except that I worry that it is a slippery slope. It\u0027s hard to know where to draw the line with such helpers. If the line were clear I\u0027d be more comfortable with the idea. The helpers I would want personally are `keys` and `values` for maps, but I don\u0027t find writing the loops particularly onerous either.",
					"date": "2016-02-18",
					"id": "d041vhb",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "ianlancetaylor",
					"content": "I more or less object on principle.  I think that the only functions that should be builtin are those that can take special advantage of the runtime.  That is true of all the current functions except, arguably, copy.  (The append function uses its knowledge of the memory allocation routines to decide how large the make the slice when it needs to grow.)",
					"date": "2016-02-18",
					"id": "d045eiu",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "giovannibajo",
					"content": "What is the rationale for your position? A programming language, however minimal, isn\u0027t about providing a minimal turing-complete-like set of functionalities to build upon, but also provide good fundamentals. \n\nI would agree those functions don\u0027t *need* to be builtins, they would be perfectly fine as part of a standard library package, but unfortunately it is not possible to write those functions in normal Go (which is exactly the reason why the only solution is that the language should provide them).\n\nIt looks like you\u0027re post-projecting a rationale into the current builtin set, that wasn\u0027t decided in advance. ",
					"date": "2016-02-18",
					"id": "d04fpfu",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "ianlancetaylor",
					"content": "I\u0027m not post-projecting, I\u0027ve been arguing this position from the beginning.  I used it against copy and append, but the consensus went against me.\n\nMy rationale is that once you start adding builtin functions for things that can be easily written in the language, there is nowhere to draw the line.  What should we look at to decide whether a function should go into the language or not?  What stops us from implementing the entire C++ STL, only in the language itself rather than as a library?\n\nI think that before starting down any such path, there needs to be a clear basis for deciding what goes in and what doesn\u0027t.  I\u0027ve outlined one such position: only add functions that can take special advantage of the runtime.  Do you have a different proposal?",
					"date": "2016-02-18",
					"id": "d04o9f4",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "srnull",
					"content": "I know this is a predictable and tired topic, but I think I have a somewhat unusual question on the generics front.\n\nI totally understand the [current stance on generic](https://golang.org/doc/faq#generics), but there has been significant confusion in the wider community (those paying some attention to Go, but perhaps not yet using) about whether the investigation into having some form of generics in the future is at all serious.\n\nLots of people claim they\u0027re never happening. Plenty of us point to the more subtle reasoning shown in the FAQ - that they\u0027ll possibly be implemented if an agreeable design is found.\n\nSo which is it? Is there any serious attention being paid to designs for generics in Go N.x, N \u0026gt; 1? That is, what does \"...we continue to think about it...\" as stated in the FAQ mean?\n\nThanks",
					"date": "2016-02-17",
					"id": "d03t5ew",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "dsymonds",
					"content": "Some people on the Go team have sunk considerable time in producing generics proposals, but they\u0027ve all had serious drawbacks. I\u0027m hoping those proposals will be published at some point so people can see the depth of complexity that generics bring; it\u0027s almost always underestimated.",
					"date": "2016-02-17",
					"id": "d03tsxw",
					"isArchived": true,
					"isControversial": false,
					"score": 40
				},
				{
					"author": "srnull",
					"content": "Thanks for the reply.\n\nWould be awesome to read those proposals. I\u0027m sure there are a lot of people like me who have an interest in programming language design but don\u0027t have the opportunity to get our hands dirty with it very often or in much depth.",
					"date": "2016-02-18",
					"id": "d03vgwe",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "joetsai",
					"content": "The [Summary of Go Generics](https://docs.google.com/document/d/1vrAy9gMpMoS3uaVphB32uVXX4pi-HnNjkMEgyAHX4N4/edit#) document contains many helpful insights into why Generics are not in Go.\n\nRuss\u0027 comment: \"The Go team is not against generics per se, only against doing things that are not well understood and/or don\u0027t work well with Go.\" pretty much summarizes the current situation.\n\nI, for one, would love to see generics be in Go, but personally I\u0027m not terribly bothered by the lack of generics. I would much rather see a potentially far better implementation in the future, than one today that has many of the problems with C++ or Java generics (they make for great difficult exam questions, but terrible developer experience).",
					"date": "2016-02-17",
					"id": "d03tgpy",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-02-17",
					"id": "d03rsr0",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "ianlancetaylor",
					"content": "These are fair questions, and we don\u0027t have good answers for them.\n\nMost people working in Go seem to only encounter these problems in a very small form (e.g., the sort.Sort interface) where the code copying, while slightly annoying, is no big deal.  That is, the copied code is small, trivial to write, and clearly correct.\n\nA few people do encounter issues where code copying is larger scale and is not clearly correct, meaning that bugs may have to be fixed in multiple places.  We don\u0027t have a good solution for these cases.  it\u0027s a complicated space.  If we can figure it out, we will.  Many people have proposed solutions, but none have been wholly satisfactory.\n\nThere is an official code generation tool: `go generate`.  There are code generation tools that do what you suggest, but I don\u0027t know how widely they are used.  At this point we aren\u0027t planning to bring any into the official repository, though it\u0027s possible that will change in the future.",
					"date": "2016-02-17",
					"id": "d03spbr",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-02-17",
					"id": "d03szc6",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "nyoungman",
					"content": "Go is an imperative language. Yes, it has first-class functions, but many imperative languages do (Objective-C blocks, Java 8 lambdas). That doesn\u0027t make them functional languages. The style of code is quite different, and I don\u0027t expect Go will ever appeal to someone who prefers Haskell\u0027s style.\n\nHere is an example of implementing an algorithm in Go and Elixir. They are very different languages that work best for very different styles of programming: https://gist.github.com/nathany/723e6057e5c7c70e5772",
					"date": "2016-02-17",
					"id": "d03uy42",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "enneff",
					"content": "In addition to what Ian said, I just wanted to point to this one part of your post:\n\n\u0026gt; This problem is made even more difficult by the fact that every \u0027type\u0027 declaration creates a new type incompatible with the type it derived from in function calls without explicit casting.\n\nIf your functions take interfaces then there\u0027s no explicit casting necessary. That is the usual way to accept many implementations in Go.",
					"date": "2016-02-17",
					"id": "d03tasy",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "kune13",
					"content": "If you have repeatedly to write the same algorithm against different types check whether the commonality of the types can be expressed in an interface and then write your algorithm against this interface.\n\nWork hard to reduce the number of functions in the interface. The smaller the interface the more types can support it.",
					"date": "2016-02-17",
					"id": "d03tmxy",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "mustafaakin",
					"content": "Although I am used to write `printf` debugged code and unit tests for most functions, a proper debugger and some first class IDE love would attract more people. In my work, the people who wants to play safe avoids using Go even if it suits the job better than most other viable alternatives. Are there any plans for \"official\" debugging tools and IDEs? I know neither Java/C/Python has official IDEs, but even when we transition in to go1.5-\u0026gt;go1.6, you have to manually configure the gocode to include vendored packages for better code completion etc, so there becomes a delay. ",
					"date": "2016-02-17",
					"id": "d03rwq8",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "enneff",
					"content": "You should check out [Delve](https://github.com/derekparker/delve).",
					"date": "2016-02-18",
					"id": "d03w3d4",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "robpike",
					"content": "I second the mention for [Delve](https://github.com/derekparker/delve). It\u0027s great work and is not widely enough known.",
					"date": "2016-02-18",
					"id": "d03x5he",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "dlsniper",
					"content": "There\u0027s a Go plugin for IntelliJ Platform (every IDE from JetBrains) which is getting better and better each day. Just try it out. https://github.com/go-lang-plugin-org/go-lang-idea-plugin It has everything you are looking for in terms of debugging and IDE (even if it\u0027s not official from the Go team, which I don\u0027t think it should be anyway)",
					"date": "2016-02-17",
					"id": "d03s1oz",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "kalekold",
					"content": "Rob Pike said (during a talk) that he and the team were going to be working on a debugger for Go but not to get hopes too high as \"it may fail\". Is there any more information on this?",
					"date": "2016-02-17",
					"id": "d03suqm",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "robpike",
					"content": "The Go support in Google\u0027s Cloud Debugger project (https://cloud.google.com/debugger/) builds on that work and is in active development.",
					"date": "2016-02-18",
					"id": "d03x39s",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "dsymonds",
					"content": "You might be interested in poking around inside https://go.googlesource.com/debug/.",
					"date": "2016-02-17",
					"id": "d03tzja",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "saturn_vk",
					"content": "Hi\n\nI have another question for you guys, something which I have wondered for a while. How come built in types such as strings don\u0027t have methods, but instead there are functions for them in specialized packages such as \u0027strings\u0027? Is this related to the \u0027type foo string\u0027 feature, and if so, how come the new types don\u0027t get these methods automatically, like an embedding type would?",
					"date": "2016-02-17",
					"id": "d03uukk",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "enneff",
					"content": "\u0026gt; How come built in types such as strings don\u0027t have methods, but instead there are functions for them in specialized packages such as \u0027strings\u0027?\n\nIf strings had built-in methods then those methods would need to be specified by the language spec. I think this was a smart move to keep the language spec small. It seems unnecessary to conflate built-in types with functionality that operates on those types. Programs can use the the `string` type without depending on the `strings` package.\n\n\u0026gt; Is this related to the \u0027type foo string\u0027 feature, and if so, how come the new types don\u0027t get these methods automatically, like an embedding type would?\n\nI think you\u0027re saying that `S` in `type S T` doesn\u0027t get the methods of `T`, while the `Q` in `type Q struct { T }` does get `T`\u0027s methods.\n\nOne reason for this is that the `T` in `type S T` is really just an alias for the underlying concrete type of `T`, while in `type Q struct { T }` the `T` is actually part of the struct `Q`. The methods of `T` in the latter case are still operating on a type `T`, not some alias of that type.",
					"date": "2016-02-18",
					"id": "d03wks7",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "spedru",
					"content": "When a release is allowed to break compatibility promises, what are going to be the first things to go out the window?",
					"date": "2016-02-18",
					"id": "d03vu0k",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "iends",
					"content": "Is pause-less GC a long term plan?\n",
					"date": "2016-02-18",
					"id": "d03ze82",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "aclements",
					"content": "It is not. We think that for the vast majority of systems (though certainly not all), pauses in the millisecond range are quite acceptable, while pause-less GC would likely harm the throughput of the systems that don\u0027t need it and would certainly dramatically increase the complexity of the runtime.",
					"date": "2016-02-18",
					"id": "d040ow6",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "horsebees",
					"content": "Internally, how do you advertise Go? I\u0027ve heard Dart is gaining traction; and I\u0027m sure some groups still reach for Java as a first choice. Do you go give talks? Is it completely organic? Are there standard internal wiki pages \"Why you should choose Go.\"?",
					"date": "2016-02-18",
					"id": "d043mpv",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "enneff",
					"content": "It\u0027s a combination of things. We give talks, run workshops, write internal articles, and consult with teams that are starting new projects to discuss how Go might work for them. We have an internal page of testimonials from groups who have used Go. Google\u0027s a big place, and we\u0027re always trying to find more ways to teach people about Go.\n\nBut I don\u0027t think awareness is really the main barrier to adoption. While Go is seeing widespread use inside Google, there are a lot of Googlers who *want* to use Go but are blocked for some technical reason (usually interoperability with an existing system). We (the Go team) spend a lot of time working on unblocking these people.",
					"date": "2016-02-18",
					"id": "d0442f7",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "mobiledevguy5554",
					"content": "Are there any plans to support multiple result sets in the SQL package?  I regularly build stored procedures that return multiple result sets and I cannot use them from Go",
					"date": "2016-02-18",
					"id": "d04giz4",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "lobster_johnson",
					"content": "Any plans for an iterator interface for `range`, so that one can use `range` to iterate over one\u0027s own struct types?",
					"date": "2016-02-19",
					"id": "d059rvf",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "rsc",
					"content": "I made the point in an [interview last year](http://www.pl-enthusiast.net/2015/03/25/interview-with-gos-russ-cox-and-sameer-ajmani/) that:\n\n\u0026gt; Go is more an engineering project than a pure research project. Like most engineering, it is fundamentally conservative, using ideas that are proven and well understood and will work well together. \n\nIt\u0027s true that we experiment with some things, but we try to make sure even those experiments are based on earlier experience that we are confident about drawing conclusions from.\n\nGo\u0027s initial design was based on Robert, Rob, and Ken\u0027s decades of software experience. Go 1\u0027s design (a much smaller delta) was based on a few years of experience with Go. Future changes are also likely to be small deltas, until we have enough experience with Go 1 to really understand what needs to change and what\u0027s working well enough. Stability is an important feature too. Changes have real costs to users. To give a sense, the last language change was to allow `for range { ... }` as shorthand for `for _ \u003d range { ... }`. \n\nA big change like introducing iterators is a ways out. Our current work is to assume the language is done and make the implementation very high quality. At some point in the future there will be time to circle back to language changes.\n\nAll that said, I do have one untested, unproven idea about how user-defined iterators might work. \n\nWe originally suggested that to iterate over a data structure, that data structure could have an `Iter() \u0026lt;-chan xxx` method that made a channeland kicked off a goroutine that fed values into and then closed the channel. Then you could just `range x.Iter()` and reuse the range support for channels. One problem here is that it puts channel operations, which are meant to be cheap but not free, in a position where code expects them to be free. Iterating over an array by sending its values over a channel will never compare with `for i :\u003d 0; i \u0026lt; n; i++ { use(x[i]) }`. A bigger problem is that if the body of the range statement breaks out of the loop, the iterating goroutine will block sending values to the channel that will never be read, and so the goroutine will never exit: a goroutine leak. We no longer suggest this.\n\nHowever, the reason the goroutine was so attractive is that it solved a real problem in the iterators of C++, Python, and other languages: recursion is a natural way to iterate over many data structures, yet iterator implementations are effectively barred from using recursion or keeping other state stored on the stack. In the old Go iterator suggestion, you could create an in-order binary tree iterator like this:\n\n\tfunc iter(t *tree, c chan\u0026lt;- int) {\n\t\tif t.left !\u003d nil {\n\t\t\titer(t.left, c)\n\t\t}\n\t\tc \u0026lt;- t.value\n\t\tif t.right !\u003d nil {\n\t\t\titer(t.right, c)\n\t\t}\n\t}\n\nBut in C++ you\u0027d have to put that state into an explicit data structure instead. \n\nPython helps a little more. The obvious generator is wrong:\n\n\tdef generate_tree(t):\n\t    if t.left:\n\t        generate_tree(t.left)\n\t    yield t.value\n\t    if t.right:\n\t        generate_tree(t.right)\n\nbut you can save it by replacing each recursive call F() with \u0027for x in F(): yield x\u0027:\n\n\tdef generate_tree(t):\n\t    if t.left:\n\t        for v in generate_tree(t.left):\n\t            yield v\n\t    yield t.value\n\t    if t.right:\n\t        for v in generate_tree(t.right):\n\t            yield v\n\nThis works because Python has a special case for generator functions to allow the appearance of one stack frame worth of state: it effectively moves that one frame into a data structure off the stack. The inner for loops added in the second snippet link that one stack frame\u0027s data structure to the recursive stack frame\u0027s data structure, effectively (but clunkily) creating a separate stack mirroring the tree structure.\n\nThe Go goroutine+channel idiom avoids the clunky re-looping and the separate data structure, at the (significant) cost of a separate goroutine that might potentially never exit.\n\nAn different solution for Go might be to let the iterator make callbacks to the range body. A range statement of the form\n\n\tfor x :\u003d range iter {\n\t\tif something {\n\t\t\tbreak\n\t\t}\n\t\t... more ...\n\t}\n\nwhere iter has type `func(func(x T) bool) bool` would compile into\n\n\titer(func(x T) bool {\n\t\tif something {\n\t\t\treturn false\n\t\t}\n\t\t... more ...\n\t\treturn true\n\t})\n\nAnd the implementation of iter would be expected to invoke the callback (execute the range body) for each value in the collection:\n\n\tfunc (t *tree) iter(f func(T) bool) bool {\n\t\treturn (t.left \u003d\u003d nil || t.left.iter(f)) \u0026amp;\u0026amp;\n\t\t\tf(t.value) \u0026amp;\u0026amp;\n\t\t\t(t.right \u003d\u003d nil || t.right.iter(f))\n\t}\n\nThis puts a fair amount of responsibility on the iterator, but not nearly as much as forcing it not to use the stack. There are some possible serious problems here, not least of which is that the original for loop looks like it\u0027s in one function but in fact the code inside the loop is in a different function. Getting that right (which is to say hiding that fact) with panic and recover and the like is not obviously possible, but maybe it is.\n\nIs it a good idea overall? I don\u0027t know. It\u0027s not something we\u0027d consider doing today anyway, so I haven\u0027t spent much time really thinking about it. But maybe at some point it will be time, and this might or might not turn out to be a good idea.\n\nNote that this does not directly solve the [same fringe problem](http://c2.com/cgi/wiki?SameFringeProblem), since it provides no way to run two iterators in lockstep. That fundamentally requires two independent stacks (or two independent stack data structures). But if that\u0027s the problem you need to solve, maybe you\u0027re [okay with using goroutines and channels](https://tour.golang.org/concurrency/7).\n",
					"date": "2016-02-19",
					"id": "d05gddl",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "snuggles166",
					"content": "Congrats on the release!\n\nRepost from [here](https://news.ycombinator.com/item?id\u003d11122023)\n\nI\u0027ve really enjoyed the time I\u0027ve spent with Go but feel like the state of dependency management has kept me away.\n\nAm I being stubborn in my longing for an npm, Ruby Gems, or pip? Is there a reason why one of these hasn\u0027t emerged/been adopted by the community? (I\u0027m aware of the 1.5 experiment with vendoring.)\n\nSemver and pinning versions has always just made sense to me. I can easily adopt new features and fixes automatically without worrying about things breaking.\n\nHow does the community feel this far along?",
					"date": "2016-02-17",
					"id": "d03rmar",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "broady",
					"content": "Thankfully, there are many good solutions (Godep, gb, govendor, etc). The community has not settled on just one.\n\nSupport for vendored paths/packages (\"new\" in Go 1.6) in the `go` tool is a big step forward already.\n\nIn a future release, perhaps the `go` tool will include a way to download packages into a `vendor` directory and pin them to a version. If you\u0027d like to contribute, please check these proposals first:\n\n* https://github.com/golang/go/issues/13700\n* https://github.com/golang/go/issues/13517\n* https://github.com/golang/go/issues/13483",
					"date": "2016-02-17",
					"id": "d03ssxn",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "_yageek",
					"content": "Congrats for the 1.6 :)\n\nOne question regarding net/http: Is a new version of ServeMux planned or will the golang team provide a new performant router package ?",
					"date": "2016-02-17",
					"id": "d03rqvt",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "broady",
					"content": "In addition to what Ian said (if there are problems, including with performance, file a bug)...\n\nIf you need a high performance router, take a look at [`httprouter`](https://github.com/julienschmidt/httprouter).",
					"date": "2016-02-17",
					"id": "d03tbo9",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "rsc",
					"content": "It\u0027s important to understand that http.ServeMux has different constraints from alternative routers, because it\u0027s the one (almost) forced on developers by use in the standard library. \n\nThe primary constraint was that it be an effective way to let different pieces of code independently claim and serve different pieces of the web server URL space. That is, it was important that each package be able to stake its claim independently, like net/http/pprof registers /debug/pprof, without having undiagnosed conflicts. That\u0027s why the disambiguation in ServeMux is based on specificity (length) of pattern instead of the more usual registration order. If something registers / and then net/http/pprof registers /debug/pprof, it\u0027s not OK to just ignore the second registration, _especially_ if packages are doing the registration in init functions and the relative ordering of the init execution isn\u0027t even obvious. The constraint that there be a way to compare specificity of pattern limits the expressivity of the patterns. Simple path prefixes seemed clearly comparable and likely sufficient, and that\u0027s turned out to be the case, for the most part. \n\nA secondary constraint is that ServeMux be simple and lightweight enough that it\u0027s fine to be present in most servers. Simple path prefixes helped with that too.\n\nIn retrospect, there are of course things I wish I\u0027d done differently, mainly due to web development shifting from what was common in the mid-2000s. I understood that path prefixes made it impossible to register only a \"/\" page without also registering all other unregistered URLs, but it has been the rise of [single-page applications](https://en.wikipedia.org/wiki/Single-page_application) that really made that an important problem. Similarly, the decision to use unescaped URLs in the API has been overall very helpful: no handler has to worry about turning index%2Ehtml into index.html, for example. The one place it fails, and badly, is caused by the shift to a very specific form of REST in which arbitrary strings are shoehorned into single URL path elements, making it critical to distinguish a request for /serve/my/file/now from /serve/my%2Ffile/now. One way to alleviate that would be to add basic wildcard extraction support to ServeMux, so that a package could register /serve/*/now and then while handling the request for /serve/my%2Ffile/now find out that * matched \"my/file\".\n\nI spent a few days last December trying to understand how introducing wildcards would interact with the specificity constraint. I was surprised to learn that the general check of \"does this pattern match strictly fewer strings than this other one\" can be computationally very expensive. Limiting your pattern to just \"*\" as a single path element keeps the check trivial; with globs as in package path, the check may still be efficient, but I\u0027m not completely sure; and with arbitrary regexps the check is far too expensive, something like NP-complete. Of course, perhaps one could avoid the check, by doing something like requiring each registered pattern to use a different literal prefix before its first wildcard, and disambiguate based on the length of that literal prefix. If ServeMux did add some kind of patterns to support extraction and solve the server-side %2F problem, it would be a chance to fix the \"/ matches everything\" problem too.\n\nI never made any serious attempt to make ServeMux fast, under the assumption that there would be few patterns and that the associated network I/O of serving a request would cost significantly more than the pattern checks anyway. I still think that\u0027s probably true most of the time, but I also think that with only a small amount more complexity and a small amount more memory, ServeMux could be made significantly faster. The httprouter package is well done and runs fast, but it uses more memory than I would prefer to spend: I think ServeMux could probably get the bulk of the speedup for a fraction of the memory cost. \n\nAt the same time, I don\u0027t see ServeMux expanding its API to include all the kinds of matches that httprouter can, like arbitrary HTTP request headers. It was always part of the plan that there would be other dispatch mechanisms built by users for their custom needs. ServeMux sets the example of Handlers in and Handlers out precisely to encourage this kind of chaining, similar to the what Rob\u0027s [early window systems](https://swtch.com/~rsc/thread/cws.pdf) did for the keyboard, mouse, and screen.\n\nServeMux and Handlers are an example of the standard library trying to do just enough to get everyone on the same page, to create space for and encourage interoperation and collaboration. It\u0027s worked really well for HTTP: most middleware packages I see embrace Handler instead of rolling their own and causing fragmentation, and so I don\u0027t think it\u0027s at all a bad thing that there are other routers available. I talked a bit about this general topic in my Gophercon keynote, [Go, Open Source, Community](https://blog.golang.org/open-source).",
					"date": "2016-02-19",
					"id": "d05lewi",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "bradfitz",
					"content": "There are no plans to add new features or a new router type to net/http. The standard library is increasingly frozen at this point.\n\nBut if there are performance problems, we\u0027re happy to fix or review fixes for ServeMux.\n\nIf you want fancy features, there are plenty of muxes to choose from elsewhere. Not everything needs to live in the standard library.",
					"date": "2016-02-18",
					"id": "d03w3dp",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "ianlancetaylor",
					"content": "I\u0027m not aware of any current plans for a new version of ServeMux, nor am I aware of any need for one.  If there are problems with the current ServeMux, please open issues about them at https://golang.org/issue.",
					"date": "2016-02-17",
					"id": "d03sgk5",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Jhsto",
					"content": "Would you rather fight one horse sized gopher or 100 gopher sized horses?",
					"date": "2016-02-17",
					"id": "d03rmv9",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "rsc",
					"content": "It depends: are the 100 gopher-sized horses communicating?\n",
					"date": "2016-02-18",
					"id": "d0453tw",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "DeedleFake",
					"content": "Yes, but they\u0027re doing so by sharing memory.",
					"date": "2016-02-18",
					"id": "d04l61y",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "PsyWolf",
					"content": "Of course they are.  Why do you think they call it Hoare\u0027s CSP?",
					"date": "2016-02-18",
					"id": "d04kzyv",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dsymonds",
					"content": "I\u0027d prefer 100 gopher sized horses. They\u0027ll get in each other\u0027s way, so you\u0027d really only be facing around 10-20 at a time.",
					"date": "2016-02-17",
					"id": "d03u69l",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "enneff",
					"content": "Just speaking for myself, but definitely one horse-sized gopher. Horses bite.",
					"date": "2016-02-17",
					"id": "d03rofq",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "ianlancetaylor",
					"content": "I would have to go for the 100 gopher sized horses.  A horse can easily weigh 1000 pounds or more, but a gopher only weighs half a pound or so (source: the Internet).  So given a choice of facing 50 pounds or 1000 pounds, well, I\u0027m going to go for the 50 pounds.",
					"date": "2016-02-17",
					"id": "d03sc4y",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-02-17",
					"id": "d03scb8",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "enneff",
					"content": "It would be great to know the specific limitations you\u0027re working with.",
					"date": "2016-02-17",
					"id": "d03v59p",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "bradfitz",
					"content": "I have the same question as 4ad and enneff. \n\nAs one counter point, PayPal launched ARM-based hardware running Go: http://techcrunch.com/2013/09/09/paypal-debuts-its-newest-hardware-beacon-a-bluetooth-le-enabled-device-for-hands-free-check-ins-and-payments/ Maybe you\u0027re working with something smaller, but how small?\n\nIf you have many binaries, you can combine them into one, busybox-style.",
					"date": "2016-02-18",
					"id": "d03vn0q",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "4ad",
					"content": "How small?\n",
					"date": "2016-02-17",
					"id": "d03sqgg",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "nyoungman",
					"content": "One of the potential benefits of the SSA compiler planned for Go 1.7 is reducing the size of binaries (see the SSA question in this thread).",
					"date": "2016-02-17",
					"id": "d03sw7z",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "foresmac",
					"content": "Any tips for increasing code coverage with unit tests? And/or, considered adding a mock pkg to the standard libs?",
					"date": "2016-02-17",
					"id": "d03rht9",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "ianlancetaylor",
					"content": "There is a mock package over at http://github.com/golang/mock.  it\u0027s not in the official standard library, but it\u0027s supported and it works.  (Edited to say that it is not in the official standard library--I managed to omit the word \"not\"--sorry!).",
					"date": "2016-02-17",
					"id": "d03segg",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "nyoungman",
					"content": "Have you already discovered the [coverage](https://blog.golang.org/cover) tool for checking your code coverage?\n\nIf you use interfaces or first-class functions assigned to a global var, it\u0027s pretty easy to mock things out in your tests. There are also dedicated testing tools like httptest in the standard library, which runs a test server useful for testing an HTTP client.",
					"date": "2016-02-17",
					"id": "d03rwwj",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				}
			]
		},
		{
			"author": "dgryski",
			"date": "2016-09-15",
			"id": "52y47n",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "I\u0027m joining the Go team at Google : spf13.com",
			"comments": [
				{
					"author": "yelnatz",
					"content": "Forever thankful to this guy for making [Hugo](https://github.com/spf13/hugo).",
					"date": "2016-09-15",
					"id": "d7oc19s",
					"isArchived": true,
					"isControversial": false,
					"score": 42
				},
				{
					"author": "SportingSnow21",
					"content": "Congratulations /u/spf13!\n\nGood luck!  After the success of Hugo, you should slot in well. ",
					"date": "2016-09-16",
					"id": "d7orfq4",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "weberc2",
					"content": "Best of luck to you /u/spf13!",
					"date": "2016-09-15",
					"id": "d7oh1hq",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "natefinch",
					"content": "I\u0027m going to type congrats on every social media site this gets posted, because it\u0027s that awesome.",
					"date": "2016-09-15",
					"id": "d7oc1iq",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "aboukirev",
					"content": "Awesome, Steve.  Do what you love and enjoy doing professionally. ",
					"date": "2016-09-15",
					"id": "d7ocoj6",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "google_you",
					"content": "Add \n\n- generics\n- sane package management\n\nRemove\n\n- GOPATH\n- go15vendorexperiment\n",
					"date": "2016-09-16",
					"id": "d7p55n5",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "earthboundkid",
					"content": "GOPATH is good. Trying to use Python, Ruby, and Node has convinced me that not having the equivalent of a GOPATH is a disaster in terms of coding importing conventions.",
					"date": "2016-09-16",
					"id": "d7pcdm2",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "google_you",
					"content": "Show us example of the disaster in terms of coding importing conventions.",
					"date": "2016-09-17",
					"id": "d7qh56q",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "earthboundkid",
					"content": "Let\u0027s say I want to install a Python/Ruby/Node command line app and it depends on packages X v1 and Y v2. Now I want to install another package, and it depends on X v2 and Y v1. You can work around this in Python with virtual env and Ruby with bundler, and NPM just installs a million copies of everything, but these are all hacks put on top of the core thing. You just want a single command line tool but instead you have this huge directory tree of dependencies. Even without static compilation (which would be the best), a GOPATH-like way of specifying _hey for this command line util, look for dependencies in this directory_ would help a lot.\n\nPRN are in this weird situation where they have a great syntax for writing command line utils, but the distribution is such a pain in the ass that any util that depends on more than the standard library is more trouble to install than it is worth.",
					"date": "2016-09-17",
					"id": "d7qio0l",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "google_you",
					"content": "What does packaging, distribution, and installation have to do with \"coding importing conventions\"?\n\nYou can always override module search path with PYTHONPATH or NODE_PATH (not sure about Ruby)  if environment variable is your thing. Or you can programmically change module resolution as well. Those are dynamic languages.\n\nYes, those languages come with arguably more feature rich package management tools so that you\u0027re not too concerned about including all dependencies in your package: one command to install your cli program and all of its dependencies.\n\nI\u0027m not sure if it is planned,  but once Go supports linking to runtime shared libraries, you\u0027ll end up with the same problem with packaging, distribution, and installation regarding where the runtime shared libraries are looked up from (LD_LIBRARY_PATH, for example)\n",
					"date": "2016-09-17",
					"id": "d7qkmkb",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "martijnve",
					"content": "I\u0027m not touching the generics discussion with a ten foot pole but I completely agree with the other three points you mention. :-P",
					"date": "2016-09-16",
					"id": "d7paruo",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "SaudiMoneyClintons",
					"content": "Yes please GOPATH is not very intuitive. I love golang I hate how you set it up :(",
					"date": "2016-09-16",
					"id": "d7psaoj",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "ChristophBerger",
					"content": "GOPATH is set-and-forget. And to me, it is intuitive. You always know where your sources and your binaries are. Plus, many tools work painlessly just because they can rely on GOPATH.",
					"date": "2016-09-17",
					"id": "d7qdbdj",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "tdewolff",
					"content": "Add generics? That\u0027s .. new",
					"date": "2016-09-16",
					"id": "d7p6b9d",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jakub_h",
					"content": "I\u0027d rather add a metalanguage. Then everyone can write any generic code to his heart\u0027s desire! I\u0027ve even thought of hijacking the import strings for higher-order modules.",
					"date": "2016-09-17",
					"id": "d7qnxib",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Uncaffeinated",
					"content": "[It\u0027s been done before](http://bouk.co/blog/idiomatic-generics-in-go/)\n\n",
					"date": "2016-09-18",
					"id": "d7racvd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jakub_h",
					"content": "All problems in computer science can be solved by another level of indirection! ;)",
					"date": "2016-09-18",
					"id": "d7rnyjp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gogolang",
					"content": "Try https://playground.oden-lang.org/ -- functional language that compiles to Go. Use that to do the stuff where generics are helpful (Set operations, etc) and use plain old Go for everything else. ",
					"date": "2016-09-20",
					"id": "d7u0inz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "andrei_",
					"content": "dude....generics are the bee\u0027s knees",
					"date": "2016-09-16",
					"id": "d7p6ehn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "Get out.",
					"date": "2016-09-17",
					"id": "d7q7r5s",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "titpetric",
					"content": "I\u0027m not exactly sure why you\u0027d remove vendoring? I\u0027d actually keep it instead of `go get`. You can work around GOPATH with docker.",
					"date": "2016-09-17",
					"id": "d7qdz7c",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-09-18",
					"id": "d7rosbb",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "titpetric",
					"content": "How about explaining what\u0027s your problem and closing my curiosity? From what I\u0027ve seen people are actively advocating vendoring and I\u0027m pretty much fine with vendoring my dependencies for 1) repeatable builds, 2) some reliability in case of package upstream API changes.\n\nPlease be constructive/argumentative if you have a different view point, nobody is saying that the OP is wrong, or that I\u0027m right, and there\u0027s no need for \"please leave\".",
					"date": "2016-09-19",
					"id": "d7swz2r",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "metamatic",
					"content": "I assume he was referring to the idea of working around GOPATH using Docker.",
					"date": "2016-09-19",
					"id": "d7tfdh7",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "titpetric",
					"content": "@metamatic: who do you mean by \"he\"? If you mean comment thread root (@google_you), I suppose the main problem is that we\u0027re not exactly sure why he would advocate removal of vendoring. It\u0027s just the fault of being twitter-size-concise and just saying \"remove: vendoring\" without actually explaining the cause for this. As for GOPATH+docker, for me it solves more problems than just setting up GOPATH for my projects - sure, I can keep my projects anywhere and mount the location as a volume to a propper GOPATH, but the advantage of docker is not just that, or to say it differently, GOPATH is not the main reason why I run Go in docker :)",
					"date": "2016-09-22",
					"id": "d7xcat4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "metamatic",
					"content": "\"he\" \u003d blackbaronstux. I was explaining why I think he said \"Please leave\".\n\nI run containerized Go, but only for deployment.",
					"date": "2016-09-22",
					"id": "d7xh8ya",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "titpetric",
					"content": "Might want to use the same for building the app also. For example, I\u0027m pretty sure I have to use alpine and not debian to build a go binary which I then package into an alpine container. Something about shared libs/libc (some systems have /usr/lib64/ instead of /usr/lib/ from what I remember). Lucky you if you\u0027re getting out of the build with a static binary :)",
					"date": "2016-09-23",
					"id": "d7ylj5x",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "lytol",
					"content": "I was kind of scratching my head when I saw the survey from the [@golang twitter account](https://twitter.com/golang/status/773262618563796992) lead to a typeform page for [spf13](https://spf13.typeform.com/). Starting early? \u003dP",
					"date": "2016-09-15",
					"id": "d7ocab7",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "gogroob",
					"content": "The package management proposal is entirely community driven. ",
					"date": "2016-09-15",
					"id": "d7oclkh",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "dilap",
					"content": "awesome!",
					"date": "2016-09-16",
					"id": "d7orsfv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "leimy",
					"content": "Congrats! Good luck!",
					"date": "2016-09-16",
					"id": "d7os9l8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "yannisl",
					"content": "Congratulations. I really appreciate your work and hope you will have time to continue with your open source projects.",
					"date": "2016-09-16",
					"id": "d7otsqj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "Congrats [spf13](https://www.reddit.com/u/spf13)! and good luck.",
					"date": "2016-09-16",
					"id": "d7ov5as",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "themaven",
					"content": "Brilliant news. Big fan of both Hugo and Cobra.",
					"date": "2016-09-16",
					"id": "d7oxcxr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ChristophBerger",
					"content": "Congrats from a happy Hugo user!",
					"date": "2016-09-17",
					"id": "d7qddy6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Redundancy_",
					"content": "I was going to suggest that pprof needed to be ported to Go, but I just noticed https://github.com/google/pprof\n\nThat fixes one of my bigger complaints about the toolchain.",
					"date": "2016-09-15",
					"id": "d7odk8h",
					"isArchived": true,
					"isControversial": true,
					"score": -3
				},
				{
					"author": "weberc2",
					"content": "I\u0027m confused. `go tool pprof` has been around for a while, and I think it\u0027s separate from the repo you linked to?",
					"date": "2016-09-15",
					"id": "d7oh59g",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "dgryski",
					"content": "The pprof that ships with Go is an older version of that pprof project. I\u0027ve filed https://github.com/golang/go/issues/16184 to keep them in sync.  You can use that pprof tool with Go code and I frequently do. Be aware the commands and output are slightly different. ",
					"date": "2016-09-16",
					"id": "d7ovka8",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Redundancy_",
					"content": "My memory is a bit sketchy, but I\u0027m pretty sure that it used to be that you had to install a whole C++ and linux-only toolchain to do the callgrinding and visualization of the results.",
					"date": "2016-09-16",
					"id": "d7p36ws",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "I\u0027m not familiar with callgrinding, but I\u0027ve not had to install any C++/linux things to do CPU or memory profiling on my Mac (though CPU profiling only became available as of OSX 10.11 because of a kernel bug in previous OS versions).",
					"date": "2016-09-16",
					"id": "d7pbhtt",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Redundancy_",
					"content": "I\u0027ll have to refresh myself on the process on windows. I originally wrote https://github.com/Redundancy/pprofit to get around all the dependencies that were needed which were non-trivial to get on Windows and needed installing into your path, including the graphviz rendering (which I was planning on doing with javascript).",
					"date": "2016-09-16",
					"id": "d7poxqy",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "I think on any system pprof requires some separate gv utility to do the rendering, but I could be misremembering.",
					"date": "2016-09-16",
					"id": "d7pp5r3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "divan0",
			"date": "2016-10-25",
			"id": "59808b",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "GOPATH will have default value (\"$HOME/go\") if not set in Go 1.8!",
			"comments": [
				{
					"author": "davedrowsy",
					"content": "That\u0027s nice, but it doesn\u0027t solve my major annoyance with Go, which is that it doesn\u0027t let me work on Go projects checked out to arbitrary locations (for example in my \"code folder\" alongside the rest of my projects), without either having some mechanism in place to change my environment variable for me,  or remembering to do it manually. ",
					"date": "2016-10-25",
					"id": "d96yuea",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "dmikalova",
					"content": "Check out Dave Cheney\u0027s GB. If used 100% of the time vendoring tools like glide can also mimic this.",
					"date": "2016-10-25",
					"id": "d976vfj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "giovannibajo",
					"content": "I agree. I really can\u0027t see how this proposal can help beginners. They will still create a helloworld.go somewhere in their disk which is outside the GOPATH (e.g.: ~/Sources/gotest), they will try to build it, and it will fail. \n\nI have a proposal that is more comprehensive, and would fix the situation for beginners:\nhttps://github.com/golang/go/issues/17271\n\nUnfortunately, it partially conflicts with the proposal that was approved, so I will have to rework it.",
					"date": "2016-10-25",
					"id": "d97ahdu",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "justinisrael",
					"content": "\u0026gt;I agree. I really can\u0027t see how this proposal can help beginners. They will still create a helloworld.go somewhere in their disk which is outside the GOPATH (e.g.: ~/Sources/gotest), they will try to build it, and it will fail. \n\nWhy can\u0027t you see how it can partially help beginners? If they \"go get\" something by following instructions to do so, wouldn\u0027t it be helpful that the location defaults instead of the process failing?\n\nWhat you are pointing out is another situation that isn\u0027t handled by this proposal. And, if they do make a helloworld.go source file in a random location, it still has a chance to work if they are just building the file directly. ",
					"date": "2016-10-25",
					"id": "d97d3rm",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "kaeshiwaza",
					"content": "Difficult for me to understand how we can work with all projects under the same path.\nI use a GOPATH per project and under the project root.\n./myproject/go/src/mypkg\n./myproject/go/src/github/deps...\n./myproject/py/pythonfiles\n./myproject/doc\n./myproject/static\nWith a little script to change GOPATH when i work on a project.",
					"date": "2016-10-25",
					"id": "d9773dd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "andradei",
					"content": "The newcomers are going to love that (without realizing it)!\n\nThe experienced will have their GOPATH set to whatever they want/need anyways!",
					"date": "2016-10-25",
					"id": "d96oub0",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "0xembark",
					"content": "Fucking finally. Such a useful thing to have set by default ",
					"date": "2016-10-25",
					"id": "d96foip",
					"isArchived": true,
					"isControversial": false,
					"score": 63
				},
				{
					"author": "dmikalova",
					"content": "\u0026gt; \"Make the zero value useful.\" - Rob Pike\n\nAbout time!",
					"date": "2016-10-25",
					"id": "d976sbq",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "waywardcoder",
					"content": "It\u0027s interesting to me that for their packages they take the philosophy of preferring libraries to frameworks, but for the tooling it\u0027s more like a framework where it fights you if you don\u0027t do it their way. This change -- sort of -- helps people get started, but I\u0027d rather see easy ways to use go outside of a gopath, so my code can live next to all of my other projects. ",
					"date": "2016-10-25",
					"id": "d971f2q",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "tscs37",
					"content": "Finally!\n\nNow we only need to get more widespread support for multiple go paths.\n\nAtm most makefiles or scripts fail horribly because my gopath is actually `~/libs/go:~/projects/go` to keep my workspace tidy. It\u0027s a bit annoying tbh. but nothing a short `GOPATH\u003d~/libs/go make all` can\u0027t fix.",
					"date": "2016-10-25",
					"id": "d96uvnh",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "yiyus",
					"content": "Your GOPATH is fine. Blame those poorly written Makefiles.",
					"date": "2016-10-25",
					"id": "d972ic0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tscs37",
					"content": "I do partially blame them, but some utility would be nice on go\u0027s behalf.\n\nSome sort of CLI tool that simply spits out the first go path that comes with go.",
					"date": "2016-10-25",
					"id": "d977a94",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "yiyus",
					"content": "You can use the shell for that: `${GOPATH%:*}`. Or sed or whatever, there is no need for a new tool.",
					"date": "2016-10-25",
					"id": "d97etkc",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tscs37",
					"content": "Well, yeah, but that is hardly portable. It basically works on Bash/Zsh and whatever is compatible enough.",
					"date": "2016-10-25",
					"id": "d97i4r7",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "tv64738",
					"content": "`${parameter%word}` is in dash, so it\u0027s most likely in POSIX (too lazy; didn\u0027t check).",
					"date": "2016-11-04",
					"id": "d9lswln",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tscs37",
					"content": "`go libpath` would work on non-POSIX platforms like Windows.\n\n`${parameter%word}` doesn\u0027t. It\u0027s not portable. POSIX \u003d/\u003d Portability.",
					"date": "2016-11-04",
					"id": "d9m2x8t",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tv64738",
					"content": "And how exactly is the rest of the shell scripting experience compatible, then? The context is Makefiles.",
					"date": "2016-11-05",
					"id": "d9mhvpq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tscs37",
					"content": "Makefiles might not run in a POSIX or UNIX environment, you can run Makefiles in the CMD if necessary, though only if the creator did not employ any weird stuff.\n\nA single go tool is easily portable and also ensures that old code with old makefiles will remain compatible if GOPATH is deprecated one day.\n\nIt would also improve the similarity of cross-platform buildscripts since the Windows one won\u0027t need complicate function compared to the POSIX script.\n\nJust jumping on \"oh but you can do this in POSIX\" is just a bad argument, not everything is POSIX, it reduces portability and makes everything look less clear.",
					"date": "2016-11-05",
					"id": "d9mm1z4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tv64738",
					"content": "Things that aren\u0027t POSIX are so far from POSIX portability means writing the same thing multiple times, as far as a Makefile is concerned. I don\u0027t really see the point.",
					"date": "2016-11-05",
					"id": "d9mzoer",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "Curious question, why do you need multiple gopaths?",
					"date": "2016-10-25",
					"id": "d97abyh",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tscs37",
					"content": "I don\u0027t necessarily **need** them but I find it cleaner.\n\nIf I go get something then it lands in my ~/libs/go folder, where it will happily live.\n\nMy personal projects largely live inside ~/projects/go partly because the ~/projects folder hosts a large amount of stuff in it.\n\nIt\u0027s a reasonable setup IMO, it keeps things seperate (at the cost of some pain when some random library doesn\u0027t do proper makefiles)",
					"date": "2016-10-25",
					"id": "d97ax8f",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "earthboundkid",
					"content": "When I just want to install some cool utility I see on Reddit or whatever, I will run `GOPATH\u003d/tmp/util GOBIN\u003d$HOME/bin go get github.com/cool/util`. It keeps the libs from cluttering my HD.",
					"date": "2016-10-26",
					"id": "d98gvhm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "You can do all of this using the single $GOPATH as is the norm now by doing something like this\n\na personal folder containing all your libs\n\n~/go/src/github.com/tscs/personal/\u0026lt;all personal projects\u0026gt;\n\nother useful/non personal folders.\n\nI don\u0027t see why there is even a need to use multiple GOPATHs, if we use multiple GOPATHS, it defeats the purpose of having a GOPATH in the first place. Then again, code is thrown up everywhere. It is a mess which GOPATH solves!!\n\n~/go/src/github.com/tscs/SomeApp1\n~/go/src/github.com/tscs/SomeApp1\n~/go/src/github.com/tscs/SomeApp1\n",
					"date": "2016-10-26",
					"id": "d98n9i1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tscs37",
					"content": "Again, I **could** do it that way, but I prefer using multiple go paths because I find it tidier.\n\nIt\u0027s just annoying that people writing makefiles don\u0027t seem to mind that a gopath could not actually be set to a literal path but to multiple paths. It\u0027s easily solvable in portable ways, you could even just write a make.go file for that.\n\nedit: I might also add that some of my CI bots have certain go libs installed in a root folder and some will be go-get\u0027d to minize workload (logrus is usually in all my projects, so it\u0027s installed globally on the CI), which makes multiple GOPATHS necessary.\n\nIf GOPATHs were meant to solve the \"everything is everywhere\" then they would not have given us the choice to use multiple ones. It\u0027s a neat funcitonality that I intend to utilize for my own benefit.",
					"date": "2016-10-26",
					"id": "d98objf",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thewhitetulip",
					"content": "This is interesting :-) I never had felt the necessity to use multiple GOPATHs and I do not think that any language author is going to disallow flexibility, there might be cases where multiple GOPATHs are a necessity, who knows!",
					"date": "2016-10-27",
					"id": "d9a7b9r",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Cidan",
					"content": "All of our projects have a Makefile internally, and we have this at the top of our Makefiles:\n\n    export GOPATH \u003d $(realpath $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))/../../)\n    export GOBIN \u003d ${GOPATH}/bin\n    export APP \u003d $(shell basename \"$$PWD\")\n\nBy doing this, you are ensuring that your GOPATH is two levels up from your project path. For example, given repo/src/project/Makefile, your GOPATH will be repo/; this only really works well if you use a unirepo/monorepo though, so YMMV.\n\nFor very large projects/multiple projects/teams, I highly encourage giving unirepos a try.",
					"date": "2016-10-25",
					"id": "d96j94u",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "HectorJ",
					"content": "Personally using this in some bash script:\n\n    export GOPATH\u003d$(echo $(pwd -P) | sed -E \u0027s#(.+)/src/.*#\\1#\u0027)\n\nJust in case there are more than two levels to go up. Working well so far.",
					"date": "2016-10-25",
					"id": "d96jxu2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-25",
					"id": "d96j1d0",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "PsyWolf",
					"content": "Why not just use the vendor directory? If each project has its dependencies in its own vender folder, then all your projects can live happily in the same GOPATH without any issues.  You can still use multiple GOPATHs if you really want to, but the vendor directory fixed the problems that made multiple GOPATHs necessary, and IMO it\u0027s more elegant.\n\nFurthermore, this proposal doesn\u0027t take away your ability to use multiple GOPATHs.  It just makes it easier for new users who haven\u0027t learned about the GOPATH yet, or those who are happy with the default.",
					"date": "2016-10-25",
					"id": "d96k6v4",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-25",
					"id": "d96qveg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "PsyWolf",
					"content": "Taken right from [the godep readme](https://github.com/tools/godep/blob/master/Readme.md#how-to-use-godep-with-a-new-project)\n\n\n    $ godep save\n\n\nThis will save a list of dependencies to the file Godeps/Godeps.json and copy their source code into vendor/\n\nI don\u0027t use godep personally, so maybe I\u0027m missing something, but that looks like exact how it works.  Once the project\u0027s dependencies have been copied to the vendor directory with the `godep save` command, then you\u0027re good.  Now, go build-ing that project will ignore whatever is in your GOPATH and use the copies in the vendor directory instead. That means you\u0027re free to change or update the packages in your GOPATH and it won\u0027t affect your godep project.\n\nAre you checking in your vendor directory like [the godep FAQ](https://github.com/tools/godep/blob/master/FAQ.md) reccomends?",
					"date": "2016-10-25",
					"id": "d96rbd4",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "neoasterisk",
					"content": "I have a hard time understanding the problem. Why is your development revolved around godep? It\u0027s just a tool and you might as well be using another vendoring tool or even none at all.\n\n\u0026gt; I think \"per-project GOPATHs\" is the way to do things\n\nWhy would you do something like this? It overcomplicates stuff for no reason. Having the standard $GOPATH `src`, `bin` and `pkg` standard structure is really a blessing.\n\nIn my opinion the best way is the \u0027vanilla\u0027 way. I\u0027ve only set my GOPATH once and I\u0027ve never even had to think about it since then. With this change, I don\u0027t even have to set the GOPATH so it\u0027s a big win especially for newcomers.",
					"date": "2016-10-25",
					"id": "d96jpqn",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-25",
					"id": "d96qw2e",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "justinisrael",
					"content": "I work on projects with tons of deps as well.  But it still sounds like you aren\u0027t using the vendor directory. You also seem to not be reading what people are typing. Regardless of how complex the projects are, the vendor directory in each one will get selected first. ",
					"date": "2016-10-25",
					"id": "d96re2h",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; with dependencies at different versions...\n\nSo this is the root of your problem. I see now.\n\nKeeping dependencies clean and as few as possible is good development practice. Unfortunately I cannot see your project to judge how important are those dependencies that they have to be different versions but it\u0027s a bad sign that leads to a harder to maintain project.",
					"date": "2016-10-25",
					"id": "d96reh5",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-25",
					"id": "d96rg8c",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "I am not implying anything. All I said is that a very good development practice is to keep the dependency tree clean and small. This leads to programs that are simpler, easier to understand and maintain.",
					"date": "2016-10-25",
					"id": "d96rkqn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-25",
					"id": "d96rm12",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; If I have a single dependency in my GOPATH that conflicts with a single dependency of Kubernetes (of which there are hundreds)... then I have this problem.\n\nUhh... are you telling me that you are using Kubernetes as a library? But even in that case, Kubernetes has it\u0027s dependencies vendored. How can they be conflicting with your own dependencies? Either I do not understand the problem or you do not understand how vendoring and the tooling works.",
					"date": "2016-10-25",
					"id": "d96rpbd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-25",
					"id": "d96rqe8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "You should avoid using libraries that have dependencies especially if they are a lot. Also I don\u0027t think Kubernetes is meant to be used as a library.\n\n\u0026gt; Could you please stop? Seriously? What an arrogant jerk.\n\nI see that you edited out the \u0027arrogant jerk\u0027 part but it was there when I read your reply. \n\nI am done talking to you. ",
					"date": "2016-10-25",
					"id": "d96s35u",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "ratatask",
					"content": "You\u0027re typing sentences that does not attempt to solve any problems here, instead they comes off as someone throwing pebbles from an ivory tower.\n",
					"date": "2016-10-25",
					"id": "d96upth",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "docoptix",
					"content": "I usually also have client code like mobile or web front-end in the same ~~directory~~ repo. Going for a single GOPATH would mean that every dev works inside there having 10 or to directory levels.\n\nImagine using another technology in the same repo which tells you where to place it in you relative to HOME.",
					"date": "2016-10-25",
					"id": "d96qego",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "What\u0027s wrong with having 10 directory levels if the project needs them? But does it? \n\nThis does not justifies having different GOPATHs as far as I am concerned. But if it works for you then ok.",
					"date": "2016-10-25",
					"id": "d96rgpp",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "Blackstab1337",
					"content": "use two terminals ",
					"date": "2016-10-25",
					"id": "d96jbc1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-25",
					"id": "d96jcwr",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "pzduniak",
					"content": "I use a vendor directory with glide.",
					"date": "2016-10-25",
					"id": "d96o952",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-25",
					"id": "d96qwn2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "justinisrael",
					"content": "That is not what you should be taking away. Glide or godep doesn\u0027t matter. They just help get the packages into a vendor directory (ideally). The official go tool supports the vendor location. So a single gopath works regardless of your package manager tool. ",
					"date": "2016-10-25",
					"id": "d96rfjp",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-25",
					"id": "d96rj5w",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "pzduniak",
					"content": "Then why are you using a non-smart tool? I don\u0027t understand your arguments. Glide was developed for the vendor directory, godep still has remnants of the \"previous\" era. The solution is there and if you want to use it, just use the new workflow.",
					"date": "2016-10-25",
					"id": "d96ssz8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shadowmint",
					"content": "basically yes. \n\nFor all the negative feedback you\u0027re getting in this thread, it does basically boil down to:\n\n- If you have trivial dependency trees, use a single common GOPATH.\n\n- If not: use a smart dep tool like glide or use multiple GOPATH\u0027s.\n\nIt\u0027s a problem.\n\nI know, lots of people would like to pretend its not a problem, but, as you\u0027ve obviously experienced... it really is; it\u0027s widely acknowledged as a problem.\n\nOn the bright side, there\u0027s an active working group trying to solve these issues; you can get more info [here](https://groups.google.com/forum/#!topic/golang-dev/Og1p9ECURBI) or by visiting the #vendor channel on the gopher slack. :)",
					"date": "2016-10-25",
					"id": "d96xdbm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "amapatzer",
					"content": "I personally prefer it to be set directly to $HOME",
					"date": "2016-10-25",
					"id": "d96oysr",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "yiyus",
					"content": "Personally, I preferred $HOME too, but I guess it would have been more confusing for beginners.\n\nI followed the discussion in github issues and the problem they were trying to solve was not to make it more comfortable for current users, but to avoid newbies asking questions about non-set GOPATHs. While I understand why they are doing this, I do not understand the euphoria in this thread (quick question:  how many people had GOPATH set to $HOME/go, and how many had it set to $HOME?).",
					"date": "2016-10-25",
					"id": "d9730ml",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "robpike",
					"content": "Re: euphoria: Me either. While I understand the desire to make things easier for newcomers, I cannot figure out why people already using Go care at all. And I have no idea why the initial default could possibly matter to people who already have their environments set up.\n\nBut then GOPATH for me always seemed so trivial (set it to $HOME and be done) that I never grokked why there was so much hatred for it. I probably never will, but at least now I will see the hatred less.\n",
					"date": "2016-10-25",
					"id": "d97cwa4",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "amapatzer",
					"content": "I think the hatred comes out of not understanding the purpose behind it and why it is actually a good idea. People coming from other languages expect to be able to directly start coding after having cloned a project and installed go.\n\nWhile I do not care for a default value for GOPATH for myself, I still would have preferred a default which would have encouraged a similar working environment across several teams. People tend to stick to what they are given and might not discover another approach on their own, especially if they are working with the overhead of several projects in different languages.\n\n",
					"date": "2016-10-25",
					"id": "d97fym2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tv64738",
					"content": "We see quite a lot of people having their first encounter with environment variables because of Go, including not knowing how to set one for future sessions. I think that\u0027s a major source of complaints about `GOPATH` being hard.",
					"date": "2016-11-04",
					"id": "d9lt1hp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tv64738",
					"content": "`GOPATH\u003d$HOME/go` because `~/bin` is something else.",
					"date": "2016-11-04",
					"id": "d9lsz6t",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "saturn_vk",
					"content": "so don\u0027t change it on your machine then",
					"date": "2016-10-25",
					"id": "d96vc29",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "TeamBlast",
					"content": "Aw yiss, less frustration for just about any case!",
					"date": "2016-10-25",
					"id": "d96s692",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jrwren",
					"content": "https://youtu.be/_J6-3l3hCm0",
					"date": "2016-10-25",
					"id": "d96ywty",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "My GOPATH is already set to $HOME/go :-D\n\nThis makes me wonder how come it was missing all this while, it\u0027ll largely help those who struggle to understand how things are written in Go(thinking about the days when I started with Go, I used to be like What is GOPATH?\")",
					"date": "2016-10-25",
					"id": "d97aao0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mcandre",
					"content": "but will Go follow symlinks when resolving GOPATH candidates?",
					"date": "2016-10-25",
					"id": "d97d69s",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "knotdjb",
					"content": "Am I the only one that has `GOROOT\u003d$HOME/go`?",
					"date": "2016-10-26",
					"id": "d97vzqm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "GOROOT is where go should be installed. That\u0027s different than GOPATH. It\u0027s usually better if Go is installed system wide. I keep GOROOT as the \"default\" `/usr/local/go`.\n\nIf you have Go installed system wide by having something like`GOROOT\u003d\"/usr/local/go\"` then each user can have their own GOPATH which might be different. This really helps if there\u0027s many users using the same machine.",
					"date": "2016-10-26",
					"id": "d97wf4g",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ponylicious",
					"content": "$HOME/go is where I git clone https://go.googlesource.com/go. I also have $HOME/go1.4 to compile $HOME/go. \n\n    export GOPATH\u003d$HOME\n    export GOROOT\u003d$HOME/go\n    export PATH\u003d$GOROOT/bin:$HOME/bin:$PATH",
					"date": "2016-10-26",
					"id": "d98t0ry",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "andrefsp",
					"content": "This is good news. At least we will have a standard location for the default for default installation.  \n\nHowever I will keep using gvm (https://github.com/moovweb/gvm) and use a different $GOPATH per project. ",
					"date": "2016-10-29",
					"id": "d9czsux",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "goofansu",
					"content": "Will the default $GOPATH available in shell or just used by go tools?",
					"date": "2016-10-25",
					"id": "d96fsr7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "PsyWolf",
					"content": "No, but you could just use `$(go env GOPATH)` in your scripts instead of using `$GOPATH` directly.  Problem solved.",
					"date": "2016-10-25",
					"id": "d96ke65",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "goofansu",
					"content": "Thanks, that\u0027s what I want.",
					"date": "2016-10-25",
					"id": "d96q0kq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Bake_Jailey",
					"content": "Go\u0027s not going to modify your shell\u0027s environment, so no, you\u0027ll have to set that yourself if you need it. But given that it\u0027s basically just what the go tools use to figure out where to put things, I\u0027m not sure how much it\u0027ll matter depending on your use case.",
					"date": "2016-10-25",
					"id": "d96im2i",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "goofansu",
					"content": "Because `$GOPATH/bin` should be added to `$PATH`. If `$GOPATH` is not available, then I must explicitly set `$GOPATH` first, so the default $GOPATH is no use to me.",
					"date": "2016-10-25",
					"id": "d96jv3d",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Bake_Jailey",
					"content": "I see what you mean, but that\u0027s really not in the scope of things that the Go authors can \"fix\". If you want to get `$GOPATH/bin`into your `$PATH` without knowing what `$GOPATH` is, you could always do something with `go env` to extract that path.\n\nI still think this is a good change, as now you can compile things without environment changes, and most people don\u0027t start off by running go get\u0027d/install\u0027d binaries anyway. Everyone who wants to set `$GOPATH` will do so anyway.",
					"date": "2016-10-25",
					"id": "d96kmi6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "goofansu",
					"content": "Thanks, `go env` is the way.",
					"date": "2016-10-25",
					"id": "d96q7jl",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "wirther",
					"content": "I think it will only be for go tools, since installing go (for linux at least) is nothing more than extracting a zip.",
					"date": "2016-10-25",
					"id": "d96iobq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "goofansu",
					"content": "Got it, thank you.",
					"date": "2016-10-25",
					"id": "d96qai1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "postman_",
					"content": "This is fucking stupid.",
					"date": "2016-10-25",
					"id": "d970hg0",
					"isArchived": true,
					"isControversial": false,
					"score": -6
				},
				{
					"author": "mightydjinn",
					"content": "*slow clap*",
					"date": "2016-10-25",
					"id": "d96k7vh",
					"isArchived": true,
					"isControversial": false,
					"score": -9
				}
			]
		},
		{
			"author": "NeverUse-YouPromised",
			"date": "2016-10-13",
			"id": "577rwt",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Visual Studio Code\u0027s new icon for Go is an eyeless, soulless monster.",
			"comments": [
				{
					"author": "Vhin",
					"content": "Until I zoomed in, I genuinely thought it was a trash can.",
					"date": "2016-10-13",
					"id": "d8pp6d7",
					"isArchived": true,
					"isControversial": false,
					"score": 38
				},
				{
					"author": "ChristophBerger",
					"content": "Halloween edition.",
					"date": "2016-10-13",
					"id": "d8pu822",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-13",
					"id": "d8pxpyc",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "commitpushdrink",
					"content": "\"It works on my machine\"",
					"date": "2016-10-13",
					"id": "d8qoe2z",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "Spirit_of_Stallman",
					"content": "Has quickly made a [bigger version](http://imgur.com/a/phSF5) :D",
					"date": "2016-10-13",
					"id": "d8pywmg",
					"isArchived": true,
					"isControversial": false,
					"score": 26
				},
				{
					"author": "shovelpost",
					"content": "Imminent zombie gopher apocalypse?",
					"date": "2016-10-13",
					"id": "d8pzrd9",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "26julio",
					"content": "Considering [Renee](http://2.bp.blogspot.com/-XXod7hwtHu8/UB3BZD9uZjI/AAAAAAAAFFc/X7wQlWx_K5k/s1600/babybjornstrand3.jpg) [French\u0027s](http://3.bp.blogspot.com/-KJBPZvUr_EU/UA38e_MYTiI/AAAAAAAAFAA/Qn9R43omx-I/s1600/bjornstranduw.jpg) [other](http://3.bp.blogspot.com/-aNVt3Ej8q7U/U-B3rs8hmJI/AAAAAAAAGVI/4l_AAxKh-5s/s1600/coastergophs.png) [artwork](http://4.bp.blogspot.com/-AHmR9HwMMzo/UiSO6jby3yI/AAAAAAAAF2I/IMhdRyoQkcc/s1600/bjornstrandbacks.jpg) I think an eyeless, soulless monster is appropriate.",
					"date": "2016-10-13",
					"id": "d8pyhjm",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "andradei",
					"content": "Oh the dread.",
					"date": "2016-10-13",
					"id": "d8qjrtn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hungys",
					"content": "You can replace it with the one provided by third party extension: vscode-icons.\n\nhttps://marketplace.visualstudio.com/items?itemName\u003drobertohuertasm.vscode-icons",
					"date": "2016-10-13",
					"id": "d8py7dq",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "PaluMacil",
					"content": "From my last comparisons, vscode-icons is still the best. :)",
					"date": "2016-10-13",
					"id": "d8q3jda",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[...brainzzz...](https://pbs.twimg.com/media/BKbqtRmCEAAe6p-.jpg)",
					"date": "2016-10-13",
					"id": "d8q2u4a",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "andradei",
					"content": "I wasn\u0027t ready!",
					"date": "2016-10-13",
					"id": "d8qjtkx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "NeverUse-YouPromised",
					"content": "[More on the new release here.](https://code.visualstudio.com/updates/v1_6)",
					"date": "2016-10-13",
					"id": "d8pnwuc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "wwoollff",
					"content": "a lost, confused and powerful monster is appropriate with Renee French\u0027s guidelines. Also, I have the same face every time I re-read my old code",
					"date": "2016-10-13",
					"id": "d8q0vqa",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "wiesson",
					"content": "Hmm, doesn\u0027t work for me. Have you installed the Go extension from lukehoben?",
					"date": "2016-10-13",
					"id": "d8q00fv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "NeverUse-YouPromised",
					"content": "You have to have version 1.6.0 and set your icon theme to \"Seti (Visual Studio Code)\".",
					"date": "2016-10-13",
					"id": "d8q02xx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "wiesson",
					"content": "works!! Thank you! :)",
					"date": "2016-10-13",
					"id": "d8q0bza",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "google_you",
					"content": "It haunts you. Those data races.",
					"date": "2016-10-13",
					"id": "d8q24bs",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "caseynashvegas",
					"content": "I actually kinda like it, but I\u0027m weird like that.",
					"date": "2016-10-13",
					"id": "d8q7n5o",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "strings__",
					"content": "Who knew zombie gopher\u0027s were a thing. I wonder what Renee French would think",
					"date": "2016-10-13",
					"id": "d8qqrpd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "zandorz",
					"content": "vscode vs atom \n\nwhich one is better to work with go?",
					"date": "2016-10-13",
					"id": "d8qvajk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jahayhurst",
					"content": "I tried Atom and noped right out of it, right back to Sublime.\n\nI later tried vscode - following Francesc\u0027s guide - https://medium.com/google-cloud/go-tooling-in-action-eca6882ff3bc#.d7txk369e - and have stuck with it since.\n\nCode is noticeably slower than Sublime at times, but consistently faster than I\u0027ve ever seen Atom. And, fwiw, the test coverage highlighting (once I saw it) was what really tempted me.",
					"date": "2016-10-13",
					"id": "d8qzvm9",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Smt923",
					"content": "I actually had the opposite experience to the other people replying, I used atom for the longest time, took a few more extensions but I felt they worked better and just more how I\u0027d expect out the box - but then again I mixed things up and tried vscode again and it seems like the go support with the extension has improved a lot, I think either will be fine\n\nif you like the \"visual studio\" style it can\u0027t hurt to try VS, while atom seems to be more visually customizable, but either will be good and are worth trying out I\u0027m sure",
					"date": "2016-10-14",
					"id": "d8rl1tz",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "vim /s",
					"date": "2016-10-13",
					"id": "d8qwnvw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "NeverUse-YouPromised",
					"content": "I got VSCode and all the Go features working before I got sick of trying. I couldn\u0027t do that with Atom.",
					"date": "2016-10-14",
					"id": "d8r6auw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "Gaaawwhh, my eyes.",
					"date": "2016-10-13",
					"id": "d8pqgm7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "cyrusol",
					"content": "Just about right for a Microsoft product.",
					"date": "2016-10-13",
					"id": "d8qez95",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "dgryski",
			"date": "2018-01-15",
			"id": "7qnnjh",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "aws/aws-lambda-go",
			"comments": [
				{
					"author": "zevdg",
					"content": "If only Google cloud functions (aka firebase functions) would support go.  Writing my firestore triggers in JavaScript makes me sad.",
					"date": "2018-01-16",
					"id": "dsqocsz",
					"isArchived": false,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "dolphinboy1637",
					"content": "It kinda boggles my mind despite how successful Google has been they seriously lack any proper coordination between their departments. ",
					"date": "2018-01-16",
					"id": "dsrlgap",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Creshal",
					"content": "Despite, or because of? ",
					"date": "2018-01-16",
					"id": "dsrqbgk",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "MistakenForYeti",
					"content": "Why not just use App Engine + Go? It has better deployment tools, better observability tooling and it autoscales down to 0 instances if you want it to.\nWith secure PubSub push-style subscriptions, pretty much anything that you expect to trigger a Cloud Function should work also for App Engine standard environment.",
					"date": "2018-01-16",
					"id": "dsru3cu",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "djhworld",
					"content": "Just tried the simple \"hello world\" example out, the cold start was really fast (0.5ms), which is impressive in comparison to the JVM equivalent \n\nReally looking forward to using this in the future! ",
					"date": "2018-01-16",
					"id": "dss86tf",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "ilfujibbolo",
					"content": "You can find more documentation here https://docs.aws.amazon.com/lambda/latest/dg/go-programming-model.html",
					"date": "2018-01-16",
					"id": "dsr75jw",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "SonOfMotherDuck",
					"content": "Any information on how they call the functions? Like do they use golang plugins, or are the functions started in separate processes?\n",
					"date": "2018-01-16",
					"id": "dsrfof8",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "claudemiro",
					"content": "They are running a local TCP server.",
					"date": "2018-01-16",
					"id": "dsrgn5d",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "SonOfMotherDuck",
					"content": "I guess they have to also run that on multiple machines to deal with high loads?\n",
					"date": "2018-01-17",
					"id": "dstnz65",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "JustinCampbell",
					"content": "From https://aws.amazon.com/blogs/compute/announcing-go-support-for-aws-lambda/ :\n\n\u0026gt; The lambda.Start() method takes a handler, and talks to an internal Lambda endpoint to pass Invoke requests to the handler.\n\n\u0026gt; The lambda.Start() method blocks, and does not return after being called, meaning that it’s suitable to run in your Go application’s main entry point.",
					"date": "2018-01-16",
					"id": "dsrpwp7",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "cavaliercoder",
					"content": "Sweet Jesus, YES!",
					"date": "2018-01-16",
					"id": "dsqw2vs",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "JustinCampbell",
					"content": "The announcement blog post has a good overview and example code: https://aws.amazon.com/blogs/compute/announcing-go-support-for-aws-lambda/\n",
					"date": "2018-01-16",
					"id": "dsrpz01",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "millionaire-moonbot",
					"content": "If only I saw this before I started a new project",
					"date": "2018-01-16",
					"id": "dss6vng",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "jmsanzg",
			"date": "2018-02-22",
			"id": "7zhotz",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Uber, rewriting service from Python to Go",
			"comments": [
				{
					"author": "Quteness",
					"content": "The title is missing an article (e.g. the, a, one)",
					"date": "2018-02-23",
					"id": "dup03xy",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "itijara",
					"content": "\"one\" is not an article :p\nYah, this is not really that newsworthy.",
					"date": "2018-02-23",
					"id": "dupeozr",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "diabetesjones",
					"content": "Does a post with 50 upvotes at the top of the page and no comments scream \"I paid for these votes\", or do we all just think this is cool but have nothing to say? : P",
					"date": "2018-02-22",
					"id": "duoek2i",
					"isArchived": false,
					"isControversial": false,
					"score": -31
				},
				{
					"author": "tty5",
					"content": "It\u0027s a go success story post about a rewrite without a single line of go in it and in general is very thin on go-specific information.\n\nhow do you respond to that? sure go is nice, have an upvote, but what do you comment on?",
					"date": "2018-02-23",
					"id": "duol05p",
					"isArchived": false,
					"isControversial": false,
					"score": 47
				},
				{
					"author": "adiabatic",
					"content": "I think it\u0027s neat to see how they wrote a new thing to replace a slow thing and how to make sure switching to the new thing doesn\u0027t screw anything up. I\u0027d upvote that sort of thing.\n\nI don\u0027t really have anything to say _about_ what they did, though, so I wasn\u0027t about to comment.",
					"date": "2018-02-23",
					"id": "duoltd8",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "sheepdog69",
					"content": "It is Uber, so I wouldn\u0027t put it past them.\n",
					"date": "2018-02-23",
					"id": "duol5ua",
					"isArchived": false,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "jmsanzg",
					"content": "This is my first post using RelayPro app, I didn\u0027t have, or I didn\u0027t saw, the option to comment, just put the link. I\u0027ll comment properly when I\u0027ve a pc near me. But you\u0027re right",
					"date": "2018-02-23",
					"id": "dup18b6",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2018-02-23",
					"id": "duoshjc",
					"isArchived": false,
					"isControversial": false,
					"score": -33
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2018-02-23",
					"id": "dup0fst",
					"isArchived": false,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2018-02-23",
					"id": "duowu5k",
					"isArchived": false,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2018-02-23",
					"id": "duoy114",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				}
			]
		},
		{
			"author": "Xangold",
			"date": "2016-07-05",
			"id": "4rfmh9",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "8 months of reducing garbage collection timings at Twitch",
			"comments": [
				{
					"author": "gsquire",
					"content": "This is simply fascinating to me. I certainly don\u0027t have the skills to sit down and analyze call graphs like this.\n\nI\u0027m happy that twitch worked with the go team and helped advance the language even more. My hat\u0027s off to them!",
					"date": "2016-07-06",
					"id": "d50x9mh",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "Xangold",
					"content": "Yup! It\u0027s incredibly useful to have individuals who are able to spend the time to really dig down into tools flamegraphs, perf, pprof, etc. and also to advocate for a language.",
					"date": "2016-07-06",
					"id": "d5102je",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Bake_Jailey",
					"content": "Very cool read. (I didn\u0027t even know that Twitch had so much Go behind the scenes.)",
					"date": "2016-07-06",
					"id": "d5112gu",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "jimuazu",
					"content": "So, at the end of it, they have a process serving 500,000 IRC users with only a 1ms GC pause? Impressive if so. (I\u0027m not entirely clear because at some point in the story they split out the 500,000 users across multiple processes.)",
					"date": "2016-07-06",
					"id": "d51nd5d",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "giovannibajo",
					"content": "Because the GC pause times are a factor of the heap size. Splitting across multiple processes allow for smaller heaps and thus shorted pause times.\n\nNow that the GC pauses are short even with all users, it doesn\u0027t make sense to split anymore",
					"date": "2016-07-07",
					"id": "d52y8rx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "GoTheFuckToBed",
					"content": "[When is it the best time to do a GC](http://imgur.com/LozAZBh)",
					"date": "2016-07-06",
					"id": "d5167ht",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "shovelpost",
					"content": "[(heavy breathing)](https://imgflip.com/i/16yp0r)",
					"date": "2016-07-06",
					"id": "d50zuee",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "gbitten",
					"content": "Is it not possible to disable GC entirely (using GOGC\u003doff)?",
					"date": "2016-07-06",
					"id": "d5212qk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nhooyr",
					"content": "yes, but that\u0027s not appropriate for long living programs such as their chat servers.",
					"date": "2016-07-07",
					"id": "d525dii",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ser_p",
					"content": "Why those guys just did not use something else like Rust, Swift or C++?",
					"date": "2016-07-06",
					"id": "d513aq4",
					"isArchived": true,
					"isControversial": false,
					"score": -22
				},
				{
					"author": "el-chupa",
					"content": "\u0026gt; Why those guys just did not use something else like Rust, Swift or C++?\n\nAs someone who don\u0027t really follow those languages:\n\n* Why should they?\n\n* What problems of theirs does any of those languages solve better than Go - especially considering the fact that they came from Python?\n\n* What was the state of Rust in 2013? According to http://blog.rust-lang.org/2015/05/15/Rust-1.0.html it reached 1.0 in 2015\n\n* Likewise, what was the state of Swift in 2013? According to https://developer.apple.com/swift/blog/?id\u003d14 it reached 1.0 in 2014\n\n\n*Being a bit snarky:* considering the fact that they came from Python, and given my experiences with the complexity of the language and ecosystem, I\u0027m not surprised they didn\u0027t migrate to C++.\n",
					"date": "2016-07-06",
					"id": "d514mwh",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "FunctionPlastic",
					"content": "\u0026gt; Why should they?\n\nWell given the context of the discussion, so that 8 man-months could have been spent on something actually productive.\n\n\u0026gt; What problems of theirs does any of those languages solve better than Go - especially considering the fact that they came from Python?\n\nGood point. I don\u0027t know Swift, but Rust is definitely more complex of a language than both Go or of course Python. C++ doesn\u0027t even solve security for you like Rust does. I don\u0027t think even Swift does that.\n\n\u0026gt; What was the state of Rust in 2013?\n\nThis was written in 2013? Yeah Rust definitely wasn\u0027t a choice for production back then.",
					"date": "2016-07-06",
					"id": "d519tum",
					"isArchived": true,
					"isControversial": false,
					"score": -7
				},
				{
					"author": "el-chupa",
					"content": "\u0026gt;     Why should they?\n\u0026gt; \n\u0026gt; Well given the context of the discussion, so that 8 man-months could have been spent on something actually productive.\n\nI\u0027m not sure which fallacy this statement is, but I don\u0027t think it answers the question. It also pretends that Twitch devs spent 8 man-months doing nothing but trying to reduce GC latency, which is beyond ridiculous.\n\n\n\n\u0026gt; This was written in 2013?\n\nQuoting the blog:\n\n\u0026gt; Our IRC-based chat system was first written in Go in late 2013",
					"date": "2016-07-06",
					"id": "d51g90g",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "FunctionPlastic",
					"content": "\u0026gt; I\u0027m not sure which fallacy this statement is\n\nWhat\n\n\u0026gt; but I don\u0027t think it answers the question\n\nIt certainly explains why the OP mentioned those languages.\n\n\u0026gt; It also pretends that Twitch devs spent 8 man-months doing nothing but trying to reduce GC latency, which is beyond ridiculous.\n\n\"8 months of reducing garbage collection timings at Twitch\"\n\nAssuming this was one guy, that\u0027s 8 man-months. If it was a team of N, it\u0027s 8N-man months.\n\nThey have been working on other stuff in parallel I\u0027m sure.",
					"date": "2016-07-06",
					"id": "d51q8cm",
					"isArchived": true,
					"isControversial": false,
					"score": -6
				},
				{
					"author": "Akkifokkusu",
					"content": "It\u0027s quite likely that this is something they periodically revisited over those 8 months, as opposed to constantly working on it.",
					"date": "2016-07-06",
					"id": "d51uo6b",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Xangold",
					"content": "Correct. More at start when fixing low hanging fruit, but periodically throughout (generally a short period when a new Go release beta or improvement was ready) ",
					"date": "2016-07-20",
					"id": "d5jqy7t",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "bobcrotch",
					"content": "I would consider working with the runtime team for go to make GC improvements a very good use of time. They tanked some pain up front but improved the whole ecosystem by doing so (thanks.. twitch chat?).\n\nI would also assume some not so senior engineers got their feet wet with profiling, legitimate performance tuning, and probably a lot more neckbeardy kernel shit than they ever knew existed. This is of course assuming it wasn\u0027t one engineering doing all of this.\n\nHowever, rationally, yes - another language could have better solved with less trouble. Good on twitch for sounding like a cool engineering org.",
					"date": "2016-07-06",
					"id": "d51drl2",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "FunctionPlastic",
					"content": "\u0026gt; I would consider working with the runtime team for go to make GC improvements a very good use of time.\n\nWell Rust doesn\u0027t have a runtime or GC. It\u0027s a bit lower-level than Go tho, so you could still lose overall.",
					"date": "2016-07-06",
					"id": "d51pv7d",
					"isArchived": true,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "bobcrotch",
					"content": "... I mean I get what you\u0027re saying but it\u0027s not applicable to what you quoted.",
					"date": "2016-07-07",
					"id": "d53iz7g",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "\u0026gt; Well given the context of the discussion, so that 8 man-months could have been spent on something actually productive.\n\nWhat evidence is there that these other languages would have been more productive than Go? In my experience with Rust and C++, you end up paying a lot in development costs because of inferior tooling, manual memory management, poor concurrency stories, etc. I see no reason to believe that these languages would be a silver bullet, and this isn\u0027t even taking into consideration the cost of porting all of the acceptably-performant Go code over to the new language.",
					"date": "2016-07-06",
					"id": "d51lt3l",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "FunctionPlastic",
					"content": "\u0026gt; What evidence is there that these other languages would have been more productive than Go?\n\nIn this context, you wouldn\u0027t need to spend 8 months fixing and tuning GC and Go-specific problems. Rust has no GC.\n\n\u0026gt; In my experience with Rust and C++, you end up paying a lot in development costs because of inferior tooling, manual memory management\n\nCertainly, I\u0027m not arguing that Rust is better overall. I definitely wouldn\u0027t see a reason to use it in a production project like this, Go makes perfect sense. I\u0027m just explaining this particular situation is what Rust excels at, and should be considered later.\n\n\u0026gt; poor concurrency stories\n\nUm certainly not applicable to Rust. Rust solves concurrency and safety for you, fast.\n\n\u0026gt; I see no reason to believe that these languages would be a silver bullet\n\nYou missed my point",
					"date": "2016-07-06",
					"id": "d51q4n8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ar1819",
					"content": "\u0026gt; Rust solves concurrency\n\nThat\u0027s a lie. Rust \"solves\" race condition problem\u0027s by defining strict owning mechanics. It does\u0027t solves a problem handling 10k+ connections. You are welcome to prove me wrong - spawn 100k threads simultaneously and look at occupied memory.",
					"date": "2016-07-07",
					"id": "d52m8xr",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "FunctionPlastic",
					"content": "Right, it solves a different set of problems. However green threads can just be implemented in a library, they\u0027re not an exclusive Go features and other languages have had them a long time. Haven\u0027t used Rust for stuff like this, so I don\u0027t know whether it actually has them, but that\u0027s not the point.",
					"date": "2016-07-07",
					"id": "d52nbhs",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "ar1819",
					"content": "\u0026gt;  However green threads can just be implemented in a library\n\nThat\u0027s doesn\u0027t work well. As you said - green threads are not exclusive to Go. Hell - even C has them as lib. But when you start to integrate them in your code, that\u0027s the moment when you realize that without other things (firstly IO, then scheduling then everything else) you didn\u0027t solve anything by introducing another lib. You could achieve almost everything by writing you own event mechanism around epoll\\kpoll. But then came a complexity... \n\nWriting abstraction is not hard. Writing proper abstraction is. Go developers spent enormous amount of time in goroutine scheduling and proper writing proper IO/network/communicating abstractions so that user code works fast and properly and don\u0027t eat up all you available memory. And there are still issues. Even with all experience they have.\n\nYou propose to shift this job from compiler devs to twitch devs. I\u0027m not seeing any upsides here.",
					"date": "2016-07-07",
					"id": "d52odk2",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "weberc2",
					"content": "1. They *can* be implemented as a library, but there are currently no stable implementations for Rust.\n2. Library-level implementation is not as useful as language-level because you\u0027ll have to take care to explicitly yield, and you\u0027ll have to take care not to use any I/O which blocks (including calling into libraries which use blocking I/O). It\u0027s just never going to be as clean as Go\u0027s concurrency model (on the other hand, Go\u0027s concurrency model gives you less control, but it\u0027s the right tradeoff 99% of the time).",
					"date": "2016-07-09",
					"id": "d55rreb",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "weberc2",
					"content": "\u0026gt; In this context, you wouldn\u0027t need to spend 8 months fixing and tuning GC and Go-specific problems. Rust has no GC.\n\nThe presence or absence of a GC is no the sole factor in a language\u0027s productivity. In particular, had Twitch used Rust, the non-critical paths of their architecture may have taken twice as long to implement (this may not be true; I\u0027m only pointing out that \"not having a GC\" is not by itself a productivity win for all applications or even necessarily this one).\n\n\u0026gt; I\u0027m just explaining this particular situation is what Rust excels at, and should be considered later.\n\nYes, but Rust lags in a lot of other aspects, including many that are important for building a performant chat server (concurrency, pace of development, ecosystem maturity, etc).\n\n\u0026gt; Um certainly not applicable to Rust. Rust solves concurrency and safety for you, fast.\n\nRust doesn\u0027t solve concurrency; it gives you operating system threads, blocking I/O, and a Node-like approach to async IO. Rust has a ways to go before its concurrency story matures.\n\nEngineering is about making tradeoffs. Just because Rust would solve this problem well doesn\u0027t mean it wouldn\u0027t introduce a host of other problems.",
					"date": "2016-07-09",
					"id": "d55rack",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ar1819",
					"content": "You do understand that you do disservice to Rust and Rust community as whole with posts like this?\n\nBefore saying Rust is fast - look here\nhttps://benchmarksgame.alioth.debian.org/u64q/compare.php?lang\u003dgo\u0026amp;lang2\u003drust\n\nRust is faster on _linear_ code, but it\u0027s not faster with _allocation dependent_ code. That means that if you have some complex \"math\" functions you do get the benefits from the language design and LLVM optimizer. But when it comes to handling concurrent connections and lot\u0027s of allocating to heap (Box and Vec says Hi!) Jemalloc is not as fast as GC enabled languages. Getting pages from heap (and from OS) and returning them is not free. You could use custom allocating strategies, but writing proper custom allocator is entirely different problem. And then you have to be very careful with it.\n\nRust has thread system but doesn\u0027t have builtin \"lightweight\" async primitives. That means coroutines or goroutines. I know about coio-rs and likes - they are not pleasant to work with. And if you start spawning thread on each incoming connection - welcome to 10k problem. You don\u0027t have enough memory to handle 1.5*10^6 connections.\n\nThere is also learning curve and ecosystem immaturity. Not everyone wants to spend their time learning new language each week or writing proper HTTP library (which is hard - look at the spec).",
					"date": "2016-07-07",
					"id": "d52m6dl",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "FunctionPlastic",
					"content": "It\u0027s a new language beating half of those benchmarks, I don\u0027t see a problem. And never did I say it was faster than Go.\n\n\u0026gt; But when it comes to handling concurrent connections and lot\u0027s of allocating to heap (Box and Vec says Hi!) Jemalloc is not as fast as GC enabled languages.\n\nOK, I didn\u0027t know this\n\n\u0026gt; Rust has thread system but doesn\u0027t have builtin \"lightweight\" async primitives. \n\nAgain, it\u0027s a new language. There is nothing magical about Go, and Rust can solve this issue with a library easily.\n\n\u0026gt; There is also learning curve and ecosystem immaturity.\n\nYep true\n\n\u0026gt; Not everyone wants to spend their time learning new language each week or writing proper HTTP library (which is hard - look at the spec).\n\nI genuinely believe Rust is not yet another random language. It\u0027s leaps beyond everything else.",
					"date": "2016-07-07",
					"id": "d52nil7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ar1819",
					"content": "\u0026gt; It\u0027s a new language beating half of those benchmarks, I don\u0027t see a problem. And never did I say it was faster than Go.\n\nLook at the code. I told you - _linear_ execution. Also there is a lot coming from LLVM optimization which have clang backing, while Go doesn\u0027t. I\u0027m not saying Rust is slow, or that Go should have used LLVM as backend(which is not impossible, but hard giving stack model). I\u0027m saying that claiming that Rust would work better without bringing real analysis and numbers sounds like a wishful thinking.\n\n\u0026gt; Again, it\u0027s a new language. There is nothing magical about Go, and Rust can solve this issue with a library easily.\n\nI answered that above. TL;DR - doesn\u0027t work when ecosystem is not created around those primitives.\n\n\u0026gt; I genuinely believe Rust is not yet another random language. It\u0027s leaps beyond everything else.\n\nI heard this numerous times before. Industry doesn\u0027t need \"next big thing\" because it never happens. It didnt happened with C++, with Java, with Python\\Ruby and with Node.  But they all got adopted by market. Industry need things that can be taught and can be understood by others and work reasonably well. That\u0027s why we almost don\u0027t have any Haskell jobs and myriad of PHP jobs \u003dD. And before you start talking about how bad PHP is - remember that Facebook use it, and they could replace it. But they didn\u0027t - instead they developed a compiler for it.\n\nIf you want to prove that Rust is capable - you should implement something with heavy load and then tell about your experience and stats (like Dropbox did). Not running around claiming that _Rust would solve that problem_.",
					"date": "2016-07-07",
					"id": "d52onry",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "raistmaj",
					"content": "Honestly I don\u0027t know too much about Rust, but as far I can read on internet, https://github.com/rust-lang/rust/issues/14961 , looks like if you want to have a decent selector over your connections, you will need to use native c-code(epoll/kqueue/etc), so why don\u0027t you use a language with that and is easy to use?.\n\nI don\u0027t think that 8 man-months have been looking the sky for the whole time, probably they have developed, designed, monitored, bug tracked like beasts. I\u0027m sure when they rewrote the chat, they needed to do things like communication with the twitch server to retrieve stuff like channels you are subscribed/banned/etc/admin/mod... -\u0026gt; sql-database, keep track off all the chat logs (probably a non-sql database), handle millions of connections per day, etc... \n\nI really don\u0027t know your experience in software development, but for your comment, I would kill myself if you were my boss.\n\nRust wasn\u0027t a production language then and even today, the main project developed in rust, servo, is slow as f**** and basically doesn\u0027t work well with a lot of places. So honestly, Rust community instead of trying to convince everybody about this new tool, it should give the community real reasons to use it, that is they only way to make an expert developer in c/c++/java/c# use that language, until that happens I\u0027m happy with c/c++/python/go/lua.\n",
					"date": "2016-07-06",
					"id": "d51oeiw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "FunctionPlastic",
					"content": "\u0026gt; so why don\u0027t you use a language with that and is easy to use?.\n\nWhich is why I\u0027m not claiming that they should\u0027ve picked Rust, just explaining what prompted the OP to write that they could\u0027ve.\n\nRust has no GC and fixes concurrency and safety for you. It\u0027s also really fast. Those three qualities are the context here, along with web dev, which is where Rust seems to lose.\n\n\u0026gt; I don\u0027t think that 8 man-months have been looking the sky for the whole time, probably they have developed, designed, monitored, bug tracked like beasts. \n\nWell other teams certainly, but this one seems to be fixing/tuning Go-specific stuff.\n\n\u0026gt; the main project developed in rust, servo, is slow as f**** and basically doesn\u0027t work well with a lot of places\n\nWhich has nothing to do with Rust as a language itself. Rust is fast.\n\n",
					"date": "2016-07-06",
					"id": "d51q0pd",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "TheMerovius",
					"content": "Well, apart from the obvious (productivity matters when choosing a language) one hint might be \"1,500,000 goroutines per process\". Rust, Swift or C++ (and, btw, really? C++? In 2016?) might not have a GC, but they have their own sets of problems.",
					"date": "2016-07-06",
					"id": "d513tuo",
					"isArchived": true,
					"isControversial": true,
					"score": 4
				},
				{
					"author": "carleeto",
					"content": "As someone who writes C++ every day, I can tell you that the DIY factor multiplies significantly when you\u0027re writing C++ code. That translates into a much larger potential for bugs, because the work required to produce standards compliant code is that much more. This is important because most networking standards rely on the correct implementation of other standards to work.\n\nGo\u0027s standard library is extremely strong from a networking perspective if you\u0027re looking for RFC compliant code.\n\nThe other thing with C++ is build time. With networking code, you\u0027d be foolish not to use something like BOOST, but you pay for the convenience in terms of iteration speed on your product. For a web based company I can very easily see reduced iteration speed being a deal breaker.\n\nLastly, you have the nature of web requests themselves - each HTTP request is independent and therefore can (and should) be handled concurrently. While C++  can do this, it is an area where it is very easy to make a mistake because the syntax of C++ doesn\u0027t lend itself well to describing the intent behind concurrent code and inferring overall concurrency structure. Again, this is an area where Go with its concurrency support based on Hoare\u0027s paper - Communicating Sequential Processes shines - it is comparatively easy to infer the intended concurrency design from Go code and more importantly, it is much easier to get it right to begin with.",
					"date": "2016-07-06",
					"id": "d51pvdm",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "SeerUD",
					"content": "This is a good question, and not one you should be being down-voted for, as it can give some people insight into pros / cons of the language for some specific use-cases.\n\nIt does seem to make sense when you consider what they migrated from - the development team would likely be able to pick up Go easier than languages like C++ or Rust. And, as has been said, Go hit 1.0 before any of those other languages. I\u0027m also not entirely sure what the job market is like for Rust / Swift right now.",
					"date": "2016-07-06",
					"id": "d515jp3",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				}
			]
		},
		{
			"author": "dgryski",
			"date": "2016-12-12",
			"id": "5hx5ba",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "Hi,\n\nI guess I should probably write something about my plans going forward.\n\nFirst, I obviously can\u0027t do this alone.  I\u0027ve asked /u/natefinch and /u/peterbourgon, two respected Gophers to help me get started with moderation.  I\u0027m open to other suggestions from the community for moderators.\n\nAs I mentioned in the \"Future of /r/golang\" thread, I have reached out to the mods of /r/rust on governing a technical community, and I will be taking their ideas in account.  Primarily this means trying to keep threads *technical*.  This means gentle nudging when things are getting heated.  Technical disagreement is fine, but do it nicely.  Criticising somebody\u0027s code or ideas is ok.  Attacking them personally is not. As a concrete example, consider the two versions of this particular case of technical disagreement: http://lkml.iu.edu/hypermail/linux/kernel/1510.3/02866.html and the rewritten version http://catcode.com/comments/2015/cf20151101.html .  The second version is what we should be striving for.\n\nOf course, everybody has different ideas about what \"nice\" means.  To some extent, this is why there are codes of conduct to begin with: to give everybody the same understanding of expected behaviour.  I strongly encourage everybody to read the \"Gopher Values\" section of the Go CoC: https://golang.org/conduct#values .\n\nThis is a fresh start for us all.  Together we can keep /r/golang an open and welcoming technical community.\n\nThanks,\n\nDamian",
			"title": "Hello Gophers.",
			"comments": [
				{
					"author": "rsc",
					"content": "Thank you.",
					"date": "2016-12-12",
					"id": "db3ngqj",
					"isArchived": true,
					"isControversial": false,
					"score": 68
				},
				{
					"author": "[deleted]",
					"content": "I\u0027d just like to say that I also program in rust, and the rust community is *fantastic*. I heartily second reaching out to them for advice.",
					"date": "2016-12-12",
					"id": "db3q7an",
					"isArchived": true,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "BadMoonRosin",
					"content": "In all of that earlier noise, did anything actually get *decided* about the relationship between Google and this subreddit?  \n\nI know that a couple of Googlers stepped down as mods.  But I also see that the sub is still listed as one of \"*the official forums operated by the Go project*\" on the [CoC link](https://golang.org/conduct#spaces).  I also see that the sidebar instructs people to contact Google rather than the mods if they have an issue.\n\nWho owns this forum at this point?  Is there still any of risk of shutdown or major disruption if someone at Google changes their mind down the road?\n\nP.S.  Regardless, thanks /u/dgryski!",
					"date": "2016-12-12",
					"id": "db3qh94",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "dgryski",
					"content": "Yes.  /r/golang is no longer considered official.  The bug to remove it from the website is https://github.com/golang/go/issues/18289 .\n\nI\u0027ve updated the sidebar to say to contact the moderators.",
					"date": "2016-12-12",
					"id": "db3qlpl",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "rsc",
					"content": "Please see https://www.reddit.com/r/golang/comments/5h87u6/proposal_dgryski_for_top_mod/ for details.\n",
					"date": "2016-12-12",
					"id": "db3u98t",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "joncalhoun",
					"content": "If you are looking for an extra mod I\u0027m happy to help out. Not sure what the process for picking them will be but I would like to be considered :)",
					"date": "2016-12-12",
					"id": "db4039v",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-13",
					"id": "db4dtvm",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "skelterjohn",
					"content": "That is kind of you to say. And, I am now a mod.",
					"date": "2016-12-13",
					"id": "db52grx",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "robertmeta",
					"content": "/u/dgryski congrats and apologies as is applicable, lots of work to be sure. \n\nSince the Go CoC is Creative Commons 3.0 -- maybe it is worth copy/paste/edit it on this subreddit directly, make a sticky with this subreddits CoC -- it can be as simple as switching the line of where to go to in case of conflict (no board email address -- the moderators / modmail instead) and you and other mods could edit and specialize it to make sense for reddit.  I think this would both remove any irrelevant parts that simply don\u0027t apply here -- and be a further clarification that this isn\u0027t an official space. ",
					"date": "2016-12-12",
					"id": "db3wbwy",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "dgryski",
					"content": "I\u0027ll tweak the wording on the sidebar to indicate that we strive to follow Gopher Values, and link to it.  That should make it clear which parts are applicable.  The sidebar already says to contact the moderators.",
					"date": "2016-12-12",
					"id": "db3xexq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-12",
					"id": "db3xuig",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "You are now a mod of /r/golang ;)",
					"date": "2016-12-12",
					"id": "db481os",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Decateron",
					"content": "I personally think that Linus\u0027 rant is way more effective than the rewritten version, though I think few people have earned the right to speak that harshly. That certainly is a lesson that programmer and many others will never forget. I\u0027m sure if Linus made the second comment the problem would be repeated again and again.",
					"date": "2016-12-13",
					"id": "db4mp7m",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "rsc",
					"content": "I disagree. You never earn the right to belittle others.\n",
					"date": "2016-12-13",
					"id": "db4n97w",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Decateron",
					"content": "Maybe I just tend to not take these sort of things as personally as some, but I see it more as belittling the code than the coder. If someone calls out my code as shit, it just motivates me to write better code.",
					"date": "2016-12-13",
					"id": "db4ome3",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "dasacc22",
					"content": "Even Linus doesn\u0027t agree with the tone of his own rants and has recently come to understand it as a problem. It\u0027s perfectly fine that people can still work together under such conditions (I\u0027m one), but doing so doesn\u0027t make it right. Call a spade for a spade and move on with things (or don\u0027t).",
					"date": "2016-12-13",
					"id": "db5pmvx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "goophr",
					"content": "Please share this advice with your colleagues.",
					"date": "2016-12-18",
					"id": "dbcifk5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nate510",
					"content": "I can certainly appreciate a good Linus rant. I\u0027ve read a few of them. \n\nHowever, I would be ashamed of myself if I lashed out at one of my developers the way he tends to. It\u0027s not the kind of behavior that belongs in a public developer community, no matter who is doing the speaking.\n",
					"date": "2016-12-13",
					"id": "db4ogur",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dasacc22",
					"content": "Thanks, you\u0027ll do great",
					"date": "2016-12-12",
					"id": "db3onty",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "Holy cow the mod list is looking bare. Was expecting a couple people to step down, but not a complete exodus. Did I miss a thread with more context? Thanks for inheriting the community! Hopefully things will be less dramatic moving forward with moderation that enjoys spending time here.",
					"date": "2016-12-12",
					"id": "db3s96g",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dgryski",
					"content": "More details at https://www.reddit.com/r/golang/comments/5h87u6/proposal_dgryski_for_top_mod/",
					"date": "2016-12-12",
					"id": "db3sfml",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "Thank you. Saw that before, still wasn\u0027t expecting everyone to leave.",
					"date": "2016-12-12",
					"id": "db3xadq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rsc",
					"content": "\u0026gt; To make the independence from Google clearer, I propose to hand my spot as top moderator to /u/dgryski (by deleting all other moderators, including myself) and leave him to establish a new slate of moderators drawn from active users of this subreddit that properly represent the community here. \n\nTo be clear, this morning I did just that. I deleted everyone else. They didn\u0027t leave. Only I left.",
					"date": "2016-12-13",
					"id": "db4ew8m",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "Gotcha. Thanks for spelling that out for me. Definitely missed the part about deleting other moderators.",
					"date": "2016-12-13",
					"id": "db4hs1r",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "iends",
					"content": "They had to to make dgryski the head mod.",
					"date": "2016-12-12",
					"id": "db41hk5",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tscs37",
					"content": "Great to see things picking up again, hopefully this will be a lot of fun!",
					"date": "2016-12-12",
					"id": "db3yclj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "natefinch",
					"content": "Thanks for your vote of confidence, Damian.  And thanks for all you do for this forum.  I\u0027ll do my best to help make this a welcoming and informative place for all Gophers.\n\nSorry to be a little late to the party - I had been travelling for work last week, and only just got back into the swing of things this morning.",
					"date": "2016-12-14",
					"id": "db6okkc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "kris-nova",
					"content": "Good call on getting the golang values called out here - I think that was a really smart move, and that values are on point. Touche. ",
					"date": "2016-12-12",
					"id": "db3mgf8",
					"isArchived": true,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "jacksonmills",
					"content": "Id rather it be phrased as \"allowed technical criticism\", rather than an \"allowed technical attack\". I don\u0027t really want to be a part of an environment where people can vent negativity if its disguised as a technical disagreement. ( If I wanted that, I\u0027d just stay in /r/javascript ).\n\nAdditionally, attacks are often not aimed to improve; criticism is, and one of the things I have always liked about the Go community is that it really does feel like people are trying to improve one another. So, lets keep that here if we can.\n\nEDIT:\n\nCute, downvotes. Always nice to see some developers prefer to attack others.",
					"date": "2016-12-12",
					"id": "db3yz7a",
					"isArchived": true,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "dgryski",
					"content": "I tweaked the wording to be \"Criticising somebody\u0027s code or ideas\" instead of \"Attacking ...\".",
					"date": "2016-12-12",
					"id": "db3zfov",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jacksonmills",
					"content": "Thanks!",
					"date": "2016-12-12",
					"id": "db3zpdo",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "goophr",
					"content": "I\u0027d like you to link to conversations within this sub that you feel have created a negative environment.\n\nThe scourge of political correctness has taken the voice of so many, it now threatens this sub.",
					"date": "2016-12-15",
					"id": "db8l7q8",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "0x4445565A",
					"content": "I\u0027m glad to see the sub reddit trying to become more of a welcoming environment.  I don\u0027t know why but I\u0027ve noticed a lot of corrosive behavior in the Go community, I\u0027m glad to see the mods here trying to change that.\n\nI think Go is very special and I would love to have a community where people are just happy to learn and teach.  For some reason  some people would rather just be nasty to others.  Either way hopefully the Go CoC will help with that!",
					"date": "2016-12-12",
					"id": "db3zjm2",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "bear1728",
					"content": "Sounds great to me. Keep up the great work!",
					"date": "2016-12-12",
					"id": "db3nwb4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "schoenobates",
					"content": "Thanks /u/dgryski",
					"date": "2016-12-12",
					"id": "db3xa6b",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "caseynashvegas",
					"content": "Thanks /u/dgryski for volunteering for this responsibility and for giving your time to the community.  I\u0027m hoping this can be a thriving community and I am glad to be a part of it.  ",
					"date": "2016-12-12",
					"id": "db3ytqk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "Excellent. Really excited for the future of this subreddit. ",
					"date": "2016-12-12",
					"id": "db41dch",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "torie_anal_gerbiler",
					"content": "Thanks for posting this. I\u0027m not a great coder, and i\u0027d be reluctant to share code if someone personally attacked me, the second version is a constructive criticism, a person could learn from that without feeling like a terrible human being. :)",
					"date": "2016-12-12",
					"id": "db4bc5b",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "zer0t3ch",
					"content": "Lemme know if you need a hand moderating, I\u0027ve got sufficient experience. ",
					"date": "2016-12-13",
					"id": "db4dgok",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "knotdjb",
					"content": "Good job /u/dgryski. I said this before but I think you should also consider inviting /u/fuzxxl - [he said he would accept any nomination](https://www.reddit.com/r/golang/comments/5h87u6/proposal_dgryski_for_top_mod/dayn07p/). He\u0027s the moderator of similar sized community at /r/c_programming and frequents here. He\u0027s done a fairly seamless job.",
					"date": "2016-12-13",
					"id": "db4jxep",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "znpy",
					"content": "Hi!\n\nI have always seen this subreddit as a less-technical/more-casual place to discuss about golang, and the golang mailing lists as the place about golang itself and more technical/serious place.\n\nWill /r/golang still be such place?",
					"date": "2016-12-13",
					"id": "db4wlt0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dgryski",
					"content": "The majority of the discussion should be around Go.  Drawing the line at exactly what counts as \"technical\" vs \"casual chit-chat\" is not something I want to police.  More important I think is the *tone* of the conversation: hence my comments about communication style.",
					"date": "2016-12-13",
					"id": "db4xoz4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "arschles",
					"content": "Thanks /u/dgryski",
					"date": "2016-12-14",
					"id": "db5z4d1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "qu33ksilver",
					"content": "Thanks for a fresh start. While we\u0027re at it, can we update the side bar too ?",
					"date": "2016-12-14",
					"id": "db6ht42",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dgryski",
					"content": "What do you suggest? ",
					"date": "2016-12-14",
					"id": "db6if1f",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "qu33ksilver",
					"content": "Not specific to sidebar, but I have a couple of ideas -\n\n- I think a well written wiki is a must.\n- An FAQ. Must contain: what \"framework\" to use when writing web apps.\n- Strictly no more trolling/whining on generics.\n\nOn the resources side, I think we need a revamp. I have found these articles to be very helpful - \n\n- https://peter.bourgon.org/go-best-practices-2016/\n- http://archive.is/http://arslan.io/ten-useful-techniques-in-go (The original link seems to be down because Fatih\u0027s domain does not resolve anymore) ping /u/farslan\n\n\n\n\n",
					"date": "2016-12-14",
					"id": "db6m43y",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "farslan",
					"content": "My article can be found here: https://medium.com/@farslan/ten-useful-techniques-in-go-ddd94296c21b#.55q7pve4c Thanks for the ping. ",
					"date": "2016-12-14",
					"id": "db6mkzt",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "qu33ksilver",
					"content": "Time to update my pocket queue !",
					"date": "2016-12-14",
					"id": "db6pxjx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "logrusorgru",
					"content": "You\u0027re just not quite angry enough for opensource",
					"date": "2016-12-16",
					"id": "dba3czo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dgryski",
					"content": "I don\u0027t understand. ",
					"date": "2016-12-16",
					"id": "dba4obn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "goophr",
					"content": "A fresh start wouldn\u0027t include the CoC.\n\n*The gold I received for stating the obvious wasn\u0027t necessary but is appreciated - gold trumps downvotes.",
					"date": "2016-12-13",
					"id": "db4darg",
					"isArchived": true,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "dgryski",
					"content": "I was very careful in my wording.  This subreddit is not under the purview of the CoC, but I was using the descriptions of Gopher Values as a list of encouraged and discouraged behaviours.\n\nCan you point to a specific clause in \"Gopher Values\" section that you think inhibits *technical* discussion?\n\nThe comments are still not a free-for-all.  As I stated above, personal attacks are not welcome here.",
					"date": "2016-12-13",
					"id": "db4vdbj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "goophr",
					"content": "I\u0027d prefer the top mod to be a true leader - not a puppet. That CoC has caused so much grief that it shouldn\u0027t even be considered as a foundation to a new beginning.\n\n*I\u0027m not even sure why CoCs were brought up in the meet\u0026amp;greet post. I haven\u0027t seen behavior here that would warrant such actions.",
					"date": "2016-12-13",
					"id": "db5b95i",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "gohacker",
					"content": "Nitpick: please, do not add a period (full stop) at the end of your titles (headlines).\n\nRef: http://english.stackexchange.com/questions/32884/should-i-use-a-period-at-the-end-of-a-headline",
					"date": "2016-12-13",
					"id": "db4neb1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dgryski",
					"content": "I can\u0027t edit titles :(",
					"date": "2016-12-13",
					"id": "db4xps1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "LGTM. I\u0027m not sure how r/rust compares with HN, but I find that HN fosters the most productive conversations of any open, diverse internet community I\u0027ve come across. That governance model might be worth considering as well.",
					"date": "2016-12-12",
					"id": "db3oov8",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "[deleted]",
					"content": "Could not disagree more. ",
					"date": "2016-12-12",
					"id": "db3pzp9",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "weberc2",
					"content": "Really? It seems to me that things only get hairy/contentious when a political topic comes up, and I think the moderation does a good job of keeping things under control given the circumstances. Out of curiosity, what forum is better moderated in your view?",
					"date": "2016-12-12",
					"id": "db3qc1l",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "Well, I don\u0027t really frequent hacker news, because I just find it to be a very unpleasant place to visit. So, I can\u0027t really give it a fair assessment. But here goes:\n\n1) It\u0027s an echo chamber for the valley/startup mentality and associated ideologies. For that reason alone, I\u0027m not interested in hanging out there. I\u0027m tolerant of those view points, but I have no interest in posting somewhere that those are the prevailing attitudes.  \n\n2) The attitude there is...unbearably smug. I realize this is not a strong argument, but fuck if it isn\u0027t true.\n\nNow, HN may still have a fantastic moderation policy and maybe good discussions happen there, but I will never find out because the 10 times I\u0027ve been on HN have been more than enough for me. ",
					"date": "2016-12-12",
					"id": "db3zddq",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "weberc2",
					"content": "1. Really? I\u0027ve not really perceived this despite having been active for years. Further, I\u0027m from the midwest and I\u0027ve worked in \"traditional\" industries as well as a startup. Only once in a great while do I find anyone making valley-centric statements about the world at large. In particular, a good chunk of HN seems to be non-American (lots of British spelling or non-native-English speakers).\n\n2. I\u0027ve not been part of an tech-centric internet community where this isn\u0027t true. In my view, the distinction is that the commenters on HN are more likely to be knowledgeable about something (smug or not). Further, I guess I prefer metered smugness to the outright flaming that I see in other fora. For example, HN comments are much more polite, intelligent, and correct than /r/programming (where the loudest, rudest opinions are voted to the top so long as they\u0027re *popular*, with complete disregard for correctness). If indeed your Internet haunts are of better quality than HN, I\u0027d sincerely love to learn about them!\n\n\u0026gt; Now, HN may still have a fantastic moderation policy and maybe good discussions happen there, but I will never find out because the 10 times I\u0027ve been on HN have been more than enough for me.\n\nSorry to hear about your negative experiences. In my opinion, it\u0027s less the *policy* than the willingness of the moderators to be subjective and moderate posts (remove posts or propose more respectful language, etc) that they perceive to be overly negative--I say this as someone who has had comments moderated a few times. I guess HN mods seem purposeful about *cultivating* a community for respectful, intelligent conversation (obviously lots slips through the cracks). But I guess your mileage may vary.",
					"date": "2016-12-12",
					"id": "db410gg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thewhitetulip",
					"content": "Even I have had a good experience with HN, I am not from US.",
					"date": "2016-12-13",
					"id": "db5cv6d",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dgryski",
					"content": "The HN commenting rules are on https://news.ycombinator.com/newsguidelines.html under \"In Comments\" .  Not a bad set of guidelines.",
					"date": "2016-12-12",
					"id": "db3qxg2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "robertmeta",
					"content": "Actually really good and lots of specific annoying things called out, titles, etc. ",
					"date": "2016-12-12",
					"id": "db40sgz",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Angwe",
					"content": "Don\u0027t fuck this up for me.",
					"date": "2016-12-13",
					"id": "db4vtzc",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "NeverUse-YouPromised",
					"content": "Is there any chance of getting some nicer CSS? The default blue on reddit is close enough to Go blue that the default style almost works, but it can\u0027t hurt.",
					"date": "2016-12-13",
					"id": "db4ogca",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "ChristophBerger",
					"content": "The Go programming language: free.  \nA Book on Go: About $40.  \n/u/dgryski\u0027s contributions to this subreddit: priceless.\n\nJust had to say this.  \nActually, I want to comment on something else:\n\n\u0026gt; I have reached out to the mods of /r/rust on governing a technical community, and I will be taking their ideas in account.\n\nI just headed over to /r/rust and I am amazed. Respectful tone from anybody, absolutely no downvoted post (I tried hard to find one and failed), even no downvoted comments (I also tried hard to find one and failed). If we could take over some of this spirit to this subreddit, it would benefit everyone.\n\nDon\u0027t get me wrong: The Go community is awesome. It is just that some kind of negativism appears to have crept into this subreddit, and I think we can do better.",
					"date": "2016-12-13",
					"id": "db4vplp",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "thewhitetulip",
					"content": "I also went to the rust subreddit, I could not find an ounce of negativity. There is a little negativity in our golang sub, but yes, we can do better.",
					"date": "2016-12-13",
					"id": "db5ckyo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "alecthomas",
			"date": "2017-09-18",
			"id": "70v8fd",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Just released Chroma, a pure Go syntax highlighting engine with support for ~150 languages",
			"comments": [
				{
					"author": "divan0",
					"content": "Fantastic! Can\u0027t wait to replace hugo\u0027s dependency on Pygments!",
					"date": "2017-09-18",
					"id": "dn65csc",
					"isArchived": true,
					"isControversial": false,
					"score": 54
				},
				{
					"author": "digitalcraftsman_",
					"content": "There\u0027s already a [pull request](https://github.com/gohugoio/hugo/pull/3891) to integrate it into Hugo. Stay tuned!",
					"date": "2017-09-19",
					"id": "dn7m1x9",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "guitmz",
					"content": "this!",
					"date": "2017-09-18",
					"id": "dn69g5m",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "tdewolff",
					"content": "Exactly what I was thinking!",
					"date": "2017-09-18",
					"id": "dn6nov9",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "8lall0",
					"content": "this, this, so much this.",
					"date": "2017-09-18",
					"id": "dn6crz0",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "natefinch",
					"content": "\u0026gt; I mostly only converted languages I had heard of\n\nMy favorite line from the README ^ :)",
					"date": "2017-09-18",
					"id": "dn664mt",
					"isArchived": true,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "alecthomas",
					"content": "You have to draw the line somewhere ;)",
					"date": "2017-09-18",
					"id": "dn6t6pu",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "natefinch",
					"content": "OMG, this is amazing.  I\u0027m SO psyched about this!  Thanks for all your hard work, I can\u0027t imagine how much time work must have been.  ",
					"date": "2017-09-18",
					"id": "dn662az",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "PaluMacil",
					"content": "I think you\u0027ll find a lot of excited developers starring this today.",
					"date": "2017-09-18",
					"id": "dn6eh0c",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "KenjiTakahashi",
					"content": "Now that\u0027s something I could possibly scratch from my TODO list.",
					"date": "2017-09-18",
					"id": "dn656cf",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "natefinch",
					"content": "Ditto.",
					"date": "2017-09-18",
					"id": "dn662jn",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "alecthomas",
					"content": "Mine too! Calling out to Pygments was not ideal :(",
					"date": "2017-09-18",
					"id": "dn6t8st",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "petulant_snowflake",
					"content": "Been waiting for something like this for a long time. Was going to build something like this at one point, but did not have time. Mad awesome props, thanks alecthomas!",
					"date": "2017-09-19",
					"id": "dn6ye6m",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "earthboundkid",
					"content": "Hugo has a dependency on Pygment. I would like it if that were dropped for Chroma. ",
					"date": "2017-09-19",
					"id": "dn6zhii",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "alecthomas",
					"content": "They\u0027re [looking into it](https://twitter.com/gohugoio/status/909884463202566144), I think.",
					"date": "2017-09-19",
					"id": "dn70n6k",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "wjmvh",
					"content": "Nice! Definitely will come in handy. I think it would be relatively easy to link up with something like [Black Friday](https://github.com/russross/blackfriday) by defining a custom renderer with a `BlockCode` callback that hands the code block to Chroma. This way you could do markdown with syntax highlighting of code blocks, which might come in handy for blog-style articles or documentation.",
					"date": "2017-09-19",
					"id": "dn7l1ck",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "stanislavb",
			"date": "2017-07-08",
			"id": "6m09i7",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Golang has made it to the top 10 of most popular programming languages 🎉",
			"comments": [
				{
					"author": "alialtun14",
					"content": "Not surprising but a pleasing growth. But still this company\u0027s data is absolutely unreliable. \n\nFor example:\n\nJavaScript... 2.606%     (tiobe:rank: 7     redmonk rank: 1)\n\nDart...........  1.330%    (tiobe:rank: 24   redmonk rank:  \u0026gt; 30)\n\nTypescript....  0.00.. %  (tiobe:rank: 137 redmonk rank: 17)\n",
					"date": "2017-07-08",
					"id": "djxxqqv",
					"isArchived": true,
					"isControversial": false,
					"score": 43
				},
				{
					"author": "muesli",
					"content": "The Typescript issue stems from many translation files also ending in \".ts\" file extensions. Yeah, the tiobe index is a joke. ",
					"date": "2017-07-08",
					"id": "djy2zz0",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "PaluMacil",
					"content": "Those sites measure different things. TIOBE measures search engine and wiki activity, whereas Redmonk measures usage via Stack Overflow and Github. This is akin to measuring interest (popularity) vs usage. If you want to know something like commercial companies spending time in one language or another, then you simply aren\u0027t going to get that because there isn\u0027t a way to gather the data. Even job postings are problematic because my company posts for C# developers but a quarter of everyone winds up using some Go and about a quarter wind up working with Python with me being in all three groupings.\n\nI think *it makes sense that trends on Redmonk would trail trends on TIOBE based upon what they measure*. In some cases, they might not fully follow through to Redmonk at all. For example, even though Go is my favorite for a lot of things and I read a lot about it, I still wind up spending a lot of my development time in C# which is where the bulk of my previous work lies.\n\nAs someone else said, TypeScript itself is probably thrown off with things like translations using a .ts extension. There are probably some ways to correct that and perhaps Redmonk will be able to improve the statistic.\n\nOverall, none of our measures are going to be perfectly reliable, but **if we understand what the measures are composed of, then they can all wind up being useful**.",
					"date": "2017-07-08",
					"id": "djy4j3d",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "jgillich",
					"content": "What. The. Fuck.\n\nTheir data must be absolute nonsense.",
					"date": "2017-07-08",
					"id": "djy16mz",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "[deleted]",
					"content": "Maybe I\u0027m missing something here, but how does comparing TIOBE\u0027s ranking with Redmonk\u0027s mean TIOBE\u0027S data is unreliable? Why isn\u0027t Redmonk\u0027s data unreliable instead?",
					"date": "2017-07-08",
					"id": "djy1rsj",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "alialtun14",
					"content": "According to this company, Typescript is very popular in the commercial industry, but at position 137. The Dart that is unpopuler according to google trends is 17th place in this index. (From the analysis report 6 months ago)\n\nThis company says that they get half of the data needed for the index from the google search engine.\n\nhttps://www.google.com/trends/explore?q\u003d%2Fm%2F0n50hxv,%2Fm%2F0h52xr1\n\n",
					"date": "2017-07-08",
					"id": "djy2nfe",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "snippet2",
					"content": "It\u0027s because all the big js frameworks use it now. https://github.com/trending/typescript\n\nNobody uses it on its own.",
					"date": "2017-07-08",
					"id": "djykqwp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "alialtun14",
					"content": "Only two examples: \n\n1) https://redditblog.com/2017/06/30/why-we-chose-typescript/\n\n2) https://www.reddit.com/r/programming/comments/64e6x7/typescript_got_approved_as_internal_development/\n\n\nIn my opinion, typescript implements a similarity on the client side of GO\u0027s happiness on the server side.\n",
					"date": "2017-07-08",
					"id": "djyqdlc",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "comrade-jim",
					"content": "TypeScript only seems popular because microsoft pays people to shill it. ",
					"date": "2017-07-08",
					"id": "djyf2ok",
					"isArchived": true,
					"isControversial": false,
					"score": -8
				},
				{
					"author": "alialtun14",
					"content": "If microsoft pays people for typescript, google gets big slice of cake :)\n\nTypescript is now an official language at Google \n\nSource: http://angularjs.blogspot.de/2017/04/official-languages-at-google.html\n\n",
					"date": "2017-07-08",
					"id": "djyptpd",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "howeman",
					"content": "And Go was 55 last year. I don\u0027t think Go has seen that much growth\n",
					"date": "2017-07-08",
					"id": "djy279t",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "serverangels",
					"content": "Anecdotal I know, but as a devops / sysadmin guy in the UK adding golang to my CV has made a measurable increase in bites from recruiters.\n\nI was a programmer from the age of 10 til I was 34, then I got bored and moved into Linux sysadmin stuff. Golang is the first language that has interested me since in programming again. It\u0027s not the cure for cancer that some people say, but for server-side stuff it\u0027s a league above writing 200 line bash scripts.",
					"date": "2017-07-08",
					"id": "djy3jqq",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "Khanthulhu",
					"content": "Had a recruiter send me a job lead that mentioned go. It\u0027s all the excuse I needed to learn go",
					"date": "2017-07-08",
					"id": "djy3yfk",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "serverangels",
					"content": "Yup.\n\nI\u0027ve actually got 3 golang projects ongoing, but none finished. All will be open-source but the golang community is... \u0027opinionated\u0027 about the way it should be written so i\u0027m worried people will think it\u0027s crap.\n\nI\u0027m just starting a new contract that means i\u0027ll be on a train for 2 hours a day on Monday, so i\u0027ll spend that time cleaning the code, adding more tests, which will hopefully get it to a point where I open source at least one of them.",
					"date": "2017-07-08",
					"id": "djy4cow",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Khanthulhu",
					"content": "I\u0027m still a little worried that it\u0027s going to be a Jack of all master of none type language because it\u0027s not as fast as C or as easy to write with as Python. However, with Google\u0027s backing, concurrency support, and the love the community gives it I feel like it\u0027s future has great potential.",
					"date": "2017-07-08",
					"id": "djy4ln8",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kaeshiwaza",
					"content": "Go is not faster than C but it\u0027s easier to scale when you use goroutine.\n\nCompare to Python it\u0027s also not as easy to write as is, but with tooling it can become easier than Python. But most important it\u0027s easier to maintain because of simplicity of the code and static typing.\n\nIt\u0027s what i saw after decades of Python+C and only few years in Go !",
					"date": "2017-07-08",
					"id": "djy527j",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "serverangels",
					"content": "I personally see it as a server-side language for anything where the equivalent bash script would be too unwieldy, or where the only alternative software is pretty old and unmaintained/unsafe. The really nice network library in stdlib really opens up possibilities.\n\n",
					"date": "2017-07-08",
					"id": "djy4xzj",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Khanthulhu",
					"content": "Certainly. I\u0027m excited to see what happens with the language",
					"date": "2017-07-08",
					"id": "djy5lr1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "robe_and_wizard_hat",
					"content": "I don\u0027t see how being a general \"good language\" for a broad set of problems is really a bad thing.  Go is popular right now because of this very thing.",
					"date": "2017-07-08",
					"id": "djypv5e",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Khanthulhu",
					"content": "Developers tend to use the best tool for the job so if you are a generally good language you\u0027re not guaranteed to be used like a more narrow language that is really good at one thing. \n\nPut another way, every language has a niche. Go is awesome at concurrency but it being used elsewhere is less certain. ",
					"date": "2017-07-09",
					"id": "djyt2wv",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "robe_and_wizard_hat",
					"content": "I respectfully disagree about your first point.  My experience shows that programmers tend to use the most familiar tool for the job (or whatever the company is using) as long as it isn\u0027t wildly inappropriate (e.g. using awk to create a webservice).  However, with a set of N familiar tools, he/she would definitely use the one with the least friction for the task at hand.",
					"date": "2017-07-09",
					"id": "djyt6c7",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Khanthulhu",
					"content": "Familiarity is certainly a reason people choose the tool they do, but if there\u0027s a better tool wouldn\u0027t it eventually gain enough market saturation that it edges the other language out?\n\nThere can be multiple trends to language choices.",
					"date": "2017-07-09",
					"id": "djytxjs",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "RustyCrustyBoy",
					"content": "\u0026gt; All will be open-source but the golang community is... \u0027opinionated\u0027 about the way it should be written so i\u0027m worried people will think it\u0027s crap.\n\nI know what you mean. I wonder is this \"opinionation\" a thing only in the Go community? How can this issue be solved?",
					"date": "2017-07-08",
					"id": "djygdaf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "eXeC64",
					"content": "Software dev in London: I get a lot of people reaching out to me because of my Go experience. Seems like there\u0027s a bunch of Go startups in London, or nearby.",
					"date": "2017-07-09",
					"id": "djz9oes",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Mcnst",
					"content": "So, in one year July 2016 to July 2017, Golang gained 2.20 absolute percentage points, for a total of 2.363%, moving from #55 to #10.  Currently, the last individually itemised language is #50, Groovy, having 0.300%.\n\n***SEEMS LEGIT!!!***",
					"date": "2017-07-08",
					"id": "djyjrgs",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "vorg",
					"content": "But Apache Groovy moved from #18 to #50 in one year (July 2016 to July 2017). Perhaps Golang\u0027s ranking now is no more legit than Groovy\u0027s ranking then.\n",
					"date": "2017-07-09",
					"id": "dk06jlz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Mcnst",
					"content": "I think it proves that their whole rating is rather BS.  Go wasn\u0027t as popular a year ago, but it surely wasn\u0027t quite 0.163.",
					"date": "2017-07-10",
					"id": "dk19b0f",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "I just gotta love this line\n\u0026gt; The hipster programming languages Kotlin, Elixir and Hack...",
					"date": "2017-07-08",
					"id": "djxye1o",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "ImreSamu",
					"content": "graph:  https://www.tiobe.com/tiobe-index/go/",
					"date": "2017-07-08",
					"id": "djxy8mh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mingp",
					"content": "Unfortunately, given [how TIOBE calculates rankings](https://www.tiobe.com/tiobe-index/programming-languages-definition/), the whole thing is a bit of a joke. They are literally counting Google search results, only for volume, with no care for actual content or activity.\n\nTheir primary competitor for language rankings, Redmonk, is not much better, either. The [Redmonk rules for calculating rankings](http://redmonk.com/sogrady/2017/03/17/language-rankings-1-17/) are somewhat more complex, but at the core based on the same core flaw of trying to aggregate purely by volume with no regard for signal.",
					"date": "2017-07-09",
					"id": "djzio1h",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "n1ghtm4n",
					"content": "Downvoted! Please stop legitimizing TIOBE.",
					"date": "2017-07-09",
					"id": "djz845b",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				}
			]
		},
		{
			"author": "farslan",
			"date": "2017-09-14",
			"id": "704ske",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "The ultimate guide to writing a Go tool",
			"comments": [
				{
					"author": "divan0",
					"content": "Wow. That\u0027s huge and useful article for anyone who want to master his/her AST skills.",
					"date": "2017-09-14",
					"id": "dn0ekej",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "mhausenblas",
					"content": "Excellent write-up, thanks for taking the time to put this together! Methinks `fatih/structtag` should be part of stdlib, any plans there? One question re the post, though: in [this image](https://farslanblog.files.wordpress.com/2017/09/gomodifytags-0012.jpeg) shouldn\u0027t the output be `json` tags rather than `xml` or am I missing something?",
					"date": "2017-09-15",
					"id": "dn199rj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "farslan",
					"content": "Thanks! Yeah it should be json and not xml. Let me fix it :) On `structtag` no there are no plans for it on my side. ",
					"date": "2017-09-15",
					"id": "dn19gv7",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "reven80",
					"content": "Great article. Thanks for posting it.\n",
					"date": "2017-09-15",
					"id": "dn15h8b",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sharno",
					"content": "That\u0027s a great article, thanks a lot for the effort. I\u0027d like to go through all the code though whenever I have the time",
					"date": "2017-09-16",
					"id": "dn2lmxo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "andradei",
					"content": "EDIT: Thanks for putting your talk in blog format. Great content.",
					"date": "2017-09-19",
					"id": "dn8833q",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "arschles",
			"date": "2017-07-18",
			"id": "6o2lc3",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "I\u0027m an engineer on the Azure containers team, formerly an engineer at Deis (which was acquired by Microsoft). We\u0027re looking for Go engineers to work on Kubernetes and related cloud/distributed systems. The job description is [here](https://careers.microsoft.com/jobdetails.aspx?ss\u003d\u0026amp;pg\u003d0\u0026amp;so\u003d\u0026amp;rw\u003d1\u0026amp;jid\u003d290815\u0026amp;jlang\u003dEN\u0026amp;pp\u003dSS). DM me if you\u0027re interested.",
			"title": "Microsoft is Hiring Go engineers to work on Kubernetes",
			"comments": [
				{
					"author": "kevinjqiu",
					"content": "Do you guys still do stack ranking performance reviews?\n",
					"date": "2017-07-19",
					"id": "dkep7yj",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "marstrMSFT",
					"content": "[MarStr](https://github.com/marstr) here, I work on the [Azure SDK for Go](https://github.com/Azure/azure-sdk-for-go) and have worked at MSFT for about four years.\n\nStack ranking was done away with shortly after I joined as a full-timer. Now we have a system that just asks you to write a paragraph about your coworkers and rate from one to five their ability to get stuff done, help others get stuff done, and mentor others. I\u0027ve heard horror stories about stack ranking causing weird back stabbing and competitiveness, but haven\u0027t experienced anything like that personally now that it\u0027s gone.\n\nEdit: Adding links",
					"date": "2017-07-19",
					"id": "dkeyrc0",
					"isArchived": true,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "pmf",
					"content": "So, the short answer is \"yes\".",
					"date": "2017-07-19",
					"id": "dkfchde",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "responds-with-tealc",
					"content": "I think the short answer is \"no\". The replacement evaluation criteria mentioned is EXTREMELY common industry wide for peer review processes.",
					"date": "2017-07-19",
					"id": "dkfdqgl",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "kevinjqiu",
					"content": "Thanks for the reply.\n",
					"date": "2017-07-19",
					"id": "dkffap2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "quincyj2",
					"content": "Officially no. But there is a budget for rewards and so the leaders have to allocate that budget among their employees. So there \"isn\u0027t\" a stack ranking. But the leaders have to decide who receives how much of the reward. Internally lots of people say the real change was we lost transparency. \n\nThe real question is are employees backstabbing each other. I think that varies team to team. I\u0027ve been lucky enough to not deal with that. And it is part of what my team talks about when hiring people is that we want team players.",
					"date": "2017-07-20",
					"id": "dkhh9a1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "amerine2",
					"content": "Is your team remote friendly? If not globally, at least US or close timezone?\n\nJust for clarity:^I ^am ^not ^asking ^this ^because ^I\u0027m ^interested ^in ^the ^job ^just ^curious ^about ^team ^composition.",
					"date": "2017-07-18",
					"id": "dkeexhs",
					"isArchived": true,
					"isControversial": false,
					"score": 43
				},
				{
					"author": "arschles",
					"content": "We are definitely considering remote for the right person! Many of the ex-Deis team is not located in Boulder.\n\n\nFor anyone considering the job, but not located in Boulder, we\u0027re looking for people who can work on US timezones as amerine2 said. Also, expect to travel about once a quarter to Boulder or Seattle/Redmond.",
					"date": "2017-07-19",
					"id": "dkfruqx",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "amerine2",
					"content": "Thanks for the follow-up. \u0026lt;3",
					"date": "2017-07-19",
					"id": "dkfu4by",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ZoidbergWill",
					"content": "Last time I looked at Azure openings, they were mostly in the US.\n\nJob posting says the following so I assume not:\n\n\u0026gt; Locations\n\u0026gt;\n\u0026gt; United States, Boulder (CO)",
					"date": "2017-07-19",
					"id": "dkfb2kb",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "joncalhoun",
					"content": "I\u0027ve never seen a job listing that says remote for MSFT but I\u0027ve been told they have them on some teams. No idea how you find those openings if you are looking though.",
					"date": "2017-07-19",
					"id": "dkfjz4c",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "newsagg",
					"content": "Generally you do your job for a while then someone determines that you can work effectively remotely.  There is no direct positions that are inherently remote. \n",
					"date": "2017-07-19",
					"id": "dkfq3ph",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "joncalhoun",
					"content": "While this is nice for existing employees who want to transition to remote, it pretty much eliminates anyone who already works remotely from applying.",
					"date": "2017-07-19",
					"id": "dkftjkz",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "kris-nova",
					"content": "I came in with the same acquisition and was astonished how Go and Kubernetes oriented the team is. It\u0027s really amazing to be honest.",
					"date": "2017-07-18",
					"id": "dkedd8s",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "Removalsc",
					"content": "A little off topic, but did you give a talk at Gophercon about functional programing?",
					"date": "2017-07-18",
					"id": "dked1fo",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "kris-nova",
					"content": "He sure did! And it was great, I want to write everything in FP now!",
					"date": "2017-07-18",
					"id": "dked9z6",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-18",
					"id": "dkedejx",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Morgahl",
					"content": "Videos will be out 2 weeks after then end date of the con.",
					"date": "2017-07-18",
					"id": "dkeejbl",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "carlisia",
					"content": "Me too! Here\u0027s a little writeup preview of his talk: https://about.sourcegraph.com/go/functional-programming-in-go",
					"date": "2017-07-19",
					"id": "dkeq3j2",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "arschles",
					"content": "FWIW, my slides will be up today as well. I\u0027ll post on Twitter (@arschles) when they are.",
					"date": "2017-07-19",
					"id": "dkfrwwh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "gobijan",
					"content": "I was introduced to the Kubernetes source code by an Redhat Kubernetes Core Contributor. He showed me the nasty parts how they solved the lack of generics. Actually they use strings to concat valid go source code based on reflections. A little tedious but given the constraints for language choice they had (fast, compiled binary, close to the metal) I think Go is still a decent choice for Kubernetes.",
					"date": "2017-07-19",
					"id": "dkfaxiu",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "emddudley",
					"content": "Are you [hit8run](https://news.ycombinator.com/user?id\u003dhit8run) on HN? Here is the identical comment in the discussion there: https://news.ycombinator.com/item?id\u003d14803879",
					"date": "2017-07-19",
					"id": "dkfm8k5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-19",
					"id": "dkenvhp",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "[deleted]",
					"content": "That shouldn\u0027t be possible.\n\nedit: Oh, possibly their careers page might have lower capacity.",
					"date": "2017-07-19",
					"id": "dkffru7",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "forgiveangel",
					"content": "anything for entry level career?",
					"date": "2017-07-19",
					"id": "dkew7pb",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "arschles",
					"content": "Not at the moment, forgiveangel.",
					"date": "2017-07-19",
					"id": "dkfs1ad",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "forgiveangel",
					"content": "alright, well I\u0027ll reach out in a year with more experience",
					"date": "2017-07-19",
					"id": "dkfs9b6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "angryundead",
					"content": "This is awesome. I work with Kubernetes (OpenShift) a lot now and I love the platform and really like seeing the community that has been built around it.",
					"date": "2017-07-19",
					"id": "dkfark0",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "furrypurpledinosaur",
					"content": "I like this job, would fit me well. Probably can\u0027t apply from Europe right?",
					"date": "2017-07-19",
					"id": "dkfayel",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "rat9988",
					"content": "Why wouldn\u0027t you apply and see the result ?",
					"date": "2017-07-19",
					"id": "dkfoehn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "arschles",
					"content": "We\u0027re considering remote employees, but you\u0027d have to work on US timezone hours daily. If that works for you, you can absolutely apply.\n\nI wrote up a little more about our expectations for remote employees [here](https://www.reddit.com/r/golang/comments/6o2lc3/microsoft_is_hiring_go_engineers_to_work_on/dkfruqx/?utm_content\u003dpermalink\u0026amp;utm_medium\u003dapi\u0026amp;utm_source\u003dreddit\u0026amp;utm_name\u003dgolang)",
					"date": "2017-07-19",
					"id": "dkfs5ft",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "furrypurpledinosaur",
					"content": "I see. I live in London. What hours during US timezone do you need to work in? There seems to be 6-7 hours difference between UK and Boulder.",
					"date": "2017-07-19",
					"id": "dkg7625",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "furrypurpledinosaur",
					"content": "8 A.M. to 5 P.M. would be 1 P.M. to 9 P.M. here. That might be manageable.  ",
					"date": "2017-07-20",
					"id": "dkgx9nb",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "furrypurpledinosaur",
					"content": "OK. I applied. Now will see what happens!",
					"date": "2017-08-05",
					"id": "dl7oiqk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "arschles",
					"content": "Hello again,\n\nWe filled the previous position, but we\u0027re hiring again for Kubernetes work. This one would be for senior engineers.\n\nHere\u0027s the new job post: https://www.reddit.com/r/kubernetes/comments/7phrg7/microsoft_is_looking_again_for_folks_to_work_on/.\n\nIf you want and think you\u0027d be a good fit, can you DM my colleague on Twitter? https://twitter.com/khnidk",
					"date": "2018-01-10",
					"id": "dshc2xg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "vldo",
					"content": "I\u0027m really amazed at how complicated stuff can be at this hiring level.\n\nEven feedback seems like a burden.\n\nPlease hire UX for the feedback area.",
					"date": "2017-07-19",
					"id": "dkeolpn",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "gazarsgo",
					"content": "Turns out, getting someone\u0027s honest opinion when there are financial incentives at stake is actually a really hard problem to solve.",
					"date": "2017-07-19",
					"id": "dkezu2o",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "TotesMessenger",
					"content": "I\u0027m a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:\n\n- [/r/hackernews] [Microsoft is Hiring Go engineers to work on Kubernetes](https://np.reddit.com/r/hackernews/comments/6o9jh5/microsoft_is_hiring_go_engineers_to_work_on/)\n\n- [/r/sidj2025blog] [Hacker News: Microsoft is Hiring Go engineers to work on Kubernetes](https://np.reddit.com/r/sidj2025blog/comments/6o81nu/hacker_news_microsoft_is_hiring_go_engineers_to/)\n\n[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don\u0027t vote in the other threads.) ^\\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to\u003d/r/TotesMessenger))*\n\n[](#bot)",
					"date": "2017-07-19",
					"id": "dkf9kxg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "caarlos0",
					"content": "I’m curious: are MS employees obliged to use windows and PCS?",
					"date": "2017-07-20",
					"id": "dkhcahp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "arschles",
					"content": "Nope. In fact, all of the ex-Deis team got Macbooks from Microsoft.",
					"date": "2017-07-20",
					"id": "dkhgmy3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "quincyj2",
					"content": "Most of the boulder team are on mac books. Running Mac OS X. Though there are a number of things that are easier in windows, like changing passwords for your domain account.",
					"date": "2017-07-20",
					"id": "dkhgqzu",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "caarlos0",
					"content": "Neat!",
					"date": "2017-07-20",
					"id": "dkhhn4n",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "erstaples",
					"content": "Hi arschles, please check your DMs :)",
					"date": "2017-07-19",
					"id": "dkfbtx6",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				}
			]
		},
		{
			"author": "Zikes",
			"date": "2017-02-17",
			"id": "5uo5v7",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "How I Ruined Office Productivity With a Face-Replacing Slack Bot",
			"comments": [
				{
					"author": "freeaddition",
					"content": "\u0026gt; I could probably have feathered the cutout a little better, but a little voice in my head told me that shittier is the way to go here.\n\nGold.",
					"date": "2017-02-17",
					"id": "ddvngdu",
					"isArchived": true,
					"isControversial": false,
					"score": 56
				},
				{
					"author": "icholy",
					"content": "can\u0027t stop laughing.",
					"date": "2017-02-17",
					"id": "ddvn12h",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "jimmycarr1",
					"content": "This might be my favourite Go program of all time.",
					"date": "2017-02-18",
					"id": "ddwci3b",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "jringstad",
					"content": "I\u0027ve used opencv haar cascades quite a lot for face-detection (since it\u0027s so conveniently available and even comes with a pretrained .xml...) but unfortunately the performance is really not that great... it tends to detect faces where there are none, and often it detects a face in sorta the wrong location etc.\n\nI\u0027m using all the different haar cascades for face detection that come with opencv, btw, both the multiple frontal and the profile ones (and then I coalesce multiple overlapping matches into one region)\n\nI\u0027ll probably be looking to replace it with something based on tensorflow or so at some point in the future...",
					"date": "2017-02-17",
					"id": "ddvtegw",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Zikes",
					"content": "Totally agreed about the OpenCV detection. I was at first disappointed that it didn\u0027t return confidence factors or any other details about the results, and lots of test images (particularly high res ones) would get some pretty crazy results. That\u0027s actually a big reason I went with the \"intentionally shitty\" aesthetic, with the bad cutouts and such.\n\nI\u0027ve been considering an Amazon Rekognition version, which offers I think 1,000 image analyses for $1, and has some decent metadata about the faces it finds.",
					"date": "2017-02-17",
					"id": "ddvu2yc",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "jmking",
					"content": "This is fan-fucking-tastic",
					"date": "2017-02-18",
					"id": "ddvz0rv",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "AultimusPrime",
					"content": "Heya, this is really cool thank you!\n\nIf anyones interested, I tidied up the code a bunch removing globals and moving a lot of code out of main and cut a reasonable API and example usage in main. In your bot program you can then just call the library function rather than using exec. \n\nhttps://github.com/aultimus/gofaceswap",
					"date": "2017-02-24",
					"id": "de5q8r9",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TonySesek556",
					"content": "I know this is a bit late, but I made something very similar to this in Python a while back but in the form of a Reddit bot.\n\nI also used OpenCV and some basic jigglin\u0027 around to get it all working. \n\nAnd in the end, it had no use but it gave me and the guys some giggles. :D\n\nI might upload the code to github in the future, for other people to gawk at my horrible code. :P",
					"date": "2017-04-10",
					"id": "dg1y9sh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dejus",
					"content": "I once ruined office productivity with a slack app. It is officially my most successful side project and it just costs me money to maintain. Yay.",
					"date": "2017-02-17",
					"id": "ddvoubz",
					"isArchived": true,
					"isControversial": false,
					"score": -3
				},
				{
					"author": "Zikes",
					"content": "That\u0027s not a very Chris attitude.",
					"date": "2017-02-17",
					"id": "ddvp6bu",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "a_blue_ducks",
					"content": "Your work is wonderful.  Sharing with my team on Monday ",
					"date": "2017-02-18",
					"id": "ddw7jnx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Zikes",
					"content": "Glad you like it! I updated the github readme with some quick instructions for using your own faces, if you\u0027d like to set up your own bot.",
					"date": "2017-02-19",
					"id": "ddxenp9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "mwholt",
			"date": "2014-11-14",
			"id": "2m8k1q",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "The Go project is moving to GitHub",
			"comments": [
				{
					"author": "manueslapera",
					"content": "YEEESSSSS\n\n\nIm sorry but I absolutely hate google code",
					"date": "2014-11-14",
					"id": "cm1zny9",
					"isArchived": true,
					"isControversial": false,
					"score": 55
				},
				{
					"author": "coverslide",
					"content": "Hey, before there was a github, it was better than the alternative ... SourceForge. Ugh.",
					"date": "2014-11-14",
					"id": "cm2059r",
					"isArchived": true,
					"isControversial": false,
					"score": 38
				},
				{
					"author": "manueslapera",
					"content": "well, i guess that looking at it that way...",
					"date": "2014-11-14",
					"id": "cm20del",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "beefsack",
					"content": "Imagine how amazing the thing that replaced GitHub will be.",
					"date": "2014-11-14",
					"id": "cm25aib",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "Elite6809",
					"content": "Back to Visual SourceSafe 6!",
					"date": "2014-11-14",
					"id": "cm26jgg",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "tech_tuna",
					"content": "Visual Source Safe Cloud.",
					"date": "2014-11-14",
					"id": "cm29njc",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "SkaveRat",
					"content": "gitweb?",
					"date": "2014-11-14",
					"id": "cm2b8ps",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "djhworld",
					"content": "I totally forgot about that. \n\nRemember FreshMeat too? ",
					"date": "2014-11-14",
					"id": "cm2l8rq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "howeman",
					"content": "I prefer the issue tracker on google code, but the source browsing is much nice on github.",
					"date": "2014-11-14",
					"id": "cm22aht",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "Google Code didn\u0027t receive any updates for quite a while now and does not even use the \"new\" Google design introduced quite a while ago (even Google Reader got that!). I guess it will be discontinued soon.",
					"date": "2014-11-14",
					"id": "cm2g46i",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "headzoo",
					"content": "I found out yesterday that [Microsoft has open sourced the .NET core](http://www.wired.com/2014/11/microsoft-open-sources-net-says-will-run-linux-mac/), and moved it to [Github](https://github.com/dotnet/corefx), and today I find out Go is moving to Github. Such great news, and I have to congratulate the Github developers for making such an impressive product that everyone wants to use.",
					"date": "2014-11-14",
					"id": "cm23lo6",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "arechsteiner",
					"content": "It\u0027s really feels like Christmas came early this year!",
					"date": "2014-11-14",
					"id": "cm279ux",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "shix",
					"content": "Don\u0027t forget emacs moved to github too.",
					"date": "2014-11-14",
					"id": "cm2sbh3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "milkypostman",
					"content": "Emacs moved to git but still hosted on savannah. ",
					"date": "2014-11-16",
					"id": "cm3wt0s",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "forlackofabetteridea",
					"content": "Wow, this should really make core development more accessible. Glad to see the wiki is moving over too!",
					"date": "2014-11-14",
					"id": "cm1y2ga",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "gohacker",
					"content": "How this affects sub-repositories? Are they still golang.org/x/* ?",
					"date": "2014-11-14",
					"id": "cm1zj5m",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "joeshaw",
					"content": "Yes. In retrospect it is clear that the reason for the move was in preparation for the move to github. ",
					"date": "2014-11-14",
					"id": "cm2076e",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "natefinch",
					"content": "Yep.  Which is the whole point of vanity urls. :)",
					"date": "2014-11-14",
					"id": "cm28yt9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gladpaper",
					"content": "I don\u0027t think it\u0027ll affect the golang.org/x/* repos. After all this is how they work at the moment:\n\n    % curl golang.org/x/net | grep go-import\n    \u0026lt;meta name\u003d\"go-import\" content\u003d\"golang.org/x/net hg https://code.google.com/p/go.net\"\u0026gt;",
					"date": "2014-11-14",
					"id": "cm20cv7",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "joeshaw",
					"content": "One thing I am curious about is how the `go` tool deals with a substantial change to the `content` field there.  Like, when the repo format changes from `hg` to `git`.  Probably a `go get -u` will simply nuke the old repo and replace it with a git checkout.  I guess we\u0027ll see in a couple of weeks.",
					"date": "2014-11-14",
					"id": "cm2pddj",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "gladpaper",
					"content": "I just tested.\n\nThe first time you run \"go get -u golang.org/x/net/context\" it requests http://golang.org/x/net and clones the repo that appears in the go-import meta field.\n\nThe next time you run that command it just updates the hg repo - it doesn\u0027t seem to make a request to http://golang.org/x/net.",
					"date": "2014-11-15",
					"id": "cm38uba",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "fern4lvarez",
					"content": "For me the big news are not the Github movement, but the migration to git! Awesome news!",
					"date": "2014-11-14",
					"id": "cm28ohp",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "BurningFox",
					"content": "\u0026gt; For me the big news are not the Github movement, but the migration to git! Awesome news!\n\nWhy?\n\nI\u0027m asking because whenever I see news about open source projects migrating from Mercurial to Git (surprisingly, I\u0027ve never seen projects migrate from Git to Mercurial), the reason is always either \"because most contributors like Git more\" or \"because we want to migrate to GitHub\", not actual technical advantages of Git over Mercurial. Yet people are so excited, as if the project has just built a full-fledged AI or something. It feels like GitHub is more like a religion than a hosting site for code.\n\nSo, why is Git so much better than Mercurial?",
					"date": "2014-11-14",
					"id": "cm29r3d",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "jmking",
					"content": "[Network Effects](http://en.wikipedia.org/wiki/Network_effect)\n\nIt\u0027s the same reason everyone uses Facebook and Steam despite there being (arguably) better alternatives.\n\nHaving one less site/account to go to to do your job/hobby is a big convenience.",
					"date": "2014-11-14",
					"id": "cm2ftm8",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "Whether Git is better than Mercurial is mostly a coinflip, they are very closely matched. It\u0027s just as you hinted at that there is a Github but there is no Mercurialhub. Everybody new to version control has defaulted to picking up Git for a few years now.",
					"date": "2014-11-14",
					"id": "cm2afmd",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "BurningFox",
					"content": "\u0026gt;  there is a Github but there is no Mercurialhub\n\nBut isn\u0027t^BitBucket^fine^too?",
					"date": "2014-11-14",
					"id": "cm2b7tw",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2014-11-14",
					"id": "cm2epwd",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "barake",
					"content": "Are you sure? I have the option of making any of my repos public or private on Bitbucket, and I\u0027m cruising on the free plan.",
					"date": "2014-11-14",
					"id": "cm2h221",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "lhxtx",
					"content": "Hmmmm. That must be new. I\u0027ll check it out. \n\nEdit: nice. You\u0027re right as long as it\u0027s fewer than 5 users. ",
					"date": "2014-11-14",
					"id": "cm2h7io",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "BurningFox",
					"content": "According to the [Plans \u0026amp; Billing help page](https://confluence.atlassian.com/display/BITBUCKET/Plans+and+billing), public repositories allow unlimited users. Although small-to-mid open source projects usually have only one person with push access and everyone else sends pull requests.",
					"date": "2014-11-14",
					"id": "cm2hr3x",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "lhxtx",
					"content": "You\u0027re right. My apologies. :)",
					"date": "2014-11-15",
					"id": "cm35gnm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gladpaper",
					"content": "\u0026gt; So, why is Git so much better than Mercurial?\n\n\u0026gt; \"because most contributors like Git more\"\n\nI\u0027m pretty sure that\u0027s the reason. I\u0027m sure there are all sorts of technical arguments, but even if git was harder to use and had worse performance if 90% of your contributors know git and 30% know mercurial it\u0027s obvious which one you\u0027d want to use.",
					"date": "2014-11-14",
					"id": "cm2ad9z",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "SeaCowVengeance",
					"content": "Bitbucket is essentially \"MercurialHub\" but it\u0027s obviously immensely less popular and has fewer features than GitHub at this point.",
					"date": "2014-11-14",
					"id": "cm2b9n4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "BurningFox",
					"content": "\u0026gt;if 90% of your contributors know git and 30% know mercurial\n\nBut if you\u0027re migrating from Mercurial, then all your contributors know Mercurial, otherwise they couldn\u0027t have contributed anything.\n\nOr do people often send messages like \"Man, I\u0027d love to send a patch to your project, if only you used git...\"?",
					"date": "2014-11-14",
					"id": "cm2ba4s",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Kyrra",
					"content": "It\u0027s doubtful someone would not contribute to Go based on mercurial alone.  I\u0027d say understanding Gerrit and the processes the Go team outlines for contribution would be more of a barrier than Git or HG.",
					"date": "2014-11-14",
					"id": "cm2o1w3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "gladpaper",
					"content": "Good point. I should have said \"if 90% of your contributors know git **well** and 30% know Mercurial **well*\".",
					"date": "2014-11-14",
					"id": "cm2dgmp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Kyrra",
					"content": "Ya, it has little to do with Git vs Mercurial and everything to do with Google Code vs GitHub.  I prefer Google Code\u0027s bug tracking system more than Githubs, but that\u0027s about it.\n\nGoogle Code at this point is dying.  The haven\u0027t added anything to it in the last 2 years, only removal of features (see their [WhatsNew](https://code.google.com/p/support/wiki/WhatsNew) page).  Google has decided it\u0027s dead.  I think Go only went on Google Code originally because there was a mandate that open source projects from google to be hosted there.  It looks like that mandate has since changed and they are moving now.\n\nI personally like Mercurial more, but the battle has basically been lost at this point.",
					"date": "2014-11-14",
					"id": "cm2lqwd",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Betovsky",
					"content": "\u0026gt; surprisingly, I\u0027ve never seen projects migrate from Git to Mercurial\n\nIf I\u0027m not mistaken. Facebook migrated from Git to Mercurial.",
					"date": "2014-11-15",
					"id": "cm2u2vv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "fabmilo",
					"content": "awesome. I think this will further speed up golang development",
					"date": "2014-11-14",
					"id": "cm1xlsm",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "TheMagicHorsey",
					"content": "Well, google is probably not going to be investing in improving Google Code.",
					"date": "2014-11-14",
					"id": "cm2d7i3",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "qrwteyrutiyoup",
					"content": "Sounds great. It would be even nicer if there was a pull requests-based workflow as well.",
					"date": "2014-11-16",
					"id": "cm3qj46",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "simon-whitehead",
					"content": "*heavy breathing* - I am pretty excited for this. I think the entire contribution process will become nicer. Time will tell I guess.",
					"date": "2014-11-14",
					"id": "cm23r41",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "mm_5687",
			"date": "2016-11-25",
			"id": "5eubdp",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "Given the recent [proposal to delete](https://groups.google.com/forum/m/#!msg/golang-nuts/XoOhzUClDPs/jgSWxng7CAAJ) /r/golang by /u/bradfitz, I feel it would be appropriate to have a non-knee-jerk discussion around the future of the subreddit - one where the people who actually use the subreddit get a say in its future. \n\nI\u0027m not bothering to entertain the idea of the subreddit being deleted, and thankfully that risk now seems to have passed. The key question now is how do we move forward and what is the future of /r/golang?\n\nI think the key topics that need to be discussed are as follows:\n\n* **Purpose:** What is the purpose of /r/golang? What sort of content do we want to support? Are there certain types of content (blog-spam, installation questions, etc.) that /r/golang should remove or point elsewhere?\n\n* **A moderation revamp:** Should the Go Team members be asked to step down? With the exception of Brad, who has now stepped down, none of the Go team moderators are active contributors to the subreddit. They don\u0027t contribute, but they do control. I personally believe the subreddit should be community controlled, but who in the community that responsibility should fall to is a more difficult question to answer.\n\n* **Community Building:** There\u0027s clearly a lot of contempt for /r/golang in the mailing lists. How (or should) this be addressed? This subreddit should be part of the community that people enjoy coming to. There are questions around the Code of Conduct and subreddit rules that need to be addressed.\n\n* **Engagement and Structure:** The current moderation team have been moderators, but have done little to drive engagement. Many of the most popular subreddits hold regular daily / weekly automated posts for code reviews, help and support, etc. which help to drive engagement whilst also keeping the sub-reddit fairly clean. Is this something we should start doing? Code review Tuesday, Favourite Library Friday for some (badly) named examples. \n\n* **Customisation:** It would be nice to see some more light customisation of the subreddit, and a more useful sidebar. Many of the links in the sidebar are sub-optimal or out-dated (Google+, Resources for new Go programmers) and could be better handled.\n\nWhat are your thoughts? \n    \n---\n\n**Edit:** Please *don\u0027t* use this as a thread to throw insults at specific people or simply as a place to hate on the CoC. Focus on the improvements we can make.\n",
			"title": "The Future of /r/golang",
			"comments": [
				{
					"author": "rsc",
					"content": "Please see https://www.reddit.com/r/golang/comments/5h87u6/proposal_dgryski_for_top_mod/.\n",
					"date": "2016-12-08",
					"id": "day4r5i",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "WellAdjustedOutlaw",
					"content": "I think the kinds of things that have been being posted to /r/golang have been fine thus far. Mostly links to articles/blogs about using it, questions about the language, etc. There hasn\u0027t been to much spammy crap I can recall.\n\nIf the Go team isn\u0027t active here, they should _not_ be moderators here. End of statement. This would be like Guido being a mod for /r/python and not using it. Foolish. I understand they want some level of control over things with their language\u0027s name...but sorry, this is the Internet. That\u0027s not really how things work in practice. Active members of the community here should be chosen as mod, we should re-assess the rules of this sub, and move on.\n\nI\u0027m not sure why the mailing list shits on this sub so much, since the mailing list itself has been the scene of so many childish interactions and outbursts. I\u0027m guessing it\u0027s the general reddit hate (which I have too for lots of sections of this site). So if they don\u0027t like it, that\u0027s fine. They don\u0027t have to use it.\n\nI think building out a somewhat decent wiki of common topics, approaches, hints, tips, etc. would help newcomers quite a bit. We can direct people toward common and de facto environment configurations, promote commonly used toolchains, etc. Community code reviews tend to get...touchy, though. People take critiquing of their code very personally for lots of reasons, and having a veteran review a beginner\u0027s code and leave shit comments like \"This isn\u0027t how we do things\" is a great way to start a war here.\n\nThat\u0027s my $0.02. I think having this conversation here rather than in the \"Let\u0027s delete the sub\" conversation is a much better idea. Remove some of the charged emotion, keep the conversation focused, and hopefully we can make something positive out of this.",
					"date": "2016-11-25",
					"id": "daf7xyp",
					"isArchived": true,
					"isControversial": false,
					"score": 134
				},
				{
					"author": "M0d3s",
					"content": "I think a critical point is to define \n\u0026gt; What is the purpose of /r/golang?\n\nAs stated by /u/mm_5687 at with the post.\n\nOn the other hand,\n\u0026gt; If the Go team isn\u0027t active here, they should not be moderators here.\n\nI Agree. This goes with the \"purpose\" statement, why should Go-dev team be moderators here? I mean, is /r/golang related to the actual development of Go? In case the answer is affirmative, why then is this subreddit public anyway?\n\nOn the other hand\n\n\u0026gt; I think building out a somewhat decent wiki of common topics, approaches, hints, tips, etc. would help newcomers quite a bit\n\nI second this.  I\u0027m new to Go language and I\u0027ve joined /r/golang just to learn more about it, to know about projects, releases, and that kind of information one seeks at a community. I\u0027m sure that the most popular programming languages lack several features that Go has, like the concept of Workplace for example. I come here to get in touch with some sort of Go community that shares information about how gophers code in go, i can\u0027t say I would condemn any content i\u0027ve seen here so far.",
					"date": "2016-11-25",
					"id": "dafhqix",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "thewhitetulip",
					"content": "Let\u0027s make a github org to post things there. It\u0027d be really helpful.",
					"date": "2016-11-26",
					"id": "dafzlb7",
					"isArchived": true,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "M0d3s",
					"content": "I\u0027m following a project called [awesome-go](https://github.com/avelino/awesome-go) there. It has lots of resources(links) about Go related and useful projects going on. I\u0027m not sure if that\u0027s what you have in mind.",
					"date": "2016-11-26",
					"id": "dag0jt9",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "thewhitetulip",
					"content": "Yes, that\u0027s the one I am talking about as well. \n\nhttps://github.com/avelino/awesome-go/pull/953\n\nI have no clue why the travis build failed, it is a book, it does not have a unit test case doc!",
					"date": "2016-11-26",
					"id": "dag0uai",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "ZetaHunter",
					"content": "https://github.com/avelino/awesome-go/blob/master/repo_test.go",
					"date": "2016-11-27",
					"id": "dahvpke",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thewhitetulip",
					"content": "/u/ZetaHunter, thank you very much! \n\nI figured out what was wrong, their test case doesn\u0027t allow comma in the name, which my PR had. \n\nIt is refreshing to have some constructive feedback rather than a destructive one.",
					"date": "2016-11-28",
					"id": "daj2wkv",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "gdm85",
					"content": "Agree. The only aspect I would \"skip\" in this reddit is the wiki, just to avoid fragmentation. Subreddit-specific topics should still be handled on a wiki here, but language-specific topics should always be referred to the official Golang wiki in my opinion.",
					"date": "2016-11-26",
					"id": "dag1bcf",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "WellAdjustedOutlaw",
					"content": "I don\u0027t disagree generally. But I would _hate_ to see the Golang wiki \"choose sides\" and officially endorse a particular project that isn\u0027t part of the core. For instance, if the Golang wiki went on at length about how to use Gorilla Mux, and completely ignored the myriad competitors it has.\n\nIn other words, I feel like the Golang project should be as neutral as possible except for core libraries/packages whereas a community site can be as opinionated as the community wishes.",
					"date": "2016-11-26",
					"id": "dag4a36",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "arschles",
					"content": "\u0026gt; I think the kinds of things that have been being posted to /r/golang have been fine thus far\n\n+1 on that. I contribute as much as I can, and come here almost daily for a variety of reasons. I also frequent https://forum.golangbridge.org/, and I think the diversity is important.",
					"date": "2016-12-02",
					"id": "daplhgf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "chmikes",
					"content": "What is the mailing list referred to ?",
					"date": "2016-11-26",
					"id": "dag1ylr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "WellAdjustedOutlaw",
					"content": "Gonuts. The mailing list\u0027s name is gonuts. I\u0027m not telling you to go nuts.",
					"date": "2016-11-26",
					"id": "dag4aik",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "tclineks",
					"content": "How about a change to the sidebar to make it clear it\u0027s unofficial and have current mods that would prefer to see the subreddit closed/deleted step down? Seems straightforward.\n\nLet\u0027s not make a mountain out of a molehill and move on.",
					"date": "2016-11-25",
					"id": "dafbvqi",
					"isArchived": true,
					"isControversial": false,
					"score": 26
				},
				{
					"author": "chmikes",
					"content": "Why not. I don\u0027t think anybody really care about it. The person who asked to delete goland amended",
					"date": "2016-11-26",
					"id": "dag27im",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "tscs37",
					"content": "\u0026gt;Purpose\n\nFirst and formost, /r/golang should serve for sharing projects and leading beginners on the way to learn the programming language. This includes answering beginner questions (over and over again), this is the best way to promote the language itself.\n\nI check /r/golang regularly to see what kind of neat projects everyone has come up with and to see if I could maybe help some beginners and show them the ropes.\n\n\u0026gt;A moderation revamp\n\nI\u0027m in favor of a community controlled moderation team. The actions taken by brad do not shine a bright light on them either and IMO there is a question of trust. Can we trust them to *not* delete this subreddit without notice because it was decided on a mailing list? I\u0027m not certain of this anymore.\n\nThe community should be responsible for itself.\n\n\u0026gt;Community Building\n\nOf course, there needs to be friendliness and understanding. I\u0027m not particularly in favor of a code of conduct, atleast if it exceeds \"don\u0027t be an ass\" (vague, I know). I\u0027m a coder, I have simple needs and a tough skin helps to accept criticism and filter out everyone who\u0027s just trolling or something like that.\n\nIMO there is nothing better than to be open for ideas from everyone, regardless of who they are or what they do elsewhere. Code is code, that is what counts.\n\n\u0026gt;Engagement and Structure\n\nI think it would help to clean up the sub a bit to have a daily or weekly Code Support Thread where beginners can ask simple, one or two sentence questions.\n\nA monthly Code Review Thread would be a nice thing too, though I\u0027d probably look out for how popular it is before I\u0027d make it permanent (maybe try it a couple times and see if people warm up to it)\n\nI\u0027d avoid Daily Threads if possible. A weekly, pinned thread is sufficient\n\n\u0026gt;Customisation\n\nIt would be nice to link to the awesome-go list on github and maybe the libhunt site, it\u0027s a nice resource.\n\nA link to the go tour and the golang standard document would be neat for beginners.\n\nLastly, I\u0027d add some flavored CSS. I wouldn\u0027t overdo it like in some subreddits, rather I\u0027d take an pragmatic approach and clean up the interface a bit, reduce contrast (bright white makes developers eyes hurt) and focus the content.\n\n\u0026gt;What are your thoughts?\n\nChicken Soup or Thai Soup.",
					"date": "2016-11-25",
					"id": "dafc76u",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "thewhitetulip",
					"content": "You won\u0027t believe how unpopular it is to make content simple to understand to newcomers. I will give an example of another Googler maintained project. http://vuejs.org, https://github.com/vuejs/vuejs.org/issues/565, they were more polite than the Go authors, but they just brushed off this concern. \n\nJust added \"don\u0027t use webpack or browserify if you aren\u0027t familiar with build tools based on node.js\", I added a PR , https://github.com/vuejs/vuejs.org/pull/591, their basic example didn\u0027t explain it well, the guide should have been and can be more beginner friendly. But nope, closed because it is intentional.\n\n\u0026gt; code of conduct\n\nThe thing is, here people downvote any and all comments which are rude, so it doesn\u0027t really matter to have their code of conduct.\n\n\u0026gt; link to awesome go\n\nThis is welcome, but linking to the official go language book wiki is great, it is censorship free, I had submitted a book to awesome-go, it hasn\u0027t been accepted yet and the authors didn\u0027t even comment yet. So, we\u0027d be missing out on the stuff which has not been committed to the repo, maybe we can start a github repository for this subreddit to answer FAQ\u0027s. \n\nWe can have coding competitions!!\n\nedit: ok, no point in coding competitions. another edit is I changed my point. html is fine with invalid markup thanks to /u/theGeekPirate for pointing this out.",
					"date": "2016-11-26",
					"id": "dafyzkr",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "chmikes",
					"content": "I would suggest to add recurrent postings asking the community for the latest nice go coding tricks they found, the latest no-no on some go code they want to share. On r/france they have such recurrent postings and this helps keeping the list active and interresting. ",
					"date": "2016-11-26",
					"id": "dag2o33",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "tscs37",
					"content": "\u0026gt;You won\u0027t believe how unpopular it is to make content simple to understand to newcomers.\n\nI think this is the usual greybeard-problem, tho with less greybeards.\n\nIt might help to understand that teaching somebody to program is a not a zero-sum game, you don\u0027t loose anything, on the other hand, you can only gain and the other will definitely gain from it. Teaching others to program is the most essential thing we can do.\n\nIt is not a shame to be taught or teach somebody.\n\nOf course some of the elite don\u0027t care, the greybeards (no offense to actual greybeards here), but hopefully enough people do.\n\n\u0026gt;The thing is, here people downvote any and all comments which are rude, so it doesn\u0027t really matter to have their code of conduct.\n\nWhich is why it should stay at \"don\u0027t be an ass\", it\u0027s enough of a code of conduct to have a clear baseline and vague enough that the community can fully police itself.\n\n\u0026gt; had submitted a book to awesome-go, it hasn\u0027t been accepted yet and the authors didn\u0027t even comment yet.\n\nEven if awesome-go doesn#t accept every pull request, it\u0027s still an invaluable treasure of tools and libraries that make life easier and it should be included in the list.\n\nMore traffic also might encourage the maintainer to accept more pull requests and police the list better.\n\n\u0026gt;coding competitions\n\nMaybe, in my experience competitions on a subreddit quickly go forgotten because nobody really wants to do them, not that it\u0027s a bad idea.",
					"date": "2016-11-26",
					"id": "dag3j4k",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thewhitetulip",
					"content": "Yes, awesome-go is awesome. But don\u0027t you think we, as the /r/golang should have our own resource out there on github?\n\nTrue, nobody would want to do the competitions.\n\nActually, I like /r/golang the way it is right now, with a theme change or without a theme change. I am happy.\n\nI would just suggest the github org and a wiki on reddit itself if we don\u0027t want github org.\n\nAbout \"don\u0027t be an ass\", I agree. The community will police itself",
					"date": "2016-11-26",
					"id": "dag45li",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tscs37",
					"content": "Putting up a github org would certainly not a bad idea... Tho I\u0027d probably be a copy of awesome-go at first.\n\nMaybe the repos could be focused on helping beginners instead of showing of cool tools.",
					"date": "2016-11-26",
					"id": "dag4959",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "We don\u0027t even have to go to github to do that, we can enable the wiki here on reddit itself. But then again, github would be better, who knows, tomorrow they\u0027ll (reddit\u0027s eng team) delete /r/golang",
					"date": "2016-11-26",
					"id": "dag4bfn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tscs37",
					"content": "Github could do it too, I\u0027d mirror it elsewhere for safety... like bitbucket.\n\nI\u0027ll think about this, maybe I\u0027ll even do something.",
					"date": "2016-11-26",
					"id": "dag4dfg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thewhitetulip",
					"content": "I\u0027d love to help out with maintaining it. Just let me know if you need help.\n\nWe can have a bunch of links, useful links on reddit, FAQs kinda, because people ask the same questions over and over again.",
					"date": "2016-11-26",
					"id": "dag4ekf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "theGeekPirate",
					"content": "Your pull request for Vue.js doesn\u0027t make any sense—it\u0027s completely conformant to the [HTML5 standards](https://www.w3.org/TR/html5/syntax.html#optional-tags) to omit those tags. In fact, the [Google Style Guide](https://google.github.io/styleguide/htmlcssguide.xml?showone\u003dOptional_Tags#Optional_Tags) even recommends it.\n\nEDIT: fwiw, I use Vue.js using plain .js/.html/.css files (well, I use SCSS), without any other dependencies. I created a short Makefile to concatenate and minify the files, but these steps are unnecessary.\n\nAlso, Evan You (creator/maintainer of Vue.js) no longer works for Google (and hasn\u0027t for a few years now if memory serves me correctly).",
					"date": "2016-11-26",
					"id": "dag2d1j",
					"isArchived": true,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "thewhitetulip",
					"content": "Behaviour like yours is exactly the problem which I wanted to highlight. (inflexibility for adding things for aiding newcomers). \n\nIt doesn\u0027t make sense to you, but it makes for the general user who is new to front end frameworks and reads the official guide ten times and does a npm install webpack and the npm installs the entire internet after half an hour and the user is still clueless.\n\nedit: Okay, html is fine without the head tag, but look at the whole PR, and the guide after the pr merges, it encourages the user to have the experience without having to go to jsfiddle, copy paste this to a html file and go along with the guide.\n\nIt is myopic really and beginner unfriendly. Thanks for commenting it out, I would not have pointed the problem out without your comment.",
					"date": "2016-11-26",
					"id": "dag3z9t",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "theGeekPirate",
					"content": "\u0026gt; Behaviour like yours is exactly the problem which I wanted to highlight. (inflexibility for adding things for aiding newcomers).\n\nEvery single issue you\u0027ve had seems to stem from a [single piece of text you must have skipped over](http://vuejs.org/v2/guide/#Getting-Started).\n\n\u0026gt; The official guide assumes intermediate level knowledge of HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back! Prior experience with other frameworks helps, but is not required.\n\nThe text you wanted to add would only help people who know nothing about JS. You should not be using any framework if you are clueless about the language the framework enhances in the first place, and thus the extra text is superfluous.\n\nIt\u0027s just like using a Go framework without any Go knowledge—it simply doesn\u0027t make any sense!\n\nYou should really read [this](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.7nut18230) to learn how the state of things are in the current ecosystem, and hopefully don\u0027t end up killing yourself due to the numerous abstractions and tools required.\n\nI was completely new to front-end frameworks as well (although I knew JS), and was unable to get my head around React/Angular documentation at the time. Vue.js was the first project which made sense to me, thanks _to_ the documentation. The entire npm/webpack/whatever flavour of the month is usually where newcomers have problems (hell, I have issues with that entire ecosystem, which is why I tend to be as vanilla as possible with my implementations).\n\nBut it is not the job of Vue.js to teach you how to use every other tool, they have their own documentation for that exact purpose.\n\n\u0026gt; Okay, html is fine without the head tag, but look at the whole PR, and the guide after the pr merges, it encourages the user to have the experience without having to go to jsfiddle, copy paste this to a html file and go along with the guide.\n\nThe JSFiddle is _easier_ to grasp because you can see the working example right in front of your face. No need to copy and paste. This gives new users a playground from which they can test different things to see how the application works without having to set up anything.\n\nWith your method, they\u0027d have to create a file somewhere on their computer (and assuming they\u0027re using Windows, have removed Windows from hiding file extensions, considering by default they\u0027re hidden), copying and pasting in the text, then having to open it in their web browser. If you actually care about people who are absolutely new to JS, these are yet more unnecessary steps to get a working example.\n\nOr they can just open up the JSFiddle and play around with the example.\n\nThis is _exactly_ the same reason why [Golang](https://tour.golang.org/welcome/1), [Rust](https://doc.rust-lang.org/book/guessing-game.html), etc. all use online compilers to teach as well. It\u0027s easier.\n\n\u0026gt; It is myopic really and beginner unfriendly.\n\nWell, that\u0027s like, your opinion, man. Vue.js has been used by multiple large companies and by thousands of people, yet you\u0027re the only one who seems to have any issues with it.\n\nIn reality, it\u0027s actually the exact opposite.\n\nPerhaps all these problems don\u0027t stem from the documentation?\n\nEDIT: \n\u0026gt; html is fine with invalid markup\n\nIt\u0027s not invalid markup, that\u0027s the entire point. It\u0027s valid, as per the standard I linked.",
					"date": "2016-11-26",
					"id": "dag55io",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "edit: this is a waste of time.",
					"date": "2016-11-26",
					"id": "dagen43",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "neoasterisk",
					"content": "Thousands of other developers including myself have been in your place. \n\nDo you know what we did? We sat down quietly, learnt what we needed to learn in order to understand the material and moved on.\n\nDo you know what we didn\u0027t do? ",
					"date": "2016-11-26",
					"id": "dagft66",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thewhitetulip",
					"content": "\u0026gt;Do you know what we didn\u0027t do?\n\nWrite books which would help others save time?",
					"date": "2016-11-26",
					"id": "daggkmq",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "thewhitetulip",
					"content": "Wow, so I am fighting +vely to improve the docs and I am being downvoted.\n\nedit: I accept that I did a poor job at explaining my points in the hug f* ridden msg above. ",
					"date": "2016-11-27",
					"id": "dah4niz",
					"isArchived": true,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "theGeekPirate",
					"content": "It\u0027s not a difference of opinion, you\u0027ve simply been incorrect numerous times throughout your posts. In fact, your last reply to me is so full of it I didn\u0027t even know where to start with a response.\n\nI\u0027m not sure if there\u0027s a language gap or something (your written English seems decent), but there\u0027s definitely a problem somewhere.\n\nYou don\u0027t seem to be able to understand what everyone else does.\n\nSo, good luck, and thanks for your contributions.\n\nJust be sure to not annoy anyone who tells you that they don\u0027t want your pull request as you did [here](https://github.com/vuejs/vuejs.org/pull/591#issuecomment-261842479), as in the end, it\u0027s their project, and most likely understand it far better than you do.",
					"date": "2016-11-27",
					"id": "dah76u1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thewhitetulip",
					"content": "\u0026gt;Just be sure to not annoy anyone who tells you that they don\u0027t want your pull request as you did here, as in the end, it\u0027s their project, and most likely understand it far better than you do.\n\nYes, I won\u0027t annoy them. Deleted the message.\n\nThe problem would be that the post was written out of frustration and anger. Either my points are totally wrong _or_ I did a horrible job at explaining them.\n\nI\u0027m sorry for that. I\u0027ll be polite in my point below, if you seem it to be valid, pls leave a comment.\n\n\"The problem I have is that the doc teaches people to use webpack and things like that. Do we really need that? The docs are great, can\u0027t we have a simple example in the docs to copy paste for newcomers? The thing is, when anyone new comes to the docs, they would want to run examples by themselves, and execute it, (here I think offline examples are great rather than jsfiddle, because half the time I am not having internet access).\n\nMy point (please excuse the many f*) was this, docs are great, but they can me made better? You guys are Vue pros now, so it might not matter to you! It does to the newcomers who struggle with npm.\n\nlastly, there is really no need to use npm webpack, I do realize it is their docs and their decision, which is why I abstain now. But I do strongly feel that docs should be as newbie friendly as possible. And I get very angry at how docs are not newbie friendly\"",
					"date": "2016-11-27",
					"id": "dah7zj3",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "neoasterisk",
					"content": "I see a big wall of text about some docs on the web that are not as newbie friendly as they could have been with the words shit and fuck being repeated every 4th sentence.\n\nMaking the effort to comprehend docs and learning how to use tools is part of this job.\n\nAlso do you want to improve something? Fine. Do it and move on. Making a contribution is nothing special. Everyone does it. Yet I do not see anyone else making such a big fuss about it.",
					"date": "2016-11-27",
					"id": "dah74t8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "\u0026gt;Making the effort to comprehend docs and learning how to use tools is part of this job.\n\nSo is improving the docs for newcomers.\n\napologies for the fuck every 4th sentence. It was a result of frustration.\n\n\u0026gt;making such a big fuss about it.\n\nI wasn\u0027t making a \"big fuss\", I was merely point out that I am not just a troll and someone who doesn\u0027t do something constructive and just complains about (it is a big deal in Indian culture) :-)",
					"date": "2016-11-27",
					"id": "dah7wcz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "_cowl",
					"content": "The Code of conduct here \"condamned\" people for simple statement of facts like \"poor level of english\" while in the enlightened Mail List people can call a whole community \"a wretched hive of scum and villainy\". I think this speaks more than enough that some people live in their bubble of moral norms. ",
					"date": "2016-11-25",
					"id": "dafl091",
					"isArchived": true,
					"isControversial": false,
					"score": 55
				},
				{
					"author": "thewhitetulip",
					"content": "Yes and why we shouldn\u0027t revamp things so that they think highly if /r/golang. we don\u0027t care what they think(morally). Enough with the control. They are technically superior than most of us, but this is an artificial community if you don\u0027t let the community thrive. \n\n\u0026gt;a wretched hive of scum and villainy\n\nOnly someone who doesn\u0027t use /r/golang can call this whatever they called. I am pretty sure if you call their mailing list this they\u0027ll ban you from reddit. Irony?",
					"date": "2016-11-26",
					"id": "dafyptb",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "andradei",
					"content": "Bad move by them. And what you described is called hypocrisy, no less.\n\nNOTE1: Reading further, they are reconsidering their stance of deleting this subreddit in favor of making it more obvious that it isn\u0027t official. That\u0027s cool.\n\nNOTE2: I understand Bradz\u0027s frustration with this platform. \"Dropping the official badge\" of this sub would suffice though. Those who want to leave have the right to do so.",
					"date": "2016-11-28",
					"id": "dajkvv1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "littlelakebigboat",
					"content": "I have invested a good dollar in learning and building a career out of Go. Naturally, I try to sell it to other engineers to use too. But, the amount of drama which has been recently emanating from the Google team, an upfront warning about the community could be needed. I would like to thank them profusely for their efforts towards building Go and it\u0027s ecosystem. But I would like the Google team to know that we look up to it for technical guardianship not a moral one.",
					"date": "2016-11-26",
					"id": "dafsosb",
					"isArchived": true,
					"isControversial": false,
					"score": 34
				},
				{
					"author": "F41LUR3",
					"content": "Well said. My thoughts exactly.",
					"date": "2016-11-26",
					"id": "daftxy5",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "PedanticGeorge",
					"content": "I\u0027ve personally found the golang community (here and elsewhere) to be a very welcoming and friendly (compared to the communities around other languages).\n\nI understand that people can get furious about reddit being unethical but, on that same extend, you can\u0027t exactly say Google is an angel when it comes to ethics... \n\nStoring user information on vaguely legal terms, pushing their own content and sponsored content at the top of searches without saying it is advertised content, removing competitors from the top of the search ranking (and yes, it has happened, most recent example that comes to mind is protonmail: https://protonmail.com/blog/search-risk-google/)... etc\n\nPoint it, google is not always ethical, does that stop me from programming in go and using protobuf, or participating/reading discussion on various google-owned or google-sponsored go forms and boards ? Obviously not, because you can\u0027t just blob the whole \"Google\" into one entity, no entity (especially a big one like, say, Google or Reddit) will go without its warts and bad apples. But isolating yourself from that entity doesn\u0027t work.\n\nIf anyone from reddit had gone out of his way to edit content in this subreddit, ok, I would have understood. But right now people seem to be angry about something the CEO of reddit did which has nothing to do with the /r/golang community. \n\nEven if /r/golang is deleted, another will take its place, but I\u0027m sure that will create a lot of divide in the community and that would be sad. The one thing that go seems to have above any other languages is a somewhat \"united\" community, at least in the sense that political in-fighting hasn\u0027t taken precedence over helping others, building nice libraries and improving the language. I\u0027m quite sure that removing the subreddit against the wishes of most users will not help that. Even having this discussion in the first place is damaging.\n\nIf the mods want to leave /r/golang, fine, recurit new mods and leave, name random people in the community as mods and leave, do whatever. But, as someone else here said, deleting it would be like that kid of \"Takes his ball and goes home\" because he\u0027s not happy with how the game is going.\n\nWant to do something productive instead ? Post a big flag at the top of the subreddit urging people to a forum or to a golang \"subreddit\" on a reddit alternative (I hear there are a lot of them nowadays). \n\nWrite a reddit-like website (I\u0027m sure most people here, especially if a group banded together, could do a better job then reddit when it comes to speed, style and upvote system) for golang, try integrating it with this subreddit, get some nice feature going on it so that its better (integration with SO for people that might ask question which were already answered, go-related newsfeed, Go-playground integration... etc).\n\nMy point it, I don\u0027t particularly enjoy most of reddit myself nowadays, but deleting this subreddit would only do harm and would make me question the intentions of the go team.",
					"date": "2016-11-25",
					"id": "dafgn1i",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "fungussa",
					"content": "Here\u0027s Brad\u0027s recent comment on Hacker News:\n\n\u0026gt; bradfitz 3 hours ago: Deleting the golang subreddit\n\n\u0026gt; I was the one who proposed deleting /r/golang. It is not some official Go or Google position.\nAs much as I used to love Reddit and was addicted to it, my personal position is that Reddit is no longer a trustworthy platform (if it ever was).\nEditing user content is beyond offensive. I never even considered such a thing in my years of running LiveJournal. That is a major violation of user trust and trust in the platform.\nIf Github or Gerrit or Google Groups or Google\u0027s SMTP servers were modifying our code or mailing list content, we would ditch them in a heartbeat.\nWe shouldn\u0027t demand less from Reddit.\nBut because I learned that /r/golang existed 7 years ago (before I or other Googlers were even involved with it), I no longer propose deleting it. But I think the Go project should disassociate from it and give it back to the community as an unofficial space, as it used to be.\nIt\u0027s just too unreliable of a platform to be official in any regard.\nNow I\u0027m brainstorming how one might build a federated Reddit with public, signed mutation log, ala CT or other chains. And then multiple UIs could render the same public \u0026amp; federated data set.",
					"date": "2016-11-25",
					"id": "dafea7o",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "knotdjb",
					"content": "\u0026gt; Now I\u0027m brainstorming how one might build a federated Reddit with public, signed mutation log, ala CT or other chains. And then multiple UIs could render the same public \u0026amp; federated data set.\n\n/u/bradfitz - [we just had a recent discussion here](https://www.reddit.com/r/crypto/comments/5epqh9/chainmail_a_modest_proposal_for_censorshipfree/). Would welcome proposals and I\u0027d definitely help build it out.",
					"date": "2016-11-25",
					"id": "dafln17",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "thewhitetulip",
					"content": "Why do we need an alternative? nobody wants one. We are fine with /r/golang, plus reddit is open source!! http://github.com/reddit",
					"date": "2016-11-26",
					"id": "dafyt3y",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "knotdjb",
					"content": "Because there is value in building a system that cannot be manipulated by a central authority. He\u0027s not wrong that Reddit is flawed.",
					"date": "2016-11-26",
					"id": "dafyw4x",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "thewhitetulip",
					"content": "But they don\u0027t want to build someone and _not_ have an authority on it.",
					"date": "2016-11-26",
					"id": "dafz22n",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "knotdjb",
					"content": "Did you read the quoted passage about /u/bradfitz brainstorming about a federated system with signed mutation logs?",
					"date": "2016-11-26",
					"id": "dag12ge",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "thewhitetulip",
					"content": "I did read his passage. /r/golang is fine without anyone who thinks reddit is a \"scum and whatnot\". /r/golang is a place where I get news related to Go. This is not some company\u0027s official message board where we need to \"trust\" the website. This is unofficial. yes, if Medium.com did something like this then I can understand that companies wouldn\u0027t want to host their blogs there, but /r/golang is fine, we are not demanding an alternative and even if you end up creating one, /r/golang isn\u0027t going to go anywhere.",
					"date": "2016-11-26",
					"id": "dag42ac",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "knotdjb",
					"content": "Ok that\u0027s great, but what does /r/golang have to do with coming up with a federated medium with signed mutation logs?",
					"date": "2016-11-26",
					"id": "dag45np",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "thewhitetulip",
					"content": "I was under the impression that he wanted to replace /r/golang to the new federated structure. Apologies if I misunderstood.",
					"date": "2016-11-26",
					"id": "dag4avd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "knotdjb",
					"content": "I didn\u0027t find that was the case. I think /u/bradfitz was genuinely unhappy about /u/spez abusing his powers. In light of these events, he wants to solve the underlying problem to prevent this. After all, his previous work is in camlistore which is kind of similar.",
					"date": "2016-11-26",
					"id": "dag4m4l",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "the-d0c-is-in",
					"content": "Why not just build upon a private blockchain, instead of reaching out for help to develop yet-another-crypto scheme? (Sorry, am on phone and the app I use is pretty basic and problematic when following multiple links/threads, so maybe this is exactly what you are proposing)",
					"date": "2016-11-26",
					"id": "dafury4",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "printf_hello_world",
					"content": "For **Engagement and Structure**: I\u0027d like to see more explorations of interesting problems, like the *quine* thread.\n\nA lot of people here are learning Go, and reading/understanding small pieces of other people\u0027s code is perfect for that.\n\nWe also have an incredible resource in the Go Playground, which makes sharing a working, tweakable example a breeze.\n\nSo what I\u0027m saying is: I\u0027d like to see a weekly themed day where we post data structure or algorithm implementations and have a nice discussion around them.",
					"date": "2016-11-25",
					"id": "daf9fs9",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "mm_5687",
					"content": "Agreed. \n\nDave Cheney (who unfortunately seems to greatly dislike the subreddit) used to run [useless trivia](https://dave.cheney.net/category/useless-trivia) quizzes on Twitter and through his blog which were interesting challenges and deep dives into how Golang works.",
					"date": "2016-11-25",
					"id": "daf9ows",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "p7r",
					"content": "I\u0027m mostly a lurker here, but I\u0027ll give this a try as somebody has been active in communities around several BSD distros, multiple user groups and a long relationship with the best programming language community I\u0027ve ever known from the language I worked in mostly before Go (which was Ruby):\n\n\u0026gt; Purpose: What is the purpose of /r/golang? \n\nFor redditors who use Go to discuss Go whilst on Reddit.\n\nI use reddit as an explicit news destination. I dislike mailing lists these days. Web based forums are mostly awful. Reddit has a reasonable balance from a UX perspective.\n\n\u0026gt; What sort of content do we want to support? Are there certain types of content (blog-spam, installation questions, etc.) that /r/golang should remove or point elsewhere?\n\nLet the community vote up what they like, and down what they don\u0027t.\n\nThe Wiki would be a good place to put links to beginners guides, some FAQs (that are genuinely questions frequently asked here), and pointers to the mailing lists and other online communities and meet up groups.\n\nThere is something missing from existing Go communities online that I miss from Ruby: a sense of whimsy. I\u0027m not suggesting we all go full _why the Lucky Stiff, but the Ruby community would have fun content, the Ruby quiz, all sorts of more *fun* things to make the community feel closer. I\u0027ve not quite seen the same in Go yet.\n\nThat could be here.\n\n\u0026gt; Should the Go Team members be asked to step down? \n\nIf they don\u0027t use the subreddit, and they don\u0027t like reddit, they have no business being moderators here, period.\n\nModerators need to be active first, Go Team members second.\n\n\u0026gt; I personally believe the subreddit should be community controlled, but who in the community that responsibility should fall to is a more difficult question to answer.\n\nHave the community vote on it every 6 months, then. To be eligible to stand you must have x posts with y up votes, etc.\n\n\u0026gt; There\u0027s clearly a lot of contempt for /r/golang in the mailing lists. How (or should) this be addressed? \n\nSatire and/or indifference.\n\n\u0026gt; There\u0027s questions around the Code of Conduct and subreddit rules that need to be addressed.\n\nIf somebody is looking at the CoC or subreddit rules and thinking \"I can\u0027t deal with that\", well, they\u0027re asshats and can move on.\n\n\u0026gt; The current moderation team have been moderators, but have done little to drive engagement.\n\nBy the sounds of it, because they hate reddit and redditors. Hardly surprising.\n\n\u0026gt; Many of the most popular subreddits hold regular daily / weekly automated posts for code reviews, help and support, etc. which help to drive engagement whilst also keeping the sub-reddit fairly clean. Is this something we should start doing? Code review Tuesday, Favourite Library Friday for some (badly) named examples.\n\nThat could be good, but may get tiresome after a few months. It\u0027s worth a try!\n\nI hope something actually comes out from this discussion. Genuinely.",
					"date": "2016-11-25",
					"id": "dafn00i",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "thewhitetulip",
					"content": "Yes, and the wiki shouldn\u0027t be of the official Go project, let\u0027s create a github organisation and write our own wikis if we want",
					"date": "2016-11-26",
					"id": "dafyn6e",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SSoreil",
					"content": "I\u0027d be happy to see the reddit as a seperate entity. There has been a lot of \"community\" stuff pushed from Google that was never liked here to begin with. Stuff like the Code of Conduct things which I assume are a normal thing in purple hair land never resonated with me in the slightest.\nI guess this is already against the code of conduct since I try to figure what kind of people are interested in such things. I surely didn\u0027t see a request for it from the community.\n\nThis whole ordeal is strange to begin with, are we really a community? Seemingly the admins of this subreddit don\u0027t like the userbase.\n\nActual activities for the reddit would be a ton of fun I think.",
					"date": "2016-11-25",
					"id": "daf7s1u",
					"isArchived": true,
					"isControversial": false,
					"score": 59
				},
				{
					"author": "mm_5687",
					"content": "Anything to do with the Code of Conduct is going to be a polarising discussion - there\u0027s people who like having it, and people who are insulted by its very existence. I personally fall somewhere in the middle and try to live by a \"don\u0027t be an asshole\" philosophy.\n\nI\u0027d love to see a more playful and community-based posts on the subreddit. At the moment, the most commented thread (apart from the deletion one) is about writing a quine in Go, with users making suggestions and posting their own improved versions. Fun, friendly, and interesting. ",
					"date": "2016-11-25",
					"id": "daf8cx8",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "kromem",
					"content": "I like there being a code of conduct for official channels, but I don\u0027t think this subreddit should be part of the official channels. (I also think the people that enforce the code should be assigned to it on a rotating basis, a la jury duty, instead of a volunteer position, where there\u0027s an increased likelihood of administration by people with enforcement agendas, but that\u0027s another topic for another day).\n\nI was genuinely surprised when I discovered that this subreddit was part of the \"official\" surface area for the Golang community. And clearly this thinking has caused some tension or drama, most clearly highlighted in the audacity to suggest nuking the community without soliciting the opinions of the community itself. \n\n/r/golang should be a place where tools, guides, Q\u0026amp;A, and news or features can be discussed openly and (ideally) separately from the official channels. I still support the idea of cleaning up redundant blog spam, and a similar level of moderation as what\u0027s taken place so far, but it should not come from the perspective/context of representing anything officially.",
					"date": "2016-11-25",
					"id": "dafhlm5",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "bobcrotch",
					"content": "I feel the same except you can\u0027t really trust people not to be assholes. Pretty much my philosophy on law as an entirety. You cannot trust everyone to do the right thing; not everyone has the same view of what the right thing is.",
					"date": "2016-11-25",
					"id": "dafh2e2",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "ansible",
					"content": "Yes, and that\u0027s why we need moderators. If you see something that goes against the community\u0027s policy, then report it.",
					"date": "2016-11-26",
					"id": "dag322v",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "thewhitetulip",
					"content": "Yes, they call /r/golang toxic but they are fine calling /r/golang as a \"wretched scum and villainy\" on the \"official\" mailing list.\n\nNow we know what exactly is toxic, the google group. I have never had a -ve experience on /r/golang unless it was an interaction with the elites (they even had me banned for 60days because I told him politely what he told me in a snarky comment, I may be wrong, but still, /r/golang: never felt it was toxic)\n\n/r/golang is the most welcoming community which I was a part of.",
					"date": "2016-11-26",
					"id": "dafzjhv",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "namesandfaces",
					"content": "A Code of Conduct is not itself the polarizing discussion.\n\nIt\u0027s really Google\u0027s mismanagement of trust, characterized by sweeping and ugly statements about people, unilateral decision-making over the community, aversion to punishing other Google employees for \u0026lt;clear\u0026gt; conduct violations, and the ugly willingness to consider decisions about name-squatting here without regard for community perspective (this would prevent the community from using the subreddit after Google abandons it).\n\nAnd Google waited until controversy to really react to the community. Only now when there\u0027s a PR issue for Google do they respond congenially. I can only imagine that as Google\u0027s name is on the line, more conversation is going to be pushed offline or to unmonitored channels. I don\u0027t think they\u0027re going to risk further damaging Google\u0027s credibility.",
					"date": "2016-11-27",
					"id": "dahh1dy",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "stcredzero",
					"content": "\u0026gt; Seemingly the admins of this subreddit don\u0027t like the userbase.\n\nThis seems to be a widespread problem across the internet, and across society. There\u0027s a severe rift in society between those with access to first rate education and resources, and \"everybody else.\" I say this as a graduate from an Ivy league school, who has also had a chance to see what it\u0027s like from \"the other side.\" (Heck, I even know a bit of what it\u0027s like to be at the status of homeless person.) Much of the \"upper echelon\" really does regard \"the rest of us\" as trash who can\u0027t have nice things. I understand what it\u0027s like to be on the receiving end of that, as well as understand the thinking behind it. \n\nBasically, everyone needs to shut up and listen to the other side. More easily said than done, as 21st century media and culture basically teaches everyone to read superficial signals and pigeonhole everyone quickly. In fact, what I find is that most young people seem to equate such a mental process with noble and intellectually worthy things -- when in fact it\u0027s just *prejudice*! (Look up the etymology of that word sometime!)\n\nThe story throughout history is the same. Our instincts to protect each other and stand up for justice are exploited through [\"irrational jingoism\"](https://www.youtube.com/watch?v\u003dVA5jOdPiZWI) to set us against each other. ",
					"date": "2016-11-25",
					"id": "dafc2dd",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "thewhitetulip",
					"content": "This is the reason Trump won, a major disconnect between the rulers and the common man.",
					"date": "2016-11-26",
					"id": "dafzk7h",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "usernameliteral",
					"content": "I\u0027ve been disappointed with how the Go team has tried to force the code of conduct upon this community that is overwhelmingly against it, as I am sure /u/uriel would be if he were still with us. However, I do not agree with the assertion that the Go team does not contribute to the subreddit. I have often seen members of the Go team join discussions here—perhaps less frequently in recent times?—and I hope that they will continue to do so.\n\nI would like this subreddit to be run by the community. I would like members of the Go team to step down as moderators and for the community moderators to remove the reference to the CoC and the CoC e-mail address in the sidebar. I think the bullet points in the sidebar that basically say \"don\u0027t be a jerk\" are fine. \n\nOther than that, I think the subreddit is fine as it is. I don\u0027t want the moderators to \"drive engagement\" or to spam the subreddit with automated posts. The community is quite capable of bringing up topics for discussion by itself. The moderators should only be responsible for removing off-topic posts and driving away the trolls, but without turning it into a witch hunt.\n\nI never liked subreddit style customizations, but fortunately I have already disabled those for myself site-wide, so they don\u0027t bother me.",
					"date": "2016-11-25",
					"id": "daf9l6z",
					"isArchived": true,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "mm_5687",
					"content": "\u0026gt; However, I do not agree with the assertion that the Go team does not contribute to the subreddit. I have often seen members of the Go team join discussions here—perhaps less frequently in recent times?—and I hope that they will continue to do so.\n\nI\u0027m referring only to the moderation team for the subreddit, not the whole go team, some of who do post more regularly.\n\n* /u/rsc hasn\u0027t posted here for 9 months.\n* /u/enneff hasn\u0027t posted here for 22 days\n* /u/agl hasn\u0027t posted here ever?\n* /u/dsymonds made a comment a month ago, the one before that was 5 months ago\n* /u/campoy is probably the most active, but only seems to post to advertise his own youtube videos and podcasts\n\nThe other mods, outside of the Go Team:\n\n* /u/dgryski **posts almost daily**\n* /u/skelterjohn last posted here 18 days ago\n* /u/0xe2-0x9a-0x9b last posted here 9 months ago\n* /u/jessta posts a lot in reactjs and elm subreddits, but last post here was at least a year ago\n* /u/TheMue posted something 2 months ago, last before that was a year ago\n* ~~/u/bketelsen *who was added 9 days ago* hasn\u0027t posted for 29 days~~ **Edit**: Has now removed themselves as moderator.",
					"date": "2016-11-25",
					"id": "dafa7tk",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "programfog",
					"content": "\u0026gt; /u/dgryski posts almost daily\n\nMy proposal is to keep /u/dgryski as the only mod, and he can start building out a team of moderators from the community, and can choose to step down or remain as he sees fit once an appropriate number of moderators has been reached.",
					"date": "2016-11-25",
					"id": "dafgn37",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "tclineks",
					"content": "The most recent mod added seems to be of the opinion the subreddit should be closed. Perhaps I\u0027m misreading this? https://twitter.com/bketelsen/status/801938047814291460",
					"date": "2016-11-26",
					"id": "dafpt61",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "programfog",
					"content": "And that is not even the worst he said.\n\nIn the google groups discussion:\n\n\u0026gt; Kill it.\n\u0026gt; It\u0027s a wretched hive of scum and villainy.  The Go subreddit was the only thing similar to human and it is downright painful most of the time.\n\n",
					"date": "2016-11-26",
					"id": "dafr6wc",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "thewhitetulip",
					"content": "I didn\u0027t know it was fine to be an ass on the official mailing list. No wonder /r/golang gets more visits than the \"official\" forum.",
					"date": "2016-11-26",
					"id": "dafz713",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "ansible",
					"content": "If it is any consolation, that quote is a reference to what Ben Kenobi says in Star Wars about the Tatooine city Mos Eisley.",
					"date": "2016-11-26",
					"id": "dag375x",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "mm_5687",
					"content": "He has removed his moderator status and deleted his reddit account: https://twitter.com/bketelsen/status/802319989294399488",
					"date": "2016-11-26",
					"id": "dafrion",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "tv64738",
					"content": "Good riddance.",
					"date": "2016-11-26",
					"id": "dafsmnf",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "gogroob",
					"content": "Just because these people don\u0027t participate in threads, it doesn\u0027t mean that they don\u0027t actively moderate and respond to reports. \n\nParticipating in subreddit discussions is not a prerequisite for being a good moderator. \nWether any of the above people are active moderators is hard to tell without one of the mods themselves replying. ",
					"date": "2016-11-25",
					"id": "dafc1e2",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "usernameliteral",
					"content": "/u/bradfitz has posted here a lot, and he only very recently removed himself as moderator.",
					"date": "2016-11-25",
					"id": "dafcebe",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mm_5687",
					"content": "Yes, but he\u0027s also the one who proposed deleting the subreddit and seems to be doing more harm than good in terms of the golang community. Edit: I want to emphasis that I think Brad is a fantastic engineer and credit to the Go Team - he\u0027s part of what makes Go a fantastic language - but proposing the deletion of /r/golang in the mailing list, followed by the support of many of the team and community members, has done nothing but create a serious rift.",
					"date": "2016-11-25",
					"id": "dafcy5r",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "usernameliteral",
					"content": "Why, other than the proposed deletion of r/golang?",
					"date": "2016-11-25",
					"id": "dafdgqa",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mm_5687",
					"content": "Edited my comment to (hopefully) better reflect what I meant. Brad has been great, but it\u0027s impossible to see how his proposal to delete the subreddit could be anything but harmful.",
					"date": "2016-11-26",
					"id": "dafs2qg",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "usernameliteral",
					"content": "I think it\u0027s a legitimate viewpoint that a trust between reddit management and the community has been violated. I\u0027m just worried that without this subreddit, there will be no refuge for Go programmers who are sick and tired of all this divisive CoC sillyness.",
					"date": "2016-11-26",
					"id": "dafsjl8",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "karma_vacuum123",
					"content": "the Go community is becoming awful. the core team has never been much for PR but it seems to be reaching the point of disdain. the tone was set by Andrew Gerrand who has been dismissive and aloof from the start. not everyone is cut out for a PR role. Rob Pike is likewise not approachable or congenial but he doesn\u0027t purport to provide PR. Dear Google Go team: please post a picture of yourselves laughing or smiling. I need confirmation that you are human. \n\ntoo many people in the Go community outside of Google grovel to the core team, which doesn\u0027t help. ",
					"date": "2016-11-26",
					"id": "dag4rj9",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "dgryski",
					"content": "This is not constructive to the conversation.",
					"date": "2016-11-26",
					"id": "dagj6ri",
					"isArchived": true,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "I disagree. The overall attitude of the Go team is absolutely relevant since that attitude has an impact on both the language development in general and this sub in particular.\n\nAnd yeah, they\u0027re pretty awful. As language maintainers go they\u0027re rude, dismissive, brusque, and worst of all often very unhelpful. They don\u0027t suffer fools gladly and aren\u0027t afraid to be open about that to people who are looking for help. They\u0027ll often respond to requests for assistance with short, context-free answers that clearly presuppose that you share their vast background knowledge. Ask for clarification and you\u0027ll get talked down to haughtily. Call them out on their behavior and you\u0027ll be told you\u0027re violating their CoC.\n\nI love Go as a programming language and use it daily, but the way the language is handled - including and especially the Go maintainers and regular gonuts posters themselves - is terrible, and if we could manage to create a community of Go users here on Reddit that has nothing to do with the language developers everyone would be better off for it.",
					"date": "2016-11-26",
					"id": "dagmlly",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "dgryski",
					"content": "While the criticisms may have been true when Rob Pike was more involved in the project, I don\u0027t think they\u0027ve been applicable for a while now.\n\nI would *never* characterise Andrew as being dismissive and aloof.  You could easily argue he cares too much, which is why the two-months of dealing with constant hate during the CoC drafting process pretty much burnt him out.  (You might not notice but he\u0027s *way* less active than he used to be..)",
					"date": "2016-11-26",
					"id": "dagnael",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dilap",
					"content": "kind of ironically the CoC having the opposite of its intended effect there, no?",
					"date": "2016-12-08",
					"id": "dayj26b",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "You are clearly reading a different mailing list than I am.",
					"date": "2016-11-26",
					"id": "dagusog",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "chmikes",
					"content": "Why would a moderator have to post on the sub ? What is relevant is that he/she realy moderates. What would be a problem is that the moderator is fake and just serve for reaching a quorum. ",
					"date": "2016-11-26",
					"id": "dag2ugo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "skelterjohn",
					"content": "I\u0027m happy to remain. I have been fairly inactive lately, but I check in from time to time.\n\nI should note that I am a Google employee (though I\u0027ve been a r/golang mod for longer) who is not on the Go team.",
					"date": "2016-11-29",
					"id": "dajz698",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "WellAdjustedOutlaw",
					"content": "I presume these are topics posted, not comments posted? Is that correct? At least I _hope_ that\u0027s the case. If you\u0027re a mod of a subreddit, I feel like you should be actively commenting at the very least so you have a sense of what\u0027s going on.",
					"date": "2016-11-25",
					"id": "dafb8px",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "YEPHENAS",
					"content": "Why do you need do comment to see what\u0027s going on?",
					"date": "2016-11-25",
					"id": "dafbpkb",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "WellAdjustedOutlaw",
					"content": "I don\u0027t think you _need_ to comment to see what is going on. But I think an administrator that doesn\u0027t participate is too disconnected. This kind of thing used to happen all the time on BBSs and on vBulletin sites. An admin or mod would get disinterested in the group or community, and then it would fall to shit until someone else took over. It\u0027s just part of community evolution.",
					"date": "2016-11-25",
					"id": "dafft5d",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "YEPHENAS",
					"content": "I personally find it rather inappropriate when authority figures mingle too much with the commoners. Makes me lose respect for them. They can\u0027t be neutral if they are too much part of the mudslinging. A referee doesn\u0027t kick the ball.",
					"date": "2016-11-25",
					"id": "dafgx1c",
					"isArchived": true,
					"isControversial": false,
					"score": -3
				},
				{
					"author": "WellAdjustedOutlaw",
					"content": "You\u0027re somehow drawing a conclusion here that simply doesn\u0027t need to be drawn. Part of being a _good_ mod is specifically _not_ getting involved with the \"mudslinging\". That\u0027s why people choose them as good mods.\n\nThis idea that someone can\u0027t participate and be neutral is nonsense.",
					"date": "2016-11-25",
					"id": "dafhcvx",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "mm_5687",
					"content": "I don\u0027t expect them to be posting every day, but you\u0027d think one of the Go team  would have *something* to say about the proposed deletion of subreddit that they regard as an official part of the community. So far the only one to comment has been Brad who has had the sense to remove himself as a moderator. ",
					"date": "2016-11-26",
					"id": "dafqram",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "p7r",
					"content": "Can I ask, what harm has the code of conduct actually caused?",
					"date": "2016-11-25",
					"id": "dafo5aq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tv64738",
					"content": "The CoC is the latest and greatest in political doublespeak. On one hand, telling someone you didn\u0027t understand them because of a language barrier is worth a warning, on the other hand prominent CoC advocates can openly call you scum and a villain:\nhttps://groups.google.com/d/msg/golang-nuts/XoOhzUClDPs/bYS9SKY7CAAJ",
					"date": "2016-11-26",
					"id": "dafsrhc",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "mm_5687",
					"content": "[This thread](https://www.reddit.com/r/golang/comments/59nk46/stalking_people_online_for_thought_crimes_this_is/) from around a month ago gives you some idea of the sort of issues that can arise from the way the CoC has been implemented in the official Golang communities. It\u0027s worth noting that /r/golang was not started as an official support channel, and the Go Team only took control after the creator of the subreddit, uriel, passed away. Uriel was famous for [cat-v](http://cat-v.org/), and given the quote on its homepage, you can probably guess his position on the Code of Conduct. The code of conduct wasn\u0027t voted for or seemingly wanted by a large number of /r/golang, but it was still forced upon it.\n\nFor me personally, I don\u0027t have any issues with the concept of a Code of Conduct, the issue arises with the moderation of it. In the previous example, an unpolite and strongly worded official \"warning\" was sent to someone telling them not to use such strong words and be more polite in the future. It was hypocritical at best.\n\nRead some of the posts on the golang-nuts mailing lists talking about the deletion of this subreddit. Many of them are from highly regarded golang contributors and go team members, yet many of them are below the standards set out in the Code of Conduct. It\u0027s either hypocrisy of the highest level or proof that a Code of Conduct is impossible to enforce at the level of \"Mind your Ps and Qs or you\u0027ll get an official warning\" that the Golang one seems to be going for. All it seems to be doing is creating a rift and causing people to not want to post here in case someone takes something thay say as offensive - even something extremely mild can apparently result in a warning.",
					"date": "2016-11-26",
					"id": "dafpvxy",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "thewhitetulip",
					"content": "Do you mean passed away as in dead?\n\nWhen someone can call \"scum and a villain\" in the official mailing list and _nothing_ is done to delete it then it is the greatest double speak every. The /r/golang community doesn\u0027t care what their morals are, which clearly aren\u0027t high enough or higher than the rest of reddit itself.",
					"date": "2016-11-26",
					"id": "dafz3y2",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Arcaire",
					"content": "\u0026gt; Do you mean passed away as in dead?\n\nYes. [He unfortunately passed away about four years ago](https://www.reddit.com/r/programming/comments/11h7ab/9fans_uriel_has_passed_away/c6mg9uc/).\n",
					"date": "2016-11-26",
					"id": "dag2hkx",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "thewhitetulip",
					"content": "It is sad to hear this. I came to reddit one year ago so I am clueless as to who he was.",
					"date": "2016-11-26",
					"id": "dag43si",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "p7r",
					"content": "EDIT: Downvotes sort of prove my point.\n\nThat\u0027s great background, thanks for the context.\n\nThere are multiple issues here, but none of them are going to be fixed by removing the CoC. In fact, removing it may send out the wrong signal and significantly damage the community by asserting the mistaken notion that \"political correctness\" is a bureaucratic authoritarian control mechanism that seeks to censor, rather than it being a way of reminding people that other people have feelings that can be hurt.\n\nI\u0027m involved in several programming language communities, because I\u0027m a bit of a polyglot. I\u0027m still very new to the Go community. \n\nThe Go community has a pretty bad reputation with members of other programming language communities. Some of that is because of a perceived intolerance on technical ideas (of which I\u0027m sure we can all think of numerous examples), and some of that is because of drama like this.\n\nLet\u0027s take the nicest community I know as an example of how to get it right: the Ruby community. Actually, since Rails, it\u0027s kind of become a bit horrible, but let\u0027s wind back.\n\nThe code of conduct there is encapsulated by a single acronym: MINSWAN, which stands for \"Matz [the language\u0027s creator] Is Nice So We Are Nice\". If somebody is being a jerk, all you have to say is \"Hey, MINSWAN, \u0027k?\" and the meaning is clear. Normally enough to make somebody think \"Oh man, everybody is so nice here, and look, I wasn\u0027t, perhaps I should fix that\".\n\nThe other factor is that people are rewarded for _entertaining_ other people. _why was widely lauded. Others who ran the weekly \"Ruby Quiz\" (which ended up as creating source material for a pretty good book), also became highly regarded.\n\nIn Ruby there is always more than one way to do something, and therefore there has always been a fuzziness to whether somebody\u0027s answer to a problem could be considered \"wrong\". The strongest criticism I think I ever saw is \"that\u0027s not very idiomatic Ruby, we might in general suggest using this method instead…\"\n\nFor some people this is why they hated Ruby. Fine. Get past that, and surely you can see that it is a more welcoming and nicer place to be than the Go mailing lists, right?\n\nThen Rails happened and people with \"strong opinions\" demanded attention, and it became popular, and now it\u0027s a little less of a nice community.\n\nThe Go community to my eye - I\u0027ve only been knocking around for less than a year - is already at the post-Rails stage. Lots of smart people with big opinions making them strongly, rubbing each other up the wrong way, and with no means to step in and say \"Hey, enough, OK?\" because there is a heavy leaning on formal measure - the CoC - and less so on a MINSWAN concept or the fact we accept we\u0027re all clueless monkeys trying to work things out for ourselves.\n\nIt\u0027s more valued to be technically right in many parts of the Go community than it is to be entertaining (I\u0027m not saying that\u0027s wrong, just an observation), and people don\u0027t want to be \"fuzzy\" about an answer, perhaps because the language itself is not quite so forgiving as others (and that\u0027s fine, it\u0027s part of the elegance).\n\nI asked for specific examples, and three people mention the same one, a member of the community for being sanctioned/warned for what that person strongly believes to be \"objective truth\". To my mind, they phrased things a little bluntly, and deserved to be told \"hey, come on now, I bet their English is better than your [whatever language the other person spoke], right?\". Did it need official warnings? Probably not.\n\nInterestingly for me, this exact issue would never happen in Ruby land either. The creators are all Japanese, and indeed the anglicisation of Ruby involved a few early adopters learning just enough Japanese to be able to speak to them very, very badly, and so the community is built on a bedrock of poor English, poor Japanese and everybody taking the time to try and help each other communicate better. But that\u0027s an aside.\n\nWould removing the CoC have made this issue better? Probably not. Somebody would have still been a bit rude (\"It is just the truth\", is no defence, but you can still be rude whilst telling the truth), somebody else may have felt they were being rude, except without the CoC they may not have felt able to make that clear.\n\nThere is a global problem at the moment about valuing other people\u0027s problems as highly as one\u0027s own, and this seems a good example of it. Freedom of expression, \"truth\", reactions to authority, they\u0027ve all played out in society in 2016 in ways few of us predicted, and these attitudes seem to be seeping into software communities, and this is perhaps a good example of it writ small.\n\nIf you really want to get rid of the CoC, find a way to make it redundant. Find a way to get to Go\u0027s MINSWAN. Value comments and projects that entertain you, have whimsy within them, value those people who make you feel like you\u0027re at the online equivalent of a long, amiable, dinner party with great friends, because that\u0027s what the best communities feel like. At some point somebody will say \"do we need this CoC?\" and the answer will be a resounding \"what CoC? Wow, forgotten all about that\".\n\nRipping it down as a political statement though? It\u0027s not going to fix _anything_.",
					"date": "2016-11-26",
					"id": "dag4fpt",
					"isArchived": true,
					"isControversial": true,
					"score": 4
				},
				{
					"author": "mm_5687",
					"content": "You\u0027re correct that removing the CoC isn\u0027t necessarily the correct solution. The fact that it has ever been enforced here creates a situation where removing it could send out the wrong signals, but I can\u0027t see any way forward where it remains in its current form.\n\nThe actual \"core\" of the [Code of Conduct](https://golang.org/conduct), the **Gopher Values** and **Unwelcome Behaviour** sections are reasonable (imo), and I don\u0027t think that many people have an issue with those parts of the CoC - they are generally values to aspire to. \n\nThe problem really comes to the moderation of said code. Assuming that /r/golang does become a non-official \"Go Space\" then the moderation of the CoC falls to the moderators of /r/golang, and not \"The Code of Conduct Working Group\" who have been the enforcers until now. It\u0027s worth noting that it does not appear as though **any** of the CoC Working Group actively participate in /r/golang, despite being described as \"a group of people that represent the Go community\". The Working Group never really represented /r/golang, but they were suddenly given moderation power over it, and for a website which is built around self-moderation, that feels very invasive.\n\n/r/rust is a good example of a subreddit where a CoC works fine, ~~which is why (to my understanding), the Go Team spoke to the /r/rust mods a few weeks ago about how they implemented their CoC without upsetting the community - again though, that just shows a complete lack of understanding by the Go Team because rather than attempt to hold a conversation about /r/golang in /r/golang, they went somewhere else~~ **edit:** please see the comment by /u/dgryski below.\n\nModeration of /r/golang needs to come from the community. Taking the Values and Behaviour sections of the current CoC and using them for /r/golang could be a good middle ground.",
					"date": "2016-11-26",
					"id": "dagdbbr",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dgryski",
					"content": "\u0026gt; /r/rust is a good example of a subreddit where a CoC works fine, which is why (to my understanding), the Go Team spoke to the /r/rust mods a few weeks ago about how they implemented their CoC without upsetting the community - again though, that just shows a complete lack of understanding by the Go Team because rather than attempt to hold a conversation about /r/golang in /r/golang, they went somewhere else.\n\nSince this was me, I\u0027m going to clarify a few points here.\n\n*I* spoke to the /r/rust moderators.  I\u0027m not the Go team.  I don\u0027t work at Google.  I reached about because of the last huge CoC blow up thread.  I didn\u0027t get involved in that, hoping it would blow over quickly.  But it didn\u0027t.  It got worse.  And there were a lot of really negative, mean, rude, and *malicious* things being said about the people involved.  I felt responsible, because as a moderator I *should* have stepped in and kept things civil.  But I didn\u0027t.  Part of that was because I didn\u0027t know exactly how to handle it.  Part of it was because I didn\u0027t want to targetted by the anti-CoC crowd and have my name added to the list of Bad People(tm).  (I\u0027ve seen some people comment that \"We deal with the jerks with down votes\", but many of the things I felt particularly bad about leaving in that thread were high-ranking comments.)\n\nSo, I reached out to /r/rust.  They have a very different relationship with codes of conduct than Go does.  Graydon set a very clear tone from the beginning about what was expected, and enforced it consistently across all the spaces he was present in.  People who didn\u0027t like that chose not to get involved, or to play by his rules.  When /r/rust became more popular, there was already the expectation of civil behaviour.  Adding a written policy was no big deal.\n\nLeaders shape the tone of the community.  We can see it with Graydone and Rust.  We saw it with Matz and Ruby.  And we saw it with Rob and Go.  He\u0027s can be a bit of a jerk.  And that snarky attitude set the tone of the initial mailing list and the initial community.  People were given a pass to have \"attitude\" because that\u0027s how the leaders spoke.  So when a CoC was introduced, people felt it was a change to how they were expected to behave, rather than a codification of how the community should be run.\n\nI wanted to know how the /r/rust moderators dealt with keeping a purely technical community.  How did they respond to violations, to repeat offenders.  How much visibility did they give to themselves and their actions. Obviously this is not something I could have asked from /r/golang.\n\nOn the other hand, I *could* have asked \"How do you want to be moderated?\"  But as we\u0027ve seen before, the threads explode into anti-CoC rhetoric, strawmen arguments, and slippery slopes I\u0027d get tired of linking to https://yourlogicalfallacyis.com/ .   It\u0027s hard to know what people really think.  And how many people think that way.  Are these anti-CoC people trolls from outside?  Sockpuppets?  Are they just a vocal minority or do they really represent the views of the group?\n\nI want /r/golang to be a welcoming community.  And for the most part it is.  My goal with submitting content is to ensure that people have a reason to keep coming back.  To ensure that people who drop by occasionally don\u0027t see the same 4 posts from a month ago.  To show that there *is* Go stuff happening everywhere.  It should be a celebration: Look at all this cool stuff we\u0027re doing!\n\nThe people on the mailing list who don\u0027t read /r/golang only see the nasty threads, because those are the ones that get linked and shared in the other forums.  \"Wow, look at /r/golang blowing up against CoCs again.  Look at the mean things they\u0027re saying.  Aren\u0027t you glad we\u0027re not like them?\"  The rest of the time, /r/golang chungs along happily, but that\u0027s not the perception that outsiders get to see.  By definition, they\u0027re not here every week reading the day-to-day posts and discussions.\n\nI don\u0027t have answers to these questions, nor do I have a good way to get them.  Can I trust 400 reddit comments to come to a consensus on what should be done moving forward?\n\nI\u0027m here because I want to make /r/golang a nice place to be.  I\u0027ve been submitting things here for long before I was a mod. Andrew made me a moderator after GopherCon specifically *because* none of the existing Go Team mods were involved in the Reddit community.\n\nHow does this tie into https://en.wikipedia.org/wiki/Consent_of_the_governed ?  Where do we draw the line between \"free speech free-for-all\" and \"heavy-handed CoC-based moderation\".  How can we change the negative perception of Go that lingers in the other programming reddits?  How can we change the perception of /r/golang on the mailing list?  Where does the Forum fit into this?  Or the IRC channel?  Or the Gophers Slack?\n\nI still don\u0027t know.  I\u0027m still trying to figure it out.  I\u0027m also trying to figure out how to help this community I care about grow.\n\nSuggestions welcome. Even if it includes \"Please step down.\"",
					"date": "2016-11-26",
					"id": "dagmm02",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "iends",
					"content": "\u0026gt; So when a CoC was introduced, people felt it was a change to how they were expected to behave..\n\nI think this is because the CoC was driven top down and not really bottom up. Compare the CoC process with the package management process. Unless I missed it, the CoC process was more forced. A lot of people think a CoC of \"Don\u0027t be an asshole.\" would be sufficient.\n\n\u0026gt; It should be a celebration: Look at all this cool stuff we\u0027re doing!\n\nWe should have a \"What are you working on this month thread\" like a number of other programming language subreddits do.\n\n\u0026gt; How can we change the negative perception of Go that lingers in the other programming reddits?\n\nThat should not be our goal really. Most people will never get past the lack of generics. Or feature X.\n\n\u0026gt; Where do we draw the line between \"free speech free-for-all\" and \"heavy-handed CoC-based moderation\".\n\nImpossible question to answer, but I think we should err on the side of free speech. If a user is a continually problem then take the appropriate measure. The response to /u/4ad was too heavy handed a response for something so minor (especially since it was a complete misunderstanding of his post anyway...). The internet instinctively lashes out against all attempts to stifle free speech and it\u0027s a losing battle.\n\n\u0026gt; How can we change the perception of /r/golang on the mailing list? \n\nAs I tweeted to you, I don\u0027t think the mailing list overall has a negative opinion of reddit, but instead a range of Go stakeholders have certain social opinions that are often in conflict with how a large portion of the internet uses reddit.\n\n\u0026gt;Where does the Forum fit into this?\n\nThe forum doesn\u0027t fit into reddit at all. It is a different community with  many overlapping users. They are fit to moderate how they choose. Same for IRC and Slack. \n\n\u0026gt; Suggestions welcome. Even if it includes \"Please step down.\"\n\nIf you stepped down the only mod who actually uses reddit would be gone, which would be incredibly disappointing.",
					"date": "2016-11-26",
					"id": "dagta2g",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "knotdjb",
					"content": "\u0026gt; I still don\u0027t know. I\u0027m still trying to figure it out. I\u0027m also trying to figure out how to help this community I care about grow.\n\nLike the efforts with the CoC, you\u0027re just trying too hard. If you expend too much effort trying to come up with a solution to a problem that is virtually non existent, you\u0027ll just end up wasting time or have it backfire (which for all intents and purposes -- the CoC kind of has).\n\nP.s. I\u0027m not anti-CoC. The claims of effectiveness are dubious at best. I would prefer rules/policies be developed organically as situations arise and just have a blanket guideline that everyone should try to be reasonable to each other.",
					"date": "2016-11-27",
					"id": "dagxmgj",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "p7r",
					"content": "So, this seems eminently reasonable.\n\nI have a bit of confusion around the calls to say \"get rid of the CoC\", because that feels like saying \"I want the right to treat people badly in a way that the CoC prevents\". I don\u0027t think that is healthy for here, the wider Go community, or frankly, Reddit.\n\nSaying \"let\u0027s keep the CoC and/or its values in place, but let\u0027s police it ourselves\"? Seems much more balanced and fair.\n\nFWIW I\u0027m going to try and figure out how to stop lurking and add to the community in the nice, whimsical aspects I loved in the Ruby community. It\u0027ll take a while, but I\u0027d encourage everybody to be the change they want to see.",
					"date": "2016-11-26",
					"id": "dagewpm",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "iends",
					"content": "I think when people say \"get rid of the CoC\" they really are saying is \"I don\u0027t trust the people who are supposed to be enforcing the CoC.\" No rational person really disagrees with the larger goals of keeping toxic people from distracting from building great things, but a lot of people are especially concerned about losing the \"Linus Torvalds\" of a community over something non-technical.",
					"date": "2016-11-26",
					"id": "dagtv3w",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "robertmeta",
					"content": " \u0026gt; The code of conduct there is encapsulated by a single acronym: MINSWAN, which stands for \"Matz [the language\u0027s creator] Is Nice So We Are Nice\". If somebody is being a jerk, all you have to say is \"Hey, MINSWAN, \u0027k?\" and the meaning is clear. Normally enough to make somebody think \"Oh man, everybody is so nice here, and look, I wasn\u0027t, perhaps I should fix that\".\n\nI think having a single acronym like that is good because it is straightforward.  DFTBA (Don\u0027t Forget To Be Awesome) is one of my favorites, via the Vlog Brothers (Hank and John Green).  Which covers being positive AND entertaining (cause both are awesome). \n\n\u0026gt; It\u0027s more valued to be technically right in many parts of the Go community than it is to be entertaining (I\u0027m not saying that\u0027s wrong, just an observation), and people don\u0027t want to be \"fuzzy\" about an answer, perhaps because the language itself is not quite so forgiving as others (and that\u0027s fine, it\u0027s part of the elegance).\n\nGreat observation -- part of this I think also has to do with where people started using Go at first.  Ruby a lot of us played with at home, opted in and got to warm to slowly, it has a lot of fun (and insane) bits.  Go is in production, in the wild, at our jobs.  Lots of people deal with their first Go code at work.  This lessens the entertainment / fun side and increase the stress and focus on correctness. \n\n\u0026gt; Did it need official warnings? Probably not.\n\nAnd, IMHO, the tone of the warning was just as bad as the tone of the comment.  \"This is your warning\" is very dismissive and rude and despite claims to the contrary to me seems like the end of the conversation, not a request for pushback. \n\n\n\u0026gt;  Would removing the CoC have made this issue better? Probably not.\n\nIn terms of the subreddit, the CoC doesn\u0027t make much sense, because it demands review by an official board that explicitly has disavowed Reddit.  It will have to change no matter what, if nothing else just to change who applies it. ",
					"date": "2016-11-28",
					"id": "dai9fdx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "karma_vacuum123",
					"content": "You are precisely right that so much of the kindness of the Ruby community flows from Matz himself, who is a truly special person. We simply don\u0027t have anyone like that in the Go community; the tone set by the Google staff has been quite dismissive and aloof from the start and Brad\u0027s initial comment that set this off was of no surprise\n\nRemoving the CoC would put us all back on a level playing field....not one where Andrew Gerrand is the morality police. It is worth noting that when the CoC was proposed, Dave Cheney suggested purging anyone who even wanted to critique it. Dave: please go away. You contribute nothing of real value, you are just a parrot",
					"date": "2016-11-26",
					"id": "dag4zuz",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dgryski",
					"content": "Your comments here have been consistently negative and not moving the conversation forward with a positive tone.  The goal of this thread to be how we (/r/golang) can have the community we want, *not* to throw mud and insults at other Gophers.",
					"date": "2016-11-26",
					"id": "dagklx9",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "namesandfaces",
					"content": "No he has advanced the conversation, and he has not engaged in baseless criticism. Negativity or subtractive processes can certainly be very productive, and positivity or additive process can certainly be counterproductive.\n\nSaying that what somebody says is consistently negative, especially in an opaque and cognitively miserly way, does seem counterproductive.",
					"date": "2016-11-27",
					"id": "dahgkm4",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "mememememeee",
					"content": "Your attempt to silence the opinions of others sickens me. The comments made by /u/karma_vacuum123 are mild in comparison to what has been said about those that frequent /r/golang.",
					"date": "2016-11-28",
					"id": "daj6wm6",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "4ad",
					"content": "\u0026gt; Your comments here have been consistently negative\n\nNo, they have not. That is just your opinion. His comments were very thoughtful and important.\n\n\u0026gt; and not moving the conversation forward\n\nThey do move the conversation forward, just not in the direction you want.\n\n\u0026gt; with a positive tone. \n\nNow this is just western-corporate cultural projection over people who have no desire to share these values. This fake positivism expected in western corporations is driving me nuts and it is actively harmful to societies.\n",
					"date": "2016-11-27",
					"id": "dagz5dk",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "karma_vacuum123",
					"content": "These ridiculous codes are insulting and mostly serve to legitimize the core team\u0027s desire to dictate behavior...this debacle shows the hypocrisy",
					"date": "2016-11-26",
					"id": "dag4xgy",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "p7r",
					"content": "Has anybody complained to the CoC team about these comments? It might be interesting to see if they are held to the same bar.",
					"date": "2016-11-26",
					"id": "dag52rv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "karma_vacuum123",
					"content": "I assume they either don\u0027t care at all what is happening here now (it\u0027s a space for the \"plebs\") or they are reading and realize this discussion is too radioactive to touch\n\nAbsolutely sure they use a lot of off-channel communication inside Google, and there will be more as time goes on",
					"date": "2016-11-26",
					"id": "dag7oel",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "iends",
					"content": "At this point, I imagine they would consider you a troll if you emailed the CoC team about Brian\u0027s post.\n\nI\u0027d also point out that the CoC knows that Brian is a nice guy, so they may give him the benefit of the doubt over some random no-name on reddit.",
					"date": "2016-11-26",
					"id": "dagu08z",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "arechsteiner",
					"content": "Here\u0027s an incident I remember regarding the code of conduct, if you\u0027re interested: https://www.reddit.com/r/golang/comments/59nk46/stalking_people_online_for_thought_crimes_this_is/",
					"date": "2016-11-26",
					"id": "dafpf4i",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "computesomething",
					"content": "Well from what Brad wrote on HackerNews, it will be made unofficial by \u0027giving it back to the community\u0027, anyone know what that actually means ?\n\nWhat exactly makes this subreddit \u0027official\u0027 at the moment (given that it wasn\u0027t created by Google employees to begin with) ?\n\nAnyway, very happy that it won\u0027t be shut down, it\u0027s the 8th most popular programming language subreddit:\n\n    1. Python 143689\n    2. Javascript 95845\n    3. Java 59514\n    4. PHP 44981\n    5. C++ 42625\n    6. C# 33718\n    7. Ruby 33042\n    8. Go 25221\n    9. Haskell 25080\n    10. C 23751\n    11. Swift 21730\n    12. Rust 20452",
					"date": "2016-11-25",
					"id": "dafjbg0",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "It\u0027s \"official\" in the sense that it\u0027s mentioned on https://golang.org/help/ and a bunch of Googlers are moderators here.\n\nI have no idea how they intend to give it back to the community. Apparently if the last moderator removes himself, the sub turns public and then it\u0027s up to a Reddit admin to give mod rights to someone.\n\nRight now there are still non-Googlers mods, but they\u0027re inactive. If all Googlers remove themselves from moderation, the other mods will remain and it would stay the same as today.",
					"date": "2016-11-25",
					"id": "dafl47f",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "thewhitetulip",
					"content": "Yes exactly, it wasn\u0027t as if the Googler mods participated actively anyways.",
					"date": "2016-11-26",
					"id": "dafyr38",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "zerok",
					"content": "(I\u0027m mostly a lurker here but the outcome of this discussion will most likely change that one way or another so I thought I should chime in...)\n\nTo be fair, IMHO it doesn\u0027t really matter if a moderator works for Google or not. What matters is who decided who can become a moderator here. At least from the outside it had the appearance for me that this decision was limited to Go core team members or Google employees. In this situation calling it \"official\" somehow makes sense.\n\nIf a moderator is reading this, could you please give some details on this process? Thanks :-)\n\nIf that \"official\" status should be changed, there has to be some kind of orderly transition. IMO making Reddit\u0027s admins pick moderators should be the last resort. I\u0027m pretty sure there are tons of great folks here (big thanks to /u/dgryski for all his work, btw!) that we can resolve this :-)",
					"date": "2016-11-27",
					"id": "dahezh6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "betamos",
					"content": "How is this a hard problem? If you don\u0027t want to mod, hand it over, there are certainly plenty of people willing to do it. Nobody cares if it\u0027s an \"official\" Go subreddit or not. Literally, nobody. Mods have one task: Delete content that is not Go related.\n\nThis is an entirely made up problem.",
					"date": "2016-11-26",
					"id": "dafq2td",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "thewhitetulip",
					"content": "they do not have to delete the posts even, the community will downvote it to oblivion. Don\u0027t believe it? Try posting something unrelated :D",
					"date": "2016-11-26",
					"id": "dafym49",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; Nobody cares if it\u0027s an \"official\" Go subreddit or not. Literally, nobody.\n\nI care if it\u0027s an official Go subreddit...! :\u0027(",
					"date": "2016-11-26",
					"id": "dag63ss",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thisIsExactly20Chars",
					"content": "* **Purpose:** as far as it goes actually, I\u0027m quite pleased with the sub. I find it has a nice variety of blog posts shares, github highlights and questions. Each of those help me learn new things about go or learn it\u0027s ecosystem or features and keep up-to-date too.    \n* **Moderation:** I\u0027m fine with the moderators not actively posting to the sub. I view this sub as many others that I use: a space where people from the community share stuff. However, the mods should be respectful and understand the nature of this space.     \n* **Community:** Let me put my DevOps hat on. And not the \"tools\" hat, but more the \"let\u0027s join dev and ops\". There\u0027s no reason for contempt. The two space exists for different reasons, but we could use people who hare active members of both to cross share rules, post and all. Exactly like a DevOps would do. Let\u0027s establish dialog, rather than contempt and hatred.    \n* **Engagement:** I hate subs that have more daily topics that the sub can organically sustain. There\u0027s a balance to be found and that must be done through experimentation. I do think it\u0027s a good idea though. Maybe we could have a Code-golf Tuesday or something (given requirements, come up with the smallest Go program you can to match those requirements)    \n* **Customisation:** I really don\u0027t care for customization, though up-to-date sidebars are a must imo.    \n\nEdit: formatting",
					"date": "2016-11-25",
					"id": "dafaght",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "iopred",
					"content": "I always see r/golang as a place for interesting packages, updates on the go project and general \u0027non-stackoverflow\u0027 content.\n\nI believe it should be run as an non-official community, I think that should go some way to address community-building, as there is no expectation for official gophers to be here.\n\nAs for the last two questions, more active engagement and customization might be nice, but definitely not required. ",
					"date": "2016-11-25",
					"id": "dafee0f",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "vanwinks",
					"content": "FWIW, I\u0027m a software engineer at Wycliffe Associates and am about to push an entire golang backend that I wrote to production for the first time.  I\u0027d be interested in contributing effort toward whatever is needed on this sub channel.  I have found it to be very useful along my way.",
					"date": "2016-11-25",
					"id": "dafj7pm",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "gophergo",
					"content": "The idea of deleting this sub-reddit illustrates a fundamental lack of respect for those who have shared their work and offered help here. I look forward to more gopher friendly times.",
					"date": "2016-11-27",
					"id": "dahfyyx",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "BadMoonRosin",
					"content": "* **Purpose:**  In my mind, /r/golang exists as a vehicle for general Go discussion outside of Google.  \"General\" in the sense of having a more expansive scope than the mailing list (which tends to focus on esoterica of the core language rather than the broader ecosystem), or specialized sites such as StackOverflow.  \"Outside of Google\" in the sense that Googlers should feel welcomed, but not charged with any control or \u0027official\u0027 affiliation whatsoever.\n\n* **A moderation revamp:**  I don\u0027t care how frequently a moderator writes posts on this subreddit.  However, if they\u0027re not actively participating *in moderator duties*, then they should step down.  Moreover, my sense from the mailing list is that the Go team\u0027s internal views of this community range from apathy to outright disdain.  It does not seem that the Go team wishes for any \"official\" affiliation with Reddit... and after reading the comments in /u/bradfitz\u0027s mailing list thread, I don\u0027t want the Go team wielding exclusive power over this subreddit.  If there are any active mods on the Go team who wish to continue, then I\u0027m fine with that.  But \"ownership\" should revert to the community.  Let /u/dgryski, /u/skelterjohn, and any others issue a call for moderators.\n\n* **Community Building, pt. 1 (relationship with the mailing list):**  I am not concerned about the cultural differences between the Go mailing list and this subreddit.  The mailing list seems mostly to be very experienced, very intelligent, C++ greybeards who seek very specific discussion with a very specific tone.  Reddit seems to attract more of the younger, less experienced, Python/Ruby/JavaScript webdev people who want broader discussion (e.g. learning about which libraries and frameworks are hot right now, showing off personal projects, etc).  It\u0027s a shame that the mailing list people have always looked down on the Reddit community... and it\u0027s a shame that the Reddit community spends so much energy on immature anti-SJW outrage.  Frankly, both group NEED the other in order for Go to exist and have any relevance whatsoever outside of Google.  Alas, the two groups don\u0027t mix very well, but that\u0027s okay.  They don\u0027t have to... these two communities are quite complementary from a distance.\n\n* **Community Building, pt. 2 (the CoC):** I\u0027m really frustrated by a lot of the comments in this thread about the Code of Conduct, and by some *very* well-written comments being downvoted simply because the poster doesn\u0027t condemn the CoC.  Well, downvote away... but if most people actually *read* that thing and decide that they can\u0027t abide by it, then I frankly don\u0027t want to be here.  In terms of actual CONTENT, the thing basically just boils down to \"don\u0027t be an asshole\".  I believe what sets people off is its STYLE... the references to \"spaces\", \"microaggressions\", etc.  I guess you could say that people with a libertarian axe to grind are \"triggered\" by the phrasing.  But regardless of how this subreddit\u0027s rules are drafted, there absolutely SHOULD be some rules... and they should be enforced by the mods.  Base the rules on the current CoC text, or scrap it and start over, I don\u0027t care so long as the \"don\u0027t be an asshole\" spirit remains.  In either case though, the proper recourse should be contacting the MODS rather some outside email address at Google.\n\n* **Engagement and Structure:**  I wouldn\u0027t be adamantly *opposed* to \"gimmicks\" like \"Crazy Contest Tuesdays!!!\", but I wouldn\u0027t support them either.  I\u0027m happy with the overall content of this sub as-is.  Moreover, I bet that participation in the gimmicks would quickly die off... and having those half-dead threads every week would make the sub look less healthy than it actually is.\n\n* **Customisation**:  I would add a blue gopher logo and a couple of links.  MAYBE.  But then again, I personally have subreddit-specific CSS disabled across the board because I think it\u0027s annoying more often than not.\n",
					"date": "2016-11-27",
					"id": "dai1ztm",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "skelterjohn",
					"content": "I used to be more active with moderation, but I found that u/dsymonds was responsive and felt that my close attention wasn\u0027t needed. I also don\u0027t reddit as much as I used to. But, if people feel that more moderation is needed I can step back in.",
					"date": "2016-11-29",
					"id": "dajzf8m",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "Generally speaking, leaders should care about the communities they control. It would be good for everyone if disgruntled moderators stepped down. I\u0027m glad that Brad had the decency to step down after voicing his desire to shutter the community without offering any evidence that such a drastic thing needed to be done.\n\nI have no idea what the other Go leaders think, and I dare not waste my time in that horribly depressing Google thread again to find out. I hope people choose to do the nice thing. Too many men wish to destroy what is good in the world in pursuit of purity.",
					"date": "2016-12-04",
					"id": "dargbcd",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "waiting4op2deliver",
					"content": "so why do they hate us anyway? What are the actual critiques of this space.",
					"date": "2016-11-26",
					"id": "dafwam5",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "bitmadness",
					"content": "Honestly, the fact that we even need to debate whether it\u0027s ok to shut down the community subreddit just because one google dev got pissed at the reddit ceo is pretty sad.",
					"date": "2016-11-27",
					"id": "dah97qo",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "robertmeta",
					"content": "- **Purpose**: I would like to see a **new** focus on project announcements, looking for contributors, and looking for help.  In additional of course the standard news, announcements and glorious randomness. \n- **Moderation revamp**: I hope /u/dgryski gets ownership, let them build the team as they see fit.  Since the CoC demands review by the official Google team who are disavowing Reddit, it would obvious if have to be modified in some way. \n- **Community building**: Possibly cross-post from list to here? That would allow people to read list content here and have independent conversations and chime in on list if they want.  There are good conversations on the list, but honestly I think mailing lists are a little intimidating for those who didn\u0027t grow up on them.\n- **Engagement and structure**: I like the idea of daily events: \n  - *Monday*: Movie Monday, links to interesting Go related videos. \n  - *Tuesday*: Tooling Tuesday, tips and tools for using Go in $editor.\n  - *Wednesday*: Whippersnapper Wednesday, a friendly day for people new to Go to ask any questions they can imagine. \n  - *Thursday*: Team building Thursday, call for contributors to existing projects or announcements of new projects that need help. \n  - *Friday*: Feature request Friday, list features you would like your favorite Go apps to have and maybe someone on the thread will look at it. \n  - *Saturday*: Security Saturday, maybe we review some apps code, or talk about general best practices for Go security. \n  - *Sunday*: Summary Sunday, link to the 6 previous topics, sort of a rollup. \n- **Customization**: As long as usability doesn\u0027t suffer, do as you see fit. \n\n",
					"date": "2016-11-27",
					"id": "dai7fw7",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Traim",
					"content": "I have no time to really elaborate why  but I am for a a moderation revamp. It\u0027s necessary especially because of Code of Conduct.",
					"date": "2016-11-25",
					"id": "dafhyni",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mcandre",
					"content": "Don\u0027t shut down r/golang, an incredibly helpful community, just because a political subreddit was abused. Wtf\n\nGoogle Groups suck. I\u0027m glad that Reddit offers another, much more organized way to communicate.",
					"date": "2016-11-26",
					"id": "dagjpuv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "\u0026gt; What is the purpose of /r/golang?\n\nI don\u0027t know what *the purpose* is of /r/golang, but certainly a useful property of the subreddit is the relatively cheap dialog between Go users and others in related subs. Sometimes this means spam commenters come from /r/programming, but it also means newcomers can ask questions or subscribe without needing to create an account on GolangBridge (they can do this on the mailing list as well, but /r/golang seems friendlier IMHO). Further, it means Gophers like me don\u0027t have to go out of our way to participate in other programming communities where we can occasionally advocate for Go (e.g., correct misinformation, offer positive experiences, provide helpful suggestions for people who say \"I tried Go, but got stuck on X\", or even admit \"Yeah, X kind of sucks in Go right now, but here\u0027s what the community is doing to address it\").",
					"date": "2016-11-27",
					"id": "dahuea7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SilentWeaponQuietWar",
					"content": "so far the only \"official\" engagement seems to be punitive and/or dismissive. other than that, the rest of the \"normie\" community here has been extremely helpful, and all of the shared projects and articles are a very welcomed resource.\n\n**Purpose**\nA place for general discussions, sharing articles, etc. you know--basically exactly what we already do here.\n\n**revamp**\nOnly moderators that should step down should be any that entertained the idea of shutting this subreddit down. Any type of attitude that leans towards that, should not be welcome. I\u0027m not aware of any mods in that camp, but I don\u0027t keep tabs either.\n\n**Community Building**\nSome other good creative subreddits usually have a weekly \"What are you working on?\" threads, along with weekly (or certain day) threads about \"everyone discuss X topic\" (e.g. let\u0027s all discuss the logrus package -- tips, tricks, caveats, limitations, forks, etc.)\n\nAs for the mailing lists, I don\u0027t understand why anyone would prefer that format. I don\u0027t even bother reading the google groups/etc.\n\n**Engagement and structure**\nsame as above, i probably conflated the two.\n\n**Customization**\nJust make it abundantly clear this is an unofficial resource, and beat users over the head in the header with logos/links/etc. all going towards the \"official\" places for golang. So that everyone on the mailing list can stop whining about visitors getting confused that this is official.",
					"date": "2016-11-27",
					"id": "dahvybt",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sacado",
					"content": "Purpose ? I\u0027m looking for news about the language, new libs, success stories, failure stories, essays about the language and its ecosystem, all of that with a voting system so I\u0027m not drowned with uninteresting content. Without a voting system, a mailing list is totally irrelevent, by design.\n\nThe subreddit being semi-official is not useful, either, although it is cool to know the core go team is interested enough in their product to care about how it\u0027s perceived in the real world, rather than stay in their ivory tower. Well, it appears they do not really care actually, so I\u0027d rather not let them moderate the platform.\n\nAs a side note, but I think that\u0027s important, I\u0027m started to get worried by the fact that they want so much control over anything related to the language. Go is supposed to be \"open source\", but, hey, community, all your go-related content does belong to the go-team, right ? How do I know, in a few years, my company will not be sued by google for using go the wrong way, *à la* java/dalvik ? Sure, google does not own go, but, hey, they do not own the subreddit but wanted to take it down, so... how can I trust them anymore ?",
					"date": "2016-11-28",
					"id": "daiypct",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dasacc22",
					"content": "Really late reply, took a break from internet for a few weeks and suddenly this.\n\n\u0026gt; Purpose\n\nThis sub has been fulfilling this purpose already and why it\u0027s active. Anything Go related goes.\n\n\u0026gt; A moderation revamp. Should the Go Team members be asked to step down? [...] none of the Go team moderators are active contributors\n\nI don\u0027t care if they actively contribute, the question is if they actively moderate. If they do not, then yes, they should step down.\n\n\u0026gt; Community Building. There\u0027s clearly a lot of contempt for /r/golang in the mailing lists. How (or should) this be addressed?\n\nActions speak louder than words, and while I myself would consider /r/golang healthy conversation as-is, what builds communities are community leaders. This falls back to the current moderators and whether or not they are actively involved in this subreddit community. If they are not, then this subreddit simply needs more involved community **leaders**.\n\n\u0026gt; Engagement and Structure\n\nMany of the idea presented here sound interesting, and this again falls back on the community leaders and what they are most apt at doing. Find leaders that have the desire to pursue such ideas even if they might not concretely know what said ideas are in the immediate sense.\n\n\u0026gt; Customisation\n\nYeah, I guess, sidebar looks fine to me, there\u0027s a gopher up top.\n\nI\u0027d also like to add that the CoC is not necessary as mentioned by another user here. There are enough people here that toxic comments get voted down. For questionable comments, it\u0027s important to have sensible moderators and leaders that can empathize with offended users and understand the nuisances of other\u0027s comments so as to act as a responsible and sensible moderator and community leader.\n\nIt\u0027s just part of the job and if the current moderators are not capable of this level of engagement, they should be replaced. I\u0027d think there are enough users of this subreddit now that such people are available.",
					"date": "2016-12-01",
					"id": "damxh2t",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "arschles",
					"content": "First, I\u0027ve seen a few people mention that this sub\u0027s purpose is to disseminate new blog posts, projects and other content that may help people learn Go or advance their Go skills. I am strongly in favor of that purpose. I use this sub to post new Go In 5 Minutes episodes. It happens to be a great way to reach Gophers and foster discussion on each episode\u0027s topics.\n\nSecond, I think engagement could be improved. There is usually discussion on each thread, but nothing that brings people together. I look in the Gophers slack and see channels like \"show and tell\", \"reviews\", \"writing\", and similar. The spirit of these roughly matches the examples given in the OP. Why not give something like \"show and tell fridays\" a try, and integrate it with the slack channel?",
					"date": "2016-12-02",
					"id": "daplxhn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "F41LUR3",
					"content": "It\u0027d be nice if bradfitz could just remove himself from here. That guy quite often insights the desire for me to split his lip. What a whiner.\n\nSo the CEO modified the posts of some Trumpians. Who gives a fuck. /r/golang has nothing to do with any of that. Our corner of reddit is so far removed from any of that as to be it\u0027s own completely separate thing.\n\nThis subreddit is perfectly fine. I have no idea where the contempt is coming from. All I see is on-topic discussion and project releases. Nice people answering questions, helping, and giving feedback; a little snarky but harmless conversation here and there; and the usability of reddit far exceeds that of anything Google has to offer. Google is just simply awful at anything social: G+ is a joke, YouTube (talk about being anti free spech!) comments are completely undiscoverable and mostly toxic; their own forums are something out of 2007, and similarly unusable.\n\nI just think the mods that have an issue should just leave and let some people who aren\u0027t reactionary whiners trying to personally involve themselves in drama needlessly step up and take the reins.\n\nI don\u0027t see any reason to change anything about this subreddit. There hasn\u0027t been widespread concern here in /r/golang, and if there has... I\u0027d be hard pressed to find it.",
					"date": "2016-11-25",
					"id": "dafjlk3",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "thewhitetulip",
					"content": "- Purpose: Let this community be there for all questions, unless the answer is already written somewhere, we can post the answer _and_ point to the resource for more details. This is because of what happens at stackoverflow, they close of too many questions as \"not here\" so much so that if you google some questions and the link is stackoverflow and you enjoy the answers, it is _surely_ locked. Ironically most of the questions I enjoyed and learned from where locked. I do not want this to happen to /r/golang. Any questions is welcome, we can answer it and link to some other resource for more details.\nRemoving questions, I think that if a link is a spam, then it gets downvoted by the first person who reads it, so we don\u0027t really need to do anything, let the community lead the way. This is because everyone has a bias, I am saying as a programmer who wrote a book on Go just because /r/golang was so helpful to me, giving detailed comments, reviews and suggestions. I do not think that even if someone wants to sell their book/podcast/something that benefits the Go community that it should be taken off. Let the community lead the way, of course the usuals which are not welcome are porn etc. But let\u0027s not take /r/golang and create a stackoverflow out of it.\n- Mod revamp: yes please. Only those should control who participate. plus the next time someone talks of deleting /r/golang, **it should be started _here_**, not somewhere else. Who should become mod? I am not sure how reddit works yet, but I think those who want to mod can volunteer? or stackoverflow like elections?\n- community building: I think it is a bias against reddit itself. What we can do is what they have already been doing, banning those who violate the code of conduct and if that ensues then ban them permanently. Of course, I don\u0027t suggest that if someone offended someone once then ban them permanently, just warn them that it won\u0027t be tolerated here and continuous violation should be banned. Who will decide the code of conduct? The Go authors? or should /r/golang come up with a code of conduct of itself? Plus people do enjoy coming to this community, just see the other post, nobody wants to delete /r/golang, so the contempt which people have on the mailing list is of the elites, if they don\u0027t want to be the part of the plebeian community, then they are welcome not to. This is not a company where the bosses can shout out and shut people out because they offended them. This is FOSS.\n- engangement and structure: Yes please. We can have that, it\u0027ll benefit new comers and existing coders very much. Until now the feedback which we got was the one we asked for. Let\u0027s start caring about the users.\n- Customization: Yes please. The other day I went to Donald Trump\u0027s sub reddit, it was themed, GOT\u0027s subreddit is themed, let\u0027s have a theme for /r/golang and let\u0027s make it as Go official website as possible. The resources were put there by the mods and unsurprisingly they link to their content. Let\u0027s have our own github organization and start creating our own \"links for new resources\". I am saying this as a author myself, I am pretty sure the elites won\u0027t even consider my book as \"a book\", much less suggest it to someone. But, I have got feedback form those who read my book that it is a great book and they learned a lot from it. This is because the book is pointed towards new comers and _the book wouldn\u0027t have been possible without reddit_, shouldn\u0027t it be down there somewhere? Astaxie\u0027s github book is also amazing. Codegangsta\u0027s book is good if you know webdev but it is a little old and not updated.",
					"date": "2016-11-26",
					"id": "dafykw2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "wlll",
					"content": "\u0026gt; Purpose\n\nNews, happy with the content as it is.\n\n\u0026gt; A moderation revamp\n\nIf they don\u0027t use it then I think they should be replaced.\n\n\u0026gt; Community Building\n\nI honestly don\u0027t care what the mailing list thinks.\n\n\u0026gt; Customisation\n\nPlease please please don\u0027t style the page differently to the default. I mean not at all, not in any way. No clever up/down vote css, no new thread styling, no header that means that every subreddit I go to I have to re-learn where the navigation is. Sure, add links to the sidebar, but I come to reddit for news, and the only thing that styling the page does is make that harder. The existing style works just fine.",
					"date": "2016-11-26",
					"id": "dag7pm3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gohacker",
					"content": "\u0026gt; Please please please don\u0027t style the page differently to the default.\n\nLet them. Thankfully, reddit allows to disable custom subreddit styling altogether. See https://ssl.reddit.com/prefs/ , under \"display options.\"",
					"date": "2016-11-26",
					"id": "dag9gfc",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "wlll",
					"content": "I\u0027m not going to not let them, I just don\u0027t want them to.",
					"date": "2016-11-26",
					"id": "daggmza",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-11-25",
					"id": "daf6bkn",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "mm_5687",
					"content": "I feel this is a discussion which needs to be separate. \n\nThe majority of the discussion in that thread revolves around the proposal to delete and the (un)involvement of the Go Team, rather than how the /r/golang community should move forward. I think it\u0027s better to have a separate thread for the purpose of discussing the future.",
					"date": "2016-11-25",
					"id": "daf6f6r",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "philoserf",
					"content": "I am with the community control movement.",
					"date": "2016-12-02",
					"id": "daos71l",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "shadow_banned_man",
					"content": "https://www.reddit.com/r/officialgolang/",
					"date": "2016-11-25",
					"id": "dafi0ew",
					"isArchived": true,
					"isControversial": false,
					"score": -4
				},
				{
					"author": "[deleted]",
					"content": "There is no point to a subreddit without taking advantage of the reddit feature set for community moderation. Unmoderate it, let\u0027s develop some Go comedy and knowledge as a larger community.",
					"date": "2016-11-26",
					"id": "dafqafr",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "thewhitetulip",
					"content": "unmoderated subreddits die",
					"date": "2016-11-26",
					"id": "dafyle0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "google_you",
					"content": "Reddit is only good for web scale trolling.\n\nI deleted reddit account a long time ago except for web scale trolling accounts.\n\nGo community certainly can revive gopher protocol and build modern clients and community there.\n\n",
					"date": "2016-11-25",
					"id": "daff8py",
					"isArchived": true,
					"isControversial": false,
					"score": -22
				},
				{
					"author": "[deleted]",
					"content": "\u0026gt; I deleted reddit account a long time ago\n\nYet here we are\n",
					"date": "2016-11-26",
					"id": "dafuow9",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				}
			]
		},
		{
			"author": "firepear",
			"date": "2014-12-11",
			"id": "2oy3ls",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.4 is released!",
			"comments": [
				{
					"author": "sedmonster",
					"content": "Go team!",
					"date": "2014-12-11",
					"id": "cmrlg9m",
					"isArchived": true,
					"isControversial": false,
					"score": 42
				},
				{
					"author": "enneff",
					"content": "Yes?",
					"date": "2014-12-11",
					"id": "cmrmgcy",
					"isArchived": true,
					"isControversial": false,
					"score": 66
				},
				{
					"author": "dsymonds",
					"content": "yes?",
					"date": "2014-12-11",
					"id": "cmrlutg",
					"isArchived": true,
					"isControversial": false,
					"score": 54
				},
				{
					"author": "jcd-",
					"content": "Yes?",
					"date": "2014-12-11",
					"id": "cmrm4e6",
					"isArchived": true,
					"isControversial": false,
					"score": 51
				},
				{
					"author": "okaydave",
					"content": "Yes?",
					"date": "2014-12-11",
					"id": "cmrlvqk",
					"isArchived": true,
					"isControversial": false,
					"score": 54
				},
				{
					"author": "rsc",
					"content": "Yes?",
					"date": "2014-12-11",
					"id": "cmrt8eu",
					"isArchived": true,
					"isControversial": false,
					"score": 39
				},
				{
					"author": "bradfitz",
					"content": "Yes?",
					"date": "2014-12-11",
					"id": "cmrluf5",
					"isArchived": true,
					"isControversial": false,
					"score": 74
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2014-12-11",
					"id": "cmrvwbx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SupersonicSpitfire",
					"content": "Yes.",
					"date": "2014-12-12",
					"id": "cmsrg2c",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ianlancetaylor",
					"content": "Yes?",
					"date": "2014-12-11",
					"id": "cmru1mb",
					"isArchived": true,
					"isControversial": false,
					"score": 32
				},
				{
					"author": "crawshaw",
					"content": "Yes?",
					"date": "2014-12-11",
					"id": "cmrta1y",
					"isArchived": true,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "Sajmani",
					"content": "Yes?",
					"date": "2014-12-11",
					"id": "cmrtg4m",
					"isArchived": true,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "campoy",
					"content": "Yes?",
					"date": "2014-12-11",
					"id": "cmrws2h",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "neild",
					"content": "Yes?",
					"date": "2014-12-11",
					"id": "cms0qmu",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "sedmonster",
					"content": "Thanks Go team, congratulations on the release and can\u0027t wait to move all our code to 1.4. Also, will Go 1.5 have generics? (Just kidding.)",
					"date": "2014-12-11",
					"id": "cmrmps5",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "mbmanyl",
					"content": "\u0026gt; Also, will Go 1.5 have generics?\n\nthey propose to use new `go generate` command instead of generics",
					"date": "2014-12-11",
					"id": "cmrtfzm",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "ctcherry",
					"content": "Haha wonderful \"yes?\" replies in to the comment, love this community!",
					"date": "2014-12-11",
					"id": "cmrlznu",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "jan1024188",
					"content": "Yes?",
					"date": "2014-12-12",
					"id": "cmsfnty",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "I recommend no one goes over to the thread in /r/programming about this, unless you enjoy the usual \"herp derp no generics\" circlejerk.\n\nSeriously though, 1.4 looks great. ",
					"date": "2014-12-11",
					"id": "cmrul45",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "Azzk1kr",
					"content": "The \"no generics\" discussion sometimes get on my nerve. It sounds like it\u0027s the only thing that holds some people back from using Go, even though it has plenty to offer. I for one do not miss it... yet.\n\n\u0026gt; \"There are only two kinds of languages: the ones people complain about and the ones nobody uses\"\n\nLooks like Stroustrup was right about that.",
					"date": "2014-12-11",
					"id": "cmruwfa",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "LordAndrew",
					"content": "I guess I\u0027m just not experienced enough with programming languages that DO have them, but what are generics exactly and why are they so highly coveted?",
					"date": "2014-12-11",
					"id": "cms7o8c",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sacado",
					"content": "In a nutshell : generics would be useful when you happen to use interface{} as they offer you both better type safety and better performance.",
					"date": "2014-12-11",
					"id": "cms85o1",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "bat_country",
					"content": "Let\u0027s pretend you wanted to write a reverse() function that returned a copy of a slice in reverse order. With generics it\u0027s easy. Without you have to choose between copy pasting the function for each array type you want to use it on or returning interface and having the caller cast. ",
					"date": "2014-12-12",
					"id": "cmscbbu",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "SupersonicSpitfire",
					"content": "You can write functions that sorts lists of any type, while the compiler still checks that there is sanity going in and sanity coming out of the function.\n\nWithout generics, the sort function either has to be written per type, or would have to accept anything and send out anything, without the additional type checks by the compiler.",
					"date": "2014-12-12",
					"id": "cmsskhe",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "np-tryhard",
					"content": "It is funny to look at sometimes - especially because the vast majority of vocal, unconstructive whining is from people who don\u0027t use the language (and don\u0027t seem to spend their time productively). ",
					"date": "2014-12-12",
					"id": "cmse8n7",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Orange_Tux",
					"content": "[The release notes][1].\n\n[1]:https://golang.org/doc/go1.4",
					"date": "2014-12-11",
					"id": "cmroaes",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "forlackofabetteridea",
					"content": "Remember to change your import paths: code.google.com/p/ is changing to golang.org/x/",
					"date": "2014-12-11",
					"id": "cms4an9",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "fungussa",
					"content": "Go has topped r/programming for the first time! :)",
					"date": "2014-12-11",
					"id": "cms0w2f",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Mittalmailbox",
					"content": "\u0026gt;The most notable new feature in this release is official support for Android.\n\nDo this mean we can see Android completely moving to Go in 2-3 years? or is it too early to say",
					"date": "2014-12-11",
					"id": "cmrlyly",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "redalastor",
					"content": "It means that in 2 to 3 years, writting Android apps in Go might be nice. Maybe.",
					"date": "2014-12-11",
					"id": "cmrm9w1",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "bradfitz",
					"content": "No.",
					"date": "2014-12-11",
					"id": "cmrlywq",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "ArtnerC",
					"content": "Confirmed Android completely moving to Go in **1-2 years**. Hooray!",
					"date": "2014-12-11",
					"id": "cmsag25",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "lolomfgkthxbai",
					"content": "A [reliable source](http://www.reddit.com/r/golang/comments/2oy3ls/go_14_is_released/cmsag25) told me this is true. Finally everything on Android will run at least 1000% faster and make unicorn rainbows!",
					"date": "2014-12-12",
					"id": "cmsru5o",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "alialtun14",
					"content": "Does \"No.\" means ?  It isn\u0027t too early to say that we can see Android completely moving to Go in 2-3 years. :)",
					"date": "2014-12-11",
					"id": "cmrnfad",
					"isArchived": true,
					"isControversial": false,
					"score": -3
				},
				{
					"author": "redalastor",
					"content": "No.",
					"date": "2014-12-11",
					"id": "cmru240",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "lolomfgkthxbai",
					"content": "It means that Go might become a reasonable alternative when writing NDK parts of Android apps. Replacing Java on Android is not in the Go team\u0027s hands.",
					"date": "2014-12-11",
					"id": "cmrraav",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "dsymonds",
					"content": "no.",
					"date": "2014-12-11",
					"id": "cmrlztz",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "jcd-",
					"content": "No.",
					"date": "2014-12-11",
					"id": "cmrmago",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "kirizzel",
					"content": "In which cases would you use the new range syntax? If I iterate over a slice or map, it\u0027s to do something with the values.  (I\u0027m sure there are reasons, otherwise you wouldn\u0027t have added it)",
					"date": "2014-12-11",
					"id": "cmrn4nk",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "farslan",
					"content": "```\nfor range time.Tick(time.Second) {\n\tlog.Println(\"hello\")\n}\n```",
					"date": "2014-12-11",
					"id": "cmrp8qv",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "SupersonicSpitfire",
					"content": "That is awesome!",
					"date": "2014-12-12",
					"id": "cmssmjl",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "JohnStow",
					"content": "Maybe in cases like this...\n\n    vals :\u003d []string{\"foo, bar\"}\n    // various operations that may append to vals\n    var keys []string\n    for range vals {\n        keys \u003d append(keys,\"key\u003d?\")\n    }\n    where :\u003d strings.Join(keys,\" or \")\n    db.Select(\u0026amp;result, \"select * from table where \"+where, vals...)\n\nCleaner than \"for i:\u003d0; i \u0026lt; len(vals); i++\" I think.",
					"date": "2014-12-11",
					"id": "cmrnlpo",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "orbat",
					"content": "One use I can immediately think of that hasn\u0027t been mentioned yet is combining it with [github.com/bradfitz/iter](http://godoc.org/github.com/bradfitz/iter)",
					"date": "2014-12-11",
					"id": "cmrr5t4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "captncraig",
					"content": "Is go generate anything other than a shell script replacement in the code? People keep talking like it solves all kinds of problems, but all it has done for me is gotten rid of a few external script files and made them a bit uglier in code.\n\nI like that it gives a more consistent interface for people, but it really doesn\u0027t do anything on its own.",
					"date": "2014-12-11",
					"id": "cmrzvyg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "humbled",
					"content": "The power will likely be in pre-bundled generators, like the new enum-const-to-Stringer generator.",
					"date": "2014-12-11",
					"id": "cms0ozn",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "manghoti",
					"content": "\u0026gt;The go command has a new subcommand, go generate, to automate the running of tools to generate source code before compilation.\n\nI think this is the go team really going full steam ahead for generated source code.\n\nTo be honest, I personally haven\u0027t had much problem with generated source code, I\u0027ve found it works well with IDE\u0027s, and it\u0027s explicit in what it does. You can see and debug output.\n\nIt seems this is their response to the debate about generics \"Generate it!\"\n\nCheck out the last example: https://golang.org/s/go1.4-generate\n\nThey use the go generate to implement a generic sort.",
					"date": "2014-12-11",
					"id": "cms0h7e",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "sacado",
					"content": "Correct. Although an example working out-of-the-box (rather than a \"you juste have to implement a shell script\") would be much more convincing IMO...",
					"date": "2014-12-11",
					"id": "cms890v",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "bkeroack",
					"content": "Support for internal modules is awesome. I\u0027ve felt uncomfortable having all my source files in a single flat directory, but the only alternative was to break them out into completely separate, public modules. It\u0027s nice that now I can create internal modules vaguely similar to how I would do it in Python.",
					"date": "2014-12-11",
					"id": "cms435z",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "\u0026gt; I\u0027ve felt uncomfortable having all my source files in a single flat directory\n\nWhy ?",
					"date": "2014-12-11",
					"id": "cms4jrg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "garfj",
					"content": "Personally I enjoy being able to develop using a package like structure for organization and separation of concerns, without needing to worry about accidentally providing a public API that people start programming against.",
					"date": "2014-12-11",
					"id": "cms6dew",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "bkeroack",
					"content": "Just aesthetics. I prefer to break my applications up into smaller modules, and then the modules into individual source files. \n\n    src/myapp/data_access/foo.go\n    src/myapp/data_access/bar.go\n    src/myapp/util/baz.go\n    src/myapp/main.go",
					"date": "2014-12-11",
					"id": "cms7qv3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "uncreativemynameis",
					"content": "Champagne is falling from the heavens tonight in SF!\n",
					"date": "2014-12-11",
					"id": "cmrm7jo",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bradfitz",
					"content": "This is all champagne!??! https://twitter.com/NWSBayArea/status/542881707012014080\n",
					"date": "2014-12-11",
					"id": "cmrmery",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "BurningFox",
					"content": "Judging by the other two threads, the answer is “maybe”.\n",
					"date": "2014-12-11",
					"id": "cmrpsbd",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				}
			]
		},
		{
			"author": "mightyroger",
			"date": "2017-08-08",
			"id": "6scfu1",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "got a new pair-programming buddy at work",
			"comments": [
				{
					"author": "jns111",
					"content": "Sweet. I bought two so they\u0027re not alone. ;-)",
					"date": "2017-08-08",
					"id": "dlboss4",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "jocull",
					"content": "Careful. They multiply like rabbits.",
					"date": "2017-08-08",
					"id": "dlc54dx",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "synergygoph",
					"content": "http://i.imgur.com/GOh8Irz.jpg",
					"date": "2017-08-08",
					"id": "dlccf3t",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "jns111",
					"content": "No problem, got a Minion too who\u0027s looking after them. ;-)",
					"date": "2017-08-08",
					"id": "dlcf8b8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mightyroger",
					"content": "Good thinking, think I need to do the same so my gopher doesn\u0027t feel lonely when I leave the office \u003d)",
					"date": "2017-08-08",
					"id": "dlbqehu",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dm319",
					"content": "Well [hello there](https://goo.gl/photos/cK6R4sWCHr465EXd7)!",
					"date": "2017-08-08",
					"id": "dlbrmer",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "adamkw94",
					"content": "Where do I buy one",
					"date": "2017-08-08",
					"id": "dlbq6r5",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "mightyroger",
					"content": "bought mine here https://gopher.golangmarket.com/",
					"date": "2017-08-08",
					"id": "dlbqf7t",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "adamkw94",
					"content": "Of course the golang market is a thing",
					"date": "2017-08-08",
					"id": "dlbqg2s",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Chillance",
					"content": "Me selling that plush here. One of the main reasons I sell the plush is so I can reinvest the money to build the Golang Market site (and be able to create other cool things in Go). The Golang Market site itself I think will be very beneficial to all involved. People can make money doing some cool things in Go, and others save a lot of time just buying creations. That is my vision with it at least. :)",
					"date": "2017-08-08",
					"id": "dlc1lek",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "daellin",
					"content": "Ooh... I might gopher two.",
					"date": "2017-08-08",
					"id": "dlbz5nu",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Alsterwasser",
					"content": "A [plush gopher debugging buddy](https://en.wikipedia.org/wiki/Rubber_duck_debugging), more like. Getting one for myself now!",
					"date": "2017-08-08",
					"id": "dlbwdj1",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "WikiTextBot",
					"content": "**Rubber duck debugging**\n\nIn software engineering, rubber duck debugging or rubber ducking is a method of debugging code. The name is a reference to a story in the book The Pragmatic Programmer in which a programmer would carry around a rubber duck and debug their code by forcing themselves to explain it, line-by-line, to the duck. Many other terms exist for this technique, often involving different inanimate objects.\n\nMany programmers have had the experience of explaining a programming problem to someone else, possibly even to someone who knows nothing about programming, and then hitting upon the solution in the process of explaining the problem.\n\n***\n\n^[ [^PM](https://www.reddit.com/message/compose?to\u003dkittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to\u003dWikiTextBot\u0026amp;message\u003dExcludeme\u0026amp;subject\u003dExcludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/golang/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]\n^Downvote ^to ^remove ^| ^v0.24",
					"date": "2017-08-08",
					"id": "dlbwdnp",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "mightyroger",
					"content": "plush gopher debugging buddy....that\u0027s freaking brilliant! ",
					"date": "2017-08-08",
					"id": "dlbyohy",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "BloodOfSteel",
					"content": "may I ask what is that editor or theme ?  \n\nalso why there is `json: \"name\"` for every field ? and why you do rename them to small letters ?\n\nedit: looks like vim, right ?  ",
					"date": "2017-08-08",
					"id": "dlbskpn",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "stevokk",
					"content": "When he decodes Json into structs the naming is in camel case so he needs to provide the name to map from. (Source: my limited Go knowledge)",
					"date": "2017-08-08",
					"id": "dlbysu3",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "joffuk",
					"content": "Nailed it :)\n\nThe struct vars need to be exported so you camel case em, The lowercase part on the right is the name of the json field that will contain the data. It works the same way with xml but you would use `xml:\"attribute\"` and of course import encodings/xml",
					"date": "2017-08-08",
					"id": "dlcapoa",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "\u0026gt; needs to provide the name to map from\n\nAnd the name to map to when encoding structs into JSON. Go use caps by default, yet I use lower case in JSON, so I need to map every field I want to write out.\n\nThis is my main complaint with the JSON library, my second being that it\u0027s difficult to conditionally output certain fields (e.g. accept a password field, but don\u0027t include it in the JSON output).",
					"date": "2017-08-08",
					"id": "dlchk3g",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mightyroger",
					"content": "vim indeed, you are correct. using elflord colorscheme",
					"date": "2017-08-08",
					"id": "dlbsrwp",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tdewolff",
					"content": "Do you use GVim or in the console? I\u0027m struggling to get the colorschemes to work in the console as it only has 256 colors.. \u003d/",
					"date": "2017-08-08",
					"id": "dlc97n5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mightyroger",
					"content": "just plain console vim. yeah depends on how fancy you want it to be, I played around with the solarized colorscheme before, but could never get it to work satisfactory. I use the elflord color which is provided out-of-the-box and it fulfills my needs at least",
					"date": "2017-08-08",
					"id": "dlcb4dv",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "byllc",
					"content": "I had a couple from two different Gopher cons,  they were popular with others on the team and have since disappeared. I\u0027m going to pretend they burrowed their way out in to the world and are now happily prepping for the long winter ahead. \n",
					"date": "2017-08-08",
					"id": "dlbwm4j",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-08",
					"id": "dlbsl27",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mightyroger",
					"content": "you have a good eye, I\u0027m using vim-easytags and tagbar plugins and nerdtree of course :)",
					"date": "2017-08-08",
					"id": "dlbt4ym",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-08",
					"id": "dlc3xh3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mightyroger",
					"content": "agreed, also the vim-go plugin is simply awesome. nothing beats vim as an IDE for go ",
					"date": "2017-08-08",
					"id": "dlcbbyt",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "zanven42",
					"content": "Could you please point me in the right direction for a good go vim setup, I\u0027ve recently switched to Linux and started teaching myself vim and I can somewhat see how vim would be better since I\u0027m not a wizard at it yet and would like to know roughly what\u0027s needed to make it a vscode go killer so I won\u0027t miss that application when coding go and can force myself to learn more of vim\u0027s features. ",
					"date": "2017-08-08",
					"id": "dlclv0y",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-09",
					"id": "dldasth",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "zanven42",
					"content": "Thanks a bunch :). I\u0027ll check it out when I get home. ",
					"date": "2017-08-09",
					"id": "dldc8kz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mightyroger",
					"content": "first realize that it you will need to invest time and energy to become proficient with vim. start with the basics; navigation, yank and paste text, delete and undo, visual mode, the most useful shortcommands etc etc. After that becomes muscle-memory start playing around to customize the .vimrc. Later explore useful plugins, start by choosing plugin manager (Vundle \u0026amp; Pathogen are popular choices). Install the excellent vim-go plugin and read it\u0027s tutorial. Don\u0027t go supernuts on the vimrc in the beginning, try to understand everything you add there. ",
					"date": "2017-08-09",
					"id": "dlddjn0",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "itsmontoya",
					"content": "VSCode would like a word with you",
					"date": "2017-08-09",
					"id": "dld2p7d",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "boshlol",
					"content": "http://vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/\n\ndon\u0027t know if you\u0027ve seen this, but it convinced me to swap away from nerdtree.",
					"date": "2017-08-08",
					"id": "dlc6gao",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Rafikithewd",
					"content": "I should look into that tagbar thing \n\nSeems helpful",
					"date": "2017-08-08",
					"id": "dlbw2yb",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "divan0",
			"date": "2016-01-27",
			"id": "42yc77",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Visualizing Concurrency in Go with WebGL",
			"comments": [
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-01-27",
					"id": "cze1jen",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "divan0",
					"content": "Thanks!",
					"date": "2016-01-28",
					"id": "czeyigx",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "no1youknowz",
					"content": "Holy crap.  This is totally awesome.  Thanks.  \n\nIt has given me some aspirations though.  For a while now I\u0027ve built complex sales funnels with millions of impressions per day and I wanted to show in real-time a visualisation graph of traffic incoming, funnel flows and attrition rates to a layman.",
					"date": "2016-01-27",
					"id": "czea8v2",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Twirrim",
					"content": "Not sure if this gives you any inspiration, logstalgia is a neat tool for visualising Apache logs https://youtu.be/HeWfkPeDQbY",
					"date": "2016-01-28",
					"id": "czeqt0l",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dchapes",
					"content": "Is it just me or does the second animation not accurately represent the code?\n\nThe code is:\n\n        for i :\u003d 0; i \u0026lt; 24; i++ {\n            c :\u003d timer(1 * time.Second)\n            \u0026lt;-c\n        }\n\ni.e. start a goroutine, then wait on a receive, *then* loop and start the next goroutine, etc.\nBut the timeline shows future goroutines starting *before* the send/recv (it has the first three started before the first receive).\n\n",
					"date": "2016-01-27",
					"id": "czebp9g",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "skarlso",
					"content": "He does mention that there are timing issues in the thing. That\u0027s why he isn\u0027t open sourcing yet. Maybe it\u0027s because of that? It does look cool though. :-)",
					"date": "2016-01-28",
					"id": "czevjka",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "divan0",
					"content": "AFAIR, I had to insert time.Sleep() to that code, to visually separate \u0027send to channel\u0027 and \u0027stop goroutine\u0027, so this animation is not very accurate, you\u0027re right.",
					"date": "2016-01-28",
					"id": "czeyic2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "sharptierce",
					"content": "awesome",
					"date": "2016-01-27",
					"id": "cze32v7",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kron4eg",
					"content": "epic!",
					"date": "2016-01-27",
					"id": "cze4bo6",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "phonkee",
					"content": "awesome!",
					"date": "2016-01-27",
					"id": "cze4etf",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "farslan",
					"content": "This is amazing! Great work.",
					"date": "2016-01-27",
					"id": "cze4xkd",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "tucnak",
					"content": "This is bloody amazing! Kudos.",
					"date": "2016-01-27",
					"id": "czef90x",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "skarlso",
					"content": "This is bloody brilliant!",
					"date": "2016-01-28",
					"id": "czetxy9",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "Awesome work!",
					"date": "2016-01-28",
					"id": "czf2gev",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "malcor88",
					"content": "This is fantastic ",
					"date": "2016-01-28",
					"id": "czf48zp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "daveddev",
					"content": "[mrw](https://www.youtube.com/watch?v\u003dXTm-TlvHrcQ)",
					"date": "2016-01-27",
					"id": "cze1f26",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-01-28",
					"id": "czeioj1",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "bradfitz",
					"content": "I expected http://i.imgur.com/iDVTstR.jpg (parallelism theory vs practice)",
					"date": "2016-01-28",
					"id": "czeml3z",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				}
			]
		},
		{
			"author": "[deleted]",
			"date": "2016-01-30",
			"id": "43cpy6",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "GC pause times: from 300ms (Go 1.4) to 40ms (Go 1.5) to 3ms (Go 1.6). They did it again!",
			"comments": [
				{
					"author": "3264128256",
					"content": "Impressive. I thought in 1.5 it is supposed to be well under 10?",
					"date": "2016-01-30",
					"id": "czhcjss",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "bradfitz",
					"content": "It usually is well under 10ms even with Go 1.5. Some bugs discovered late in 1.5 prevented that from happening with large heaps or certain workloads. Those bugs were fixed in Go 1.6.\n\nThe Go 1.6 GC design is the same as 1.5, but is polished up. Go 1.7\u0027s GC (or 1.8) will be much different.",
					"date": "2016-01-30",
					"id": "czhmq7k",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "iends",
					"content": "Is there a proposal for 1.7/1.8 GC?",
					"date": "2016-01-30",
					"id": "czhu8np",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "bradfitz",
					"content": "The latest I\u0027ve heard is Russ say on golang-dev that \"Rick and Austin have been working on further improvements to the garbage collector, especially in terms of throughput. That\u0027s a long effort and may not be ready for Go 1.7.\"",
					"date": "2016-01-30",
					"id": "czi0mwv",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "iends",
					"content": "Aww, was hoping you were going to say Go is going pause-less ;)",
					"date": "2016-01-30",
					"id": "czi1jfp",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Little_Johnny",
					"content": "The latest pproposal I\u0027ve seen for the Garbage Collector is here: https://github.com/golang/proposal/blob/master/design/12800-sweep-free-alloc.md",
					"date": "2016-01-31",
					"id": "czi88bg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "10ms is a soft target. The real pauses could be longer or shorter depending on your application, hardware, load and other factors.",
					"date": "2016-01-30",
					"id": "czhe86y",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "devsquid",
					"content": "This is of course with a massive application. ",
					"date": "2016-01-30",
					"id": "czhrp0j",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "heptara",
					"content": "1000/60 \u003d 17\n\n3 \u0026lt; 17\n\nHooray.",
					"date": "2016-01-30",
					"id": "czhlyxj",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "awaitsV",
					"content": "3? half life 3 confirmed!!!",
					"date": "2016-01-30",
					"id": "czhuqe5",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "slierr",
					"content": "so that mean Go gc not much a problem when developing game?",
					"date": "2016-01-30",
					"id": "czhg9an",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "srbufi",
					"content": "I think Jonathan Blow said in one of his JAI language vids that he needs \u0026lt; 10ms pauses to be viable, which ruled out Go at the time, but I could be wrong",
					"date": "2016-01-30",
					"id": "czhgasj",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "slierr",
					"content": "can u link me to his video?",
					"date": "2016-01-30",
					"id": "czhgbt1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "srbufi",
					"content": "https://www.youtube.com/watch?v\u003dTH9VCN6UkyQ",
					"date": "2016-01-30",
					"id": "czhgfsu",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "slierr",
					"content": "thanks :)",
					"date": "2016-01-30",
					"id": "czhgk6z",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jringstad",
					"content": "Entirely depends on the type of game. For large games every millisecond counts, and even having a 1ms pause would be a very very hard sell -- that\u0027s the amount of time-cost for a fancy extra-feature the game could have, e.g. a cheap AO approximation, FXAA or other form of morphological AA, a small local physics simulation (cloth deform or whatnot), etc. For other types of games, something like 3-6ms can be perfectly fine. The unpredictability of the pause doesn\u0027t help (generally for games, a predictable 3ms cost \u0026gt;\u0026gt; a random 3ms cost that might or might not occur, whereas for most other applications the latter tends to be better)\n\nGenerally you have either 33.3 or 16.6ms available in your game (depending on which framerate you target), and you need to cram absolutely everything you do into that timeframe. Giving away even 3 of your 16.6ms is not an easy decision.\n\nIf you target mobile devices (much weaker) or VR (only ~11ms per frame available) the issue also becomes bigger.",
					"date": "2016-02-01",
					"id": "czjlhhv",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "DualRearWheels",
					"content": "gc is not (even Go 1.5 is good enough) but C function call overhead might be.",
					"date": "2016-01-30",
					"id": "czhx77b",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dilap",
					"content": "Edit: I feel bad about my snarky comment. The GC improvements are awesome and impressive, and I hope they are able to get compile times back down closer to 1.4 levels.",
					"date": "2016-01-30",
					"id": "czhesiu",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "[deleted]",
					"content": "Do you have any number to prove this?",
					"date": "2016-01-30",
					"id": "czhexy6",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-01-30",
					"id": "czhf50z",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "dgryski",
					"content": "No, the SSA backend (which is *not* included in 1.6 but *is* targetted for early 1.7) has doubled compile time.  However, that was pre-optimization. The developers were focussing on getting it to generate correct code first. After about a week of low-hanging fruit optimizations, it\u0027s \"only\" 40% slower.\n",
					"date": "2016-01-30",
					"id": "czhft46",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "jussij",
					"content": "In just one round of optimization those numbers you quote have been smashed:\n\nhttps://www.reddit.com/r/golang/comments/43cpy6/gc_pause_times_from_300ms_go_14_to_40ms_go_15_to/\n\nAnd I have no doubt they will come down further.\n\n**Edit:** The correct *smash linking* is given below, but my earlier link is massively impressive as well:\n\nhttps://groups.google.com/d/msg/golang-dev/TerfinvPffw/wvrEefWvBwAJ",
					"date": "2016-01-30",
					"id": "czhk17s",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "BoTuLoX",
					"content": "Wasn\u0027t the same thing said about the compile time increase of Go 1.5?",
					"date": "2016-01-30",
					"id": "czhfnjw",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "DualRearWheels",
					"content": "IIRC they didn\u0027t plan any compilation speed polishing for 1.6. But they are talking about it now for 1.7.",
					"date": "2016-01-30",
					"id": "czhfrun",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "bradfitz",
					"content": "Correct. Nobody had time to work on it during Go 1.6, sadly.\n\nNobody is happy or even content with the situation, though. I\u0027m still optimistic that we\u0027ll get the speed back.",
					"date": "2016-01-30",
					"id": "czi0qdx",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "anacrolix",
					"content": "Ffs",
					"date": "2016-01-30",
					"id": "czhii1o",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "throwaway320967429",
					"content": "Cool stuff! Keep more of it coming!",
					"date": "2016-01-30",
					"id": "czhopgl",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "enneff",
			"date": "2014-06-19",
			"id": "28igp8",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.3 is out! \\ʕ◔ϖ◔ʔ/",
			"comments": [
				{
					"author": "GaidinTS",
					"content": "Wow, the static analysis is awesome (http://golang.org/lib/godoc/analysis/help.html)",
					"date": "2014-06-19",
					"id": "cibazgx",
					"isArchived": true,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "demizer",
					"content": "I had no idea this was coming. It\u0027s like an unexpected gift. Very cool!",
					"date": "2014-06-19",
					"id": "cibf630",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "YEPHENAS",
					"content": "Are there any plans to enable this on golang.org for the standard library packages?",
					"date": "2014-06-19",
					"id": "cibfq3s",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Azzk1kr",
					"content": "\u0026gt; The method set and implements relation are also available via the package view.\n\nI just woke up, but I\u0027m wondering how godoc finds the implements relation now. This is IMHO a great addition in documentation. ",
					"date": "2014-06-19",
					"id": "cibe91r",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "UnreachablePaul",
					"content": "I think each project goes to https://www.mturk.com/mturk/welcome and some children in India figure that out in realtime",
					"date": "2014-06-19",
					"id": "cibj5fg",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "cryp7ix",
					"content": "It\u0027s achieved through the oracle analysis tool, I think.",
					"date": "2014-06-19",
					"id": "cibgd9g",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "wolverineoflove",
					"content": "NaCl support!\nEven if we\u0027re only 1/3 of the way to deplorable cross-platform binaries, I\u0027m thrilled I\u0027ll get to write it in go!",
					"date": "2014-06-19",
					"id": "cibetsi",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "SingularityNow",
					"content": "\u0026gt; deplorable\n\nYou keep using that word, I do not think it means what you think it means...",
					"date": "2014-06-19",
					"id": "cibk1vg",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "bluexavi",
					"content": "I like to think he means he\u0027s writing deplorable binaries and just hoping that he\u0027s not a coworker.",
					"date": "2014-06-19",
					"id": "cibliom",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "plafoucr",
					"content": "What happened to the \"go background\" command? I don\u0027t anything in the release note related to this :(",
					"date": "2014-06-19",
					"id": "cibevlk",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "bradfitz",
					"content": "fsnotify didn\u0027t happen. It\u0027s questionable it even will for Go 1.4, just because it\u0027s hard to find a cross-platform subset of the various fsnotify APIs on each OS.",
					"date": "2014-06-19",
					"id": "cibfc3j",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "lachryma",
					"content": "As someone who hacked on an inotify tool, amen. That\u0027s one of those areas where a cross-platform API would be extraordinarily useful, yet it just isn\u0027t there.",
					"date": "2014-06-19",
					"id": "cibgmcc",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "plafoucr",
					"content": "Thanks for the info. I\u0027m still happy with the current compile time :)",
					"date": "2014-06-19",
					"id": "cibhypp",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "YEPHENAS",
					"content": "How do I enable the static analysis? I just installed Go 1.3 and started\n\ngodoc -analysis\u003d\"type,pointer\" -http\u003d:6060\n\nand opened http://localhost:6060/src/pkg/sort/sort.go in the browser, but it looks like before, without any analysis links, but on the bottom of the page it says \"Build version go1.3.\"\n\n**Edit:** when I exclude my local GOPATH, it works",
					"date": "2014-06-19",
					"id": "cibh65p",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "robxu9",
					"content": "Gotta give it time. It\u0027s slow - monitor the console and it\u0027ll tell you it\u0027s doing static analysis. For the 20 or so packages in my GOPATH, it took 10 minutes...",
					"date": "2014-06-20",
					"id": "cic4bqn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "icholy",
					"content": "So it only works with the standard lib?",
					"date": "2014-06-19",
					"id": "cibvney",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "morsegeek",
					"content": "No, it works on any package that can be compiled with 1.3, I think. All the packages in my GOPATH worked with both pointer and type analysis.",
					"date": "2014-06-19",
					"id": "cibx4gb",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "icholy",
					"content": "I\u0027ve had it running for a few hours. The source view remains unchanged. ",
					"date": "2014-06-20",
					"id": "cicm95h",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ulfnielsen",
					"content": "You might have a compile error in your gopath? or in one the the tests?",
					"date": "2014-06-23",
					"id": "cieqev3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dmikalova",
					"content": "Where are the benchmarks!? Wheeeerrrrrreeeeee!",
					"date": "2014-06-19",
					"id": "cibctni",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "AYBABTME",
					"content": "https://github.com/davecheney/autobench",
					"date": "2014-06-19",
					"id": "cibe8le",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "rogerdpack",
					"content": "Is there a blog that summarizes these results?",
					"date": "2014-06-23",
					"id": "cifaran",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Momer",
					"content": "Great stuff; I was just on #reddit-gamedev talking about Go and it\u0027s stop-the-world GC. Speed improvements made there are really nice in 1.3 (~50%).",
					"date": "2014-06-19",
					"id": "cibl21u",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "lachryma",
					"content": "In the midst of all the great 1.3 features, I feel like we\u0027ve missed that *badass* ASCII gopher. If there aren\u0027t several of those in the next Go release, I will be extraordinarily disappointed and `rm -rf` immediately.",
					"date": "2014-06-19",
					"id": "cibglvx",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "YEPHENAS",
					"content": "\u0026gt; that badass ASCII gopher\n\n5 of the 7 characters are non-ASCII.",
					"date": "2014-06-19",
					"id": "cibhdda",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "vanderZwan",
					"content": "Eh, makes for a good showcase of Go\u0027s UTF-8 support.",
					"date": "2014-06-19",
					"id": "cibigdb",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2014-06-19",
					"id": "cibkcly",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "exhuberance",
					"content": "In the title ya dingus",
					"date": "2014-06-19",
					"id": "cibq69z",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "lachryma",
					"content": "Yeah, yeah, you know what I mean. :)",
					"date": "2014-06-19",
					"id": "cibsvxz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kortschak",
					"content": "/u/enneff, did you notice the ASCII gopher is rendered as an ASCII koala in the location bar? Represent.",
					"date": "2014-06-19",
					"id": "cibh51f",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "bguiz",
					"content": "Have not seen this before, exactly how do you? ",
					"date": "2014-06-19",
					"id": "cibhgs8",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "vince_prignano",
					"content": "For me the best part of this release is related to the contiguous stacks more info here: https://docs.google.com/document/d/1wAaf1rYoM4S4gtnPh0zOlGzWtrZFQ5suE8qr2sD8uWQ/pub",
					"date": "2014-06-19",
					"id": "cibibgr",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "gasche",
					"content": "I asked about this [on r/programming](http://www.reddit.com/r/programming/comments/28ihq4/go_13_is_released/cibiu0x): isn\u0027t the non-incremental stack copy going to hurt latency?",
					"date": "2014-06-19",
					"id": "cibiuia",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jimuazu",
					"content": "It is the same order of magnitude delay as append() reallocating a slice\u0027s backing array.\n\nEdit: Okay, I can see you\u0027re concerned about the pointer manipulation, but still this is nothing compared to what the GC does. How big do you expect your stack to get? (i.e. what is the longest stacktrace you\u0027ve seen?) Unless you\u0027re doing massive recursion, your stack isn\u0027t going to be huge. If that is the problem (you need immense stacks), you can use queues/etc instead of recursion to code your algorithm (and make it more memory-efficient too probably).",
					"date": "2014-06-19",
					"id": "cibl7ui",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "gasche",
					"content": "Well, I would expect the reallocation to be done with something `realloc`-like, that is often a no-op and in any case a fast bulk copy operation, while this stack copy needs to iterate on any pointer and possibly change it. But given that stacks are typically relatively small (if you don\u0027t write non-tail recursive functions), the costs could indeed be fairly small.",
					"date": "2014-06-19",
					"id": "cibldbo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "fenduru",
					"content": "Does it support generics yet? No? Okay I\u0027ll check back in 6 months",
					"date": "2014-06-20",
					"id": "cic8s7y",
					"isArchived": true,
					"isControversial": false,
					"score": -6
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2014-06-19",
					"id": "cibdhgv",
					"isArchived": true,
					"isControversial": false,
					"score": -20
				},
				{
					"author": "TheCrott",
					"content": "It won\u0027t, because it will make more complex under the hood, and I think that\u0027s good for keep making Go simple",
					"date": "2014-06-19",
					"id": "cibeo8g",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "xardez",
					"content": "I always find duplicate code to introduce more complexity. ",
					"date": "2014-06-19",
					"id": "cibgeb4",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "bonekeeper",
					"content": "Macro the duplication out!",
					"date": "2014-06-20",
					"id": "cico4b5",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				}
			]
		},
		{
			"author": "kjk",
			"date": "2018-02-27",
			"id": "80ntqx",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "\"Essential Go\" - a free Go programming book",
			"comments": [
				{
					"author": "kjk",
					"content": "This is a book on Go I\u0027ve been working on. \n\nIt\u0027s based on now retired Stack Overflow Documentation project but I\u0027ve been rewriting pretty much all of it.\n\nI\u0027m halfway through so please be forgiving, it\u0027s a WIP.\n\nWould love to know how to make it better (in terms of topics to cover or any other ideas).\n",
					"date": "2018-02-27",
					"id": "duwunvp",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "alethia_and_liberty",
					"content": "tell me more about the SO project. Are you saying this book is written against the most common SO questions? If so, that sounds like a very, very interesting premise.",
					"date": "2018-02-27",
					"id": "duwx2uy",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kjk",
					"content": "Stack Overflow had a project for a while where they wanted collaborative creation of documentation in a more organized way than just Q/A.\n\nIt ran for a while but then they abandoned it (see https://meta.stackoverflow.com/questions/354217/sunsetting-documentation).\n\nAnd yes, part of it was addressing commonly asked questions on SO in those docs.\n\n",
					"date": "2018-02-27",
					"id": "duwxn0u",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Thaxll",
					"content": "Would be nice to handle the error returned on f.Close(): https://www.programming-books.io/essential/go/a-2795-defer\n\nI think it\u0027s better to know if there is something wrong happening during the defer.",
					"date": "2018-02-27",
					"id": "dux8v6d",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kjk",
					"content": "Good point. I might change the example altogether.\n\nI do talk about checking errors from Close in https://www.programming-books.io/essential/go/a-3332-writing-files\n\nIn practice it\u0027s only needed when writing to files, not reading and I don\u0027t want to complicate explanation of defer with sidenotes about nuances of Close().\n\n",
					"date": "2018-02-27",
					"id": "duxc0rn",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "MaybeARunnerTomorrow",
					"content": "The book looks great based on what I\u0027ve skimmed through so far\n\nA few things that might be nice to see:\n- Project per chapter (or after certain milestones)\n- How \u0027go get\u0027 works as opposed to git clone.  If someone wants to contribute to another users project what is the proper workflow\n- Exercises/project chapters?\n\nComing from C# I still have been trying to figure out something to build in my spare time using Go.  I\u0027ve looked at [Gophercises](https://gophercises.com/) but the projects weren\u0027t very interesting when I looked at it awhile back.  \n\nIs this book available in a mobile format or for purchase/donation?",
					"date": "2018-02-27",
					"id": "duwzte3",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "kjk",
					"content": "Thanks, I\u0027ve added those suggestions to my list.\n\nExercises are an interesting idea. It would be possible to build a custom playground where it shows unfinished snippet of code, asks you to complete it and automatically checks if the result is correct. Would require bunch of programming work to build the playground but certainly doable.\n\nAs to mobile format / donations - that\u0027s another interesting idea.\n\nMy immediate focus is to get it to v1.0 i.e. finish editing the second half of the book, do another editing pass for typos and such.\n",
					"date": "2018-02-27",
					"id": "dux1gtr",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "MaybeARunnerTomorrow",
					"content": "Awesome!  \n\nIf the playground is a lot of initial work - even linking to a repo asking users to `go get` this solution and work on it to get it to do \"x\" would be neat. \n\nYeah I enjoy reading on mobile devices and would love to drop a donation to go towards the development/work on the book. \n\nI\u0027ll keep an eye out for 1.0 :)",
					"date": "2018-02-27",
					"id": "dux1ppw",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kjk",
					"content": "Could you expand on \"mobile devices\" i.e. what kind of formats should be available (epub? mobi? pdf? something else?)\n\nWhat devices / applications are you using (is it e.g. an Android or iOS phone? Android/iOS tablet?)\n\nAre you using Kindle app, iBooks app, some other ebook reading apps?\n\nAre there ebooks you\u0027ve read that are especially well created that I should emulate (in terms of making the content work well on mobile device)? Mistakes that some ebooks make that I should avoid?\n",
					"date": "2018-02-27",
					"id": "dux28uw",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "MaybeARunnerTomorrow",
					"content": "For me personally I can make it readable in any format.  I use Calibre to manage e-books on my Kindle device.  \n\nI rarely read on my Android phone - the Kindle has been a pleasure to read on.  epub or mobi or even pdf can be converted using Calibre .\n\nAs long as it\u0027s readable (as in text large enough) as well as making sure the formatting doesn\u0027t get horribly messed up when converting if the user has the ability to do that.  ",
					"date": "2018-02-27",
					"id": "dux33ha",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kjk",
					"content": "Thanks for the info, good to know.",
					"date": "2018-02-27",
					"id": "dux3ltt",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Kochie_94",
					"content": "Damn this looks comprehensive, nice.",
					"date": "2018-02-28",
					"id": "duy953l",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "p7r",
					"content": "This looks great. Are you looking for collaborators at all? At any point do you think you\u0027ll provide other formats including perhaps selling books (physical or digital)?\n\nI find projects around building books on programming really interesting.",
					"date": "2018-02-27",
					"id": "duxk19y",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kjk",
					"content": "Collaborators: very much so. See https://github.com/essentialbooks/books/blob/master/how-to-contribute.md\n\nThe book will always be free on the web and open source. Selling a printed copy is a possibility.",
					"date": "2018-02-27",
					"id": "duxkapv",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "abkibaarnsit",
					"content": "Any way to download PDF ?",
					"date": "2018-03-13",
					"id": "dvmxpvn",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kjk",
					"content": "Not yet.",
					"date": "2018-03-13",
					"id": "dvn0nmk",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "govision",
					"content": "Can you pretty please do a chapter on apis without a framework.\n\nLike doing a \u0027select\u0027 is easy and so is a templated post as a crud request but doing a restful API with crud to a URL with jQuery is really time consuming.  I really don\u0027t know how many books or articles I read where they say they are explaining restful crud app and just do select... It\u0027s emense. \n\nhttps://docs.google.com/document/d/1Zb9GCWPKeEJ4Dyn2TkT-O3wJ8AFc-IMxZzTugNCjr-8/edit?usp\u003ddrivesdk\u0026amp;ouid\u003d116246055924160986923\n\n\n Please do chapters on that!\n\n",
					"date": "2018-02-28",
					"id": "duyq509",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kjk",
					"content": "To make sure I understand: a chapter on doing somewhat complex web app? I will look into that.",
					"date": "2018-02-28",
					"id": "duz2h5y",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nwss00",
					"content": "Excellent!\n\nA good online complement to the classic physical Go textbook by Donovan and Kernighan.",
					"date": "2018-02-28",
					"id": "duyuwk7",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Sir_not_sir",
					"content": "When did websites become books?",
					"date": "2018-02-27",
					"id": "dux2yft",
					"isArchived": false,
					"isControversial": false,
					"score": -12
				}
			]
		},
		{
			"author": "farslan",
			"date": "2018-03-27",
			"id": "87j8xd",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "vim-go v1.17",
			"comments": [
				{
					"author": "farslan",
					"content": "This is our biggest release ever. We finally have **debugger** support! Checkout the demo here for an example: https://twitter.com/fatih/status/978652722835656704 \n\nThanks for Martin and Billie working on vim-go, Mattn for the debugger support and all other contributors. Much appreciated! Read the changelog for all changes and improvements: https://github.com/fatih/vim-go/blob/master/CHANGELOG.md#117---march-27-2018 As always thanks for using Vim and let us know if there any issues or you want to give a feedback :)",
					"date": "2018-03-27",
					"id": "dwd7nhx",
					"isArchived": false,
					"isControversial": false,
					"score": 53
				},
				{
					"author": "kilpatty",
					"content": "Thanks again for the work :) Amazing stuff as always",
					"date": "2018-03-27",
					"id": "dwda70f",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "eugene-d",
					"content": "Thank you so much for your work!",
					"date": "2018-03-27",
					"id": "dwdr9u8",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "saintjeremy",
					"content": "Awesome sauce! Thanks kindly for all your work.",
					"date": "2018-03-27",
					"id": "dwdrq52",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Oliver_Fish",
					"content": "Thanks for all your hard work! Any idea if/when neovim support is coming for debugging?",
					"date": "2018-03-28",
					"id": "dwf0dz2",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "arp242",
					"content": "Probably not any time soon (think months, not weeks). A good first step would be to use/make a unified jobs interface, instead of `if has(\u0027neovim\u0027) [..]` switches. I know there are some libraries out there, but never really looked in to any of them.\n\nThere is actually an issue for that: https://github.com/fatih/vim-go/issues/1704\n\nThis still leaves the problem that Delve uses JSON-RPC to comminicate, and that NeoVim only supports MessagePack-RPC over job channels (AFAIK). I never used NeoVim much, but as far as I can see, getting it to work will require some work to get this to work (although that may possible be handled by one of the Vim/NeoVim job API compatibility layers?)",
					"date": "2018-03-28",
					"id": "dwf5e2r",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "saturn_vk",
					"content": "MessagePack is just the communication protocol for the job interface. I assume the actual data you pass to the jobs you start can be anything, otherwise it would be pretty useless as an interface.",
					"date": "2018-03-28",
					"id": "dwf6daa",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "volatilemajesty",
					"content": "Try the vim-delve plugin - works with both Vim and Neovim https://github.com/sebdah/vim-delve",
					"date": "2018-03-28",
					"id": "dwf6zwr",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kostix",
					"content": "Thank you and all the contributors!",
					"date": "2018-03-28",
					"id": "dwera22",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "alaskanarcher",
					"content": "AUR package is updated to 1.17",
					"date": "2018-03-28",
					"id": "dwebh1l",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "weary_webscale_dev",
					"content": "Awesome work !👏👏👏",
					"date": "2018-03-28",
					"id": "dwefoi2",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "andradei",
					"content": "Impressive!",
					"date": "2018-03-28",
					"id": "dwf8r1h",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "korjavin",
					"content": "I just tried debugging.\n\nYou are awesome!",
					"date": "2018-03-29",
					"id": "dwhno9z",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "dgryski",
			"date": "2018-01-18",
			"id": "7rc53z",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Dave Cheney: Writing High Performance Go",
			"comments": [
				{
					"author": "bupku52018",
					"content": "can someone just link to the slides...infoq is so annoying about that",
					"date": "2018-01-18",
					"id": "dsvyegk",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "dgryski",
					"content": "Slides are https://github.com/davecheney/qconsf-2017",
					"date": "2018-01-18",
					"id": "dsvyxuq",
					"isArchived": false,
					"isControversial": false,
					"score": 31
				},
				{
					"author": "Loves_Portishead",
					"content": "Lots of gems in here, one of those \"watch it because you don\u0027t know what you don\u0027t know\" hints, learned a lot about the toolchain from this.",
					"date": "2018-01-18",
					"id": "dsvrnew",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "atamiri",
					"content": "A very nice presentation.",
					"date": "2018-01-19",
					"id": "dsx9o7d",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "fortytw2",
			"date": "2016-11-25",
			"id": "5eqs64",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Proposal to Delete /r/golang",
			"comments": [
				{
					"author": "jcaustin",
					"content": "What would be the alternative to reddit?   Personally, I love the golang subreddit and would hate to see it go.",
					"date": "2016-11-25",
					"id": "daehbq5",
					"isArchived": true,
					"isControversial": false,
					"score": 173
				},
				{
					"author": "programfog",
					"content": "I don\u0027t think there needs to be an alternative to reddit, if people don\u0027t agree with the policies of the site they are free to leave.\n\nSubreddits are a community effort, and not an official site. The mods should not be part of the go team, and it should be handed over back to the reddit go community to do with as they see fit for reddit+go.\n\nI created a golang community on imzy a while back which is not very active I admit, but I never represented it as an \"official\" go site, and would not like anyone from the go team to arbitrarily decide one day to close it. \n\nLooking for contributors: https://www.imzy.com/golang",
					"date": "2016-11-25",
					"id": "daf5nvl",
					"isArchived": true,
					"isControversial": false,
					"score": 30
				},
				{
					"author": "jnj1",
					"content": "/r/golang should never have been \"official\" in the first place. That whole incident with an implied banning threat to a user by the Go Code of Conduct team was an embarrassment. Let people have their discussions where they want without fear of being shut down by our hopefully benevolent overlords.",
					"date": "2016-11-25",
					"id": "dafkrhs",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "joesv",
					"content": "Can you elaborate?",
					"date": "2016-11-29",
					"id": "daknz14",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "donatj",
					"content": "I agree. I feel like the subreddit being run by the community would be far better than by the Go team. It seems like a chilling conflict of interest honestly.",
					"date": "2016-11-25",
					"id": "daf7o6w",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "knotdjb",
					"content": "So people that rarely use this subreddit want to get rid of it? Okay.",
					"date": "2016-11-25",
					"id": "daejct2",
					"isArchived": true,
					"isControversial": false,
					"score": 321
				},
				{
					"author": "weberc2",
					"content": "The off-platform vote is darkly amusing.",
					"date": "2016-11-25",
					"id": "daepnj4",
					"isArchived": true,
					"isControversial": false,
					"score": 112
				},
				{
					"author": "25600mah",
					"content": "After seeing the whole Golang moral police thing a couple of weeks ago, it\u0027s hardly surprising. Something code of conduct enforcement. ",
					"date": "2016-11-25",
					"id": "daepzr9",
					"isArchived": true,
					"isControversial": false,
					"score": 48
				},
				{
					"author": "knotdjb",
					"content": "Look I hate witch hunts and the crap that preceded the events of the whole code of conduct debacle and I think people should be reasonable to each other. But I reckon those voicing their opinion on the mailing list in favour of shutting down this subreddit are jumping on the bandwagon not because /u/spez did something idiotic, but instead taking advantage of the opportunity  to snipe and generalize the users. Reddit is a toxic site full of terrible people who should not have nice things, blah blah blah, etc.",
					"date": "2016-11-25",
					"id": "daetuhz",
					"isArchived": true,
					"isControversial": false,
					"score": 39
				},
				{
					"author": "dilap",
					"content": "link? i missed this",
					"date": "2016-11-25",
					"id": "daf46ro",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "25600mah",
					"content": "On mobile, so let\u0027s see if I get this right.\n\nhttps://www.reddit.com/r/golang/comments/59nk46/stalking_people_online_for_thought_crimes_this_is/",
					"date": "2016-11-25",
					"id": "daf4wg6",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "dilap",
					"content": "Thanks for the link. God, what a mess.",
					"date": "2016-11-25",
					"id": "daf57i6",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "f2u",
					"content": "We don\u0027t know how much work goes on behind the scenes to keep things civil here.",
					"date": "2016-11-25",
					"id": "daequk5",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "karma_vacuum123",
					"content": "actually you do...that\u0027s the point...Reddit puts /u/bradfitz on the same level as losers like me",
					"date": "2016-11-25",
					"id": "daetbf9",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "f2u",
					"content": "The public statistics don\u0027t show moderator actions, as far as I know.  This could be quite a bit of work, and it\u0027s pushed onto you once you are in the moderator club.  I can understand that people do not want to interact much with the site beyond the moderation effort.",
					"date": "2016-11-25",
					"id": "daetocm",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "OdinSQL",
					"content": "get rid of the thought police and let\u0027s find out.",
					"date": "2016-11-25",
					"id": "dafd11q",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "threemux",
					"content": "Several prominent Go community members have expressed their hatred for Reddit before. This incident is merely a convenient excuse to do what they\u0027ve always wanted to do. \n\nAdmins - please don\u0027t take this sub away. It\u0027s my primary source of Go news and links. ",
					"date": "2016-11-25",
					"id": "daelc3m",
					"isArchived": true,
					"isControversial": false,
					"score": 198
				},
				{
					"author": "buckhx",
					"content": "Never let a good crisis go to waste.",
					"date": "2016-11-25",
					"id": "daf3vyg",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "thewhitetulip",
					"content": "To be fair to him, he wants to talk out with the mods to find out if this subreddit is considered official, if it is not considered official, then they\u0027ll just hand the moderation over to others.",
					"date": "2016-11-25",
					"id": "daf41gl",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Sythe2o0",
					"content": "1. Go has some sort of an established community here, and just killing it, especially without suggesting a replacement (although that wouldn\u0027t be much better) would do a good job of making Go less popular.\n2. As programmers we should all already have been aware that that data on reddit is transient and able to be manipulated by those running the website, and further we should also know we aren\u0027t a particularly political subreddit that\u0027s likely to be subject to this sort of intervention.\n\nThe least the Go team could do would be to shift moderation of the subreddit over to other users, if they are particularly bothered by this. ",
					"date": "2016-11-25",
					"id": "daeh9or",
					"isArchived": true,
					"isControversial": false,
					"score": 84
				},
				{
					"author": "Stranger_Dude",
					"content": "This is my primary way of ingesting new Go-related content--I don\u0027t intend on installing another news app at this time. I am fairly new to the language, and this seems like a really petty and unappealing introduction to the community. Are all golang devs so hotheaded? This proposal and its language seems counter to the community standard. \n\nI mean, what are you going to use, Google Groups? Yuck. ",
					"date": "2016-11-25",
					"id": "daeisf5",
					"isArchived": true,
					"isControversial": false,
					"score": 163
				},
				{
					"author": "throwbible",
					"content": "I would really prefer that we delete Google Groups. There\u0027s a ton of Go related stuff that I would like to read and follow, but Google Groups actively discourager me. It\u0027s the absolute worst interface that I\u0027ve actively used for anything in the past 5 years. ",
					"date": "2016-11-25",
					"id": "daet2jq",
					"isArchived": true,
					"isControversial": false,
					"score": 85
				},
				{
					"author": "knotdjb",
					"content": "Such a shame they destroyed the interface to Google Groups and by virtue DejaNews. Browsing newsgroup archives is such a pain in the arse.",
					"date": "2016-11-25",
					"id": "daeyzon",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "knotdjb",
					"content": "\u0026gt; I mean, what are you going to use, Google Groups? Yuck.\n\nEven worse is someone on the mailing list suggesting Google+. Now that would be a fucking travesty.",
					"date": "2016-11-25",
					"id": "daeyyfl",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "JimBlizz",
					"content": "I agree, this is also my primary source of Go news.",
					"date": "2016-11-25",
					"id": "daeu7v6",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "weberc2",
					"content": "Same here.",
					"date": "2016-11-25",
					"id": "daepeyl",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "RevMen",
					"content": "\u0026gt; Are all golang devs so hotheaded\n\nOf course not.",
					"date": "2016-11-25",
					"id": "daf2dh6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "BorgClown",
					"content": "I\u0027m quitting Go and proposing the source code repository be deleted because of this comment.",
					"date": "2016-11-25",
					"id": "daf9oo7",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "binaryblade",
					"content": "So to protest an admin overstepping their bounds in a community, the core go team decides to over step their bounds in a community. The cognitive dissonance is astounding.",
					"date": "2016-11-25",
					"id": "daejzue",
					"isArchived": true,
					"isControversial": false,
					"score": 249
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-11-25",
					"id": "dael07e",
					"isArchived": true,
					"isControversial": false,
					"score": 148
				},
				{
					"author": "mcouturier",
					"content": "This. I was in favor for the code of conduct but it seems it applies only to the outsiders. The golang team members surely are opiniated and not just with the language. The more I hang around go-related stuff the more I can feel the team looking down on the community. I am not generalising, don\u0027t get me wrong, but I observed it often and from different persons.\nEdit: words",
					"date": "2016-11-25",
					"id": "daertof",
					"isArchived": true,
					"isControversial": false,
					"score": 42
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-11-25",
					"id": "daf2lfj",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "sorkin2",
					"content": "\u0026gt; But don\u0027t you see? Their brand of hate is the Right Kindtm.\n\nThe saddest part is how well this summarizes Go, the language.",
					"date": "2016-11-25",
					"id": "dafainp",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "stcredzero",
					"content": "\u0026gt; Their brand of hate is the Right Kind^tm.\n\nI would totally buy that t-shirt!",
					"date": "2016-11-25",
					"id": "dafb176",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "aminoglycine",
					"content": "exactly",
					"date": "2016-11-25",
					"id": "dael2bp",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "[deleted]",
					"content": "If you don\u0027t want to use reddit that\u0027s fine but closing the subreddit is a shitty thing to do. It doesn\u0027t belong to the Go team.",
					"date": "2016-11-25",
					"id": "daeh1o1",
					"isArchived": true,
					"isControversial": false,
					"score": 341
				},
				{
					"author": "dcormier",
					"content": "\u0026gt; It doesn\u0027t belong to the Go team.\n\nWell, I mean, the guy who posted that is /u/bradfitz. Who is [this guy](https://github.com/bradfitz) (bio there says \"I work on @golang at @google.\"). And a mod with full permissions here. So, it kinda does belong to the Go team? ¯\\\\\\_(ツ)\\_/¯\n\nBut yeah, he can certainly decline to participate and delete his account, but deleting the subreddit will achieve nothing except annoying this specific community. Those who still want to talk about golang on reddit will just create another subreddit.",
					"date": "2016-11-25",
					"id": "dael88v",
					"isArchived": true,
					"isControversial": false,
					"score": 39
				},
				{
					"author": "EmptyRedData",
					"content": "Brad just posted this onto the google groups discussion:\n\u0026gt;The question is what to do with /r/golang when all moderators of it want to leave.\n\u0026gt;\n\u0026gt;I don\u0027t think we want an unmaintained /r/golang that looks to be an official Go space.\n\u0026gt;\n\u0026gt;When /r/news had drama and people split off, /r/uncensorednews started off okay for a second and then turned into a clusterf*ck.\n\u0026gt;\n\u0026gt;I don\u0027t want /r/golang to turn into crap while looking like it\u0027s official.\n\u0026gt;\n\u0026gt;So I\u0027d prefer /r/golang become dormant and users go to wherever they like, be it the Go Forum, voat, or /r/unofficialgolang. Or we find an open source Reddit clone and run an instance for just Go. There are many things I like about the Reddit voting \u0026amp; thread model \u0026amp; UI over, say, the Go Forum.\n\u0026gt;\n\u0026gt;Nothing will happen immediately, but it\u0027s clear that we now need a plan for what to do with /r/golang.\n\nBasically he is saying that he doesn\u0027t want the /r/golang name sullied by an unmaintained mess that he believes will happen when the Go team itself ceases its moderation. \n\nI honestly think that making a new golang subreddit that isn\u0027t \"officially\" tied to the Go team seems like a garbage idea. /r/unofficialgolang ? If you were searching for a solution to a particular problem, and you had a very nice and concise answer come up in your search results, but under that address? You wouldn\u0027t bother to go to it. That would essentially kill the Go reddit community, which to me seems like something they wouldn\u0027t mind doing. Dave Cheney, Brad Fitzpatrick, and many others in the google groups discussion linked above don\u0027t mind that we lose this place as a means of discussion and gathering news. \"Delete it.\"\n\nIt\u0027s shitty how the members of that google group thread seem to be looking down on us as a community just because of the Admin that royally fucked up. Thats not fair to us and to take away our space because it looks like an \"official Go space\" is just as shitty. \n\nLet us keep this space! We will put a stupid fucking disclaimer on it that keeps it from looking \"official\". ",
					"date": "2016-11-25",
					"id": "daent4z",
					"isArchived": true,
					"isControversial": false,
					"score": 53
				},
				{
					"author": "CaptainDjango",
					"content": "It hardly looks official anyway, just a regular ol\u0027 code subreddit. I don\u0027t want to have to go use Google groups to get my go news just because.\n\nIt\u0027s not like it would be an unmaintained mess anyway, look at all the other programming subreddits, they seem to be faring well with active **community** moderation",
					"date": "2016-11-25",
					"id": "daeudsn",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "[deleted]",
					"content": "Agreed about it not looking official. Hell, I didn\u0027t know anyone from the Go core team was actually on this sub. I just thought it was all enthusiasts.",
					"date": "2016-11-25",
					"id": "daf4c6x",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "masklinn",
					"content": "\u0026gt; It hardly looks official anyway, just a regular ol\u0027 code subreddit.\n\nIndeed, compare /r/php, /r/python, /r/haskell, /r/rust.\n\n/r/golang is the default style with a custom logo, that\u0027s about as official-looking as /r/ruby or /r/linux (aka not very).",
					"date": "2016-11-25",
					"id": "daf7fk3",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "fortytw2",
					"content": "I\u0027m certain there are many community members willing to step up, should the Go team no longer wish to. Just an open call and handover wouldn\u0027t be so hard ",
					"date": "2016-11-25",
					"id": "daenwch",
					"isArchived": true,
					"isControversial": false,
					"score": 30
				},
				{
					"author": "zsxking",
					"content": "I\u0027m honestly surprised that this subreddit is considered an official channel of the go team. The subreddit should be own by the user community not the creators anyway.",
					"date": "2016-11-25",
					"id": "daeynk6",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "tyrionlannister",
					"content": "There\u0027s an increasing tendency for this.  For example, /r/Twitch is pretty much fully controlled by Twitch already, with community volunteers. Also, /r/Amazon, a bunch of others.",
					"date": "2016-11-25",
					"id": "daf4ak4",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "knotdjb",
					"content": "I nominate /u/fuzxxl to moderate this subreddit.",
					"date": "2016-11-25",
					"id": "daeo90s",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "FUZxxl",
					"content": "Oh, what did I do now?",
					"date": "2016-11-25",
					"id": "daeugwi",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "idboehman",
					"content": "I can\u0027t believe they even suggested voat, that place is a cesspool of white supremacists and pedophiles that left Reddit because \"censorship\".",
					"date": "2016-11-25",
					"id": "daezjjb",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "deong",
					"content": "That raised an eyebrow for me too.\n\nAlso, given that the story is \"Reddit shuts down a sub falsely calling people pedophiles, users begin harassing admins, admins make poor decisions and overreact to harassment\", I\u0027d be a little embarrassed if my public position was that I wanted to abandon reddit because the overreaction looks bad.\n\nIf you\u0027re concerned about how being affiliated with Reddit looks, I\u0027d sincerely hope spez screwing around with comments isn\u0027t the first thing that\u0027s made you pay attention.",
					"date": "2016-11-25",
					"id": "daf5agv",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "eikenberry",
					"content": "Founding a community and owning that community are 2 very different things.",
					"date": "2016-11-25",
					"id": "daeovki",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "4ad",
					"content": "It was not founded by the Go team, it was founded by /u/uriel, which then added /u/rsc (from the Go team) as a moderator, and multiple other people not from the Go team. The Go team was never really involved in day to day operation of this reddit. Until recently, there was no involvement whatsoever. More recently there was some minimal level of involvement but hardly the level necessary in order to arrogantly claim they **own** this place.\n",
					"date": "2016-11-25",
					"id": "daevscy",
					"isArchived": true,
					"isControversial": false,
					"score": 46
				},
				{
					"author": "Ironballs",
					"content": "rip /u/uriel :(",
					"date": "2016-11-25",
					"id": "daf285p",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "FUZxxl",
					"content": "TBH, giving back /r/golang to cat-v doesn\u0027t sound like a particularly bad idea.",
					"date": "2016-11-25",
					"id": "daex6iw",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "[deleted]",
					"content": "Yes I know who he is. I\u0027m saying the community makes the content here and it should be community controlled. Moderators shouldn\u0027t abuse their power.",
					"date": "2016-11-25",
					"id": "daevcvh",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "bradfitz",
					"content": "Whether it\u0027s an official part of the Go project is the heart of my question.\n\nIf it\u0027s an official part of the Go project, then I think it shouldn\u0027t be. And then I think Google people should be uninvolved entirely from it. I removed myself as a moderator here.\n\nIf we had created it, though, then I think we should delete it. But we didn\u0027t: the sidebar says it was created by a non-Googler 7 years ago before I or other Googlers got involved, though. Because of that, I no longer support deleting it. But I personally think the Go team should be uninvolved with this space and we can let others take over.\n\nReddit doesn\u0027t seem like a trustworthy platform we should be officially associated with anymore.\n\nIf Github or Gerrit admins were modifying our code for their own amusement, or Google Groups admins were modifying our emails, we would ditch them in a heartbeat. I don\u0027t think we should demand less of Reddit.",
					"date": "2016-11-25",
					"id": "daf593m",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "verandaguy",
					"content": "I think the main issue here is that the community hadn\u0027t been alerted of, or invited to participate in any discussion about this.\n\nThe whole /u/spez snafu is a problem, and there\u0027s certainly a debate to be had about it -- and it _does_ make sense to have that debate outside of Reddit (even if only out of principle), but a modpost or sticky post with a link to the Google Groups discussion as it starts up would\u0027ve been nice, and likely would\u0027ve reduced the appearance of a disconnect between the subreddit and Googlers working on Golang (not to mention, it would\u0027ve increased transparency, which is usually good).",
					"date": "2016-11-25",
					"id": "daf5sro",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "programfog",
					"content": "I think it is your use of the word \"officially\" that is confusing here.\n\nWhy do you think having a subreddit for the go programming language makes it official?\n\nI created a golang community on imzy (https://www.imzy.com/golang), but it is not official it is a place to post news and projects related to go. I would not like for the go team to ask me to close it, and the same goes for the community here.\n\n",
					"date": "2016-11-25",
					"id": "daf5xmr",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "bradfitz",
					"content": "I\u0027m fuzzy on details, but I do recall in the past that some spaces were considered \"official\", which I think meant they were linked from the main site at least, and something something about Code of Conduct? That\u0027s what I\u0027m trying to figure out now.\n\nJust glanced at Imzy. I still like the density of Reddit\u0027s UI. :-/\n",
					"date": "2016-11-25",
					"id": "daf6z0r",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Frenchiie",
					"content": "No Reddit community belongs to the organization for which it represents. It\u0027s also looked down upon for an organization to have people that directly represent said organization moderate the community. r/golang CAN be the official space for golang if it wishes to, it is not up to the organization to decide such a thing, it is up to the community of golang. You or anyone that oversees golang has a right to say \"this is the official space for golang\" if you wish to, but you do not have the right to delete the golang community or change it to state that it is not the official golang community. If there are certain links that represent the organization which you would like to be deleted, that\u0027s a different story.\n\nThe point is you shouldn\u0027t have any authority to modify r/golang. To your benefit and to that of golang itself, you don\u0027t want this to turn into a shitstorm and end up at the top of Reddit. A similar thing happened to the Valve/Vive community in the past and it turned out very badly with the official Reddit admins having to step in and correct the situation.",
					"date": "2016-11-25",
					"id": "dafkz1x",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "m3talsmith",
					"content": "@bradfitz, why is it necessary for Googlers to drop out of the community? I\u0027d think they would want to help build, not abandon.",
					"date": "2016-11-25",
					"id": "daf798e",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "Even if it was setup by a Googler I don\u0027t think deleting it would have been warranted, this is all content created by users with little to no participation or involvement from the Go team or Google. It wouldn\u0027t be fair to delete everything imo.\n\n",
					"date": "2016-11-25",
					"id": "dafbz01",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ixid",
					"content": "Why has the spez incident had such a radical impact on your view of reddit? It was admitted to, and as a result is very unlikely to happen again. It was also likely to be an isolated incident. People make mistakes, he owned up to this one with transparency. No platform is perfect, you seem to be holding reddit to an unreasonable standard.\n\n",
					"date": "2016-11-28",
					"id": "daiupjj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bradfitz",
					"content": "I created and ran a social network for many years. I\u0027ve also run various email servers for different groups over the years. The idea of an admin abusing their powers to read private content is offensive enough. But modifying other people\u0027s content offends me even more. I thought more people would care. It makes me sad that others aren\u0027t more offended.\n",
					"date": "2016-11-28",
					"id": "dajoemn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "chvvel843",
					"content": "The hypocrisy here is mind blowing. \n\nA moderator gets offended because a person (not even related to the golang community) abused his power to edit some comments.\n\nSo what does this moderator do? \nAbuse his power by wanting to close the entire subreddit, without any discussion with the people in that community.\n\nAmazing...",
					"date": "2016-11-25",
					"id": "daewfoq",
					"isArchived": true,
					"isControversial": false,
					"score": 94
				},
				{
					"author": "thewhitetulip",
					"content": "That too by having the discussion on a Google product, not even on Reddit.",
					"date": "2016-11-25",
					"id": "daf3qzk",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "ofpiyush",
					"content": "\u0026gt; without any discussion with the people in that community.\n\nHe said he personally didn\u0027t want to be involved and if the other mods want to continue running it, they can. The framing was more on the lines of what should we do?\n\nHe was probably looking for a conversation on a platform other than the one he\u0027s morally against, picked the forum.\n\nIf he didn\u0027t care, the subreddit would already be nuked.\n\nAssume best interest \u0026lt;3",
					"date": "2016-11-25",
					"id": "dafa4z1",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "HectorJ",
					"content": "Those who hate Reddit for what happened can leave, but why salt the earth?\n\nThat seems petty.\n\nLive and let live.",
					"date": "2016-11-25",
					"id": "daeivd0",
					"isArchived": true,
					"isControversial": false,
					"score": 100
				},
				{
					"author": "polypus74",
					"content": "\nwhat happened?",
					"date": "2016-11-25",
					"id": "daenqiz",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "HectorJ",
					"content": "https://www.reddit.com/r/OutOfTheLoop/comments/5el82b/what_the_spez_is_going_on/",
					"date": "2016-11-25",
					"id": "daentsv",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "AllThingsWiseWndrful",
					"content": "https://www.quora.com/What-are-examples-of-Google-acting-unethically-or-illegally \n\nMight as well delete Google also and all its products.  But also, bad move by reddit and I don\u0027t like them as much anymore.",
					"date": "2016-11-25",
					"id": "daemk4e",
					"isArchived": true,
					"isControversial": false,
					"score": 95
				},
				{
					"author": "karma_vacuum123",
					"content": "Go governance has developed an implicit hierarchy. Reddit offers an alternative to that...here the Go insiders must compete fairly with total nobodies like me for mindshare. Don\u0027t close this down and replace it with something that defaults to reinforcing the implicit power structure of some Google employees...Go governance is already veering towards a tiered system as it is\n\nIndeed, it might be nice to the Google employees give up moderation privileges...you folks are already concentrating enough power....interestingly the only people in favor of closing this sub seem to be the insiders\n\nReally disappointed to see this sub described on the mailing list as being full of \"scum and villainy\"...I know it\u0027s just a witty quip but it\u0027s also totally off base.",
					"date": "2016-11-25",
					"id": "daet4ek",
					"isArchived": true,
					"isControversial": false,
					"score": 48
				},
				{
					"author": "SilentWeaponQuietWar",
					"content": "this has been my experience as well. outside of this subreddit, most go communities seem extremely exclusive and toxic. Google groups included.",
					"date": "2016-11-25",
					"id": "daf0k1c",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "thewhitetulip",
					"content": "Yep, there are two factions inside the Go community, elites and others. Elites \u003d Authors, others \u003d the rest of us. They discuss closing down subreddit on google group and don\u0027t even post the link to reddit!",
					"date": "2016-11-25",
					"id": "daf3ur4",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "jocull",
					"content": "Of course. Because Google Groups is so user friendly. ",
					"date": "2016-11-25",
					"id": "daemebz",
					"isArchived": true,
					"isControversial": false,
					"score": 41
				},
				{
					"author": "karma_vacuum123",
					"content": "agreed, the Google groups UI is awful and I assume is just in maintenance mode. ",
					"date": "2016-11-25",
					"id": "daetfhs",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "thewhitetulip",
					"content": "I am not sure if they even maintain it anymore.",
					"date": "2016-11-25",
					"id": "daf40bb",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "i_regret_most_of_it",
					"content": "I enjoyed the snark from a couple of the responses suggesting that the proper way to use golang-nuts was through a mail client/MUA (cutting off people who just use basic webmail interfaces), especially when Google results lead you to Google Groups. Pretty oblivious to the size and breadth of the community.",
					"date": "2016-11-25",
					"id": "daexp4v",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "jocull",
					"content": "My favorite part is signing into Google just to READ Google Groups. Like... seriously?\n\nOh, and then after you sign in it redirects you back to a generic landing screen. Enjoy clicking the link again to go back to where you originally wanted to go.",
					"date": "2016-11-25",
					"id": "daf1rrr",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "emirozer",
					"content": "Its a cruel joke. ",
					"date": "2016-11-25",
					"id": "daewumh",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "tclineks",
					"content": "This is basically the only subreddit I look at and I get notified of many new projects through it.",
					"date": "2016-11-25",
					"id": "daejtn6",
					"isArchived": true,
					"isControversial": false,
					"score": 41
				},
				{
					"author": "demizer",
					"content": "I\u0027ve been coming to this subreddit multiple times a day since 2012 and I\u0027ll be damned if I have to Google groups for my Go news. The mods should just stop using reddit and leave the subreddit to someone that cares. ",
					"date": "2016-11-25",
					"id": "daen477",
					"isArchived": true,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "thewhitetulip",
					"content": "I got most of the traffic to my book through this subreddit. Heck, even the advices/critique I got for my book was due to this subreddit. It wouldn\u0027t have existed without this subreddit, since the book was practically brushed off in the go-nuts channel and IRC is an terrible alternative to Reddit, so is that goforum thing, way too much JS and terribly slow. Reddit is Reddit, if their CEO did something shit and the Go project doesn\u0027t want to consider this unofficial then just leave it to the community, ironically enough, that\u0027s the whole point of open source.",
					"date": "2016-11-25",
					"id": "daf47xe",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "demizer",
					"content": "To discuss shutting down this subreddit without asking its community directly is beyond the pale.    ",
					"date": "2016-11-25",
					"id": "daen8yh",
					"isArchived": true,
					"isControversial": false,
					"score": 40
				},
				{
					"author": "thewhitetulip",
					"content": "Ironically the person posting is complaining abuse of power.",
					"date": "2016-11-25",
					"id": "daf3z4f",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "lazy_jones",
					"content": "Terrible idea. If Googlers have a problem with Reddit (beyond Google failing at social media and being jealous because of it), they can hand /r/golang over to the community and consider it an unofficial subreddit. We\u0027ll also get rid of the CoC that has caused more harm than it helped this way. ",
					"date": "2016-11-25",
					"id": "daexs3q",
					"isArchived": true,
					"isControversial": false,
					"score": 41
				},
				{
					"author": "4ad",
					"content": "With the mention that /r/golang was a product of the community, and suffered through a hostile takeover. It was never an official Go space, and even after the takeover the Go team had very little involvement here (rather than enforcing the CoC nobody asked for, every now and then).\n",
					"date": "2016-11-25",
					"id": "daexvao",
					"isArchived": true,
					"isControversial": false,
					"score": 31
				},
				{
					"author": "chvvel843",
					"content": "I didn\u0027t know that. This makes it even worse. \nSo Go team takes over the subreddit, starts enforcing CoC and then discusses on another platform to simply delete the subreddit!\n\nWTF?\n",
					"date": "2016-11-25",
					"id": "daey0ku",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "4ad",
					"content": "\u0026gt; WTF?\n\nIndeed!\n",
					"date": "2016-11-25",
					"id": "daey27h",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "bradfitz",
					"content": "I didn\u0027t know the early /r/golang history or that uriel had created it 7 years ago, before the Go team even got involved. (I\u0027m not sure \"hostile takeover\" is accurate, but I also wasn\u0027t involved during that time so I don\u0027t know the details.)\n\nIn any case, I no longer support deleting /r/golang. My new position is that we should make it unofficial and the Go team should have no part in it.\n",
					"date": "2016-11-25",
					"id": "daf4xr8",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "4ad",
					"content": "Thank you Brad.\n",
					"date": "2016-11-25",
					"id": "daf5shu",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "programfog",
					"content": "\"the Go team should have no part in it\"\n\nI think the Go team should not have a part in moderating it after this incident.\n\nBut I think individual team members should be welcome and encouraged to participate if they wish to do so. \n\nI follow multiple programming language subreddits and always find it great when /u/stl posts in /r/cpp, /u/WalterBright posts in /r/d_language/ or /u/bradfitz posts in /r/golang\n\n",
					"date": "2016-11-25",
					"id": "daf6b71",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "superaromatic",
					"content": "No doubt it should be a freer place than what the Go team would encourage. For instance, if someone wants to express hate for Go, as long as it\u0027s grounded in logic, they should continue to be free to do it too.",
					"date": "2016-11-25",
					"id": "daf9hzr",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "TheMerovius",
					"content": "This is such a strawman. No one was ever forbidden to express any opinion about go here. You are making up restrictions that never existed to make other people look bad.\n\nLiterally the only restriction ever placed on here was the Code of Conduct. So I vehemently disagree, that this subreddit should be freer than it always was; that could only mean, we don\u0027t subscribe to the CoC, which would be a complete disaster for the image of the go community.",
					"date": "2016-11-25",
					"id": "dafduzp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "wlll",
					"content": "I like the Go subreddit. Don\u0027t want to see it go.",
					"date": "2016-11-25",
					"id": "daehmlo",
					"isArchived": true,
					"isControversial": false,
					"score": 72
				},
				{
					"author": "fungussa",
					"content": "Heck, that\u0027s hyper-reactionary.\n\nIf we discover a city government official doing something dishonest, should we abandon that city and go live somewhere else?\n\nForcing closure of this sub would harm the community and it\u0027d certainly harm the popularity of the language",
					"date": "2016-11-25",
					"id": "daekmku",
					"isArchived": true,
					"isControversial": false,
					"score": 33
				},
				{
					"author": "_cowl",
					"content": "I am frankly tired of the trend that is pushing Technical communities on moral/political wars. \nThis subreddit has become the defacto goto source for Go news/activity updates because it has some -shall we say- technical usage advantages and while I agree that this particular case of position misuse is unethical I don\u0027t find it reasonable to boycott  the whole platform. \nIf it were any other moderator (who does not have Cxx role) acting like that, would we have had this discussion? If the answer is No (as I expect it to be normally) than this makes it a political war and Go community is better served by staying out of this. \nRemember: \"Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.\" \nNOT \"Go is an open source programming language that makes it easy to engage in moral/political wars\" .\nIf anyone feels strongly about this they can simply exercise their right to delete their personal accounts, but trying to steer the whole community in their protest is misguided. \n",
					"date": "2016-11-25",
					"id": "daevjn2",
					"isArchived": true,
					"isControversial": false,
					"score": 60
				},
				{
					"author": "sacado",
					"content": "This. I like the fact that Go is an opinionated language *on the technical side of things*. Beside technical stuff, I don\u0027t care about the language author\u0027s opinions. \n\nI\u0027m not here to discuss politics with people at the other side of the world. I\u0027m here to write programs that get shit done. If I wanted to discuss moral and ethics, I\u0027d rather go to /r/stoicism.",
					"date": "2016-11-25",
					"id": "daf27rr",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "EmptyRedData",
					"content": "\"Maybe we can just make an auto-reject moderator bot for it, making sure it has no content.\"\n\nI appreciate the work you put into this nice language, but don\u0027t shit on the community that actually likes using Reddit because of your grievance with how an admin is conducting himself. ",
					"date": "2016-11-25",
					"id": "daei0ev",
					"isArchived": true,
					"isControversial": false,
					"score": 61
				},
				{
					"author": "pope_nefarious",
					"content": "Yeah... lets not take our ball and go home, let\u0027s take the whole fucking playground!!!",
					"date": "2016-11-25",
					"id": "daek46y",
					"isArchived": true,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "youguess",
					"content": "God no!\n\nOnly because bradfitz has a problem with it doesn\u0027t mean that all others do\n\nSquatting /r/golang and not handing moderation over would be a very unfair move to those who liked *and still like* Reddit\n\nIf you don\u0027t wanna be a mod, fair enough, step down but leave us in peace!",
					"date": "2016-11-25",
					"id": "daes1ss",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "toelint",
					"content": "Terrible idea. ",
					"date": "2016-11-25",
					"id": "daenign",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "mellett68",
					"content": "I never thought this subreddit was official in any way, in fact I prefer that it\u0027s not.\n\nI\u0027m not using bloody Google Groups.",
					"date": "2016-11-25",
					"id": "daf055m",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "thewhitetulip",
					"content": "Me neither. If reddit is deleted I wonder where newbies will get real advice.",
					"date": "2016-11-25",
					"id": "daf3kt8",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "mellett68",
					"content": "It\u0027s definitely the hardest thing I\u0027ve found about go, if you\u0027re not an old school news group type of developer it can seem a bit inscrutable to get involved in the community.\n\nThe language is decent, but the community just isn\u0027t there to get me really enthused.",
					"date": "2016-11-25",
					"id": "daf42o6",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "thewhitetulip",
					"content": "Yes, I have felt your pain :-) \nReddit is the reason my book http://github.com/thewhitetulip/web-dev-golang-anti-textbook/ exists, the core team (except AG) had one feedback, \"the language is called Go and not Golang\".\n\nI do not know what I would have done if this reddit was not present.\n\nThe community is split into two, elite and us plebeians;",
					"date": "2016-11-25",
					"id": "daf4i8e",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "SilentWeaponQuietWar",
					"content": "\u0026gt; the community just isn\u0027t there to get me really enthused.\n\nexactly, in fact it\u0027s quite the opposite. The go-nuts community seems exclusive and unwelcoming to just about anyone that\u0027s not already in the group. Before they can focus on getting users enthused, they need to find a way to welcome/acknowledge them first. Without that as a priority, enthusiasm isn\u0027t even possible.",
					"date": "2016-11-29",
					"id": "dakt8bi",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hendler",
					"content": "The Reddit community and the reddit CEO are not the same thing. Like, please don\u0027t delete the US because of Trump. ",
					"date": "2016-11-25",
					"id": "daehgst",
					"isArchived": true,
					"isControversial": false,
					"score": 103
				},
				{
					"author": "weberc2",
					"content": "Frankly I\u0027m impressed the Go team is upset at this. I erroneously suspected the slight against Trump supporters would be brushed off because they don\u0027t seem to share the same politics. On the other hand, this *should* be brushed off because this represents no material threat to our sub and this isn\u0027t a sufficiently large civil rights violation to justify polluting the community with politics.",
					"date": "2016-11-25",
					"id": "daepxkk",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "hobbified",
					"content": "A community is what the community wants it to be, not what your corporate sponsors want it to be. If Brad and other mods want to leave, they are more than welcome to. If they want to destroy this sub, they have the technical power to. But no amount of rhetoric gives them the moral right to make that choice for anyone else.",
					"date": "2016-11-25",
					"id": "daeph77",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "shield1123",
					"content": "ITT:  An overwhelming \"No pls\"",
					"date": "2016-11-25",
					"id": "daenqhs",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "Simpfally",
					"content": "\u0026gt;Kill it.  \n\u0026gt;It\u0027s a wretched hive of scum and villainy.  The Go subreddit was the only thing similar to human and it is downright painful most of the time.\n\nWho are those people? It\u0027s cringy as fuck.",
					"date": "2016-11-25",
					"id": "daf5bqo",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "tscs37",
					"content": "they don\u0027t like reddit, didn\u0027t you notice?\n\nthat\u0027s all that defines these people.",
					"date": "2016-11-25",
					"id": "daf5kqf",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "AnimalMachine",
					"content": "\u0026gt; I\u0027m happy to just delete /r/golang.\n\nSource: https://groups.google.com/d/msg/golang-nuts/XoOhzUClDPs/jgSWxng7CAAJ\n\nBrad Fitzpatrick\n\n---\n\n\n\u0026gt; It\u0027s a wretched hive of scum and villainy.\n\nSource: https://groups.google.com/d/msg/golang-nuts/XoOhzUClDPs/bYS9SKY7CAAJ\n\nThat\u0027s Brian Ketelsen, who also is one of the hosts of Go Time, which is a podcast.\n\n--- \n\n\u0026gt; Delete it.\n\nSourced: https://groups.google.com/d/msg/golang-nuts/XoOhzUClDPs/f2DsVJA8CAAJ\n\nThat\u0027s Dave Cheney\n\n---\n\nThere\u0027s some links to the google group sources for a lot of the comments you\u0027ve seen in this discussion.\nThis whole thread and issue is a real bummer. Chalk up another fun experience to 2016. \n\n\nThose comments alone have soured me pretty hard on these three. This reaction to delete the subreddit based on the CEO\u0027s action is so over the top and shows completely no regard for so many people who find this place valuable.",
					"date": "2016-11-26",
					"id": "dafxk4a",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Simpfally",
					"content": "Thanks for taking the time, I read many things written by Dave. Disappointing to see them expressing their will to \"delete\" a community..\n\nSo it\u0027s a reaction to spez\u0027s edit drama? It doesn\u0027t affect this kind of subreddit at all.\n\nMaybe the google groups guys really likes drama..",
					"date": "2016-11-26",
					"id": "dag6j0y",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "sethammons",
					"content": "Whoa, slow down there. This is my primary source for Go developments and news.",
					"date": "2016-11-25",
					"id": "dael4xl",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "aminoglycine",
					"content": "I honestly think most of Reddit is garbage, but this is one of only 2 subreddits I actually follow. Please don\u0027t delete this.",
					"date": "2016-11-25",
					"id": "dael52k",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "mcouturier",
					"content": "This and /r/programming ? Because that\u0027s what I do too!",
					"date": "2016-11-25",
					"id": "daes3xb",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "bwinterton",
					"content": "I completely agree with what has been stated, both here and in the Google groups thread. I feel like the proposal to delete the subreddit is completely a knee jerk reaction. The CEO made some poor decisions, but that doesn\u0027t mean the whole place has gone to crap. \n\nReddit has been, and continues to be, an amazing place for many users such as myself to stay current on news, hobbies, and other interests. At the very least, we should take our time and make logical decisions based on _several_ different factors. Not just one outburst from a CEO. ",
					"date": "2016-11-25",
					"id": "daemvt6",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "polypus74",
					"content": "The world is a nasty untidy place, let\u0027s just delete it.",
					"date": "2016-11-25",
					"id": "daenw7a",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "rantenki",
					"content": "Because killing a community because it contains bad actors has worked so well in the past.\n\nThere are 25k or so subscribers here, who obviously find value in the community.\n\nSuggesting that this is a rational response: \"In light of the CEO of Reddit admitting to editing user comments (see dozen news stories today), I propose we delete the /r/golang subreddit./\"\n\nsounds kinda...\n\n\"That is so beyond unethical and immature\".\n",
					"date": "2016-11-25",
					"id": "daermc3",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "tscs37",
					"content": "I don\u0027t get why the moderators would even suggest to do such a petty thing. \n\nIt would be best if those that suggested this step down as moderators, they have betrayed community trust by not even being this up to the Reddit community before posting on Golang nuts. ",
					"date": "2016-11-25",
					"id": "daerwz6",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "thewhitetulip",
					"content": "Nope. make this unofficial channel and let it live. This is the primary place to get Go news and traffic + visibility for new projects. This is the one place where the elites and the plebeians like us are treated almost equally, with just the community sorting this with up/downvotes. It is ironical that this discussion was started on Google Groups and not here. It shows that the Go community really is split into two parts, Googlers and others.\n\nGoogle+ is horrible, Google Groups is horrible. There is no replacement for Reddit + I do not want the elites to be in control of the communication medium, they already have control over every other part, let the community thrive on reddit. We are fine, thank you.\n\nJust hand over the moderation to someone else.\n\nP.S Many many years ago Zuck called everyone who signed up to his intranet website as \"dumb fucks\", let\u0027s delete facebook.",
					"date": "2016-11-25",
					"id": "daf4e78",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "esimov",
					"content": "I completely agree with you. You pinpointed the essence of a medium such reddit. Reddit should be let to be part of the community and not to be restricted to a very few people. In fact something even if originally belows to someone, once it became widely used and accepted, will not be his/her personal property anymore, because it\u0027s their responsibility and obligation above all to handover to someone else the moderation, if they consider they don\u0027t want to be part of this community anymore. So to delete it is not an option, to step back is an option!!",
					"date": "2016-11-25",
					"id": "daf57j7",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "thewhitetulip",
					"content": "Exactly, I was once banned for standing up to the elites. This is an open source project now, they can\u0027t just ignore the community like they always do.\n\nEven if they do find a reddit clone, I do not think that it\u0027ll be as effective as reddit itself, why? Because here they and us get the same treatment, there is no \"oh it is the Go author\" on reddit. This is democracy and anarchy at it\u0027s best.\n\nIf they don\u0027t want to be affiliated to this subreddit, they are welcome to step down. Don\u0027t delete this for christ\u0027s sake. We get it that they practically don\u0027t care about the community, but we do. This subreddit matters to us. Google groups is horrible. The comments they give on google groups is horrible because it is \"their turf\".\n\nhttp://github.com/thewhitetulip/web-dev-golang-anti-textbook/ If this subreddit would have not been there, this book would not have been written. There wasn\u0027t much of a feedback that the google group gave _except_ that \"the language is called Go and not golang\", as my books\u0027 original title was.\n\nI vehemently vote against deleting the subreddit.\n\np.s. this is the very reason why Trump won the US elections, the \"leaders\" were completely disconnected with the reality.",
					"date": "2016-11-25",
					"id": "daf5hyi",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kevinmrr",
					"content": "It seems pretty fucking childish to want to delete the entire subreddit, a repository of uncontroversial knowledge and to which 25k people subscribe for professional assistance.  I understand making a stand when free society is threatened, but deleting r/golang isn\u0027t going to do anything but hurt your peers.",
					"date": "2016-11-25",
					"id": "daf4wce",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "thewhitetulip",
					"content": "only if they consider us as peers. ",
					"date": "2016-11-25",
					"id": "daf5u8j",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "kryo2023",
					"content": "It\u0027s right on the sidebar \"Don’t be destructive or inflammatory.\"\n\n/u/bradfitz, please read that and reflect.",
					"date": "2016-11-25",
					"id": "daf51br",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "thewhitetulip",
					"content": "it doesn\u0027t apply to the elites. These rules only apply to us plebeians.",
					"date": "2016-11-25",
					"id": "daf5tma",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "rodbzro",
					"content": "It always impress me seeing engineers trying to answer human problems with machine forms. ",
					"date": "2016-11-25",
					"id": "daele2c",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "TwistU2",
					"content": "I\u0027m learning Go and this is my primary source of information.\n\nWtf is happening?\n\nIf you don\u0027t like Reddit or the community just quit and don\u0027t bother others. \n\nWell... They use email lists in 2016... So yeah... I can understand now...",
					"date": "2016-11-25",
					"id": "dael9b0",
					"isArchived": true,
					"isControversial": false,
					"score": 33
				},
				{
					"author": "FIuffyRabbit",
					"content": "Some of the main developers of go feel that this subreddit is cancer for whatever reason. Meanwhile they are usually a big reason why a discussion turns to shit. ",
					"date": "2016-11-25",
					"id": "daelu9t",
					"isArchived": true,
					"isControversial": false,
					"score": 35
				},
				{
					"author": "karma_vacuum123",
					"content": "Go governance is becoming very cliquey...I feel like this move masks a desire to move discussion someplace where an inner circle have permanent and infinite \"mod points\"",
					"date": "2016-11-25",
					"id": "daetdbs",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "[deleted]",
					"content": "This sort of thing can kill a community. A few years ago R lost a lot of users to Python. One of the reasons was how hostile the core R community was to newcomers. ",
					"date": "2016-11-25",
					"id": "daf031b",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "thisIsExactly20Chars",
					"content": "I don\u0027t know if the governance is aware of that. No one likes to be treated like shit and have their opinion trashed on the public place because \"I\u0027m important, smart and I know better\".\n\nThe reason I slowed down my go learning is actually exactly that. I now see Go as being maintenance and steered by a bunch of elitist people that think-they-know-better (tm). While I do like intelligent people to be governing something I would use, it is a red-flag to me when I see these people issue statements that show exactly how opinionated on everything that touches the language. One might be a compiler expert, but he\u0027s certainly not a psychologist with a minor on linguistics, so he should not make a strong case for or against syntax highlighting, for instance.\n\nIn my field of work, the most important thing is to know the limit or your competency. We are actually forbidden by law to take decisions on things we do not have the skills for. Keeping to the same example as above, it\u0027s fine for me to discuss or design the architecture of a software and all of its integration, but I cannot not officially push for or against syntax highlighting before soliciting expert advice.\n\nIn short, while I have much respect about the experience of the Go team and what they build, I think they suffer from the big head syndrome and sometimes go beyond their competency.",
					"date": "2016-11-25",
					"id": "dafaz96",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "bitmadness",
					"content": "For god\u0027s sake, don\u0027t destroy the subreddit. We agree the CEO is an ass. Nevertheless, many people, including me, rely on the subreddit to keep up with what\u0027s going on in the Go community.",
					"date": "2016-11-25",
					"id": "daeqhky",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "thewhitetulip",
					"content": "Yes, the one place in the Go community where there is no hierarchy.",
					"date": "2016-11-25",
					"id": "daf3vu1",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "nerr",
					"content": "Upvoting for visibility.  I linked this thread from the mailing list to show that there\u0027s already a fair amount of pushback against this proposal.",
					"date": "2016-11-25",
					"id": "daejrxc",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "i_regret_most_of_it",
					"content": "Please no, I like it here :(. ",
					"date": "2016-11-25",
					"id": "dael122",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "emirozer",
					"content": "I find this a bit of a childish reaction. And sucks that this is being discussed off the platform itself ? \n",
					"date": "2016-11-25",
					"id": "daewnmg",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "arekkas",
					"content": "\"oh my god someone did something stupid let\u0027s overreact and kill this community\" (tm)",
					"date": "2016-11-25",
					"id": "daewrqg",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "lolomfgkthxbai",
					"content": "Overall having an \"official\" subreddit for anything is a fool\u0027s errand. Reddit is about communities, that also means that the community handles moderation and makes or breaks the subreddit. Having some \"official\" looking down their nose at the plebs is not a good way to run a subreddit.",
					"date": "2016-11-25",
					"id": "daez7vz",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "epiris",
					"content": "Deleting posts as a CEO is pretty silly, and we should do our best to demand he answers for it because their is no excuse. Being a CEO requires a constant and unrelenting discipline, he proved he doesn\u0027t have that so he can\u0027t be CEO.\n\nDeleting the sub Reddit is like removing NFL teams if the commissioner misbehaved, because fuck fans.",
					"date": "2016-11-25",
					"id": "daeiiu3",
					"isArchived": true,
					"isControversial": false,
					"score": 30
				},
				{
					"author": "shootthepuck91",
					"content": "First off, I love /r/golang and use it almost as much as he mailing list... and don\u0027t want to see it go.\n\nBut slight correction, Reddit\u0027s CEO didn\u0027t just delete posts...he actually went in the database and changed the posts. The posts were something like \"f@@k /u/redditCEO\" and were changed to \"f@@k /u/SomeModInTheDonald\". To me, this is far more dangerous and troubling than just deleting posts.\n\nAgain, I\u0027m not for deleting /r/golang I just wanted to make that point a bit clearer.",
					"date": "2016-11-25",
					"id": "dael9ns",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "aminoglycine",
					"content": "Thanks for clearing that up. But regardless, taking away this subreddit from the entire community is an immature way to handle this situation imo",
					"date": "2016-11-25",
					"id": "daelbmv",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "epiris",
					"content": "I read the article and know what happened, I\u0027m not sure I agree either one is much worst coming from the CEO but I don\u0027t care to argue the point. Mostly trying to make the point that we should not react so hastily because of a single action by a single person. \n\nPeople do dumb shit some times, sometimes those people are the face of an entity, a business, organization, or a circle of friends. It\u0027s a social customary to allow the entity to react in order to show they did not condone the action before you decide to change your entire perspective of the entity as a whole based on the actions of an individual. It would be rather hard to have a resilient civilization otherwise..?\n\nAll I\u0027m saying is let\u0027s give Reddit time to react, plus, turkey.",
					"date": "2016-11-25",
					"id": "daeo8rv",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "moose_cahoots",
					"content": "I expect more than this knee jerk reaction from our mods. While /u/spez seriously screwed up, it has been a long time since this site could be considered a bastion for free speech (which it explicitly is not). \n\nDeleting this subreddit without first establishing a viable alternative is simply counterproductive and will harm the adoption of golang. Many of us depend on this sub for news and new open source libraries. \n\nI am not married to Reddit, but we need another place to serve this function before we delete it, especially if the reason is to make a statement rather than for practical purposes. ",
					"date": "2016-11-25",
					"id": "daeom3g",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "thewhitetulip",
					"content": "There is no viable alternative. Tell me one place over the Internet which is as open to newbies as Reddit is? Google Group? nope, threads die out if they are just for asking advice as the \"busy\" people either be snarky or otherwise. Reddit is a place where everyone is kinda equal.",
					"date": "2016-11-25",
					"id": "daf3y65",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "moose_cahoots",
					"content": "This was pretty much my point. Also, if these guys deleted the sub before they found a better home, they would be incapable of telling their audience where they went, so we couldn\u0027t even follow them to the promised land. \n\nThis whole thing would be akin to rage quitting a job before you have another lined up.",
					"date": "2016-11-25",
					"id": "daf4zlt",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Marreck",
					"content": "I am surprised that the question about wether or not to delete this sub is directed at the other mods and not others in the community. \n\nThe moderators play a very important role, but in the end it is the users that keep the community alive (in this sub or other places). \n\nI understand that strong ownership of the language has made the language great and not some sort of monstrosity of \"design by committee\"  or groupthink or what not as you see in some other languages. \n\nBut there is no reason to translate that behavior to the way the community is managed. This proposal is not how it should be done as far as I am concerned. ",
					"date": "2016-11-25",
					"id": "daeugx7",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "thewhitetulip",
					"content": "Guys, Brad just posted this on HN, \"But because I learned that /r/golang existed 7 years ago (before I or other Googlers were even involved with it), I no longer propose deleting it. \"\n\nHe wants the project to disassociate from the subreddit, which is a welcome move. Chill out, we got our subreddit back!\n\nhttps://news.ycombinator.com/item?id\u003d13037636\n\nEDIT: the HN discussion was flagged out of the front page. Thank God Reddit exists.",
					"date": "2016-11-25",
					"id": "daf70dm",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "[deleted]",
					"content": "I really expected better of Brad. Maybe back off your crusades and just let tech be tech. Keep your advocacy for the political subreddits.",
					"date": "2016-11-25",
					"id": "daf7fcn",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "thewhitetulip",
					"content": "https://news.ycombinator.com/item?id\u003d13037636\n\nAt least he backed off now.\n\n",
					"date": "2016-11-25",
					"id": "daf7h00",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "warmans",
					"content": "What\u0027s the point? Someone will just make a new one called uncensoredgolang or truegolang or some other stupid name.",
					"date": "2016-11-25",
					"id": "daev49m",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "[deleted]",
					"content": "Honestly this would kill the Go community for me. I certainly won\u0027t be going over to the Google board, where average people are described as \"a wretched hive of scum and villainy\" and \"toxic\". I am certainly tired of comments like these being made by some of the leaders in the Go community. Seriously, the leadership needs to get a grip. Being able to see opinions we strongly disagree with from time-to-time on Reddit and not going nuclear does not make us \"toxic\" people.",
					"date": "2016-11-25",
					"id": "daf5tg0",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "AnimalMachine",
					"content": "I\u0027m surprised that\u0027s not against the Go CoC to make those comments toward users like that.\n\n---\n\n\u0026gt; These actions are explicitly forbidden in Go spaces:\n\u0026gt;    Insulting, demeaning, hateful, or threatening remarks. \n---",
					"date": "2016-11-26",
					"id": "dafy39i",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "pafortin",
					"content": "The CEO\u0027s actions are definitely repugnant but I agree with many of the comments here, it would be premature to delete our sub-reddit before we see what will happen here...   I believe the CEO will be forced out and more stringent security controls will be placed around comments placed by people.\n",
					"date": "2016-11-25",
					"id": "daekukm",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "shootthepuck91",
					"content": "I completely agree.",
					"date": "2016-11-25",
					"id": "daelaxp",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "haksli",
					"content": "I am new here, and want to learn Go.\n\nDon\u0027t you bloody dare to delete this subreddit!",
					"date": "2016-11-25",
					"id": "daexzr1",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Frenchiie",
					"content": "he sounds just as bad as the reddit CEO lol.",
					"date": "2016-11-25",
					"id": "dael47h",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "Ainar-G",
					"content": "HackerNews discussion: https://news.ycombinator.com/item?id\u003d13035760.",
					"date": "2016-11-25",
					"id": "daexs9h",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "4ad",
					"content": "Dupe #1: https://news.ycombinator.com/item?id\u003d13035122\n\nDupe #2: https://news.ycombinator.com/item?id\u003d13035027\n",
					"date": "2016-11-25",
					"id": "daextyh",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "4ad",
					"content": "Also dupe #3 with more comments: https://news.ycombinator.com/item?id\u003d13036890",
					"date": "2016-11-25",
					"id": "daf8h6m",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "esimov",
					"content": "I became familiar with reddit for getting the golang related news. In fact it is the first source of information for me, so definitely i won\u0027t be very happy if /r/golang will be deleted.",
					"date": "2016-11-25",
					"id": "daf3y5c",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Nezteb",
					"content": "Personally I use Reddit because I have one account to keep track of many interests, especially programming communities. I hate mailing lists and specific forums (Google Groups included). I think in the long run they are a terrible way to manage a community. If /r/golang goes away, I won\u0027t bother with a mailing list or forum. I\u0027d see it as a failure of the community management. Then again maybe someone will argue that I\u0027m not the audience the Golang team wants to keep around. Political disagreements shouldn\u0027t divide a programming community like this.",
					"date": "2016-11-25",
					"id": "dafan90",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "danredux",
					"content": "What the hell is going on I just come here to read about programming, people need to chill out with this drama.",
					"date": "2016-11-25",
					"id": "dafj9be",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "Feeling the same as most here. Go is a bit of a vague interest on the side for me, that perhaps, one day, might be useful. Deleting this group will simply smother that interest.\n\nBut then ... the attitude in that google group is just plain horrible. I think I\u0027ve already lost my interest in any form of participation. Talk about toxic.\n\nEdit: unsubscribed. Perhaps that\u0027ll make someone notice.",
					"date": "2016-11-25",
					"id": "daexlbg",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "krak3n_",
					"content": "Cutting off the nose to spite the face?",
					"date": "2016-11-25",
					"id": "daewivi",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "haXeNinja",
					"content": "Deleting this sub, or setting it to private, is not a good idea. ",
					"date": "2016-11-25",
					"id": "daewt8c",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "david_nix",
					"content": "Just wanted to throw my hat in he ring. I, too, find this subreddit informative and it serves as the primary source of my Go news. I check Reddit several times a day. I like subscribing to a variety of niche subs. I wouldn\u0027t check a 3rd party source nearly as often. \n\nGoogle Groups is so bad, it would deter me from checking up on Go entirely. ",
					"date": "2016-11-25",
					"id": "daf3tz9",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "passthejoe",
					"content": "The fact that the Reddit CEO\u0027s situation is being brought to light is better than what\u0027s happening on n other social media platforms.\n\nReddit is a welcoming place for technical discussions, and I hope /r/golang remains here.",
					"date": "2016-11-25",
					"id": "daf42dm",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "tvmaly",
					"content": "I read this subreddit every day as it has a different type of content than google groups.  I use it mainly to find out about new projects others has created.   The google groups I use mainly for discussion and if I may have a technical question.",
					"date": "2016-11-25",
					"id": "dafmkv0",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "tech_tuna",
					"content": "This reeks of douchebaggery and elitism, never mind that it\u0027s hardly the first time Team Reddit revealed that they\u0027re far from perfect.\n\nI like this subreddit a lot, in fact I find reddit\u0027s technical (in general) subreddits to be the best place for thoughtful discussions as well as being a great place to learn about new tools/languages/etc.",
					"date": "2016-11-26",
					"id": "dagk4ns",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "iends",
					"content": "If you delete /r/golang, we\u0027ll just move to a new go subreddit that has mods that are interested in reddit. It\u0027ll continue to be successful, if people like /u/dgryski join it.",
					"date": "2016-11-25",
					"id": "daenfni",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "emirozer",
					"content": "this person right here gets it.\n\nI will not go on to another platform. I have enough content providers to visit already.",
					"date": "2016-11-25",
					"id": "daewrel",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "thebigdukesix",
					"content": "I don\u0027t usually post, but I had to speak my mind. \n\nI agree that it shows a lack of judgment that the Reddit CEO tampered with users data. I am sure he will be forced to resign and new measures to assure community confidence will be introduced.\n\nHowever, I do not think two wrongs make a right.\n\nRemoving a thriving community shows an incredible lack of judgment as well. Bringing this level of fear and uncertainty for personal reasons is not only unacceptable but is is quite unprofessional. \n\nBrad Fitzpatrick and other Go members who supported this motion should resign from any official Go language related project.",
					"date": "2016-11-25",
					"id": "daes1vt",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "_rs",
					"content": "\u0026gt;Brad Fitzpatrick and other Go members who supported this motion should resign from any official Go language related project.\n\nYes! And they should also remove all the code they wrote for the project! /s\n\nNo offence, what you said is very stupid.\n\n",
					"date": "2016-11-25",
					"id": "daf1bln",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "thebigdukesix",
					"content": "No offense taken. These are trying times for all of us.\n\nAll programming languages live and breath on their community. Destroy the community and the programming language will fade away.\n\nWhile we all appreciate their work, unfortunately, this has turned into an incident that tarnishes Go by their actions. No matter how great the CEO, general, politician when an incident occurs they do the right thing by resigning.\n\nI, for one, would like to see Go continue to be a prosperous community on many platforms. I, for one, would like to see Go stay for years and years to come.",
					"date": "2016-11-25",
					"id": "daf7ttz",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "NeverUse-YouPromised",
					"content": "Mark my words, this will get pushed through despite the community\u0027s protests. It happened with aliases and it\u0027ll happen here.",
					"date": "2016-11-25",
					"id": "daeq836",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "karma_vacuum123",
					"content": "Sadly I agree...a few more changes like this and they might as well just close the source and distribute binaries only (the Go license would actually permit this)",
					"date": "2016-11-25",
					"id": "daetojg",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dcormier",
					"content": "[Desktop link](https://groups.google.com/forum/#!msg/golang-nuts/XoOhzUClDPs/jgSWxng7CAAJ)",
					"date": "2016-11-25",
					"id": "daemmtw",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "jwcrux",
					"content": "While there are many reasons a language can get popular, community is a huge one. \n\nGophers did a great job building genuinely helpful communities \"where the people are\", and this sub is no exception.\n\nI don\u0027t like what the CEO did either, but getting rid of this subreddit won\u0027t do anything except alienate a thriving community for which a current replacement doesn\u0027t exist.",
					"date": "2016-11-25",
					"id": "daf4ix0",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "tyrionlannister",
					"content": "Make an alternative first, and hand off to the community.  Don\u0027t just delete this or mark it private.  \n\nOne of the things we like about Go is its focus on stability.  If the team follows its own design philosophy with respect to its community, it should focus on a smooth transition for the 25,000+ members to some other platform for discussion.\n\nYou\u0027ll still lose some along the way, but even if you value this change more than your community, at least try to keep what you can in-tact.",
					"date": "2016-11-25",
					"id": "daf4vck",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "w00teh",
					"content": "Please don\u0027t delete this place. Reddit is how I get a large amount of \"new\" info about things I\u0027m interested (Go being one of many of them). Without this subreddit, I\u0027d have one less way to lurk and still find interesting information \u0026amp; projects easily.",
					"date": "2016-11-25",
					"id": "daf5ltz",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "BorgClown",
					"content": "Isn\u0027t this putting the moral quality of the CEO before the moral quality of the r/golang users? How does this affect us in practical terms? Will someone edit our comments too?",
					"date": "2016-11-25",
					"id": "daf9evr",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TotesMessenger",
					"content": "I\u0027m a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:\n\n- [/r/drama] [Proposal to Delete \\/r\\/golang](https://np.reddit.com/r/Drama/comments/5etmr0/proposal_to_delete_rgolang/)\n\n- [/r/subredditdrama] [\\/r\\/golang mods (Google employees) are so pissed off at \\/u\\/spez they want to delete the \\/r\\/golang. Drama ensues.](https://np.reddit.com/r/SubredditDrama/comments/5eubhq/rgolang_mods_google_employees_are_so_pissed_off/)\n\n[](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don\u0027t vote in the other threads.) ^\\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to\u003d/r/TotesMessenger))*\n\n[](#bot)",
					"date": "2016-11-25",
					"id": "daf1doc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tscs37",
					"content": "Pls do, this needs attention.",
					"date": "2016-11-25",
					"id": "daf2ips",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "justf_rtheupv_te",
					"content": "I\u0027m in favor of keeping the subreddit.  We shouldn\u0027t bail for purpose of politics.  Although, I do like how pretty this alt is: https://golangnews.com/",
					"date": "2016-11-25",
					"id": "daf5x1q",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "sdreyesg",
					"content": "Man, consider the CEO is not modifying the whole reddit. Also, have content in this subredfit been modified?\n\nFinally, ego aside the open source community benefits a lot of this sub reddit. Think about the children, man.",
					"date": "2016-11-25",
					"id": "daf67tb",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "purpleidea",
					"content": "Respectfully,\n\n\u0026gt; In light of the CEO of Reddit admitting to editing user comments (see dozen news stories today), I propose we delete the /r/golang subreddit. That is so beyond unethical and immature...\n\nHas Google or a Google CEO ever done anything unethical?\n\nWas it worse, better or equivalent to this?",
					"date": "2016-11-26",
					"id": "dafuhwk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "sd009",
					"content": "Terrible idea.",
					"date": "2016-11-26",
					"id": "dag3pdd",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "juicemia",
					"content": "I think the best way to kill this is by making something that is compelling enough to spur migration.\n\nMaybe the community can host something based on vBulletin. Maybe we can even build something in Go for us to move to. Whatever we do, I don\u0027t think the solution is to just tear this down. There are many Go users on here and our use of this platform is valid. We are not some leper colony. I think it\u0027s safe to say if we had something better to move on to then most of us would go without a fuss.",
					"date": "2016-11-28",
					"id": "dajg7d6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "PaluMacil",
					"content": "I only use Reddit for programming languages I write in, and I bet there are a lot of other professional adults that really could care less about the politics of who moderates, if they are part of the Go team or community (a distinction that seems both unimportant and perhaps partly dubious), and how moderation is accomplished.\n\nI do care about having a very active forum for news and discussion, and I very much enjoy the format. Additionally, I benefit a lot from experts in OTHER programming languages wandering over here to add their two cents in conversations that they wouldn\u0027t bother with on a Go-specific community site. Losing all that for an abstract concept unimportant to most adult professionals seems very disappointing. Let\u0027s not do that.\n\nI have never had a conflict with moderation on any website I have ever used. However, if a moderator contacted me and told me I was violating something I felt was insignificant, it still wouldn\u0027t affect my ability to give or receive technical know-how. We aren\u0027t a community discussing politics, religion, saving lives, ending lives, or anything else that needs any sort of emotional investment or opinion. We\u0027re a technical resource. Don\u0027t be offended by a manual. If it says something silly to you, it\u0027s still just an interactive manual and news feed. That goes both ways--for admins and for users. And please don\u0027t burn the manual if some pages use Comic Sans! (Ok, now I\u0027m too deep into analogy...)",
					"date": "2016-11-29",
					"id": "dakopnq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "fungussa",
					"content": "I hope something as irrational as Brexit doesn\u0027t happen here :(",
					"date": "2016-11-25",
					"id": "daelrnm",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "SilentWeaponQuietWar",
					"content": "Ya wouldn\u0027t it be a shame if people started injecting politics into technical programming discussions?  ಠ_ಠ ",
					"date": "2016-11-25",
					"id": "daf0hra",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "OdinSQL",
					"content": "Get rid of the \"code of conduct\" garbage and make in unofficial. ",
					"date": "2016-11-25",
					"id": "dafcehk",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "kaeshiwaza",
					"content": "Yes ! I will be productive again !",
					"date": "2016-11-25",
					"id": "daeunhf",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "SilentWeaponQuietWar",
					"content": "fine, keep nudging me towards .net core... I\u0027ve been fighting for go at work, but it keeps getting g harder and harder to stand up for. because of .... politics and mod management? fml",
					"date": "2016-11-25",
					"id": "daeyidp",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "very-little-gravitas",
			"date": "2017-01-04",
			"id": "5m0gj1",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Grumpy: Go running Python!",
			"comments": [
				{
					"author": "Richy13",
					"content": "Makes you wonder how much python they must have that it was easier to write a new python runtime in go than just convert the python to go",
					"date": "2017-01-04",
					"id": "dbzsoxo",
					"isArchived": true,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "dAnjou",
					"content": "\u0026gt; Grumpy is an experimental Python runtime for Go. **It translates Python code into Go programs, and those transpiled programs run seamlessly within the Go runtime.**\n\nSo, they *do* convert the Python code. They just do it automatically rather than manually. I guess the options were to let an army of developers rewrite everything from scratch or to let a handful of smart people write a new \"runtime\" (whatever that implies).",
					"date": "2017-01-04",
					"id": "dbzy9x1",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "xiegeo",
					"content": "I think there are two different types of transcomplers. One is like a traditional compiler in that the output is only meant to be machine readable, and code should still be written in the original language, with binding to the target language to take advantage of its features. The other is what you described, a machine aided conversion to a new language. My understanding of the article is that it is the first case. ",
					"date": "2017-01-04",
					"id": "dc07vbu",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "weberc2",
					"content": "It is. Grumpy programs are pretty much entirely `grumpy.runtime.Object`s, very much like the PyObject in CPython from what I can tell. In other words, classes don\u0027t compile into static Go structs, but into a runtime Type instance.",
					"date": "2017-01-04",
					"id": "dc09rej",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "dAnjou",
					"content": "Nope, I just used OP\u0027s wording when I said \"convert\". I\u0027m not aware of any transpilers who\u0027s primary purpose is to produce human readable code. AFAIK TypeScript manages to do that. But still, what\u0027d be the point of working with this output?",
					"date": "2017-01-04",
					"id": "dc0cbbc",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "xiegeo",
					"content": "I see. The second is what you want to do for a rewrite such as converting the Go compiler from C to Go. https://talks.golang.org/2014/c2go.slide",
					"date": "2017-01-05",
					"id": "dc0tqp0",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "LnM7eG5bhl65",
					"content": "If a program\u0027s \"primary purpose\" is human readable output, isn\u0027t that closer to a pretty printer?\n\n[coffeescript](http://coffeescript.org/), though less prominent nowadays, produces decent looking javascript.",
					"date": "2017-01-05",
					"id": "dc0j1ub",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; If a program\u0027s \"primary purpose\" is human readable output, isn\u0027t that closer to a pretty printer?\n\nNo. Anything I\u0027d call a \"pretty printer\" has the same input and output language. gofmt is a pretty printer. The C-\u0026gt;go transpiler used when migrating gc and the runtime to go isn\u0027t, it\u0027s a transpiler.",
					"date": "2017-01-05",
					"id": "dc0x572",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "Reminds me of facebook and the hhvm/hack",
					"date": "2017-01-04",
					"id": "dbzvg3u",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "driusan",
					"content": "But that\u0027s exactly what it does. It converts the Python to Go, and then compiles the Go.",
					"date": "2017-01-04",
					"id": "dbzy46r",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "garoththorp",
					"content": "Oh man I can\u0027t wait for the inevitable future:\n\n* Oh hey, there\u0027s a sweet python library\n* But humm, I wrote my project in Node :-(\n* Oh, no problem: get GopherJS and just transpile python -\u0026gt; Go -\u0026gt; Javascript",
					"date": "2017-01-04",
					"id": "dc08y3x",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "drunken_thor",
					"content": "Isn\u0027t that kind of awesome though? Imagine a future where you can write any language and change at any point. Maybe you are running into limitations of one language so you translate to another without any repercussions? Or as you said translating libraries. Write libraries that work for any language. A bit far fetched but cool to think about.",
					"date": "2017-01-05",
					"id": "dc0mhbp",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "khrizp",
					"content": "Have you heard about Haxe? https://haxe.org/\nI think Haxe can be use for something like that.",
					"date": "2017-01-05",
					"id": "dc0pd5o",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "geodel",
					"content": "I think it is kind of 20MB page with 2KB text awesome or those famous Javascript editors taking 400MB ram to process 2MB text file awesome.\n\nPeople find all this amazing but I am just not so sure.",
					"date": "2017-01-05",
					"id": "dc161bx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "electric_creamsicle",
					"content": "That\u0027s not the point of having different programming languages though...",
					"date": "2017-01-05",
					"id": "dc0nilm",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "aaaqqq",
					"content": "I\u0027m excited to see if this can result in making a large number of very useful \u0026amp; battle tested python packages available for use in Go. That would be pretty awesome!\n",
					"date": "2017-01-04",
					"id": "dbzzbe9",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "saxykeyz",
					"content": "wonder how easy it would be to use grumpy as a library in other go programs",
					"date": "2017-01-04",
					"id": "dbzu635",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "ctbel",
					"content": "I\u0027d like to know that as well. Perhaps this could be a start?\n\nhttps://godoc.org/github.com/google/grumpy/runtime#Code.Eval",
					"date": "2017-01-04",
					"id": "dbzud9a",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-01-04",
					"id": "dc052sw",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "bboozzoo",
					"content": "Makes one wonder what kind of mess must their current Python 2 codebase be that it\u0027s easier to write Python runtime in Go than port to 3.5 with asyncio. Unless their app is CPU, no I/O, bound in which case it\u0027s surprising that they wrote it in Python in the first place.",
					"date": "2017-01-05",
					"id": "dc0wssr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "m3wm3wm3wm",
					"content": "Is this a tool mainly for migrating a legacy Python codebase, or, is it suitable for new projects?\n\nWould new web app projects benefit from writing in Python and transpiling to Go?",
					"date": "2017-01-05",
					"id": "dc0gdiv",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "neoasterisk",
					"content": "New web projects are probably being written in Go.",
					"date": "2017-01-05",
					"id": "dc11pcr",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dAnjou",
					"content": "So, the reason was that Python 2 is bad at concurrency. But how does a transpiler help solving this issue? I don\u0027t think you can simply \"translate\" normal Python code to code that runs concurrently automagically ... whatever that means. All that is a way too big question mark for me to get excited about this project just yet.",
					"date": "2017-01-04",
					"id": "dbzyksd",
					"isArchived": true,
					"isControversial": false,
					"score": -4
				},
				{
					"author": "prite",
					"content": "Python has concurrency models — even python 2.7 — what it (read: cpython) doesn\u0027t have is parallelism.\n\nThere are already implementations that bring parallelism to python\u0027s concurrency, in fact. This one just tries to do it in Go. ",
					"date": "2017-01-04",
					"id": "dbzyylt",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "ehaliewicz",
					"content": "The main issue is that cpython is reference counted, which can cause problems with threads, unless you\u0027re very careful with the refcounting logic.  Most of python should run fine with a GC (pypy uses one after all), and that could allow much better parallelism, although python also supports destructors which don\u0027t necessarily play well with GC.",
					"date": "2017-01-04",
					"id": "dbzyz0c",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "nemith",
					"content": "Well since this just transpiles the python code to Go and themp compiles it there is no runtime GC.  It\u0027s all just Go at that point with the standard go runtime/GC.\n\nAs for parllelism.  They took the existing threading module and adapted to just run each thread in a go routine.\n\nStdlib theading module: https://github.com/google/grumpy/blob/4e1a5b2bcb785464e35f6051a715f0f631b5d857/lib/threading.py\nStartThread: https://github.com/google/grumpy/blob/4e1a5b2bcb785464e35f6051a715f0f631b5d857/runtime/core.go#L667\n\nSo python programs don\u0027t know that they are no longer on a kernel thread, but just running in a go routine.",
					"date": "2017-01-04",
					"id": "dc00tvd",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ehaliewicz",
					"content": "\u0026gt; there is no runtime GC.  It\u0027s all just Go at that point with the standard go runtime/GC.\n\nI wouldn\u0027t really expect there to be a gc running on top of the go gc..",
					"date": "2017-01-04",
					"id": "dc07wvm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "There isn\u0027t--it uses Go\u0027s GC.",
					"date": "2017-01-04",
					"id": "dc09vd2",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ehaliewicz",
					"content": "I understand that.  The other was saying there\u0027s no runtime GC because go has it\u0027s own GC???\n\nAll I was saying from the beginning is that it\u0027s using go\u0027s GC rather than reference counting so that\u0027ll help with parallelism.",
					"date": "2017-01-04",
					"id": "dc0ax9l",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "I was merely confirming that you suspected correctly.",
					"date": "2017-01-04",
					"id": "dc0bepv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nemith",
					"content": "Sorry i mean no python GC.  It\u0027s not an python interpreter in Python.  It\u0027s a transpiler.  The runtime features are straight from Go.  \n\nSorry for the confusing sentence. ",
					"date": "2017-01-04",
					"id": "dc0caxc",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "amclennon",
					"content": "\u0026gt; So, the reason was that Python 2 is bad at concurrency. But how does a transpiler help solving this issue?\n\nI\u0027m not sure how familiar you are with Python, but any application that has multiple threads will still be bound to a mutex called the Global Interpreter Lock (GIL) for any CPU related tasks. In other words, only one thread can make heavy use of the CPU at any given time despite other potential gains from threading.\n\n\nIn general, the default CPython platform is going to be inherently slower at interpreting the code at runtime. I imagine you\u0027d also get a lot of the benefits from a Golang build that you\u0027d get with something like PyPy by performing static analysis and generating a binary ahead of time. ",
					"date": "2017-01-04",
					"id": "dbzzj8h",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "twisted1919",
					"content": "Google...",
					"date": "2017-01-04",
					"id": "dc02pxp",
					"isArchived": true,
					"isControversial": false,
					"score": -8
				},
				{
					"author": "very_mechanical",
					"content": "Yes.",
					"date": "2017-01-04",
					"id": "dc034v9",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				}
			]
		},
		{
			"author": "[deleted]",
			"date": "2015-02-23",
			"id": "2wx30p",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "The Go compilers are now written in Go",
			"comments": [
				{
					"author": "geodel",
					"content": "Congrats!\n\nTo put this huge achievement in perspective Java is trying to write compiler / runtime in Java for at least for 3 years or more and they are nowhere near close to done.",
					"date": "2015-02-24",
					"id": "cov1aav",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "munificent",
					"content": "\u0026gt; Java is trying to write compiler / runtime in Java for at least for 3 years or more and they are nowhere near close to done.\n\nThe [javac compiler](http://hg.openjdk.java.net/jdk9/jdk9/langtools) was written in Java ages ago. I don\u0027t know when they last had a non-Java version of it.\n\nThe main Java runtime, HotSpot, is written in C++, but then Go\u0027s runtime is still written in C too. There *are* JVMs written in Java. [Jikes](http://en.wikipedia.org/wiki/Jikes_RVM) came out in the 90\u0027s.",
					"date": "2015-02-24",
					"id": "cov3a9e",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "bradfitz",
					"content": "The Go runtime is written in Go now, not C.",
					"date": "2015-02-24",
					"id": "cov8uvh",
					"isArchived": true,
					"isControversial": false,
					"score": 46
				},
				{
					"author": "munificent",
					"content": "I learned something new today!",
					"date": "2015-02-24",
					"id": "covae7j",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "bobappleyard",
					"content": "wow, even the memory manager. im impressed",
					"date": "2015-02-25",
					"id": "cox558f",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "YEPHENAS",
					"content": "\u0026gt; but then Go\u0027s runtime is still written in C too\n\nGo\u0027s runtime is written in Go since version 1.4.",
					"date": "2015-02-24",
					"id": "cov8ume",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "geodel",
					"content": "javac is not comparable to Go compiler. I believe JIT compilers / interpreters (C1 /C2) which are written in C++ are comparable.\n\nI am talking about Graal / Maxine.\n\nhttp://www.oracle.com/technetwork/oracle-labs/program-languages/overview/index-2301583.html\n\nAlso Go runtime is now written Go.\n\nhttps://github.com/golang/go/tree/master/src/runtime\n\nedit:\n\nThis link shows that Maxine is in development since 2009 or before so much older than I initially thought.\n\nhttp://blog.gmane.org/gmane.comp.java.jikes.rvm.devel/month\u003d20091101",
					"date": "2015-02-24",
					"id": "cov3pij",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "vhodges",
					"content": "I have to disagree, they are directly comparable. \n\njavac translates java source code into byte code which is the machine code that the VM  (ie the java executable) interprets.  Just because its virtual, doesn\u0027t mean it\u0027s not real assembly.\n",
					"date": "2015-02-24",
					"id": "covogdz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "geodel",
					"content": "javac does not perform optimizations on source code. AFAIK all the clever stuff is in hotspot.\n\nhttps://wikis.oracle.com/display/HotSpotInternals/PerformanceTechniques\n\nGo compilers perform optimizations applicable so it is comparable to JIT (C1/C2) compilers.",
					"date": "2015-02-24",
					"id": "covrcud",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "vhodges",
					"content": "Yes, Hotspot does things at runtime.But a language and it\u0027s runtime are not the same.  \n\nMy only point is that both Go and javac are compilers for their respective languages, regardless of whether or not there\u0027s an optimization pass before,during or after code generation. \n\nCase in point, there were backends for Java (the language) that would generate native code, way back in the 1.1 days.  I think https://gcc.gnu.org/java/ will still do this (not sure, it\u0027s been a very very long time since I did anything with Java and I only had a glancing interest in gcj).\n\n\n",
					"date": "2015-02-24",
					"id": "covsrm4",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "geodel",
					"content": "I guess I am trying to point out  Java depends on ~600K lines of C++ code in hotspot and another 500K of (C/C++) code in assorted tools / libraries that comes with JDK for its real world performance. Go only (almost?) depends on Go for its real world performance.\n\nTo me it is impressive and considering Oracle working on Graal / Maxine they also consider this as worthwhile goal.",
					"date": "2015-02-24",
					"id": "covtxi1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2015-02-24",
					"id": "covaaib",
					"isArchived": true,
					"isControversial": true,
					"score": 4
				},
				{
					"author": "scoith",
					"content": "Because you\u0027re wrong. Go compilers can compile go code just fine.\nBootstrapping will be required to compile Go 1.5+ compilers, which are written in Go.",
					"date": "2015-02-25",
					"id": "cowfu3y",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "howeman",
					"content": "Congrats!\n\nHere\u0027s to hoping this makes improving Go code generation easier.",
					"date": "2015-02-24",
					"id": "cov0nut",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "denmaradi",
					"content": "Well let\u0027s hope that compilation speed is not compromised. This is one of the things what Go stands for. ",
					"date": "2015-02-23",
					"id": "coux8sy",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "[deleted]",
					"content": "Nobody wants a slow compiler. But, the good news is now we have all the tools that Go programmers have been using for years. available to us; the race detector, the profiling tools, etc; to analyse and tune the code. ",
					"date": "2015-02-23",
					"id": "couyjkm",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "denmaradi",
					"content": "\u0026gt; Nobody wants a slow compiler. \n\nThose were my exact thoughts.\n\n BTW, when this new compiler is finally out, it would be one big static binary correct? I can only imagine good life after that. ",
					"date": "2015-02-24",
					"id": "cov07my",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "gohacker",
					"content": "I hope the profiling tools will benefit from this, too.",
					"date": "2015-02-24",
					"id": "cov3rav",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "computesomething",
					"content": "While it seems to be against the philosophy of the Go author\u0027s somewhat (or maybe that\u0027s just my impression), I personally wouldn\u0027t mind a flag for aggressive but slow optimization which you would typically use for release builds, this is of course assuming the Go developers would forego certain optimizations due to finding them too costly in compile time, that may not be the case.",
					"date": "2015-02-24",
					"id": "cov3n29",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dmikalova",
					"content": "I doubt the Go developers would ever go for this, it really is against the core principles of Go. However, I am also pretty sure that the reason compilation is so fast is not because they leave out costly optimizations at compile time, but because they very very specifically designed the language to not allow for stupid time wastey stuff at compile time - [here\u0027s](https://talks.golang.org/2012/splash.article#TOC_5.) an example from Google.",
					"date": "2015-02-24",
					"id": "cov7g32",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "ericanderton",
					"content": "\u0026gt; designed the language to not allow for stupid time wastey stuff at compile time \n\nAs someone who can meta-program with the best of them, I *adore* writing time-wastey stuff at compile time!\n\nBut seriously, it\u0027s probably for the best.  It\u0027s difficult to conceive a compile-time mechanism that doesn\u0027t allow for deep obfuscation of code and/or create a maintenance time sink.  There\u0027s a point where it\u0027s breathless and easy to understand (Java generics for example), and then there\u0027s where it starts to converge on raw code generation; and go-generate has solved that problem handily.",
					"date": "2015-02-24",
					"id": "covmt70",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mgutz",
					"content": "I can\u0027t wait for 1.6 (and 1.5)! My hunch is 1.5 will have same or slightly reduced performance compared to 1.4.",
					"date": "2015-02-24",
					"id": "covrvgd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dgryski",
					"content": "Two big advantages are that now the compiler is easier to profile and refactor,  and second the ability to easily parallelise the different stages (e.g. compiling 4 files at once on a 4 core box ).  The compiler will get faster,  although perhaps not immediately. ",
					"date": "2015-02-23",
					"id": "couynaa",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "anacrolix",
					"content": "To be fair, it was already easily parallelizable, since each compilation unit ran with a separate compiler process.",
					"date": "2015-02-25",
					"id": "cowpvmn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "So I can finally easily crosscompile a native compiler for Android, then? :)",
					"date": "2015-02-24",
					"id": "covs9ej",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "szabba",
					"content": "Now I\u0027m wondering when I\u0027ll be able to compile Go to machine code on the browser with `gc` compiled to Javascript using GopherJS.\n\nCompilers are fun.",
					"date": "2015-02-24",
					"id": "covt4mb",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Velovix",
					"content": "This is great news! Does it look like we\u0027ll see the Go compiler on par with the old C version by 1.5 release?",
					"date": "2015-02-24",
					"id": "cow0eek",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "Here is a tip: the compiler is written in Go and all the work going in to the compiler to make the compiler faster will also make every other go program faster. ",
					"date": "2015-02-27",
					"id": "coyt3ma",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "vph",
					"content": "I am just a little worry that the compiling is slow now.  Hopefully, this will be rectified soon.  [In the justification](https://docs.google.com/document/d/1P3BLR31VA8cvLJLfMibSuTdwTuF7WWLux71CYD0eeD8/edit), plenty of pros, but there seemed to be none of the cons.\n\nClearly, one possible disadvantage is that the Go-based compiler will be slower than the C-based compiler.\n\n",
					"date": "2015-02-24",
					"id": "covm2aw",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "jeandem",
					"content": "I wonder at what size you would notice any slow down (if any?). Maybe the biggest concern is garbage collection, but below a certain point the garbage collector won\u0027t necessarily run before the program is done. Is there anything else to really be concerned with?",
					"date": "2015-02-25",
					"id": "cowqfwa",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "baijum",
			"date": "2017-05-09",
			"id": "6a3qkq",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Delve (Go Debugger) 1.0 first release candidate",
			"comments": []
		},
		{
			"author": "rsc",
			"date": "2016-12-08",
			"id": "5h87u6",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "I am the current top (oldest) moderator here, and a few other Google employees are moderators too, due more to history than anything else. We didn\u0027t start this subreddit, and none of us are particularly active here anymore. The presence of Google employees here as [moderators](https://www.reddit.com/r/golang/about/moderators) has led many people (most notably, /u/bradfitz) to believe that Google started or runs this subreddit. We didn\u0027t, we don\u0027t, and we never have. We did create confusion by referring to the subreddit as one of the \"the official forums operated by the Go project\" on https://golang.org/conduct.\n\nTo make the independence from Google clearer, I propose to hand my spot as top moderator to /u/dgryski (by deleting all other moderators, including myself) and leave him to establish a new slate of moderators drawn from active users of this subreddit that properly represent the community here. At the same time, we will remove the subreddit from the list of official forums on https://golang.org/conduct. We will keep it listed in https://golang.org/help; it is not marked as official there.\n\nThoughts about this proposal?\n\nThanks.\n-Russ\n\n**Update, Friday 10am**: The reaction here seems uniformly positive. That\u0027s great. Assuming the consensus is still in favor after the weekend, I\u0027ll execute this plan on Monday.\n\n**Update, Monday 9am**: This is done. The update to https://golang.org/conduct is https://golang.org/issue/18289. Thanks again to /u/dgryski for taking this on.",
			"title": "proposal: dgryski for top mod",
			"comments": [
				{
					"author": "spf13",
					"content": "I fully support this proposal and want to publicly thank /u/dgryski for all he does here and for the Go community. ",
					"date": "2016-12-08",
					"id": "day4x21",
					"isArchived": true,
					"isControversial": false,
					"score": 99
				},
				{
					"author": "thesnowmancometh",
					"content": "He\u0027s definitely the best source for Go content on Twitter, too!",
					"date": "2016-12-08",
					"id": "day5in0",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "driusan",
					"content": "He\u0027s on twitter too? With all his activity 24 hours a day on anything Go related on Reddit, GitHub, Slack, and apparently twitter, are we sure he\u0027s not an AI?",
					"date": "2016-12-08",
					"id": "daydjo6",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "gogroob",
					"content": "And his collection of Go conference talks is both amazing and a lot of work http://gophervids.appspot.com/",
					"date": "2016-12-08",
					"id": "day65om",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "nohoudini",
					"content": "yes, +1 /u/dgryski",
					"date": "2016-12-09",
					"id": "dazngl6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "Hear, hear!",
					"date": "2016-12-09",
					"id": "daz2j3h",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "peterbourgon",
					"content": "Thumbs up on all fronts.",
					"date": "2016-12-08",
					"id": "day56kj",
					"isArchived": true,
					"isControversial": false,
					"score": 31
				},
				{
					"author": "mm_5687",
					"content": "Thanks Russ for make an official proposal - it\u0027s good to have an actual response from one of the Go Team.\n\nI\u0027d personally be happy with this as a solution, although obviously the decision will fall to whether /u/dgryski is willing to take on that responsibility himself, at least in the short term.\n\nI\u0027d also like to point out that /u/skelterjohn was the only other mod who bothered to comment on the Future of Golang thread, and also the only other mod to respond to the mod mail I sent asking them not to delete the subreddit. I can\u0027t speak for the community, but he may be another suitable mod, and although he now works for Google (not as a member of the Go Team), he\u0027s been a moderator here for longer and has stated he would be happy to stay.",
					"date": "2016-12-08",
					"id": "day5px7",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "skelterjohn",
					"content": "I\u0027m happy to remain modlike. If the only way to let /u/dgryski be top mod is to un-mod and let him re-add me, that\u0027s fine. I don\u0027t think it really matters who is on top, though.",
					"date": "2016-12-08",
					"id": "day671n",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "robertmeta",
					"content": "I think the de-mod / re-mod process is just for clarity, so the new \"administration\" for lack of a better word has a clear line in the sand and full control, I assumed you would be modded back up. ",
					"date": "2016-12-08",
					"id": "daydk2x",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ivosaurus",
					"content": "Mods can only un-mod mods newer than themselves. This means in any time of crisis for a subreddit, it is the highest mod in the list who has ultimate control.",
					"date": "2016-12-09",
					"id": "daz9njp",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "StabbyCutyou",
					"content": "I\u0027d also vote to keep skelterjohn around",
					"date": "2016-12-08",
					"id": "day6411",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "4ad",
					"content": "LGTM.\n",
					"date": "2016-12-08",
					"id": "day5knp",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "matryer",
					"content": "👍",
					"date": "2016-12-08",
					"id": "day57ti",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "muffinz0",
					"content": "I also fully support this proposal.",
					"date": "2016-12-08",
					"id": "day5bqq",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "jmoiron",
					"content": "If u/dgryski is on board then +100 from me.  He\u0027s a treasure to all Go communities he contributes to.",
					"date": "2016-12-08",
					"id": "day6cp3",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "neoasterisk",
					"content": "Any alternative to this subreddit that is official?",
					"date": "2016-12-08",
					"id": "day5cfh",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "gogroob",
					"content": "golang-nuts\n\nSlack is also a really great community, although it\u0027s not official. https://invite.slack.golangbridge.org/",
					"date": "2016-12-08",
					"id": "day67by",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "sh41",
					"content": "SGTM.",
					"date": "2016-12-08",
					"id": "day5kon",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "StabbyCutyou",
					"content": "Supported",
					"date": "2016-12-08",
					"id": "day62cg",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "farslan",
					"content": "I fully support this and I think there couldn\u0027t be a better person to be mod here.",
					"date": "2016-12-08",
					"id": "day5w1m",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "varun06",
					"content": "full support to /u/dgryski.",
					"date": "2016-12-08",
					"id": "day7qoz",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "genericbob",
					"content": "+1",
					"date": "2016-12-08",
					"id": "dayaovb",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "driusan",
					"content": "I fully support this idea. Even if I am a little surprised to hear that /u/dgryski isn\u0027t a Google employee.",
					"date": "2016-12-08",
					"id": "daydbab",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "BOSS_OF_THE_INTERNET",
					"content": "I don\u0027t post here much at all, but every time I\u0027ve grokked the subreddit, /u/dgryski has always been a great example of a community leader.\n\n+1 for /u/dgryski",
					"date": "2016-12-08",
					"id": "dayk3ai",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "knotdjb",
					"content": "Sounds good. I hope /u/dgryski considers /u/fuzxxl as a second mod.",
					"date": "2016-12-08",
					"id": "daymqig",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "FUZxxl",
					"content": "If anybody nominates me, I am going to accept any nomination. I am currently moderating /r/C_Programming (a subreddit with 24.090 readers, so about as large as /r/golang) with good results and very little complaints so far. If given the chance, I would moderate /r/golang with the same standards I use to moderate /r/C_Programming.",
					"date": "2016-12-08",
					"id": "dayn07p",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "sethammons",
					"content": "Does /u/dgryski want the responsibility? Will any core developers want to continue to be moderators? Will any core developers continue to add to this community? ",
					"date": "2016-12-09",
					"id": "dayvog9",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "rsc",
					"content": "* I did run this by /u/dgryski before posting, and he agreed to take this on.\n* I don\u0027t expect any of the core developers to remain as moderators, to make the independence from Google clearer.\n* I don\u0027t believe any of the core developers are planning to change their Reddit usage in either direction as a result of this. Unfortunately, most of us don\u0027t visit much already. But those who do will probably continue.\n",
					"date": "2016-12-09",
					"id": "daywjcn",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "rsc",
					"content": "It seems like everyone is in favor of this idea. Assuming the consensus is still there after the weekend, I\u0027ll do this on Monday. Updated the original post.",
					"date": "2016-12-09",
					"id": "dazhaow",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "linportal",
					"content": "The proposal fully supported by me!",
					"date": "2016-12-08",
					"id": "day6rob",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "media_guru",
					"content": "I support this proposal.",
					"date": "2016-12-08",
					"id": "day87cg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "iends",
					"content": "Sounds good.",
					"date": "2016-12-08",
					"id": "day93m1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "carlisia",
					"content": "I could not agree more, glad to see this happening.",
					"date": "2016-12-08",
					"id": "dayfu9m",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "pinpinbo",
					"content": "Sounds good!!",
					"date": "2016-12-08",
					"id": "dayfycv",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "alkhatib",
					"content": "Sounds good to me.",
					"date": "2016-12-08",
					"id": "daygo3l",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "chewxy",
					"content": "+1",
					"date": "2016-12-08",
					"id": "daygoci",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "arschles",
					"content": "I support this action! I look forward to seeing /u/dgryski as \"top mod\"",
					"date": "2016-12-08",
					"id": "dayk3al",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "funny_falcon",
					"content": "+1 wise moderator is more important than wise rules.",
					"date": "2016-12-08",
					"id": "daylzcm",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "HolyClickbaitBatman",
					"content": "AYE!",
					"date": "2016-12-09",
					"id": "daypc0i",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "eikenberry",
					"content": "+1",
					"date": "2016-12-09",
					"id": "daypjv8",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "masnun_dot_rocks",
					"content": "Agreed. This is a good idea.",
					"date": "2016-12-09",
					"id": "daz84lm",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jackielii",
					"content": "Thank you /u/dgryski",
					"date": "2016-12-09",
					"id": "daz8ffk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "fortytw2",
					"content": "All for it, so long as /u/gdryski is ok with it",
					"date": "2016-12-09",
					"id": "daz8j71",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "j7b",
					"content": "I support and appreciate this proposal. I\u0027d also like to note I and hopefully other /r/golang participants appreciate the positive contributions all Google employees and Go authors have made to this sub. In particular, the AMA was excellent.\n\nIt seems if this plan is executed it appears the language of the Go Community Code of Conduct should be reworded reflecting it\u0027s the sub\u0027s code of conduct and the reference to conduct@ should be elided.",
					"date": "2016-12-09",
					"id": "db03mq4",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ansible",
					"content": "I am totally onboard with this.\n\nIn general, I\u0027m against the trend that I\u0027ve seen frequently, that views being a moderator as a perk or other high-status thing.\n\nNo, it is not.  If you are a moderator of a sub, you\u0027re there to do work.  Checking for spam, checking for things wrongly marked as spam, looking at the new queue, monitoring discussions to ensure they adhere to the sub\u0027s rules.  \n\nBeing a moderator is work, it is a responsibility.\n\nIf you aren\u0027t active in the sub, then you shouldn\u0027t be a moderator in general. ",
					"date": "2016-12-08",
					"id": "daykbof",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "robertmeta",
					"content": "\u0026gt; Thoughts about this proposal?\n\nI think it is the right way to go at this point.  ",
					"date": "2016-12-08",
					"id": "day69t3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dmikalova",
					"content": "As long as we have the code of conduct still in effect after the transition.",
					"date": "2016-12-09",
					"id": "dazl1ra",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "waiting4op2deliver",
					"content": "I personally blame gofmt for this. Since we now can\u0027t fight about tabs vs space, we must yak shave in the bikeshed about forum providers.",
					"date": "2016-12-08",
					"id": "dayhqwc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "KEANO_",
					"content": "+1 if he changes his username to a more readable one. \nlike /u/bestGopher or something like this\n\n/s",
					"date": "2016-12-09",
					"id": "dazg0gn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "purpleidea",
					"content": "I\u0027m okay with the idea, assuming we could get a big of background on dgryski to know why he is constantly posting golang stuff, etc...\n\n1) Is he getting paid for this?\n2) Is it done in his free time?\n3) Any other disclosures...\n\nI don\u0027t know the chap personally, just pro transparency and open disclosure.\n\nThanks!",
					"date": "2016-12-09",
					"id": "daznac6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dsies",
					"content": "+1 from me. This is still my primary news avenue for golang-related news.",
					"date": "2016-12-10",
					"id": "db0iu4z",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "👍",
					"date": "2016-12-10",
					"id": "db0jmge",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-10",
					"id": "db17non",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rsc",
					"content": "For future reference, this kind of comment is not actionable, because it contains no concrete evidence to evaluate. (I can\u0027t tell if maybe it was a joke.)\n",
					"date": "2016-12-12",
					"id": "db3jcge",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "fhjfgfhfhfhftyjfghft",
					"content": "The concrete evidence is the comments made by /u/dgryski. You could easily evaluate those comment by clicking the link to /u/dgriski that I have now posted three times- once should have been enough(and without further explanation).",
					"date": "2017-03-22",
					"id": "df93axs",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheMerovius",
					"content": "I will be pretty offput, if the CoC stops being enforceable here. I believe reddit needs it more than any medium. I likely won\u0027t stop frequenting this and reading it, but I might, over time, be less inclined to participate, because I won\u0027t feel safe about it.\n\nApart from that, I don\u0027t really care who has the title as moderator.",
					"date": "2016-12-08",
					"id": "day69r9",
					"isArchived": true,
					"isControversial": true,
					"score": -5
				},
				{
					"author": "mm_5687",
					"content": "There likely needs to be a separate discussion around the CoC and /r/golang. There was plenty of discussion in the [Future of /r/golang](https://www.reddit.com/r/golang/comments/5eubdp/the_future_of_rgolang/) thread.\n\nThe concision that I personally came to was for the behaviour and values sections to stay, with the enforcement being carried out by /r/golang moderators, rather than the CoC Working Group. Reddit already has plenty of moderation tools for use by the community and actual moderators, we just need to use them.",
					"date": "2016-12-08",
					"id": "day6s41",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "knotdjb",
					"content": "How can a code of conduct be enforced for a community that mostly use pseudonymous identities?\n\nIt is fundamentally flawed - rules and moderation is probably the most reasonable approach given the nature of the service.",
					"date": "2016-12-09",
					"id": "dayp2pt",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "jmoiron",
					"content": "As someone who is fully on board with CoC and thinks it makes the community more inclusive, I live in hope that there\u0027s a silent majoity that are supportive of its content, and that at least some of the pushback comes from the feeling that it was imposed by people who do not participate in this community (and in fact express open contempt towards it elsewhere).",
					"date": "2016-12-08",
					"id": "day6vs1",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "mm_5687",
					"content": "\u0026gt; that at least some of the pushback comes from the feeling that it was imposed by people who do not participate in this community (and in fact express open contempt towards it elsewhere)\n\nTo be frank, I think this is what caused the majority of the pushback. \n\nI\u0027ve not seen anyone who has issues with the current content of the values and behaviour sections of the CoC, whereas I\u0027ve seen nothing but complaints about the way it\u0027s enforced. There are still people who claim it shouldn\u0027t exist, but I think most understand having a set of written rules and values is important for moderation purposes.",
					"date": "2016-12-08",
					"id": "day78lu",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "rsc",
					"content": "It would be up to the community led by /u/dgryski to figure out expected behavior. Even if the subreddit does choose to follow the Go CoC, enforcement would still need to be done here;  conduct@golang.org is for official spaces only and would no longer be involved.\n",
					"date": "2016-12-08",
					"id": "day7i64",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; enforcement would still need to be done here; conduct@golang.org is for official spaces only and would no longer be involved.\n\nAnd this is precisely why I want /r/golang to be an official space. I do get the reasons, but I strongly believe the subreddit to be off worse.",
					"date": "2016-12-08",
					"id": "dayherc",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "robertmeta",
					"content": "Not sure you can get much \"worse off\" than being loathed by your moderators, but who knows.  That said, I suspect it will be a less dramatic shift than people expect. ",
					"date": "2016-12-08",
					"id": "dayi5o8",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; I\u0027ve not seen anyone who has issues with the current content of the values and behaviour sections of the CoC\n\nI had a very different impression from the discussions around it\u0027s introduction, especially here on reddit. I took away from it that people had very broad objections to exactly those sections and that the enforcement was barely mentioned (except the part about also taking into account behavior outside the official go spaces).\n\n[There](https://www.reddit.com/r/golang/comments/3t82mt/code_of_conduct_proposal_2/) [are](https://www.reddit.com/r/golang/comments/3abyva/a_code_of_conduct_for_the_go_community/) [several](https://www.reddit.com/r/golang/comments/3afdgj/no_code_of_conduct/) [threads](https://www.reddit.com/r/golang/comments/3r2t63/proposed_code_of_conduct_for_the_go_project/) on /r/golang that I read through at the time and I encourage you to read them. If you then still believe that the criticism of it had mostly to do with who the moderators of /r/golang are, we can talk again.\n\nHonestly, I can only think of one occasion, where the enforcement of the CoC was criticized; the most recent thread about it. Which makes me suspect that this is an instance of recency bias.",
					"date": "2016-12-08",
					"id": "dayi2vs",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "mm_5687",
					"content": "I\u0027ve read the majority of the posts regarding the introduction of the CoC and left vast amounts of feedback when it was first proposed. Changes were made to the core of the code (core \u003d the Behaviour and Values sections) after the first round of feedback that fixed most of the issues I had with it.\n\nAs for those complaining about the CoC, they really do fall into two categories, people who are worried about enforcement and people who are worried about it\u0027s very existence. For a Code of Conduct, the core of the Go CoC  is quite reasonable and very similar to those used by other very large projects, it only really differs on enforcement.\n\nI can got through almost every post in that thread and find quotes like these: \n\n\u0026gt; As long as CoC works only inside of go core (subreddit, maillist, main github repo) I think community should be fine. CoC should explicitly cover every place and forbidden action - so it could\u0027t be used against contributors in \"political propaganda\" or other destructive behavior .\n\n.\n\n\u0026gt; I agree with you completely. As long as the CoC explicitly states where it will apply (just on subreddit, mailing list, irc, and github repos, etc.) and what actions are specifically forbidden people might be more welcome to the idea.\n\n.\n\n\u0026gt; Hopefully the Go community will not scour the internet for objectionable views.\n\nThese are people worried about who is going to enforce the CoC and where it\u0027s going to be enforced, not what the core of it actually says.\n\nComment such as this: \n\n\u0026gt; My biggest beef with these codes of conduct is that they never seem to distinguish between someone getting their feelings hurt and somebody being the victim of prolonged harassment.\n\n\n\u0026gt; I don\u0027t need a baby sitter, or to be told not to be mean to people.\n\u0026gt; All of these discussions are tiring and make me scared to even ask a question to the communities that adopt these codes. What if i say \"him\" and not \"they\", or something.\n\n.\n\n\u0026gt; I feel like, by this rule, I\u0027m going to get automagically banned from this subreddit, if someone of power and with a very narrow sense of what discrimination is, sees my activity on Reddit.\n\n.\n\n\u0026gt; We\u0027re saying that we are perfectly capable of being polite without having a list of arbitrary and vague guidelines.\n\nThese are complains against the existence of a CoC, not what the code actually says. \n\nI really can\u0027t find a comment that has a specific complaint about the current core of the CoC.",
					"date": "2016-12-08",
					"id": "dayl183",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "weberc2",
					"content": "As a data point for you, my opposition to the CoC is based more on its content; that it polices speech and prioritizes one political agenda and ideology above others. While other such codes have been grossly abused, ours has not and I don\u0027t want to overstate the problem, but merely mention that there are people who dislike the CoC for reasons unrelated to the moderators.",
					"date": "2016-12-09",
					"id": "daz2tof",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mm_5687",
					"content": "Could you be more specific?\n\nWhich parts of the Code that I\u0027ve listed below actually prioritizes one political agenda or ideology?\n\n**Gopher values**\n\nThese are the values to which people in the Go community (“Gophers”) should aspire.\n\n* Be friendly and welcoming\n* Be patient\n   - Remember that people have varying communication styles and that not everyone is using their native language. (Meaning and tone can be lost in translation.)\n* Be thoughtful\n   - Productive communication requires effort. Think about how your words will be interpreted.\n   - Remember that sometimes it is best to refrain entirely from commenting.\n* Be respectful\n   - In particular, respect differences of opinion.\n* Be charitable\n   - Interpret the arguments of others in good faith, do not seek to disagree.\n   - When we do disagree, try to understand why.\n* Avoid destructive behavior:\n   - Derailing: stay on topic; if you want to talk about something else, start a new conversation.\n   - Unconstructive criticism: don\u0027t merely decry the current state of affairs; offer—or at least solicit—suggestions as to how things may be improved.\n   - Snarking (pithy, unproductive, sniping comments)\n   - Discussing potentially offensive or sensitive issues; this all too often leads to unnecessary conflict.\n   - Microaggressions: brief and commonplace verbal, behavioral and environmental indignities that communicate hostile, derogatory or negative slights and insults to a person or group.\n\nPeople are complicated. You should expect to be misunderstood and to misunderstand others; when this inevitably occurs, resist the urge to be defensive or assign blame. Try not to take offense where no offense was intended. Give people the benefit of the doubt. Even if the intent was to provoke, do not rise to it. It is the responsibility of all parties to de-escalate conflict when it arises.\n\n**Unwelcome behavior**\n\nThese actions are explicitly forbidden in Go spaces:\n\n* Insulting, demeaning, hateful, or threatening remarks.\n* Discrimination based on age, disability, gender, nationality, race, religion, sexuality, or similar personal characteristic.\n* Bullying or systematic harassment.\n* Unwelcome sexual advances.\n* Incitement to any of these.",
					"date": "2016-12-10",
					"id": "db0okjz",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TheMerovius",
					"content": "Oh look, someone else [disproved your point for me](https://www.reddit.com/r/golang/comments/5h87u6/proposal_dgryski_for_top_mod/dayhjr6/) (if we don\u0027t want to count the vote count on my original comment as conclusive evidence anyway).",
					"date": "2016-12-08",
					"id": "dayi5nb",
					"isArchived": true,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "mm_5687",
					"content": "I think that person falls under the category of \"people who claim it shouldn\u0027t exist\", rather than disproving my point entirely. I did say that *most* understand that the CoC is a useful tool, not all - some of them are just assholes who the community *would* be better off without.\n\nI think it\u0027s worth pointing out that your posts are probably getting downvoted by two separate groups of people.\n\nThe first is likely the sort of person who posted the comment you linked to, and that\u0027s unfortunate. The second group are likely people who disagree with your comments about the CoC remaining in its current form with the CoC Working Group enforcing it. All of my posts which have suggested keeping the core of the code, and the enforcement being done by /r/golang moderators have had plenty of upvotes, where as people who simply disagree with the CoC would have downvoted them. \n\nThe difference between our point of view is simply one of who enforces the CoC, and as /r/rsc has already pointed out, /r/golang will not be moderated by the CoC Working Group as it will no longer be an official space, so the argument is rather moot.",
					"date": "2016-12-08",
					"id": "daykvyv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; I think it\u0027s worth pointing out that your posts are probably getting downvoted by two separate groups of people.\n\nI think you are overreading the limited data available. In particular:\n\n\u0026gt; All of my posts which have suggested keeping the core of the code, and the enforcement being done by /r/golang moderators have had plenty of upvotes, where as people who simply disagree with the CoC would have downvoted them.\n\nIn my experience, once a comment has reached significant negative view count, the voting behavior of the children deviates significantly from the norm, as the children are hidden by default, so people would need to explicitly search them out. I wouldn\u0027t infer anything from this.\n\n\u0026gt; /r/golang will not be moderated by the CoC Working Group as it will no longer be an official space, so the argument is rather moot.\n\nWell, as my argument is about whether that should be the case, I don\u0027t see how. Note, that this, so far, is a proposal, not a decision (even though it will very likely be implemented).\n\nAnyway. I am going to stay pessimistic, from everything that I\u0027ve seen on reddit so far and the go community in regards to the CoC specifically, that losing the enforcement will likely mean I will contribute much less (if at all) here in the future. It\u0027s bad enough as it is. And I don\u0027t trust redditors, out of experience, to moderate effectively.",
					"date": "2016-12-08",
					"id": "daylqfz",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "mm_5687",
					"content": "\u0026gt; I think you are overreading the limited data available.\n\nIn this thread perhaps, but there\u0027s plenty of discussion in the Future of Golang thread that I started two weeks ago: https://www.reddit.com/r/golang/comments/5eubdp/the_future_of_rgolang/\n\nI\u0027ll point you to this comment thread in particular which discuss the CoC and enforcement:\nhttps://www.reddit.com/r/golang/comments/5eubdp/the_future_of_rgolang/dafpvxy/\n",
					"date": "2016-12-08",
					"id": "daymeh5",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "tv64738",
					"content": "I\u0027m just gonna leave this here.\n\nhttps://groups.google.com/d/msg/golang-nuts/XoOhzUClDPs/bYS9SKY7CAAJ",
					"date": "2016-12-08",
					"id": "dayhmzk",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "TheMerovius",
					"content": "I don\u0027t think Brian is, or was at any point in time, a moderator of this subreddit.",
					"date": "2016-12-08",
					"id": "dayka2x",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mm_5687",
					"content": "Brian was made a moderator 9 days before he made those comments.  He also posted Tweets encouraging the deletion of /r/golang.\n\nAfter making them, some of the community asked him to step down as a moderator and he did: https://twitter.com/bketelsen/status/802319989294399488",
					"date": "2016-12-09",
					"id": "dayoc92",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "TheMerovius",
					"content": "Thanks, I was wrong then.",
					"date": "2016-12-09",
					"id": "daz59oj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SilentWeaponQuietWar",
					"content": "yes yes yes, a million times yes. if there\u0027s even a way to ban /u/bradfitz outright from this subreddit, I wouldn\u0027t argue against it. /s\n\n**edit:** ok, i get it. the intentionally hyperbolic jab wasn\u0027t well received. oh well.",
					"date": "2016-12-08",
					"id": "dayg9ep",
					"isArchived": true,
					"isControversial": false,
					"score": -9
				},
				{
					"author": "bradfitz",
					"content": "That seems a little severe, but I\u0027ll leave that to /u/dgryski.\n\nIt\u0027s true I reacted too quickly without considering how the existing Reddit users would feel. (I naively assumed everybody would be equally offended. Obviously that wasn\u0027t true.)\n",
					"date": "2016-12-08",
					"id": "dayh6bj",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "weberc2",
					"content": "I\u0027m sure you\u0027re the first person to have reacted too quickly on the Internet. /s No hard feelings from me. :)",
					"date": "2016-12-09",
					"id": "daz2yy8",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ansible",
					"content": "The CEO\u0027s behavior was deplorable and juvenile. I don\u0027t think there\u0027s much disagreement there.\n\nAm I ready to completely abandon Reddit because of that?  Not quite yet.\n\nIf people are building a modern, decentralized discussion forum with some of the features current forums like Reddit have (upvoting, moderation, etc., but with the good stuff from NetNews) then I\u0027ll certainly give it a try.",
					"date": "2016-12-08",
					"id": "daynxwk",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "goophr",
					"content": "Why are you still here?",
					"date": "2016-12-14",
					"id": "db63d9m",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-12-09",
					"id": "dayzfpt",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thesilentwitness",
					"content": "You don\u0027t speak for everyone.",
					"date": "2016-12-09",
					"id": "dazc207",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "sethammons",
					"content": "whoa, slow down there boss. Folks make mistakes. /u/bradfitz has added greatly to this subreddit and if he chooses to continue to do so, I welcome his additions. When his assumptions were shown to be invalid, he changed his opinion/suggestion on deleting the subreddit. ",
					"date": "2016-12-09",
					"id": "dayvm6z",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ansible",
					"content": "And what rule of the sub did he violate recently?  Nothing?  I thought so.\n\nYou don\u0027t just ban people because you disagree with them.",
					"date": "2016-12-08",
					"id": "daynqix",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "dgryski",
			"date": "2016-05-01",
			"id": "4h9qjw",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go best practices, six years in",
			"comments": [
				{
					"author": "chewxy",
					"content": "I don\u0027t understand the logging bit. Perhaps the author can chime in? What exactly is so wrong with using log.Printf()...? Why make a Logger object a field of foo? Wouldn\u0027t that just make your foo struct unnecessarily huge, and is rather reminiscent of java style programming?",
					"date": "2016-05-01",
					"id": "d2oxwke",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "helinwang",
					"content": "From my experience: sometime I want to log different module into different files. Pass in logger instance can easily achieve that. Also in case you want to do test and don\u0027t care logging, you can pass in logger which direct to /dev/null.",
					"date": "2016-05-01",
					"id": "d2oyv6r",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "chewxy",
					"content": "that\u0027s an idea I hadn\u0027t considered (logging different packages into different files...). In fact I\u0027m gonna adopt that.. that\u0027s simply a fantastic idea.",
					"date": "2016-05-01",
					"id": "d2ozu26",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Mastermachetier",
					"content": "I am thinking you might also be able to set flags for logging on / off using an logger.. ",
					"date": "2016-05-02",
					"id": "d2ptsy0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "metamatic",
					"content": "If Go\u0027s logging wasn\u0027t so functionality-poor it wouldn\u0027t be an issue. In (say) Java you can easily set up to log different packages into different files, no special coding is required on the part of the package authors, and you don\u0027t need multiple loggers.\n\nI like Go, but the standard logging package is terrible.",
					"date": "2016-05-02",
					"id": "d2ptnfg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "quiI",
					"content": "Logging should be *first class* and if you\u0027re writing a library that logs events you *need* to give consumers the option to perform logging via their own mechanism. What if I dont want to log to stdout but have my own magical way of logging, how can i capture your log events?\n\nIndeed, this is good advice for any programming language. If I\u0027m writing anything of any importance I test what gets logged too. How can I test logging if it\u0027s globally imported?\n\nYou mention it being reminiscent of Java style. For me I\u0027ve had nightmares of careless use of logging from libraries ive had to use in Java/Scala making things hugely annoying and complex *because* the library author just picked an arbitrary way of logging which didn\u0027t work for me. ",
					"date": "2016-05-02",
					"id": "d2pe2ui",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "bigpigfoot",
					"content": "i think he\u0027s basically saying sometimes logging can be enough of an important part of the package that you should make an explicit logger variable or property rather than just calling log.Printf here and there",
					"date": "2016-05-02",
					"id": "d2pd1ck",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "petulant_snowflake",
					"content": "The primary issue is that it\u0027s a global object that other poorly written packages can affect. This means your code may be the end result of some kind of unreproducible behavior because the entire control flow is not within the purport of your application.\n\nStructuring the code as suggested in the article is essentially doing a dependency injection, as opposed to using the global default. Whie using the global default isn\u0027t a big deal, it is very much a no-no (or at least should be) when writing reuseable packages or any kind of production code.",
					"date": "2016-05-02",
					"id": "d2pfjnw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hesdeadjim",
					"content": "Libraries using log.Printf are incredibly tough to work with in a production environment if you want anything more interesting than looking at stderr. Libraries that let you provide a logger API at time of construction are better than log.Printf, but they still fail at letting you include contextual information inside method calls.\n\nWe inject a logging interface into all our methods that take a context.Context object [1]. This allows us to push contextual information onto the stack of context objects, and then when we log we can do it at the point of failure and have access to an immense amount of useful information. Check the attached gist to see an example of how this works in practice [2].\n\nGiven that the context library originated out of Google and is now part of the stdlib in 1.7, I would love to see other libraries embrace it instead of relying on much less flexible solutions.\n\n[1] https://godoc.org/golang.org/x/net/context\n\n[2] https://gist.github.com/justonia/f81eead323d2b23eca1c485ed8e5db5d",
					"date": "2016-05-02",
					"id": "d2psnq7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ImreSamu",
					"content": "HN https://news.ycombinator.com/item?id\u003d11606728",
					"date": "2016-05-01",
					"id": "d2omvab",
					"isArchived": true,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "junajted",
					"content": "good stuff. thanks.",
					"date": "2016-05-02",
					"id": "d2pllpv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mekanikal_keyboard",
					"content": "why do people not check if their pointer receiver is nil?\n\nhttps://play.golang.org/p/2gs7JLoU0r\n\nmy rule is...any pointer in Go passed to a public function can be nil and has to be checked...even receivers",
					"date": "2016-05-01",
					"id": "d2olbfp",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "nilium",
					"content": "What do you do if the receiver is nil? It seems to me that you\u0027d either panic (the runtime will do this for you if you dereference a nil pointer), return an error and then shutdown semi-gracefully because something went very wrong at runtime, or you\u0027d allocate something on the spot (in which case it might be better for the caller and not the receiver to do the nil check, as it wasn\u0027t the receiver\u0027s responsibility to tell you to not dereference nil).\n\nIt seems a little like it would be overly paranoid to have methods check their receivers when the case that a receiver is nil is a failure of the caller or whatever is responsible for it (where a nil receiver isn\u0027t explicitly permitted). And if all you\u0027re doing is panicking, you may as well let the runtime give you the standard error for it.",
					"date": "2016-05-01",
					"id": "d2oq7ys",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "mekanikal_keyboard",
					"content": "but then why check any pointers? why not just panic on every kind of nil pointer? screw unit tests, we\u0027ll do it live!\n\nand what do you mean \"allocate something on the spot\"? that makes no sense in this case\n\nmy point is...the receiver pointer is not special....it\u0027s just another pointer....not sure why it gets a pass on being checked but other arg pointers should be checked?\n\na nil receiver is an error like any other. \n\nnot sure about you, but when I write a public api, I think it is my duty to be \"paranoid\"\n\nnot sure why I am getting downvotes, I am only showing you a consequence of Go\u0027s reflection capabilities (type affinity is sticky)",
					"date": "2016-05-01",
					"id": "d2oroh7",
					"isArchived": true,
					"isControversial": false,
					"score": -9
				},
				{
					"author": "nilium",
					"content": "The way I see it is that you should check pointers where something could be nil. If it shouldn\u0027t be nil but is, it\u0027s a bug, not an error, and it might as well panic. Tests can help you detect these scenarios, and you can just as easily detect if something panics in a test. As a result, you should document where nil is allowed and probably make a note that it\u0027s not allowed unless stated otherwise.\n\nAnd no, the receiver isn\u0027t special, but I\u0027d argue there are situations where checking if it\u0027s nil will only tell you one thing: your program is hosed and you should panic. A nil receiver is an error, but that error might just be the program panicking because you did something it can\u0027t handle.\n\nWhen it comes to public APIs, I don\u0027t think it\u0027s my duty to do anything other than what the documentation says or provides as acceptable use. If I don\u0027t say nil is a valid receiver, then I feel the implication is that nil isn\u0027t a valid receiver.  When you do something outside those bounds, it\u0027s on you if it fails somehow.\n\nAs for downvotes, I didn\u0027t downvote your comments (or anyone else\u0027s), but I would guess it\u0027s partly that your tone — I know, it\u0027s text — comes across as pretty negative and condescending (i.e., \"why do people not…\" can feel like \"I assume you do this, you\u0027re wrong, and I\u0027m right\"), and partly that your stance on this probably isn\u0027t popular (hence why I\u0027ve disagreed with it). I\u0027m sure someone else who actually downvoted you can comment on why, if they want to.",
					"date": "2016-05-01",
					"id": "d2otk9w",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "mekanikal_keyboard",
					"content": "\u0026gt; The way I see it is that you should check pointers where something could be nil. \n\nThat is entirely my point, the pointer receiver has no special status and can be nil like any other pointer\n\nIt really seems like there is a misconception that the pointer receiver is special\n\nA public library in an API should not trigger a detectable panic IMHO...if the caller wants to, that is their decision. You wouldn\u0027t put an os.Exit(1) in a public API would you?",
					"date": "2016-05-01",
					"id": "d2ovrrw",
					"isArchived": true,
					"isControversial": false,
					"score": -4
				},
				{
					"author": "jussij",
					"content": "If you are going to take a quote, then also make sure you include the actual point of that quote which was *if it shouldn\u0027t be nil but is, it\u0027s a bug*.\n\n",
					"date": "2016-05-01",
					"id": "d2owle9",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "mekanikal_keyboard",
					"content": "any uninitialized or wrongly initialized variable is a bug...what is the difference between the pointer receiver and a parameter?\n\nindeed, the pointer receiver *is* a parameter, just one with a different syntax....in any other language it would be \"this\" or \"self\" etc",
					"date": "2016-05-02",
					"id": "d2p1g84",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "jussij",
					"content": "\u0026gt; in any other language it would be \"this\" or \"self\" etc\n\nAnd using your logic that means when writing any non-static method for a C++ class you should always start that method with code like this:\n\n    if (this !\u003d null)\n    {\n         // it is now safe to use this\n         ....\n    }\n\nNow there is nothing stopping you writing code like that, but the point is why do it at all?\n\n\n\n",
					"date": "2016-05-02",
					"id": "d2p316e",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "thockin",
					"content": "If it is not nil you are fine.\n\nIf it is nil but you don\u0027t dereference it, you are fine.\n\nIf it is nil and you do dereference it, you will panic with a trace.\n\nWhat exactly is your check doing that is better than this?",
					"date": "2016-05-01",
					"id": "d2oxp86",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "H3g3m0n",
					"content": "\u0026gt; If it is nil but you don\u0027t dereference it, you are fine.\n\nTo me that sounds like a reasonable argument *for* the explicit check.\n\nFirst, why even have it as a member function if you aren\u0027t using it.\n\nIt might fit a situation where you might possibly dereference it but don\u0027t that time depending on the parameters. Or if it\u0027s an interface and on this particular implementation tge receiver isn\u0027t used.\n\nIn that case it would probably be good to have the explicit check since the code is in a state it shouldn\u0027t be, calling a method on a nil object. I can\u0027t think of a reason why your code should blindly continue since something has gone horribly wrong.",
					"date": "2016-05-02",
					"id": "d2pjpfq",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "thockin",
					"content": "Interfaces are implemented as methods on a type.  Sometimes the method receiver just doesn\u0027t matter.  Besides that, the fact that methods can be called on nil values is documented and (ostensibly) intentional in the language.\n\nYou are free to defend against it (and pollute your API with otherwise-unneeded errors), but it might be surprising to users who are actually versed in the language.",
					"date": "2016-05-02",
					"id": "d2ptqcm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mekanikal_keyboard",
					"content": "not exploding someone else\u0027s code\n\nlibraries should not be triggering a panic (or printing to stdout, or exiting), that is a caller decision",
					"date": "2016-05-02",
					"id": "d2p1ii6",
					"isArchived": true,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "thockin",
					"content": "So every caller has to handle the equivalent of a nil pointer exception, even when the method would otherwise not return any error at all? \n\nPuke.\n\nI don\u0027t think it is useful at all, nor is it idiomatic.  But if it makes you sleep better, Go Nuts. :)",
					"date": "2016-05-02",
					"id": "d2p3vro",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "icholy",
					"content": "This is a dumb rule. If I pass a nil pointer to something that needs a value, I don\u0027t want to see some crappy \"receiver was nil error\" bubble up through my error handler chain. I want a stack trace that points me to where it happened.",
					"date": "2016-05-01",
					"id": "d2ozqi0",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "mekanikal_keyboard",
					"content": "then why not write apis that panic on every error? what is the difference between checking the receiver or any other parameter?",
					"date": "2016-05-02",
					"id": "d2p1ob6",
					"isArchived": true,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "icholy",
					"content": "are you stupid? do you honestly think that\u0027s a good argument?",
					"date": "2016-05-02",
					"id": "d2p70m7",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "fenduru",
					"content": "If only there was a way to solve this problem. If only we had a program that could do static analysis of our code. Maybe something that checks that types are correct... ",
					"date": "2016-05-01",
					"id": "d2olx94",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "mekanikal_keyboard",
					"content": "the type is correct, I can nil a pointer to type T and still call methods on it....",
					"date": "2016-05-01",
					"id": "d2oopdr",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "fenduru",
					"content": "Only due to unfortunate design choices",
					"date": "2016-05-01",
					"id": "d2op4sh",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "mekanikal_keyboard",
					"content": "I agree, but anyone two or more years into Go....especially someone touting best practices....should be doing these checks",
					"date": "2016-05-01",
					"id": "d2op70i",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "jrv",
					"content": "No. They\u0027re a bad practice, as explained well by others in this thread.",
					"date": "2016-05-02",
					"id": "d2p0q6m",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "mekanikal_keyboard",
					"content": "no, the other coders looked at my original sample and were genuinely surprised that a nil pointer could reference methods, so everyone is downvoting because their ninja rockstar status was temporarily threatened",
					"date": "2016-05-02",
					"id": "d2p1mam",
					"isArchived": true,
					"isControversial": false,
					"score": -7
				},
				{
					"author": "icholy",
					"content": "you\u0027re getting downvoted because you\u0027re ~~dumb~~ wrong.\n\nedit: wording",
					"date": "2016-05-02",
					"id": "d2p79e8",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "kiddcode",
					"content": "Better yet, why doesn\u0027t Go allow me to declare a pointer type that can\u0027t be nil?",
					"date": "2016-05-01",
					"id": "d2ozi2b",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-05-02",
					"id": "d2p0pr2",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kiddcode",
					"content": "Nice",
					"date": "2016-05-02",
					"id": "d2p1uzp",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "metamatic",
					"content": "I suspect the Go developers\u0027 answer would be: if you\u0027re checking to see if pointers are nil, you\u0027re doing it wrong. i.e. The existing pointer type is effectively a pointer that should never be nil.\n\nWhen you obtain a pointer from a function, that pointer should never be nil -- unless the function returned an `error` value to indicate that an error occurred.\n\nSimilarly, if you\u0027re passing a pointer _into_ a function, then that pointer should never be nil. If it is, you\u0027ve done something wrong, something very basic: Either you failed to check a returned `error` value, or you constructed a pointer yourself incorrectly.\n\nSo sure, it would be nice if the language had better support for catching these kinds of errors... but I think Go pointers are really already \"pointer that should never be nil\".",
					"date": "2016-05-02",
					"id": "d2pu1ov",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "Orange_Tux",
			"date": "2017-08-15",
			"id": "6tu02e",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "rustgo: calling Rust from Go with near-zero overhead",
			"comments": [
				{
					"author": "rat9988",
					"content": "As someone who uses both, I\u0027m very excited. Maybe someday I can use go as high level language and rust as a lower level for the most critical part. Instead of Python/C, there would be Go/Rust, performance and safety. ",
					"date": "2017-08-15",
					"id": "dlnqteg",
					"isArchived": true,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "shriek",
					"content": "I\u0027m guessing network related stuff in go and system level in rust? As someone who\u0027s interested in both languages I\u0027m curious how you got started in both.",
					"date": "2017-08-16",
					"id": "dloqegp",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "rat9988",
					"content": "I\u0027m doing some freelancing beside my PHD. My client want something blazing fast (or at least a responsive ui). I mostly make webapps.  \nUsually it\u0027s just some database fetching but sometimes it can get a bit cpu intensive. ",
					"date": "2017-08-16",
					"id": "dlp4k0f",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-16",
					"id": "dlp40ja",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tv64738",
					"content": "Fixed link: https://github.com/PyO3",
					"date": "2017-08-16",
					"id": "dlq6lcb",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rat9988",
					"content": "Isn\u0027t it technically a rust extension for Python? I have been following closely this project anyway and hope to see real world examples in it soon :)  ",
					"date": "2017-08-16",
					"id": "dlp4hep",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-16",
					"id": "dlp4tg4",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rat9988",
					"content": "I got it, I just wanted to nitpick a bit :D",
					"date": "2017-08-16",
					"id": "dlp58uq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jocull",
					"content": "This is full hipster. Amazing. ",
					"date": "2017-08-15",
					"id": "dlnnedg",
					"isArchived": true,
					"isControversial": false,
					"score": 36
				},
				{
					"author": "ihsw",
					"content": "Actually it\u0027s safer C functions.",
					"date": "2017-08-15",
					"id": "dlnz4xt",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "[deleted]",
					"content": "Plus a more efficient way of calling.",
					"date": "2017-08-15",
					"id": "dlnzwtr",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Killing_Spark",
					"content": "It is full amazing. Hipster. ",
					"date": "2017-08-16",
					"id": "dloyhzt",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "PaluMacil",
					"content": "This is very interesting. Thanks for the article!",
					"date": "2017-08-15",
					"id": "dlnj3zu",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "hajimehoshi",
					"content": "Awesome! Just out of curiosity, is it possible to do the same thing with C instead of Rust?",
					"date": "2017-08-15",
					"id": "dlnwwlj",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "FiloSottile",
					"content": "Totally. Anything that can compile into a static self-contained `.a`/`.o` will do, really.",
					"date": "2017-08-15",
					"id": "dlo5xyl",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "dm319",
					"content": "yes, you want CGo.\n\nbut remember the wise proverb of Pike - \"CGo is not Go\"",
					"date": "2017-08-15",
					"id": "dlnzidz",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "hajimehoshi",
					"content": "I mean I was wondering if it is possible to use C without Cgo in the same way.",
					"date": "2017-08-15",
					"id": "dlnzlr5",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "dm319",
					"content": "sorry my bad!",
					"date": "2017-08-15",
					"id": "dlo0jsg",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "A few issues:\n\n1. You can use a .syso file to automatically include native code. No need for a makefile. See https://github.com/badgerodon/quadprog?files\u003d1 for an example\n2. The cgo overhead is actually necessary. Stack conventions are different (which he mentions) but there\u0027s also a lot of subtlety around goroutines...\n3. Go defined a memory model that allows pointers to move. If you pass pointers to foreign functions your code may break in a future version of Go. Cgo warns you if you do this.\n4. Its not obvious that the simple kinds of functions that lend themselves to this sort of optimization are going to be faster in Rust. Rust has more type safety, but really the only thing here that might help is it\u0027s compiler, which is very sophisticated and may generate better code. We need to stop thinking of languages at various levels. Go code is not automatically 2x slower than Rust code.\n5. Assembly in most of these places is there for a reason. It\u0027s usually to take advantage of cpu features not available in the regular language, though there are some very optimized routines as well. Neither of these are likely to be served by any high level language.",
					"date": "2017-08-16",
					"id": "dlp1tcr",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "FiloSottile",
					"content": "1: I explain in passing that I can\u0027t `import \"C\"` or I can\u0027t write Go assembly, and without it I think the .syso won\u0027t be included.\n\n2,3: I\u0027m very well aware of the subtleties and difference in constraints of cgo and assembly.I gave a talk about it at GopherCon 2016. This will work for pure functions that I describe.\n\n4,5: curve25519-dalek is faster because a number of reasons that are not reproducible in pure Go, but is pure Rust.",
					"date": "2017-08-16",
					"id": "dlp8pi5",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "This subreddit... man I just don\u0027t get it. Why am I being downvoted? Maybe its time to move on.",
					"date": "2017-08-16",
					"id": "dlpa47j",
					"isArchived": true,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "marrakech07",
					"content": "I\u0027ve heard Go isn\u0027t great for OS development since it requires garbage collection, but could this potentially bridge that gap and allow a kernel written in mostly Go?",
					"date": "2017-08-16",
					"id": "dlolzkj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Killing_Spark",
					"content": "Not really. The only thing this really achieves (while still amazing!) is to call functions from arbitrary machine code. The garbage collection would still exist. ",
					"date": "2017-08-16",
					"id": "dlozdx1",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-08-15",
					"id": "dlnzz76",
					"isArchived": true,
					"isControversial": false,
					"score": -32
				},
				{
					"author": "MSleepyPanda",
					"content": "\u0026gt; interpreted front end typeless syntax\n\nWhat kind of sorcery is this?\n\nIn case you meant to describe Rust as an interpreted and typeless language, you would be wrong. Strong typesystem and compiled language.",
					"date": "2017-08-15",
					"id": "dlo2bm2",
					"isArchived": true,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "CountyMcCounterson",
					"content": "I can\u0027t paste the example program on their homepage because their website manages to make their text all appear as a single unicode character when copied but look at that syntax and try and tell me that\u0027s not the kind of nonsense a typeless interpreted language would have.\n\nIt looks like a worse version of javascript.",
					"date": "2017-08-15",
					"id": "dlo2mhr",
					"isArchived": true,
					"isControversial": false,
					"score": -18
				},
				{
					"author": "infogulch",
					"content": "Rust has an extremely strong, powerful, static type system. Just because the type names themselves aren\u0027t repetitively shoved down your eye sockets doesn\u0027t mean they\u0027re not there.",
					"date": "2017-08-15",
					"id": "dlo5n5d",
					"isArchived": true,
					"isControversial": false,
					"score": 38
				},
				{
					"author": "HectorJ",
					"content": "This example?\n\n    fn main() {\n        let greetings \u003d [\"Hello\", \"Hola\", \"Bonjour\",\n                         \"Ciao\", \"こんにちは\", \"안녕하세요\",\n                         \"Cześć\", \"Olá\", \"Здравствуйте\",\n                         \"Chào bạn\", \"您好\"];\n    \n        for (num, greeting) in greetings.iter().enumerate() {\n            print!(\"{} : \", greeting);\n            match num {\n                0 \u003d\u0026gt;  println!(\"This code is editable and runnable!\"),\n                1 \u003d\u0026gt;  println!(\"¡Este código es editable y ejecutable!\"),\n                2 \u003d\u0026gt;  println!(\"Ce code est modifiable et exécutable!\"),\n                3 \u003d\u0026gt;  println!(\"Questo codice è modificabile ed eseguibile!\"),\n                4 \u003d\u0026gt;  println!(\"このコードは編集して実行出来ます！\"),\n                5 \u003d\u0026gt;  println!(\"여기에서 코드를 수정하고 실행할 수 있습니다!\"),\n                6 \u003d\u0026gt;  println!(\"Ten kod można edytować oraz uruchomić!\"),\n                7 \u003d\u0026gt;  println!(\"Esse código é editável e executável!\"),\n                8 \u003d\u0026gt;  println!(\"Этот код можно отредактировать и запустить!\"),\n                9 \u003d\u0026gt;  println!(\"Bạn có thể edit và run code trực tiếp!\"),\n                10 \u003d\u0026gt;  println!(\"这段代码是可以编辑并且能够运行的！\"),\n                _ \u003d\u0026gt;  {},\n            }\n        }\n    }",
					"date": "2017-08-15",
					"id": "dlo5rq6",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "MSleepyPanda",
					"content": "Take an actual look at the language, it is compiled, not interpreted. It is totally _not_ like javascript. Here is a [playground version](https://play.rust-lang.org/?gist\u003df02308edfa28f4828e23fd607b0e030c\u0026amp;version\u003dstable) of the example code on the frontpage, you can run it or view the assembler by clicking the button on the top left corner.\n\nI, personally, really like it because of its strong typesystem.\n\nEdit/Clarification: I inked to the playground because he wrote about the example on the frontpage, not meant as an ad :)",
					"date": "2017-08-15",
					"id": "dlo36g5",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "\u0026gt; look at that syntax and try and tell me that\u0027s not the kind of nonsense a typeless interpreted language would have.\n\nIt\u0027s not the kind of nonsense  a typeless interpreted language would have. You\u0027re just completely unfamiliar with Rust and probably don\u0027t know what type inference is.\n",
					"date": "2017-08-16",
					"id": "dlp65ta",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "CountyMcCounterson",
					"content": "Or you\u0027re a meme developer, I wonder which one is more likely",
					"date": "2017-08-16",
					"id": "dlp7qtr",
					"isArchived": true,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "A what?",
					"date": "2017-08-16",
					"id": "dlp99rs",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "BlackReape_r",
					"content": "Why you have to be so salty instead of just having a normal discussion? You are more of a \"meme developer\" than everyone else here...",
					"date": "2017-08-16",
					"id": "dlpc2xs",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "ShdwPrince",
					"content": "I think you are talking about the fact that you aren\u0027t required to point types for every single variable. \n\nThe matter of fact is that everything is statically typed, it\u0027s just that compiler at compile-time selects the right type for the variable to spare you the typing. \n\nFor example if you declare something as let x \u003d \"Foo\"; it is pretty obvious that it\u0027s a string, so why bother typing let x: \u0026amp;str \u003d \"Foo\" when compiler can do that for you? ",
					"date": "2017-08-16",
					"id": "dlppwdi",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "winger_sendon",
					"content": "It\u0027s called type inference dear",
					"date": "2017-08-16",
					"id": "dlppvag",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Emacs24",
					"content": "Rust syntax is unfortunate indeed, but it is actually one of the most strict languages available. Compiled rust program is practically working program.",
					"date": "2017-08-16",
					"id": "dlq5pd8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "stone_henge",
					"content": "\u0026gt; Compiled rust program is practically working program.\n\nAs a user of some compiled rust program let me just disagree there. The advanced type system and borrowing semantics of Rust prevent a certain category of bugs. For any non-trivial program this category of problems is only a subset of those you\u0027ll definitely run into.",
					"date": "2017-08-17",
					"id": "dlqo3ki",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "\u0026gt; Compiled rust program is practically working program.\n\n    thread \u0027main\u0027 panicked at \u0027called `Option::unwrap()` on a `None` value\u0027, /checkout/src/libcore/option.rs:335\n    note: Run with `RUST_BACKTRACE\u003d1` for a backtrace.",
					"date": "2017-08-17",
					"id": "dlqwmdl",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Emacs24",
					"content": "Well, it least it had potential to be reliable, before someone decided it is a good idea to make unsafe shortcut.\nI cannot say I am surprised: I see too much hipsters around Rust a too much attempt to include wannabe features in the language, just like these poorly controlable functional\n\n    map(func, list) -\u0026gt; list\n\nor\n\n    filter(func, list) -\u0026gt; list\n\nAlso, direct adaption of ADT for error and optional states made reability a lot worse than it could be (without losing type safety) - pattern matching is too verbose. Personally, I believe the Rust is rather dead than alive, \"thanks\" to mindless syntax choices and poor decisions in stdlib like one you have shown.",
					"date": "2017-08-17",
					"id": "dlqxyu5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "Well, `unwrap` et al are kind of evil, but necessary IMHO. How else do you propose to handle a situation, where you encounter an error but can\u0027t return a `Result` ?\n\nEven Haskell has an equivalent of `unwrap`/`panic` AFAIK.\n",
					"date": "2017-08-17",
					"id": "dlr3jyi",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "winger_sendon",
					"content": "Bubble it up? ",
					"date": "2017-08-17",
					"id": "dlrkkrp",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "\u0026gt; How else do you propose to handle a situation, where you encounter an error but can\u0027t return a `Result` ?\n",
					"date": "2017-08-24",
					"id": "dm2mg4o",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "winger_sendon",
					"content": "Oh. I misread it. Why can\u0027t u return a result? ",
					"date": "2017-08-24",
					"id": "dm2rvw3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "Well, there are situations where it\u0027s not possible for a function to return a `Result`. Here\u0027s a few off the top of my head:\n\n- top-level function of a thread\n- functions executed asynchronously (in various ways)\n- arithmetic operators (panic on overflow)\n- many iterator member functions\n\nArguably all of the above _could_ technicaly be converted to `Result` returning functions but at the cost of lower convenience/readability and higher code verbosity...\n",
					"date": "2017-08-24",
					"id": "dm2svvk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "btibi",
					"content": "Well, that\u0027s a good point. However, it does matter whether you can find these kind of errors with grepping for `unsafe/unwrap` or checking all dereferencing whether it\u0027s safe or not.",
					"date": "2017-08-17",
					"id": "dlr1y50",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "beeker1121",
			"date": "2017-04-03",
			"id": "63a6qo",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "Hi Everyone,\n\nA requirement of my new startup was eventually building our own web crawler. I\u0027ve been reading about it for quite awhile now, seeing how others have solved the problem of performing extremely broad web crawls. Very recently too, I even tried using the popular [Scrapy](https://github.com/scrapy/scrapy) crawler, but it just didn\u0027t meet our goals. Apache Nutch is widely known, but is complicated to set up and [requires a crazy amount of disk space and memory](https://wiki.apache.org/nutch/HardwareRequirements), among other issues. [Gocrawl](https://github.com/PuerkitoBio/gocrawl) was another option and it\u0027s coded in Go, but it\u0027s suited more for depth-first crawls.\n\nWe wanted a crawler that could:\n\n* Perform a true [BFS](https://en.wikipedia.org/wiki/Breadth-first_search) (Breadth-First Search) crawl of the web\n* Crawl billions of web pages on a single machine, with 1 (or more) CPUs, using only a few GB of memory\n* Use the disk for the entire URL queue while remaining performant, so the only limitation of crawl reach is disk space (much cheaper than memory)\n* Crawl concurrently\n* Crawl politely\n\nSo, after spending a long time learning Go and doing some groundwork like [Goque](https://github.com/beeker1121/goque), we now have our own crawler built 100% in Go that meets these goals.\n\nHere are the current stats of it running on a machine with 1 vCPU, 3.75GB of RAM, 1TB of disk space, running ~10 regular expression on 512KB of data or less: http://i.imgur.com/H33JYCD.png\n\nMy question is, how much interest is there in us open sourcing this crawler? I\u0027m also thinking of writing a post about this on our blog, just detailing how it works.\n\nIf this is something you would be interested, let us know by upvoting, commenting, or both!",
			"title": "Open sourcing our web crawler?",
			"comments": [
				{
					"author": "Patatatarte",
					"content": "The community will always benefit from your work and the inverse is likely to be true. ",
					"date": "2017-04-03",
					"id": "dfskdyq",
					"isArchived": true,
					"isControversial": false,
					"score": 52
				},
				{
					"author": "bkeroack",
					"content": "I\u0027m a huge FOSS advocate, but this is clearly an address-harvesting crawler for spammers. I don\u0027t see how supporting this will benefit the community.",
					"date": "2017-04-04",
					"id": "dftgn7w",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Veonik",
					"content": "So would you say that we should censor knowledge because it might be misused?",
					"date": "2017-04-04",
					"id": "dftnkj0",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "mwholt",
					"content": "I\u0027d like to see the code powering email harvesters, they\u0027re going to run either way.",
					"date": "2017-04-04",
					"id": "dfto4ix",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "unimportant1234567",
					"content": "I would use something like this for general web archiving and curation purposes. I bookmark sites and they die and I lose information because the site is gone. This may be a great tool for this use case.\n",
					"date": "2017-04-04",
					"id": "dftlv2z",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "jerf",
					"content": "The web crawler is the hard part. Extracting email addresses out is like three lines attached to the crawler at the end. Even if that is what they happen to using it for, the crawler itself may still be useful.",
					"date": "2017-04-04",
					"id": "dftqqfd",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "nycalibjj",
					"content": "\"Emails found\" implies that this is an email address harvesting spambot. ",
					"date": "2017-04-04",
					"id": "dft9960",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "Yojihito",
					"content": "Which would explain the regex stuff in the description.",
					"date": "2017-04-04",
					"id": "dftg3fp",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Mr_Psmith",
					"content": "Yes, by all means! Would love to read your blog post as well.\n",
					"date": "2017-04-03",
					"id": "dfskfvo",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "Traim",
					"content": "Blog post would really be appreciated. Currently I personally will not use the crawler but maybe in the future. ",
					"date": "2017-04-04",
					"id": "dftktte",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "morethanaprogrammer",
					"content": "Would enjoy seeing the process as well",
					"date": "2017-04-04",
					"id": "dfsn2pd",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "lluad",
					"content": "I don\u0027t need a web crawler, but I\u0027m still interested in seeing what approaches you used.",
					"date": "2017-04-04",
					"id": "dfss5v7",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "thesilentwitness",
					"content": "I\u0027m curious why you would ask if you should open source it instead of just open sourcing it and then linking to it?",
					"date": "2017-04-04",
					"id": "dft4foy",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "unimportant1234567",
					"content": "Very interested in this type of work and article. Please let us see it :)",
					"date": "2017-04-04",
					"id": "dfst7po",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "bateller",
					"content": "Please write this up. I\u0027d find this very useful.",
					"date": "2017-04-04",
					"id": "dfsva6a",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "pandawithpie",
					"content": "Does your crawler deal with client-side rendered pages (e.g. react, angular)? I\u0027ve found that there\u0027s a lot of complexity related to rendering these pages before saving them to disk. \n\nCurious to know if you managed to solve this! ",
					"date": "2017-04-04",
					"id": "dft23a0",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Yojihito",
					"content": "A crawler in pure Go can\u0027t deal with those, no Javascript \u003d no client-side rendering.\n\nYou only get the html code.",
					"date": "2017-04-04",
					"id": "dftg0qg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mwholt",
					"content": "That\u0027s not _entirely_ true: https://github.com/robertkrimen/otto",
					"date": "2017-04-04",
					"id": "dfto5ts",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "robertmeta",
					"content": "There are multiple javascript engines for Go. ",
					"date": "2017-04-05",
					"id": "dfuahck",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "Do you have a list? I need a replacement for PhantomJS to execute JS on crawled pages.",
					"date": "2017-04-05",
					"id": "dfucvbd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "PaulCapestany",
					"content": "https://www.reddit.com/r/golang/comments/63a6qo/open_sourcing_our_web_crawler/dfujovz/",
					"date": "2017-04-05",
					"id": "dfujpl4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "PaulCapestany",
					"content": "Not OP, but https://github.com/knq/chromedp ",
					"date": "2017-04-05",
					"id": "dfujovz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "iamafuckingrobot",
					"content": "Yes I\u0027m very interested! Please keep us updated.\n\nEdit: I\u0027ve been working on a very similar solution, essentially an alternative to Nutch, for over a year as my FT job. Unfortunately not in Go, but you can see why I\u0027m interested.",
					"date": "2017-04-04",
					"id": "dfsti5j",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "UnchartedFr",
					"content": "I\u0027m interested !\nSince i\u0027m a heavy user of scrapy, I feel that  it has too many limitations because of our needs and was thinking to migrate to golang too.\nDo you handle Xpath like scrapy ?",
					"date": "2017-04-04",
					"id": "dft1rgs",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dAnjou",
					"content": "What are those limitations of Scrapy? Last time I used it it seemed very flexible.",
					"date": "2017-04-04",
					"id": "dft2s0x",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Asti_",
					"content": "Please write it up. I love learning from people who use Go to solve actual problems and not just the basic \"We are going to create a tasks app...\" form. Great job.",
					"date": "2017-04-04",
					"id": "dfsspi1",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Southclaw",
					"content": "I was actually thinking of writing a crawler in Go recently, this looks interesting so I\u0027d say definitely open source it!",
					"date": "2017-04-04",
					"id": "dft2ke6",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "BestKarmaEver",
					"content": "I know i would be very interested in the way it works",
					"date": "2017-04-04",
					"id": "dfsvpo8",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "chmouelb",
					"content": "I\u0027ll definitely be interested to look how this is be implemented ",
					"date": "2017-04-04",
					"id": "dft694d",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "shazow",
					"content": "Sounds like a great codebase with lots of interesting things to learn from. I\u0027d love to read through it, and would definitely contribute back if I used it. Please open source it sooner than later. :)",
					"date": "2017-04-04",
					"id": "dfteocx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "sarcasmkills",
					"content": "Open source! Sounds awesome!",
					"date": "2017-04-04",
					"id": "dftzsu6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Asdayasman",
					"content": "Not being super comfortable with reading Go code yet, I\u0027m always down to read a writeup.",
					"date": "2017-04-04",
					"id": "dfu7dsv",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bobcrotch",
					"content": "I know some people mentioned this could or maybe is used to harvest email addresses for spam lists and that some other people would use a crawler for archival purposes.\n\nWhat are common use cases other than that for a web crawler? Archival and malice are covered. Soo, generating data sets? I really don\u0027t see how it would be useful other than a fun way to get a lot of data to play with.",
					"date": "2017-04-05",
					"id": "dfuqrdn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "itsamemmario",
					"content": "Please do!",
					"date": "2017-04-04",
					"id": "dft3hz5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "matiasbaruch",
					"content": "Sounds interesting!",
					"date": "2017-04-04",
					"id": "dft7xp0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "I\u0027ve build my own crawler as a side project in the office in go but it\u0027s limited (by choice) to crawl a single domain and get all links, status codes and link sources in a .csv file.\n\nI would be very interested in your crawler.\n\nWhat is your crawler crawling? What do you need 1TB full of links for?",
					"date": "2017-04-04",
					"id": "dftfwyx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "robertmeta",
					"content": "As someone in love with Goque -- please keep open sourcing stuff!  I currently do a small bit of scraping (also BFS) with regexp / xpath extraction but would always love a better tool. ",
					"date": "2017-04-05",
					"id": "dfvgiu9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "txt_input",
					"content": "Are there any updates?\nYou mentioned Gocrawl can only do depth-first and you choose to do a BFS, what is the difference between both?",
					"date": "2017-04-19",
					"id": "dghkwhm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "dgryski",
			"date": "2017-12-04",
			"id": "7hih9f",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Debugging an evil Go runtime bug",
			"comments": [
				{
					"author": "qu33ksilver",
					"content": "This is some dedication to debugging. \n\nIf I had to build the kernel that many times with different configs to find out exactly which flag caused the issue, I might as well give up. My laptop has only 4 cores though, OP\u0027s laptop had much more. :P",
					"date": "2017-12-04",
					"id": "dqrdeak",
					"isArchived": false,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "gen2brain",
					"content": "He uses Gentoo, it means he is building kernel with customized config, and not with everything on by default. On my laptop with 4 cores it needs aprox 15min to rebuild kernel.",
					"date": "2017-12-04",
					"id": "dqrv34d",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "slashclee",
					"content": "On my Ryzen 5 1600X, building the defconfig kernel takes less than two minutes. It\u0027s kind of awesome.",
					"date": "2017-12-05",
					"id": "dqsjf4h",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "marcan42",
					"content": "My laptop has 4 cores too (8 threads). It\u0027s just a mobile i7-3820QM, nothing extreme (and a good 5 years old). As I noted, after stripping down the kernel to the bare minimum for the tests, it took less than a minute for a full clean build.",
					"date": "2017-12-05",
					"id": "dqtemls",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "qu33ksilver",
					"content": "Less than a minute !! Didn\u0027t realize stripping down the config had such a drastic effect. \n\nAnyways, those are some mad debugging skills you have. Thanks for the post. I enjoyed reading it very much.",
					"date": "2017-12-06",
					"id": "dqu29xz",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Spirit_of_Stallman",
					"content": "It\u0027s an awesome article. Thanks for sharing.",
					"date": "2017-12-04",
					"id": "dqr8tl9",
					"isArchived": false,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "geigenmusikant",
					"content": "Wow that’s incredible. How do you even gain such insights? I don’t understand half of the stuff he’s talking about and I have certainly never met anyone working on that level (as in finding false bits in memory, compiling kernels, debugging assembly, ...).\n\nI’m genuinely interested in what I’d have to do to gain a bigger understanding in this, because right now I have no idea where to start.",
					"date": "2017-12-04",
					"id": "dqrs603",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "dasacc22",
					"content": "First, recognize a loss of productivity in the pursuit of education, don\u0027t get upset when your computer doesn\u0027t boot your custom kernel or your assembly finally compiles but runs slower and doesn\u0027t work on all hardware.\n\nI\u0027d start with compiling your own kernel. it\u0027s been a while but there\u0027s a helpful ncurses command that will run through every possible kernel config option. Start by removing support for hardware not even in your system. If you don\u0027t know what an option is for, look it up, read about it.\n\nFor assembly, Go has facilities for dumping the assembly it generates, and there\u0027s some tutorials out there for getting started writing assembly for Go. Start with something basic, like needlessly squeezing a little extra performance out of some method and then work your way up.\n\nAs for the memory bit, learn about the hardware your using and what people do to test, replace, fix stuff as a hardware technician. MemTest is really popular for making sure there\u0027s no hardware issues as a low effort first response when someone drops a \"broken\" computer at your desk and asks you to fix it as a hardware technician.\n\nBe realistic about the timeframe to learn these things. Make it a ten year plan, where after, you can see how far you\u0027ve come. Take opportunities to teach others what you\u0027ve learned along the way, that\u0027s a great way to review the basics you think you know and take for granted.\n\nAlso, have fun.",
					"date": "2017-12-04",
					"id": "dqrtxon",
					"isArchived": false,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "geigenmusikant",
					"content": "Oh boy, that’s a long way to go. I’ll develop a roadmap for an optimal learning curve :)\n\nThanks for your tips!",
					"date": "2017-12-05",
					"id": "dqs0083",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hobbified",
					"content": "Do stuff, pay attention to what you\u0027re doing, ask questions, play around, read. No magic tricks, you just need a strong enough interest to sink lots and lots of time into it.",
					"date": "2017-12-05",
					"id": "dqseqat",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ferreirix",
					"content": "Mind-blowing the amount of knowledge in that brain !",
					"date": "2017-12-04",
					"id": "dqrrpmv",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Phalangers",
					"content": "Great read, thanks for taking the time to make a write up !",
					"date": "2017-12-06",
					"id": "dquvhyn",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "shovelpost",
			"date": "2017-09-29",
			"id": "739bgd",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "A gopher powered light bulb!",
			"comments": [
				{
					"author": "ChristophBerger",
					"content": "Real Gophers(TM) don\u0027t break into a sweat about generics (or rather, the lack of).",
					"date": "2017-09-30",
					"id": "dnpngoa",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "shovelpost",
					"content": "But she\u0027s only a poor young gopher...",
					"date": "2017-09-30",
					"id": "dnpvf4l",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "BurpsWangy",
					"content": "This is getting old...",
					"date": "2017-09-29",
					"id": "dnonym8",
					"isArchived": true,
					"isControversial": false,
					"score": 37
				},
				{
					"author": "lost_in_africa",
					"content": "so, your\u0027e saying this joke is becoming generic?",
					"date": "2017-09-29",
					"id": "dnoy7ny",
					"isArchived": true,
					"isControversial": false,
					"score": 89
				},
				{
					"author": "GummyBearsGoneWild",
					"content": "I still laugh",
					"date": "2017-09-29",
					"id": "dnowc4z",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "gnu-user",
					"content": "These posts are funny, made my day.",
					"date": "2017-09-30",
					"id": "dnpco8i",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "xbooing",
					"content": "And substitute generics with \"sense of humor\" for applicability with its users.",
					"date": "2017-09-30",
					"id": "dnpif6j",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "chowychow",
					"content": "Hilarious seeing this meme here",
					"date": "2017-09-29",
					"id": "dnol379",
					"isArchived": true,
					"isControversial": true,
					"score": 5
				},
				{
					"author": "shovelpost",
					"content": "Proof that we gophers have a good sense of humor! \\ʕ◔ϖ◔ʔ/ ",
					"date": "2017-09-29",
					"id": "dnooesk",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "manghoti",
					"content": "this thread is... maybe... not panning that out.",
					"date": "2017-09-29",
					"id": "dnp3vrg",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TheBallPeenHammerer",
					"content": "Yeah I dunno man, the people in this thread seem to be lacking one... Rob probably shat on /r/golang for good reason. \n\nEdit: this comment is liiiiiies",
					"date": "2017-09-30",
					"id": "dnp5bum",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "shovelpost",
					"content": "\u0026gt; Rob probably shat on /r/golang for good reason.\n\nI don\u0027t know what you are talking about. /u/robpike comments on this subreddit [every now and then](https://www.reddit.com/user/robpike) and gives very insightful answers.",
					"date": "2017-09-30",
					"id": "dnpf5ma",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ChristophBerger",
					"content": "Maybe /u/TheBallPeenHammerer meant Brad Fitzpatrick\u0027s suggestion to shut down /r/golang but this was because some Reddit CEO did something extremely stupid (I believe he faked or deleted comments, can\u0027t remember), and Brad did not want to have Go associated with Reddit at all anymore. However, this happened quite some time ago, and I believe no one still cares (or even remembers). ",
					"date": "2017-09-30",
					"id": "dnphvjo",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-09-29",
					"id": "dnomc5w",
					"isArchived": true,
					"isControversial": false,
					"score": -11
				},
				{
					"author": "Xychologist",
					"content": "Reddit is free, and you get what you pay for.",
					"date": "2017-09-29",
					"id": "dnoxfp5",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-09-29",
					"id": "dnonvib",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "Really? I thought it was hilarious. Oh well ¯\\\\\\_(ツ)_/¯",
					"date": "2017-09-29",
					"id": "dnooilm",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-09-29",
					"id": "dnom9ii",
					"isArchived": true,
					"isControversial": true,
					"score": -7
				},
				{
					"author": "GummyBearsGoneWild",
					"content": "Is the concept of a meme new to you? Is this your first time on the internet?",
					"date": "2017-09-29",
					"id": "dnower7",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "markharrisuk99",
					"content": "It\u0027s definitely his first time on the internet LOL",
					"date": "2017-10-01",
					"id": "dnrcwdh",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "I never claimed I drew the original and reddit doesn\u0027t really have a good way to give credit when you upload an image.",
					"date": "2017-09-29",
					"id": "dnoolgq",
					"isArchived": true,
					"isControversial": true,
					"score": 8
				},
				{
					"author": "fungussa",
					"content": "Ignore the detractors, great post!",
					"date": "2017-09-29",
					"id": "dnov34d",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "ROFLLOLSTER",
					"content": "You can comment...",
					"date": "2017-09-29",
					"id": "dnor1q4",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "shovelpost",
					"content": "that\u0027s true but I didn\u0027t bother. It\u0027s a well known meme",
					"date": "2017-09-29",
					"id": "dnos6j9",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-09-29",
					"id": "dnorzsb",
					"isArchived": true,
					"isControversial": false,
					"score": -27
				},
				{
					"author": "shovelpost",
					"content": "Chill mate it\u0027s just a meme for laughs :)",
					"date": "2017-09-29",
					"id": "dnos7wp",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-10-02",
					"id": "dnt9fs5",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "shovelpost",
					"content": "Grow a funny bone pal. ;D",
					"date": "2017-10-02",
					"id": "dntb7ud",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-10-02",
					"id": "dntnpk8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "Too bad the facts do not agree with you. ;D",
					"date": "2017-10-03",
					"id": "dnu1anf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-10-03",
					"id": "dnv3qau",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "Just check the upvotes.",
					"date": "2017-10-04",
					"id": "dnvvh7p",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "markharrisuk99",
					"content": "wow showing YOUR true colors here!",
					"date": "2017-10-01",
					"id": "dnrdt5o",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "digitalyatri",
			"date": "2015-03-05",
			"id": "2y0fqb",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "The Go Programming Language by Brian W. Kernighan, Alan Donovan",
			"comments": [
				{
					"author": "Ainar-G",
					"content": "We had K\u0026amp;R C, and now we\u0027re going to have K\u0026amp;D Go? Sounds great, if you ask me.",
					"date": "2015-03-05",
					"id": "cp52j1v",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "TTSDA",
					"content": "very good downtempo-dub **and** computer science? nice!",
					"date": "2015-03-06",
					"id": "cp62n08",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "OMG. SHUT UP AND TAKE MY MONEY!!!",
					"date": "2015-03-05",
					"id": "cp52kpo",
					"isArchived": true,
					"isControversial": false,
					"score": 49
				},
				{
					"author": "FootbaII",
					"content": "Table of contents is here\n\nhttp://www.informit.com/store/go-programming-language-9780134190440",
					"date": "2015-03-05",
					"id": "cp57aiy",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "bohrshaw",
					"content": "This book also got a dedicated site: http://www.gopl.io/",
					"date": "2015-06-16",
					"id": "cs84j56",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "So it\u0027s basically Caleb\u0027s free book",
					"date": "2015-03-06",
					"id": "cp61pse",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "/me quits writing Go books.",
					"date": "2015-03-05",
					"id": "cp5374r",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2015-03-05",
					"id": "cp56ov8",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "[deleted]",
					"content": "I hope it\u0027s a great book.  There\u0027s always room for more books in the tech world, but K\u0026amp;R is the gold standard and it would be awesome if K\u0026amp;D matches that.",
					"date": "2015-03-05",
					"id": "cp5fz3c",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "kingmanaz",
					"content": "\u0026gt;even if other books are better.\n\nI doubt such a book will appear.  Kernighan\u0027s *The* *Awk* *Programming* *Language* is still the most concise and informative programming language I have ever read.  *The* *UNIX* *Programming* *Environment* and *The* *C* *Programming* *Language* are likewise classics decades after their original publication.\n\nThe announcement of this book is great news for Go.",
					"date": "2015-03-05",
					"id": "cp5lf65",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tech_tuna",
					"content": "Wow, that\u0027s quite an endorsement for Go. . .",
					"date": "2015-03-05",
					"id": "cp57ndb",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "natefinch",
					"content": "Kernighan and Rob Pike have written a few books together, so it\u0027s not super surprising... though this does seem to be Kernighan\u0027s first book since 2002, so I think it\u0027s not entirely something that should be discounted, either.",
					"date": "2015-03-05",
					"id": "cp5ae03",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gtarget",
					"content": "Actually Kernighan wrote a book in 2011: *D is for Digital*. For everyone who asks me what I do or what I studied in school, I hand them this book. It is a great primer on computer and technology.",
					"date": "2015-03-05",
					"id": "cp5pymw",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "natefinch",
					"content": "Weird, I sorted by publication date on Amazon and somehow missed that.  My bad... but glad to know he\u0027s still writing :)",
					"date": "2015-03-06",
					"id": "cp655rx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2015-03-05",
					"id": "cp5arz2",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "natefinch",
					"content": "That\u0027s valid.  And I think the fact that Go has a mindset very like C and Unix (given that it was written by people who created C and Unix) probably plays into that as well.",
					"date": "2015-03-05",
					"id": "cp5bit0",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "claudemiro",
					"content": "Wow. K\u0026amp;R was one of the first programming books I read.  Nice to see one similar for Go.",
					"date": "2015-03-05",
					"id": "cp5337e",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "digitalyatri",
					"content": "I was skeptical about asking this, but what areas of Go would you specifically love the book to cover, something that might not be covered already by current resources, or even if covered were not enough ? Just curious about what the Go community thinks",
					"date": "2015-03-05",
					"id": "cp551lv",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "benthor",
					"content": "I want to see a _lot_ of message passing patterns and go routines. The best resource I currently know on how to use go channels and routines is currently [this talk](https://www.youtube.com/watch?v\u003dSmoM1InWXr0) by John Graham-Cumming. Seriously, his slides are a constant reference when I code, I haven\u0027t found anything else of similar convenience yet.",
					"date": "2015-03-05",
					"id": "cp55lsy",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "thomasahle",
					"content": "Read Hoare\u0027s book?",
					"date": "2015-03-05",
					"id": "cp5oj31",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ifonefox",
					"content": "Where can I find his slides online?",
					"date": "2015-03-06",
					"id": "cp68a9f",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "benthor",
					"content": "Dude, it\u0027s literally the [second google hit](http://www.slideshare.net/cloudflare/a-channel-compendium).",
					"date": "2015-03-06",
					"id": "cp6f9k9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Ainar-G",
					"content": "Honestly, I don\u0027t think there isn\u0027t a single broad area of writing Go code that wasn\u0027t already covered in either Effective Go, the Spec, the Wiki, or the blog posts. I guess what\u0027s coming is a summary of what we already know.",
					"date": "2015-03-05",
					"id": "cp59j6e",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "I hope its 350 pages about why vendoring is a bad idea.",
					"date": "2015-03-06",
					"id": "cp61qsq",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "dvirsky",
					"content": "Oh I can\u0027t wait till /r/programming starts talking about this \n/s",
					"date": "2015-03-05",
					"id": "cp55s25",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mattyw83",
					"content": "It\u0027s being well received http://www.reddit.com/r/programming/comments/2y105x/the_go_programming_language_by_brian_w_kernighan/",
					"date": "2015-03-06",
					"id": "cp64i07",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dmikalova",
					"content": "Could someone explain the hype? I\u0027m still somewhat new to programming and just haven\u0027t heard of these people but definitely want to learn.",
					"date": "2015-03-05",
					"id": "cp54jak",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Ainar-G",
					"content": "https://en.wikipedia.org/wiki/Brian_Kernighan\n\n\u0026gt;Brian Wilson Kernighan (…) contributed to the development of Unix. He is also coauthor of the AWK and AMPL programming languages. The \"K\" of K\u0026amp;R C and the \"K\" in AWK both stand for \"Kernighan\".\n\nhttps://github.com/golang/go/commits?author\u003dalandonovan\n\nhttps://github.com/golang/tools/commits?author\u003dalandonovan\n\nThe K\u0026amp;R C book is considered by many to be a great book about C and Unix and a must-read for every programmer. And we might be getting something of similar scale for Go, authored by the \"K\" from \"K\u0026amp;R\", and a known contributor to the Go project, who created such tools like `oracle`, `eg`, etc.",
					"date": "2015-03-05",
					"id": "cp54tdc",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "dmikalova",
					"content": "Perfect, super thanks!",
					"date": "2015-03-05",
					"id": "cp54y8l",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dhdfdh",
					"content": "And still gracing my bookshelf since 1985.",
					"date": "2015-03-05",
					"id": "cp5e08f",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ifross",
					"content": "Brian Kernighan co-authored [The C Programming Language](http://en.wikipedia.org/wiki/The_C_Programming_Language) which was (is) considered one of the most influential programming books ever written. The other author (Dennis Ritchie) created the C language.\n\nThe C used in the book is now very dated, but I would 100% recommend anyone interested in programming reading it.",
					"date": "2015-03-05",
					"id": "cp5537p",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "joeshaw",
					"content": "In addition, he co-wrote [The UNIX Programming Environment](http://amzn.com/013937681X?tag\u003djoeshaw-20) and [The Practice of Programming](http://amzn.com/020161586X?tag\u003djoeshaw-20) with Rob Pike and [The Elements of Programming Style](http://amzn.com/0070342075?tag\u003djoeshaw-20) with PJ Plauger.  I\u0027ve never read the Practice of Programming (add it to the wish list) but the other two books are fantastic.  The Elements of Programming Style is somewhat dated (code is in PL/I and Fortran, and it discourages things like `goto` which we all already know is bad) but a lot of it is still relevant and worth picking up a used copy if you can find it.",
					"date": "2015-03-05",
					"id": "cp57fg0",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "FUZxxl",
					"content": "Goto [isn\u0027t bad](http://fuz.su/~fuz/structured-programming-with-the-go-to-statement.pdf).",
					"date": "2015-03-06",
					"id": "cp64vu5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "joeshaw",
					"content": "I knew someone was going to bring that up.\n\nIt\u0027s helpful to go back and read [Dijkstra\u0027s original paper](https://files.ifi.uzh.ch/rerg/arvo/courses/kvse/uebungen/Dijkstra_Goto.pdf) and understand the context it was written in.  At the time, goto was how you jumped around in a program -- subroutines/functions were not common.  Think BASIC back before `GOSUB` was a thing.\n\nIn the time that Elements of Programming Style was written it was still necessary to explain to programmers that subroutines and functions should be used instead of `goto` for basic control flow.  We all take this for granted now, which is why I mentioned that aspect of it being dated.\n\n`goto` is fine in a C program where you need to bail out of a function early and do some resource cleanup.  It can make sense in some state machine implementations.  But it is not an adequate substitute for subroutines generally.\n\nEdit: I\u0027ll quote from the Knuth paper you cite:\n\n\u0026gt; First, there are several kinds of programming situations in which go to statements are harmless, even desirable, if we are programming in ALGOL or PL/I. But secondly, new types of syntax are being developed that provide good substitutes for these harmless go to\u0027s, and without encouraging a programmer to create \"logical spaghetti\". \n\nFortunately the world we live in 40 years on is considerably nicer with these new syntaxes.",
					"date": "2015-03-06",
					"id": "cp6c390",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "FUZxxl",
					"content": "I completely agree with your point. I just wanted to make the point the forbidding go to statements *per se* is a bad thing as that takes a way an important tool for control flow.",
					"date": "2015-03-06",
					"id": "cp6cbt3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "autowikibot",
					"content": "#####\u0026amp;#009;\n\n######\u0026amp;#009;\n\n####\u0026amp;#009;\n [**The C Programming Language**](https://en.wikipedia.org/wiki/The%20C%20Programming%20Language): [](#sfw) \n\n---\n\n\u0026gt;___The C Programming Language___ (sometimes referred to as ___K\u0026amp;R___, after its authors\u0027 initials) is a well-known [computer programming](https://en.wikipedia.org/wiki/Computer_programming) [book](https://en.wikipedia.org/wiki/Book) written by [Brian Kernighan](https://en.wikipedia.org/wiki/Brian_Kernighan) and [Dennis Ritchie](https://en.wikipedia.org/wiki/Dennis_Ritchie), the latter of whom originally designed and implemented the language, as well as co-designed the [Unix](https://en.wikipedia.org/wiki/Unix) [operating system](https://en.wikipedia.org/wiki/Operating_system) with which development of the language was closely intertwined. The book was central to the development and popularization of the [C programming language](https://en.wikipedia.org/wiki/C_(programming_language\\)) and is still widely read and used today. Because the book was co-authored by the original language designer, and because the first edition of the book served for many years as the *[de facto](https://en.wikipedia.org/wiki/De_facto)* standard for the language, the book was regarded by many to be the authoritative reference on C.\n\n\u0026gt;\u003d\u003d\u003d\u003d\n\n\u0026gt;[**Image from article**](https://i.imgur.com/w7gbqHW.png) [^(i)](https://commons.wikimedia.org/wiki/File:The_C_Programming_Language,_First_Edition_Cover_\\(2\\).svg)\n\n---\n\n^Interesting: [^The ^C++ ^Programming ^Language](https://en.wikipedia.org/wiki/The_C%2B%2B_Programming_Language) ^| [^CppCMS](https://en.wikipedia.org/wiki/CppCMS) ^| [^C ^\\(programming ^language)](https://en.wikipedia.org/wiki/C_\\(programming_language\\)) \n\n^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to\u003dautowikibot\u0026amp;subject\u003dAutoWikibot NSFW toggle\u0026amp;message\u003d%2Btoggle-nsfw+cp553nw) ^or[](#or) [^delete](/message/compose?to\u003dautowikibot\u0026amp;subject\u003dAutoWikibot Deletion\u0026amp;message\u003d%2Bdelete+cp553nw)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)",
					"date": "2015-03-05",
					"id": "cp553nw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "funky_vodka",
					"content": "Is the table of contents available?",
					"date": "2015-03-05",
					"id": "cp541jy",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "besna",
					"content": "[Known](http://www.informit.com/store/go-programming-language-9780134190440) to this hour:\n\n    Table of Contents\n     1. Tutorial\n     2. Basic Types\n     3. Composite Types\n     4. Functions\n     5. Methods and Interfaces\n     6. Concurrency\n     7. Packages and the `go` tool\n     8. Testing\n     9. Reflection\n    10. Standard Packages\n     A. Reference Material",
					"date": "2015-03-05",
					"id": "cp5ikxk",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "digitalyatri",
					"content": "Exactly my thoughts",
					"date": "2015-03-05",
					"id": "cp54w5d",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "waitingkuo",
					"content": "definitely the next must-buy book!!!",
					"date": "2015-03-05",
					"id": "cp56bxm",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Streamweaver66",
					"content": "Looking forward to this book.  It\u0027s great to see community vets getting involved in Go as well.",
					"date": "2015-03-05",
					"id": "cp55wa8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shirro",
					"content": "Pre-orders must be doing ok. It is currently sitting at number one in programming language books.",
					"date": "2015-03-05",
					"id": "cp5npy0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2015-03-05",
					"id": "cp53xtr",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "digitalyatri",
					"content": "Just keeping my fingers crossed",
					"date": "2015-03-05",
					"id": "cp54wka",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Bialar",
					"content": "Neat ",
					"date": "2015-03-05",
					"id": "cp52l37",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "tinyint",
					"content": "rite faster",
					"date": "2015-03-05",
					"id": "cp56rr6",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				}
			]
		},
		{
			"author": "dimkovert",
			"date": "2016-11-28",
			"id": "5fc1f0",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "https://blog.golang.org has changed text/codebase font. Personally I feel like it\u0027s become more difficult to read. \n\nPlease comment your opinion regarding this.\n\n\n",
			"title": "blog.golang.org has become less readable with a new font",
			"comments": [
				{
					"author": "BlueDragonX",
					"content": "I really don\u0027t like it, either. I find it hard to read, especially at smaller sizes. I suppose there\u0027s not enough negative space.\n\nEdit: typos",
					"date": "2016-11-28",
					"id": "daj2efh",
					"isArchived": true,
					"isControversial": false,
					"score": 83
				},
				{
					"author": "kfgal",
					"content": "I feel the same. I would prefer to have larger line height which makes the overall text less noisy.",
					"date": "2016-11-28",
					"id": "dajftgv",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jamra06",
					"content": "Changing the p tag\u0027s line-height to 1.5em makes it look a lot nicer.",
					"date": "2016-11-28",
					"id": "dajpylj",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "nexusbees",
					"content": "I think its reasonable for normal text but for code... it will take some getting used to.",
					"date": "2016-11-28",
					"id": "dajokjx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "marssaxman",
					"content": "What does \"snagged sized\" mean?",
					"date": "2016-11-28",
					"id": "daj916b",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "prohulaelk",
					"content": "don\u0027t think it\u0027s a technical term, but basically the ttf gets rendered awkwardly at certain scales (including the default zoom in my browser): https://i.imgur.com/Fje4475.png",
					"date": "2016-11-28",
					"id": "dajd8z1",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "BlueDragonX",
					"content": "It means I typo\u0027d the word \"small\" :p",
					"date": "2016-11-28",
					"id": "dajcw2y",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "hesdeadjim",
					"content": "The change in fonts was a solution in search of a problem. ",
					"date": "2016-11-28",
					"id": "dajj33l",
					"isArchived": true,
					"isControversial": false,
					"score": 48
				},
				{
					"author": "H1Supreme",
					"content": "It\u0027s not looking good on Windows 7 / Chrome. I\u0027ll check it on OSX later as well. Has an aliased / blurry kind of thing going on. Not a fan.",
					"date": "2016-11-28",
					"id": "daj2aee",
					"isArchived": true,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "npyde",
					"content": "It is ugly on macOS, too.",
					"date": "2016-11-28",
					"id": "daj45r4",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "YEPHENAS",
					"content": "It looks beautiful on my OS X system (Retina). On my Windows 7 system (resolution: 1920x1200) the rendering looks jagged.\n\n* Mac: http://imgur.com/a/W98fH\n* Win: http://imgur.com/a/J1sFC",
					"date": "2016-11-28",
					"id": "daj44vv",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Traim",
					"content": "woah what happened on Win",
					"date": "2016-11-28",
					"id": "daj64cx",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Pulse207",
					"content": "Same thing as usual. Just different font rendering that\u0027s more noticeable on some fonts.",
					"date": "2016-11-28",
					"id": "daj8bfp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "earthboundkid",
					"content": "No, that\u0027s really awful. It\u0027s not different; it\u0027s bad. ",
					"date": "2016-11-29",
					"id": "dajzq6k",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "ivosaurus",
					"content": "No, you\u0027ve somehow got AA completely turned off on Win",
					"date": "2016-11-29",
					"id": "dal8g37",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Pulse207",
					"content": "Oh, I\u0027m not the one who posted the pictures.\n\nAnd even with cleartype set up as best I can l, and on a 4k screen, Windows font rendering has always been sub-par for me.",
					"date": "2016-11-29",
					"id": "dal8k1s",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ivosaurus",
					"content": "Have you run the ClearType wizard to set it up to your liking?",
					"date": "2016-11-29",
					"id": "dal8lqe",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Pulse207",
					"content": "Yeah, but it\u0027s always been a pick the least bad sort of thing, none of the options are ever as nice as I\u0027d like.",
					"date": "2016-11-29",
					"id": "dal8o5p",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "comrade-jim",
					"content": "Linux (firefox nightly):\nhttps://i.imgur.com/x5VcCeu.png",
					"date": "2016-11-28",
					"id": "daj7cp7",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "tdewolff",
					"content": "In Chrome it looks fine in Win10, much like the Mac version.",
					"date": "2016-11-28",
					"id": "daj8cnr",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Absona",
					"content": "On Windows 10 in Chrome, it looks smoother than your Win 7 screenshot but still thinner than your Mac screenshot. It\u0027s closer to your Mac screenshot in Edge, but still not quite as good.\n\nhttp://imgur.com/a/r7eMW",
					"date": "2016-11-28",
					"id": "daj8v6c",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "gutigen",
					"content": "Ugly on Arch Linux with font rendering fixes from Ubuntu (making it look neat in GNOME and Firefox). ",
					"date": "2016-11-28",
					"id": "dajl0rz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Bake_Jailey",
					"content": "It looks fine on my Arch installation with Infinality, and on my Android phone, but it looks pretty horrible on Windows 10 for me. Regardless, I don\u0027t like the font anyway, despite their claims that \"humanist\" fonts are more readable.",
					"date": "2016-11-28",
					"id": "dajq3xe",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "npyde",
					"content": "The previously used font for text and code was much more readable. The new font is very dense. For some reason the monospaced code does not look like monospace because of the density (or perceived height-width ratio).\n\nIt is ugly and makes the Go website (blog part) look like an HTML amateur built it. At least the docs are not affected by it. I love Menlo.",
					"date": "2016-11-28",
					"id": "daj44lm",
					"isArchived": true,
					"isControversial": false,
					"score": 51
				},
				{
					"author": "ivosaurus",
					"content": "Also because of how serifed it is. I hate serifs with code fonts.\n\nedit: what\u0027s weird is the proportional font looks fine, being sans-serif. If they just made a fixed width version of that it\u0027d be alright.\n\n\u0026gt; The Go Mono fonts have slab-shaped serifs, giving them a sturdy appearance.\n\nYeah no, that\u0027s a blocky, cramped and antiqued appearance.",
					"date": "2016-11-28",
					"id": "dajgiu0",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "metamatic",
					"content": "The new font reminds me of Computer Modern.\n\nAnd not in a good way.",
					"date": "2016-11-28",
					"id": "daj1aes",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "spurious_interrupt",
					"content": "If they had actually used Computer Modern, the site would look way better than it does now.",
					"date": "2016-11-28",
					"id": "dajhil2",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "[deleted]",
					"content": "So it does. Perhaps we can set a replacement CSS for that site? I think Firefox has an extension to do that.",
					"date": "2016-11-28",
					"id": "dajdjqk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "karma_vacuum123",
					"content": "its a terrible font. the serif version looks like a throw-away version of Courier. the sans-serif version looks sloppy. i get why they wanted a font for use with testing...but why use it for content?\n\nif they want to be user-friendly they should just default to system fonts. i already know what font i prefer by default and i\u0027m mostly not interested in what particular sites feel like i should be using instead...there are exceptions when precise layout demands a particular font...but most blogs don\u0027t qualify",
					"date": "2016-11-28",
					"id": "daj7ge6",
					"isArchived": true,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "gutigen",
					"content": "The new Go fonts are absolutely hideous and unreadable as coding fonts. I do not really understand why would anyone make their own set of fonts if there are plenty of open source programming fonts out there to chose from.",
					"date": "2016-11-28",
					"id": "dajl5ut",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "feketegy",
					"content": "Holy shit, I just saw this. What year is this, 1996?\n\n\nI have a strong Comic Sans / Geocities vibe from this",
					"date": "2016-11-28",
					"id": "dajhn4h",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "fullouterjoin",
					"content": "The http://python.org guys brought over their aesthetics. ",
					"date": "2016-11-29",
					"id": "dak9te3",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "It\u0027s ugly and unreadable as hell.",
					"date": "2016-11-28",
					"id": "daj3fie",
					"isArchived": true,
					"isControversial": false,
					"score": 26
				},
				{
					"author": "SSoreil",
					"content": "I quite like the font, I turned it as the default font on Linux running GNOME. Also for monospaced.\nI like the old timey feel of it I guess, reminds me of Plan 9.",
					"date": "2016-11-28",
					"id": "daj4p2h",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "cittatva",
					"content": "I like it too. Haters gonna hate. ",
					"date": "2016-11-29",
					"id": "dak6hov",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dilap",
					"content": "It\u0027s very old school. I personally am not a fan, but these things can be very subjective.",
					"date": "2016-11-28",
					"id": "daj9js5",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "dobegor",
					"content": "wtf is that font - a joke?\n\"go play with fonts on your tombstone\" I once heard from UX/UI specialist (he was rude but right).",
					"date": "2016-11-28",
					"id": "dajl6d8",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "ericzhill",
					"content": "I like the proportional font a lot, but the serif monospaced font is awful. ",
					"date": "2016-11-28",
					"id": "dajfllc",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "PaluMacil",
					"content": "I felt like the line spacing looked too small (probably a trick of the taller proportions) with the proportional font. Did you like it as-is or did you try increasing the line spacing?",
					"date": "2016-11-29",
					"id": "dajy2p9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ericzhill",
					"content": "The line spacing didn\u0027t bother me, but I can see what you mean. Maybe another 5% would be sufficient.",
					"date": "2016-11-29",
					"id": "dajzesi",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "lkasdfjl",
					"content": "initially i thought the monospace font looked ridiculous but i decided to switch emacs/intellij over to it just to see if i could get used to it. after an hour i stopped noticing it and now after about a week, i think i like it",
					"date": "2016-11-28",
					"id": "daj5ibe",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "npyde",
					"content": "Sounds like you are not sure if you like it. From my pessimistic view this means you don’t actually like it, you just got used to its mediocrity.",
					"date": "2016-11-28",
					"id": "dajmx8a",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "brokedown",
					"content": "I don\u0027t have any issue with the Go font.",
					"date": "2016-11-28",
					"id": "daj13u2",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "seriouslulz",
					"content": "/r/notinteresting is leaking",
					"date": "2016-11-29",
					"id": "dajsuir",
					"isArchived": true,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "Pulse207",
					"content": "I dislike it, but purely on aesthetics. I\u0027ve had no issues with it from a readability standpoint.",
					"date": "2016-11-28",
					"id": "daj8dds",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "BadMoonRosin",
					"content": "Ehh... the proportional font is just another generic Helvetica knockoff.  Maybe a *tad* dense for my taste, but I\u0027d probably assume it\u0027s the default system Arial unless someone pointed it out to me.\n\nThe monospace code font is actually pretty nice.  It reminds me of something you\u0027d see in an expensive Computer Science college textbook.  Granted, I **wouldn\u0027t** use this in an IDE for actual work.  But for code snippets on a blog or in printed material, it adds some distinct character.\n\nEither way, c\u0027mon Reddit... an entire thread griping about the *font* on someone\u0027s blog is a little too \"Hacker News\"-y.",
					"date": "2016-11-28",
					"id": "dajhdx9",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "kisielk",
					"content": "I like it. It jumps out at first because it\u0027s not like most other websites, but it\u0027s not hard to read, at least not on my phone on the train. ",
					"date": "2016-11-28",
					"id": "daj84ch",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "DeedleFake",
					"content": "I don\u0027t have any particular problem with the proportional font. It just kind of looks like Arial to me, honestly. The monospaced font does look weird, but I think that\u0027s just because I\u0027m not used to serif monospace fonts.",
					"date": "2016-11-28",
					"id": "daj502q",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "driusan",
					"content": "I find the code is easier to read, but the prose is harder to read. Which isn\u0027t ideal for a blog..",
					"date": "2016-11-28",
					"id": "daj9slb",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dmikalova",
					"content": "Looks blurry and along on OSX/Chrome. However, it feels very reminiscent of reading really old textbooks.",
					"date": "2016-11-28",
					"id": "dajazjb",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "zeek",
					"content": "At least for me, at certain zoom levels the font doesn\u0027t render properly.  When it renders correctly it looks great, but at some zoom levels it looks horrid.\n\nYou can test this yourself by holding CTRL and mousewheel up/down.",
					"date": "2016-11-29",
					"id": "dak0c30",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tscs37",
					"content": "Might be something on your site, Chrome+ArchLinux and I don\u0027t see this problem.",
					"date": "2016-11-29",
					"id": "dak9y2g",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-11-28",
					"id": "daj75kn",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "residentbio",
					"content": "My eyes!!!!!! ",
					"date": "2016-11-28",
					"id": "dajc7gx",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "kiddcode",
					"content": "Totally. It makes me feel like I\u0027m on our old unix workstations in college in the late 90s.",
					"date": "2016-11-28",
					"id": "dajcupe",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "orbat",
					"content": "And not in a good way",
					"date": "2016-11-29",
					"id": "dakiclz",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tedroden",
					"content": "StumpWM? Looking good.",
					"date": "2016-11-28",
					"id": "dajdv4b",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "throwbible",
					"content": "Strangely enough I like it as a font in my editor, but not for the blog. ",
					"date": "2016-11-28",
					"id": "dajhwt5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "campbellm",
					"content": "To each their own of course, but I find that horrifying.",
					"date": "2016-12-08",
					"id": "daxh5zl",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tscs37",
					"content": "Atleast it\u0027s not comic sans.",
					"date": "2016-11-28",
					"id": "daj3juf",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "andradei",
					"content": "Nor Papyrus.",
					"date": "2016-11-28",
					"id": "daj8s3j",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "bitmadness",
					"content": "They look awful, and are very distracting. Luckily they are still using some Inconsolata/Menlo style font in the repo.",
					"date": "2016-11-28",
					"id": "dajemit",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "NikkoTheGreeko",
					"content": "Terrible choice of font.",
					"date": "2016-11-28",
					"id": "dajootb",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "throwdemawaaay",
					"content": "+1\n\nI don\u0027t want to pile on people for contributing, but if I\u0027m bluntly honest I find the new go fonts entirely unsatisfactory. They\u0027re just too dense horizontally, and on modern displays trying to squeeze letters to save pixels is mostly pointless.\n\nI have weak vision and these fonts make it *much* more difficult for me to scan code. I doubt I\u0027m alone in this aspect.\n\nI\u0027d much prefer a more conventional code font with a suitable license. There is zero chance I\u0027ll use these fonts personally, and if they\u0027re adopted as some sort of official font for go project documentation I expect to continuously struggle to read them.",
					"date": "2016-11-29",
					"id": "dajxc30",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "zemo",
					"content": "I thought they were quite weird until I read [the Go fonts blog post in full](https://blog.golang.org/go-fonts), and by the end of it, I loved them. The decision to use a humanist font seems as much a philosophical stance as it is an aesthetic choice.",
					"date": "2016-11-28",
					"id": "daj9xvd",
					"isArchived": true,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "shovelpost",
					"content": "What do you mean by philosophical stance?",
					"date": "2016-11-28",
					"id": "dajaoih",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "torie_anal_gerbiler",
					"content": "Yeah it\u0027s pretty terrible..",
					"date": "2016-11-28",
					"id": "dajnpt2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "troublemaker74",
					"content": "I also find it less readable than the old font on my macbook with retina screen.",
					"date": "2016-11-28",
					"id": "dajr603",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "gopherookie",
					"content": "Create a bookmarklet with the following content and click on it when your eye aches due to the font.\n\n    javascript:document.querySelector(\u0027link[href\u003d\"/fonts.css\"]\u0027).remove()",
					"date": "2016-11-28",
					"id": "daj2360",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "heckerle",
					"content": "Likewise simply adding `https://blog.golang.org/fonts.css` to your adblocker\u0027s static filter rules works too.",
					"date": "2016-11-29",
					"id": "dakd4h2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "FIuffyRabbit",
					"content": "That doesn\u0027t hit all of the fonts because their styles are still cached.\n\n    javascript:(function(){var font\u003d\u0027Times New Roman\u0027;document.body.style.fontFamily\u003dfont; document.code.style.fontFamily\u003dfont; document.pre.style.fontFamily\u003dfont;})()",
					"date": "2016-11-28",
					"id": "daj6gg8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mm_5687",
					"content": "I find it oddly difficult to read of my desktop, but fairly pleasant on my mobile, the key difference being the high DPI screen and small screen size, coupled with the high x height of the font.\n\nStyle wise, I think the font looks rather dated, but I still like the _look_ of the Sans variant, even if I find it less easy to read than the majority of fonts.",
					"date": "2016-11-28",
					"id": "daj536s",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "RandNho",
					"content": "It\u0027s all runny on Win/Chrome.",
					"date": "2016-11-28",
					"id": "daj6nha",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Absona",
					"content": "I dislike the Mono font in the screenshot in the announcement, but I think it\u0027s not bad at all in the blog posts below that. I think the screenshot may be the bold, for some reason.\n\nI don\u0027t especially mind the proportional, though I\u0027m not in love with it either. I do like that it\u0027s a san-serif font with I and l easily distinguished, even in isolation. That is, the l is plainly an l even if there isn\u0027t an I next to it to remind you that the I has little serifs.",
					"date": "2016-11-28",
					"id": "daj7uvs",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Absona",
					"content": "Correction: the screenshot isn\u0027t bold, it\u0027s just that the rendered fonts in Chrome on Windows are weirdly thin. In Edge, the Mono text in the later blog posts looks about the same weight as the screenshot. But still better, for some reason.",
					"date": "2016-11-28",
					"id": "daj9241",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ivosaurus",
					"content": "\u0026gt; But still better, for some reason.\n\nProbably because it\u0027s doing full-native AA with the rasteriser engine built into Windows and working with your monitor.",
					"date": "2016-11-28",
					"id": "dajgvko",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Absona",
					"content": "It\u0027s not the goodness of the rendered fonts that surprised me so much as the badness of the screenshot. Looking at it more closely, it turns out the screenshot has sub-pixel rendering for a monitor with the sub-pixels in the opposite order from my monitor. It\u0027s no wonder it looks terrible.\n\nThe other images of the font use greyscale anti-aliasing, and they look perfectly fine.",
					"date": "2016-11-28",
					"id": "dajhfr3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "NikkoTheGreeko",
					"content": "https://www.youtube.com/watch?v\u003duSudkID3zJM",
					"date": "2016-11-28",
					"id": "dajoqa4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "youtubefactsbot",
					"content": "\u0026gt;[**Office Space - Horrible, this idea [0:09]**](http://youtu.be/uSudkID3zJM)\n\n\u0026gt; [*^Ronnie ^Clark*](https://www.youtube.com/channel/UC3thNttQVyLB1URh0v17UvA) ^in ^People ^\u0026amp; ^Blogs\n\n\u0026gt;*^9,072 ^views ^since ^Oct ^2014*\n\n[^bot ^info](http://www.reddit.com/r/youtubefactsbot/wiki/index)",
					"date": "2016-11-28",
					"id": "dajoqpl",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "codekoala",
					"content": "I\u0027m not a fan of the monospaced font. I tried it in vim for about 10 minutes before switching back to my previous font. I do like the proportional font though. It\u0027s readable, not ugly, and unencumbered.",
					"date": "2016-11-28",
					"id": "dajq2qp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ruertar",
					"content": "I like the monospaced go font.  it looks almost exactly like the Solaris Garamond font they used in OpenBoot and Motif.",
					"date": "2016-11-29",
					"id": "dajy9mo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "LegacyAngel",
					"content": "Reading these comments tells me I know nothing of fonts.",
					"date": "2016-11-29",
					"id": "dak9anp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gwolf23",
					"content": "What the hell did they do to \"y\" in monospaced version?! It looks very much like \"v\".",
					"date": "2016-11-29",
					"id": "dakzt77",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sylvinus",
					"content": "Seconded, it really is a terrible font.",
					"date": "2016-11-30",
					"id": "dalyerp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "fegan104",
					"content": "Wow I haven\u0027t seen a single comment in this thread didn\u0027t hate this font, after reading the post it looks like they did out a lot it with and research into their choice. I find very easy read even on mobile but admittedly I don\u0027t really find it to be an improvement either.",
					"date": "2016-12-08",
					"id": "daxm9fa",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "GoTheFuckToBed",
					"content": "Browsers support custom CSS files.\n\nI overwrite the CSS body of all website with the system font. San Francisco is just too good to pass.",
					"date": "2016-11-28",
					"id": "dajiqde",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "porkbonk",
					"content": "Looks great to me on a 24\" FHD screen. Only the pictures in the blog post seem like bad renderings to me. The fonts itself are readable and pleasant to me.\n\nRemind me, how often do you come across a new font that doesn\u0027t seem slightly off? Give it a chance..",
					"date": "2016-11-28",
					"id": "dajjj9a",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "SilentWeaponQuietWar",
					"content": "really can\u0027t stand the new font. Not sure why any resources were dedicated to it at all, regardless of licensing issues.\n\nAnd in typical go-nuts fashion, since unofficial consensus is that the new font sucks--when do we start a petition to delete the golang blog? Because that\u0027s what gophers do now when they don\u0027t like something, right?",
					"date": "2016-11-29",
					"id": "daksx0n",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "coleifer",
					"content": "The new monospaced font is a rip-off of Luxi Mono, looks like all they changed is the lower-case \"g\" glyph? https://www.fontsquirrel.com/fonts/luxi-mono",
					"date": "2016-11-28",
					"id": "dajgpcd",
					"isArchived": true,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "cweimann",
					"content": "If the Go fonts by Bigelow \u0026amp; Holmes rip off the luxi-mono by Bigelow \u0026amp; Holmes I\u0027d say it isn\u0027t a big surprise.",
					"date": "2016-11-28",
					"id": "dajqsay",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				}
			]
		},
		{
			"author": "natefinch",
			"date": "2017-03-24",
			"id": "616wb4",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "3.5 Years, 500k Lines of Go",
			"comments": [
				{
					"author": "bobcrotch",
					"content": "I\u0027ll admit that I\u0027m still pretty much a novice, so take that into consideration.\n\nI agree about the generics portion (and share similar sentiments about error handling and overall simplicity of the language). The only time I find myself wanting a generic is for serialization operations and really `interface{}` handles that. I think at this point I\u0027ve wrote as many lines of go code as any other language so that might have something to do with it.\n\nInteresting read. I can\u0027t imagine what it would be like to work on such a huge project. Everything I work on now is microservices for various reasons. While nice and tidy it always feels like the complexity is just pushed further up the stack with orchestration and such. It does however make maintaining and developing services feel a lot easier.",
					"date": "2017-03-24",
					"id": "dfcchbj",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "[deleted]",
					"content": "For testing time I often ending up doing things like:\n\n\ttype ticker struct {\n\t\tStop func()\n\t\tC    \u0026lt;-chan time.Time\n\t}\n\n\tvar NewTicker \u003d func(d time.Duration) ticker {\n\t\tt :\u003d time.NewTicker(d)\n\t\treturn ticker{\n\t\t\tStop: t.Stop,\n\t\t\tC:    t.C,\n\t\t}\n\t}\n\nThen in a test:\n\n\toriginalNewTicker :\u003d NewTicker\n\tdefer func() {\n\t\tNewTicker \u003d originalNewTicker\n\t}()\n\ttickerC :\u003d make(chan time.Time)\n\tNewTicker \u003d func(d time.Duration) ticker {\n\t\treturn ticker{\n\t\t\tStop: func() {},\n\t\t\tC:    tickerC,\n\t\t}\n\t}\n\n...\n\n\t\t// simulate a tick\n\t\ttickerC \u0026lt;- time.Now()\n\nYou can easily do the same for any global function:\n\n    \tvar Now \u003d time.Now\n\nThe layer of indirection can make following things a little harder, but gives you deterministic tests. (assuming all the time functions work like they should, which seems like a reasonable assumption)",
					"date": "2017-03-24",
					"id": "dfcl3is",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "driusan",
					"content": "\u0026gt; (assuming all the time functions work like they should, which seems like a reasonable assumption)\n\nAh, to be young and naïve again..",
					"date": "2017-03-24",
					"id": "dfclu3c",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "Not sure what you\u0027re getting at here... AFAIK the only oddity about the time package is that its not monotonically increasing.\n\nYou can\u0027t test everything, and at some point you have to assume certain things to be true. Assuming that `Ticker`s and `Timer`s work in the standard library seems entirely reasonable to me.\n\nMy comment above was precisely the opposite of naive. It was born out of frustration dealing with flaky tests in actual code bases. (ie assuming time.Sleep for 100ms actually sleeps for 100ms and reliably schedules your goroutine)",
					"date": "2017-03-24",
					"id": "dfcmx9b",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "xargon7",
					"content": "Yeah, I basically do the same.  I\u0027ve had great luck for time-testing by just adding local variables for the relevant functions:\n\n    var time_Now \u003d time.Now\n    var time_After \u003d time.After\n    var time_Sleep \u003d time.Sleep\n    // etc\n\nThe code looks almost exactly the same, and it\u0027s super simple to convert existing code to injected code.  In tests I can overwrite those variables to get the desired effects like you do.\n\nThe downsides are:\n\n* I have to be careful to cleanup after each test.\n* I can\u0027t run tests in parallel in that package.\n\nIf code gets too convoluted with that simple indirection, it usually means the code needs to be refactored to be testable -- in particular if I need to test timing outside of the package (e.g. in uses of the package).",
					"date": "2017-03-24",
					"id": "dfcpk18",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Sheep_Goes_Baa",
					"content": "Anyone have a mirror? site looks to be down.",
					"date": "2017-03-24",
					"id": "dfd4434",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "durthu_smith",
					"content": "look at this guy with his no interface{}\u0027s. woop-dee-doo.",
					"date": "2017-03-25",
					"id": "dfdvcdn",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				}
			]
		},
		{
			"author": "bmhatfield",
			"date": "2016-12-02",
			"id": "5g1av7",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.8 beta 1 has real-world sub-millisecond GC pause times!",
			"comments": [
				{
					"author": "aaaqqq",
					"content": "I\u0027m also really excited about plugins. Not sure why though",
					"date": "2016-12-02",
					"id": "daox5xe",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "vithos",
					"content": "Me too. I\u0027m hoping/assuming it will make it possible to package things like caddy properly.",
					"date": "2016-12-02",
					"id": "daozbn9",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "tty5",
					"content": "There is still 2x CGO overhead between main go program and the plugin, right?",
					"date": "2016-12-03",
					"id": "daq49md",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "PaluMacil",
					"content": "80% of my excitement for the plugins is in regards to Caddy! :-) I don\u0027t know if they\u0027ll implement a non-Windows solution, though, so I don\u0027t know that we\u0027ll see the plugins hit Caddy during 1.8. We\u0027ll see.",
					"date": "2016-12-02",
					"id": "dap3935",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Mandack",
					"content": "I hope this\u0027ll allow me to use Go for game development.",
					"date": "2016-12-02",
					"id": "dap786o",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "chewxy",
					"content": "I\u0027m also very excited over maps. Large maps are fast again!",
					"date": "2016-12-02",
					"id": "daosasv",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "PaluMacil",
					"content": "Oh! I hadn\u0027t seen that.",
					"date": "2016-12-02",
					"id": "dap39j8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "NichtMitCommander",
					"content": "Do you have more information about the map changes?",
					"date": "2016-12-03",
					"id": "daqg0im",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "chewxy",
					"content": "I believe it\u0027s this one. https://github.com/golang/go/issues/16293 . Applies only to maps with pointers",
					"date": "2016-12-04",
					"id": "dar6ohd",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "can_somebody_explain",
					"content": "Anyone know how the chart was created?",
					"date": "2016-12-02",
					"id": "dap3hvo",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "bmhatfield",
					"content": "https://github.com/bmhatfield/go-runtime-metrics + statsd + graphite",
					"date": "2016-12-02",
					"id": "dap5g8c",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "can_somebody_explain",
					"content": "Thank you!",
					"date": "2016-12-02",
					"id": "dap6aq9",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "condanky",
			"date": "2017-11-14",
			"id": "7cxgiz",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "How Discord Resizes 150 Million Images Every Day with Go and C++",
			"comments": [
				{
					"author": "mfrw1",
					"content": "TL;DR \n60% fewer server instances, 90% of cpu time used for actual work (compression)",
					"date": "2017-11-14",
					"id": "dpto8b6",
					"isArchived": false,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "titpetric",
					"content": "I\u0027m only wondering why they wouldn\u0027t use [libvips](https://github.com/jcupitt/libvips), opencv dependency also isn\u0027t lightweight, and it seems the choice of libraries is ... well, I\u0027d expect libavcodec to be used in video processing, opencv for facial recognition...\n\nEdit: apparently, there\u0027s some GPU acceleration involved, I\u0027m unclear of the details if it\u0027s actually used however, the article omits this detail, or more exactly, they mention x86 (cpu) workloads, so it might be a plan down the line. There\u0027s some discussion if you click the \"other discussions\" tab above in /r/programming",
					"date": "2017-11-15",
					"id": "dpulnlt",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "JinSantosAndria",
					"content": "Happens. You know that one guy, he does python but you don\u0027t care and delivers working stuff on time. Suddenly you have 1m customers. You scale. That\u0027s also a reason why many startups fail. The focus on tech stack instead of pushing the idea and drown any momentum. ",
					"date": "2017-11-15",
					"id": "dpujnk4",
					"isArchived": false,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "wavy_lines",
					"content": "Why would anyone use Python in the first place for data intensive operations is beyond me.",
					"date": "2017-11-15",
					"id": "dpuiarh",
					"isArchived": false,
					"isControversial": true,
					"score": 5
				},
				{
					"author": "MonkeeSage",
					"content": "Did you read the article? They were using a python C extension using optimized simd instructions that was faster than than any of the go libraries they tested.",
					"date": "2017-11-15",
					"id": "dpunxpo",
					"isArchived": false,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-11-15",
					"id": "dputzpn",
					"isArchived": false,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "Redundancy_",
					"content": "If you keep Python out of the hot path of your application by using it to set up what you want and then letting C code go at it, you can get a very loosely coupled application that\u0027s got plenty of performance. That\u0027s not possible in all cases, but there are rendering engines with decent performance that have python bindings to set up scenes and C++ to do the work.",
					"date": "2017-11-15",
					"id": "dpvrzla",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "pengusdangus",
					"content": "? There are some mature advanced math and scientific math packages, and people write genome learning tools in python \n\nIt\u0027s not blazing fast but it\u0027s not exactly uncommon ",
					"date": "2017-11-15",
					"id": "dpumjfs",
					"isArchived": false,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "slowratatoskr",
					"content": "MUH READABILITY!!1",
					"date": "2017-11-15",
					"id": "dpuj2fs",
					"isArchived": false,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "wavy_lines",
					"content": "I think it\u0027s more like: MUH 10X PRODUCTIVITY",
					"date": "2017-11-15",
					"id": "dpuj3fy",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "slowratatoskr",
					"content": "well i think they\u0027re equal bruv",
					"date": "2017-11-15",
					"id": "dpujvwk",
					"isArchived": false,
					"isControversial": false,
					"score": -7
				},
				{
					"author": "Thaxll",
					"content": "https://github.com/discordapp/lilliput\n\nIt\u0027s a bit sad that\u0027s it\u0027s calling a C lib though.",
					"date": "2017-11-14",
					"id": "dptf7xe",
					"isArchived": false,
					"isControversial": true,
					"score": 7
				},
				{
					"author": "JinSantosAndria",
					"content": "I actually like it. For this very specific purpose like it\u0027s a good decision to use the best of different worlds and make it work flawlessly. ",
					"date": "2017-11-14",
					"id": "dptl1ms",
					"isArchived": false,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "therocketofpoop",
					"content": "After a lot of goc at work, I was happy to see how relatively easy it was to interact with pure c libraries/code/whathaveyou.\n\nThis shows some of the real power behind go, imnsho.",
					"date": "2017-11-14",
					"id": "dptmir7",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "heydabop",
					"content": "Not really, we do the same thing where I work. C does this faster and being able to do something like this is one of the things that makes Go useful imo.",
					"date": "2017-11-14",
					"id": "dptl5a1",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "acylus0",
					"content": "How is that sad?",
					"date": "2017-11-15",
					"id": "dpuhlzl",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "upboatact",
					"content": "You need to call out to another piece of software because Go cannot do the job well enough on its own, how is that not sad?\n\nIt obviously is not such a big deal, but it is a tiny bit sad that we do not live in a perfect world.",
					"date": "2017-11-15",
					"id": "dpunlsy",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "earthboundkid",
					"content": "Conceptually there are four kinds of parallelism: asynchronous IO, multithreading, distributed computing, and SIMD (CPU or GPU). Go’s runtime handles the first two kinds of parallelism for you. For distributed computing Go has nothing built in but it’s a good platform on which to create a system. But Go’s SIMD performance is not great, and for the most part you’re on your own to rewrite your code in assembly as necessary. ",
					"date": "2017-11-15",
					"id": "dpuvsj7",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "RcrdBrt",
					"content": "Async and multithreading are actually concurrency. Parallelism is an impropriate word in this context",
					"date": "2017-11-15",
					"id": "dpvfhdt",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Emacs24",
					"content": "This can be sad for people who convinced yourself Go is that fast. It is not and the sooner you got it the better for you. It is not really suitable tool for raw computations, such as linear algebra computations, archivers, image processing, etc.",
					"date": "2017-11-16",
					"id": "dpwctvr",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-11-16",
					"id": "dpxbqeo",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Emacs24",
					"content": "Image processing is costly operation. I took fast vips image processing library and write a simple program which reads a small 223×198px² image (10.2Kb) into the memory, then decode for 1 second in a loop and accumulate image average values in a process. It took about 161.000 operations per that second.\n\n     /* compile with\n     *\n     * gcc -Wall vipsavg.c `pkg-config vips --cflags --libs`\n     */\n     \n    #include \u0026lt;stdio.h\u0026gt;\n     \n    #include \u0026lt;vips/vips.h\u0026gt;\n    #include \u0026lt;cstdlib\u0026gt;\n    #include \u0026lt;unistd.h\u0026gt;\n    #include \u0026lt;thread\u0026gt;\n     \n    const char *g_get_prgname() {\n        return \"program lol\";\n    }\n     \n    bool end;\n     \n    void thread_func() {\n        sleep(1);\n        end \u003d true;\n    }\n     \n    int main(int argc, char **argv) {\n        VipsImage *im;\n     \n        if (VIPS_INIT (argv[0]))\n            vips_error_exit(\"unable to start VIPS\");\n     \n        if (argc !\u003d 2)\n            vips_error_exit(\"usage: %s \u0026lt;filename\u0026gt;\", g_get_prgname());\n     \n        end \u003d false;\n     \n     \n        const int SIZE \u003d 10243;\n        char buf[SIZE];\n        FILE *file \u003d fopen(argv[1], \"r\");\n        if (file \u003d\u003d nullptr) {\n            perror(\"\");\n            return 1;\n        }\n        if (fread(buf, 1, SIZE, file) !\u003d SIZE) {\n            perror(\"\");\n        }\n     \n        int useless_value \u003d 0;\n        im \u003d vips_image_new_from_buffer(buf, SIZE, \"\", nullptr);\n        if (im \u003d\u003d nullptr) {\n            vips_error_exit(\"got no data for %s\", argv[1]);\n        }\n        double avg \u003d 0.0;\n        int i \u003d 0;\n        std::thread thr(thread_func);\n        while (true) {\n            vips_avg(im, \u0026amp;avg, NULL);\n            avg +\u003d 1.0;\n            i++;\n            if (end) {\n                break;\n            }\n        }\n        thr.join();\n        vips_shutdown();\n     \n        printf(\"%d images processed in 1 second\\n\", i);\n        return 0;\n    }\n\nAnd take this as a reference https://github.com/art4711/cgo_overhead. 72.2 nanoseconds in seconds is 7.22∙10⁼⁸. Thus, you can call 1/7.22∙10⁼⁸\u003d13.850.415\n161000/(1/7.22∙10⁼⁸)\u003d0.011, this is 1%.\nIn other words, the call overhead is barely 1% of easy image operation without even IO to load them. In reality you will not have these 161000 image decoding and primitive processing: the IO will  not let you make it.",
					"date": "2017-11-17",
					"id": "dpz0cf9",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tv64738",
					"content": "Nothing in the article describes how it differs from the half a dozen other similar web services.",
					"date": "2017-11-14",
					"id": "dptvwd2",
					"isArchived": false,
					"isControversial": false,
					"score": -14
				},
				{
					"author": "dancemethis",
					"content": "No, thanks.\n\nDiscord is among the most harmful pieces of software around in the last couple of years.",
					"date": "2017-11-14",
					"id": "dptw3at",
					"isArchived": false,
					"isControversial": false,
					"score": -54
				},
				{
					"author": "Sythe2o0",
					"content": "What makes you say that?\n\nEdit: for anyone else coming in /u/dancemethis looks like they comment something like this and leave for a lot of Discord-related posts. Their concerns appear to have to do with the licensing of user-created content, but they have never gone into depth that I saw, and notably don\u0027t reply to questions when asked about these sorts of comments.",
					"date": "2017-11-14",
					"id": "dptwjbs",
					"isArchived": false,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "dancemethis",
					"content": "Since you\u0027re into stalking this throwaway, let\u0027s go by that first.\n\nThere\u0027s no way to convince people into doing a good decision. It must come from within the person itself. People can only ever convince/coerce others into bad decisions.\n\nTherefore, there\u0027s pretty much no hope for people in regards to their security and freedom. So there is no reason to answer - specially to people that defend stuff like Discord. I am far from accepting of certain techniques Reddit adopted to reach its userbase and its \"power\" to sway people\u0027s convictions, so I don\u0027t care about this website either. But I express insatisfaction over people complying and coercing others into bad decisions. In the end, I\u0027m human.\n\nNow, about the Discord thing.\n\nDiscord is proprietary software, therefore it features _at least_ a massive tendency to be malicious. It deals with massive amounts of data and metadata from millions of users... While being proprietary. That quite often doesn\u0027t end well for the user side of the deal.\n\nWhen once asked if they had a roadmap to become Free Software, they not only did not, but also thought it meant \"freeware\". So they quite literally do not give a squat about the user. (This went in a Twitter conversation I saw a couple of years ago, but since then Discord deleted their part. Quite convenient.)\n\nThey also declares themselves as secure. \"Must be because you can access them via HTTPS, haha\". Does a SSL cert really defines everything about a system\u0027s security? If it\u0027s proprietary, their only guarantee will _ever_ be their word. And why trust the word of someone delivering proprietary software that hoardes data and metadata? Why is enterprise such a god to some? \n\nWhile at that, they present themselves in a hip and cool fashion to attract and distract people. It works. They are more than distracted, they are infatuated. So what happens? They _coerce_ more people into entering it. \"Everyone\u0027s using it\" is the one argument. \"If you don\u0027t join, you won\u0027t get information X or social interaction Y\" is a common consequence. This doesn\u0027t sound like a fairly free option to a species that crave social interaction as us. And gee, what\u0027s gonna happen when people ad propane as hip and cool too?\n\nSo you have millions giving data and metadata to a business that just gives a \"trust us, you dumbos\" statement on their EULA thing. They have their business partners, and they quite likely can be accessed by other major parties. \n\nThe best part? There are already options based on Free Software with pretty much the same feature set. It\u0027s not a matter of convenience. It\u0027s a matter of people _in_ coercing _more people in_ instead of leaving for their safety (and their peers\u0027 too).\n\nHave a good day; I\u0027ve seen some texts here and there that expose some more shady stuff on a search engine search. But to be frank, I actually have to go to work right now.",
					"date": "2017-11-15",
					"id": "dpuq8hf",
					"isArchived": false,
					"isControversial": false,
					"score": -8
				},
				{
					"author": "some_coreano",
					"content": "Omg. This entire comment could be truncated, but you decided to append more words to sound smarter. No wonder your coworkers hate having  meetings with you.\n\nEdit: changed the subject of the sentence ",
					"date": "2017-11-15",
					"id": "dpuuhi6",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "clerosvaldo",
					"content": "Could it? It was the answer to a question. I don\u0027t think you\u0027re any smarter than him.",
					"date": "2017-11-15",
					"id": "dpv2w2y",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "some_coreano",
					"content": "I don\u0027t care about being smart, as long as I am marketable. This dude is outright trying to look smarter. 90% of his comments can be reduced, and it isn\u0027t that hard. And thank you for bashing me! You are a really good contributor ",
					"date": "2017-11-15",
					"id": "dpv34lc",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "noobtubepython",
					"content": "As a rule of thumb. If a service is free, **you** are the product.\n\nI can see the *potential* evil; but I think they have more to gain by not exploiting the user base.",
					"date": "2017-11-15",
					"id": "dpv7iyc",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "writoflaw",
					"content": "Care to elaborate?  This is just a component of the Discord infrastructure so what have they done that would affect the usefulness of this code?",
					"date": "2017-11-14",
					"id": "dptxzi4",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "I like Discord, it\u0027s basically a less frustrating version of Slack. I tried to get out company to use Discord, which worked until our ~~BDFL~~ GM chose Slack instead and we all had to switch.\n\nI still use Discord for gaming friends though, so I guess it\u0027s nice to have two separate apps on my phone.",
					"date": "2017-11-15",
					"id": "dpu7c8y",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "MonkeeSage",
					"content": "We never used Discord at work (we used Campfire, then Hipchat and now Slack), but I had that discussion in my head. I actually like how Slack integrates with github, jira, whatever the Atlassian wiki software is called, etc, and I don\u0027t think Discord would add the same value. Also still use Discord for friends though.",
					"date": "2017-11-15",
					"id": "dpug3e0",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dontsyncjustride",
					"content": "I don\u0027t use the service and am wholly unfamiliar with it except that it\u0027s a bit like an IRC chat. Why/how is this service harmful?\n\nedit: I write code for a living so if you have the knowledge of the technical side behind your reasoning please feel free to use it.",
					"date": "2017-11-14",
					"id": "dptwqyv",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "BiosElemental",
					"content": "The only argument I\u0027ve ever seen is it\u0027s centralized, but then again so are all good social network systems so...",
					"date": "2017-11-15",
					"id": "dpub95y",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "mad_crabs",
					"content": "I guess solving a longstanding issue for gamers by offering a free and far superior product can be considered harmful... Somehow? ",
					"date": "2017-11-15",
					"id": "dpudoc7",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "BiosElemental",
					"content": "Sorry I think you meant to say one of the best.",
					"date": "2017-11-15",
					"id": "dpub70s",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "cenuij",
			"date": "2017-09-13",
			"id": "6zvmuk",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go is being ported to Fuchsia OS, core services including network stack will be implemented in Go",
			"comments": [
				{
					"author": "sleepydog",
					"content": "Interesting. Given that Fuchsia is a real-time OS, I wonder if the Go scheduler and garbage collector will need to be changed/avoided to ensure certain operations can be completed/cancelled by a hard deadline. Perhaps the core services being implemented don\u0027t need real-time guarantees?\n\nI am looking forward to reading the code for the network stack.",
					"date": "2017-09-13",
					"id": "dmyyq3m",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "computesomething",
					"content": "\u0026gt;to ensure certain operations can be completed/cancelled by a hard deadline.\n\nAre you sure they are aiming for **hard** real time in Fuchsia ?",
					"date": "2017-09-14",
					"id": "dmz5o10",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "sleepydog",
					"content": "I\u0027m still not sure what Fuchsia is for :). If it\u0027s for phones, I suppose it doesn\u0027t need hard real-time guarantees.",
					"date": "2017-09-14",
					"id": "dmzewkl",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Froggie92",
					"content": "i thought i heard something about vr\n\ncould be 100% mistaken\n\nedit: looks like an IoT hub?: http://www.pocket-lint.com/news/138518-google-fuchsia-os-what-s-the-story-so-far",
					"date": "2017-09-14",
					"id": "dmzh65w",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tv64738",
					"content": "VR doesn\u0027t need hard real time either, it just needs to not miss frames in typical use.",
					"date": "2017-09-14",
					"id": "dn0khb0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "computesomething",
					"content": "Me neither, but I think hard real-time is typically only used in really critical environments, where missing a deadline could be catastrophic.",
					"date": "2017-09-14",
					"id": "dn01gie",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "doenietzomoeilijk",
					"content": "You\u0027d hope so, or at least the people complaining about audio lag etc in Android would.",
					"date": "2017-09-14",
					"id": "dmzf074",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dobegor",
					"content": "That\u0027s more up to a better CPU scheduler. Using hard real time OS in a phone just to ensure no audio lags is like shooting mosquitoes with machine gun.",
					"date": "2017-09-14",
					"id": "dmzh5m5",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "the_birds_and_bees",
					"content": "\u0026gt; Perhaps the core services being implemented don\u0027t need real-time guarantees?\n\nThat\u0027s the impression I got. It looks like most of the micro kernel is in c/++ https://github.com/fuchsia-mirror/magenta",
					"date": "2017-09-14",
					"id": "dmzj4nq",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "computesomething",
					"content": "\u0026gt;I am looking forward to reading the code for the network stack.\n\nI believe this is it:\n\nhttps://github.com/google/netstack",
					"date": "2017-09-14",
					"id": "dn011jm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sleepydog",
					"content": "Wow, thanks!",
					"date": "2017-09-14",
					"id": "dn0hb7g",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "itsmontoya",
					"content": "I was actually wondering about this when they announced Fuchsia. I thought it was weird that the core components were built in Dart. I figured Go would be more performant for a lot of these tasks. ",
					"date": "2017-09-14",
					"id": "dmz26sp",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "sebe42",
					"content": "user interfaces, sysui, apps front ends, seems flutter based, flutter uses dart.\nFor , non go, example the rust Xi editor has a flutter front end.\nThere is a lot of go in fuchsia, package management and update manager are go based\n\"pm - The Fuchsia Package Manager\"\n\"Amber: An update system for Fuchsia\"\nhttps://github.com/fuchsia-mirror?utf8\u003d%E2%9C%93\u0026amp;q\u003d\u0026amp;type\u003d\u0026amp;language\u003dgo\n",
					"date": "2017-09-14",
					"id": "dmz4ff6",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "tv64738",
					"content": "The TCP/IP stack implementation is https://github.com/google/netstack which is a platform-independent library.",
					"date": "2017-09-14",
					"id": "dmz6f73",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kjnkjnkjnkjnkjnkjn",
					"content": "Is fucsia usable as a daily driver yet if I can already use Linux?",
					"date": "2017-09-13",
					"id": "dmyqwjh",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Glinux",
					"content": "give it a few years",
					"date": "2017-09-13",
					"id": "dmyr1av",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "droiddayz",
					"content": "Now for QNX...",
					"date": "2017-09-14",
					"id": "dmz4z62",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "random314",
					"content": "Recently switched job and is now a full on Java at Amazon. I still subscribe to this subreddit and seeing Go progress daily makes me miss it so much more.",
					"date": "2017-09-14",
					"id": "dmz9ubq",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "fakeNAcsgoPlayer",
					"content": "Aw sucks, why would you use Go for core services like this? Why not something like Rust instead of Go? \n\n",
					"date": "2017-09-13",
					"id": "dmycug9",
					"isArchived": true,
					"isControversial": false,
					"score": -26
				},
				{
					"author": "geodel",
					"content": "aka: Have you thought about \u0027Rewriting it in Rust\u0027?",
					"date": "2017-09-13",
					"id": "dmydxku",
					"isArchived": true,
					"isControversial": false,
					"score": 35
				},
				{
					"author": "AnAge_OldProb",
					"content": "How can a greenfield project be a rewrite? ",
					"date": "2017-09-13",
					"id": "dmywp3l",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "You\u0027re obviously not trying hard enough. :)",
					"date": "2017-09-14",
					"id": "dmz1ddp",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "losinggeneration",
					"content": "Where there\u0027s a troll, there\u0027s a way.",
					"date": "2017-09-14",
					"id": "dmzjlmd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "soapysops",
					"content": "Not sure why people are getting so mad at you. Go is not the best language for every use case. Neither are Rust or Python. This is literally the sort of project that Rust is designed for, and it is better at it, as long as you are okay with the higher cost in programmer time.\n\nI think Fuchsia is designed in such a way that Go is actually more practical for core services than usual because of better isolation. Also, because Fuchsia is so young, writing the code in a higher level language makes sense. Rust could be used later as an optimization.\n\n",
					"date": "2017-09-13",
					"id": "dmyie25",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "ansible",
					"content": "Well, why people are downvoting /u/fakeNAcsgoPlayer is because Rust was suggested, but there were no concrete reasons why Rust would be a particularly good choice for Fuchsia.\n\nI don\u0027t know if golang is a good or bad choice, I haven\u0027t investigated the design criteria.  In my own 10-second analysis, it seems like it could be a good choice, I was thinking about golang when first reading about Fuchsia last year.",
					"date": "2017-09-13",
					"id": "dmypipu",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "ofpiyush",
					"content": "Well, the short version is, go has a GC and a scheduler and the low level stuff that one needs to do while writing OSes pretty much require managing your own memory and scheduling. One has to know exactly when things will happen.\n\nThe overhead go\u0027s runtime bring with it is a good trade off for higher-ish level work, not so much for OS level stuff.\n\nIf you work around them with your own memory management and scheduling, then you\u0027re writing C that looks like go. \n\nDoing so might trip more people than pure C or pure go.",
					"date": "2017-09-14",
					"id": "dmz45fd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tv64738",
					"content": "\u0026gt; low level stuff that one needs to do while writing OSes\n\nYou are confusing a kernel and a service running under a microkernel.",
					"date": "2017-09-14",
					"id": "dmz6hgs",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "ofpiyush",
					"content": "Thank you",
					"date": "2017-09-15",
					"id": "dn1rnw7",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "Or Go could be made better if needed. It\u0027s not like they don\u0027t have people to improve it (like they do it with every other language they have) ",
					"date": "2017-09-13",
					"id": "dmyks5b",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "cbracken",
					"content": "If you dig around a bit, you should find some [Rust](https://fuchsia.googlesource.com/magenta-rs/+/88580e68f95830124e09f727c3090408056755ea/GETTING_STARTED.md) in Fuchsia. ",
					"date": "2017-09-14",
					"id": "dmz7swq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Femaref",
					"content": "because go is from google, and fuchsia is from google.",
					"date": "2017-09-13",
					"id": "dmyfbub",
					"isArchived": true,
					"isControversial": true,
					"score": -4
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-09-13",
					"id": "dmyfqxj",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Femaref",
					"content": "sure, they could\u0027ve chosen an external system level language, but do that when you already have a system level language in house?",
					"date": "2017-09-13",
					"id": "dmygdcx",
					"isArchived": true,
					"isControversial": false,
					"score": -4
				},
				{
					"author": "lewisinc",
					"content": "I think mostly it seems like the wrong tool because Go is garbage collected, which you typically don\u0027t want in core services. Google\u0027s doing a lot of good work with making garbage collection performant, but you still need to stop execution of the program to free unused memory. They\u0027re smart people though, maybe it\u0027ll be great.",
					"date": "2017-09-13",
					"id": "dmz0yj3",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Femaref",
					"content": "thanks for taking the time and being constructive.",
					"date": "2017-09-14",
					"id": "dmzgpxp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "lewisinc",
					"content": ":)",
					"date": "2017-09-14",
					"id": "dn005qz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-09-13",
					"id": "dmygjhx",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "TheMerovius",
					"content": "No. Languages which are not memory safe have to be ripped out of our core infrastructure and die.\n\nGo is a pretty good tool, actually, for a system networking service. Networking is kinda what it\u0027s specifically designed for.",
					"date": "2017-09-13",
					"id": "dmytkwd",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "tv64738",
					"content": "Unfortunately Fuchsia/Magenta still lives in the non-memory-safe world :(",
					"date": "2017-09-13",
					"id": "dmywn75",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "TUSF",
					"content": "Fuchsia/Zircon* now.",
					"date": "2017-09-13",
					"id": "dmywppt",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-09-13",
					"id": "dmyj1dw",
					"isArchived": true,
					"isControversial": false,
					"score": -20
				},
				{
					"author": "Bake_Jailey",
					"content": "Isn\u0027t that the world we live in already? The standard library syscall package is implemented directly in assembly. https://golang.org/pkg/syscall/",
					"date": "2017-09-13",
					"id": "dmykb5w",
					"isArchived": true,
					"isControversial": false,
					"score": 39
				},
				{
					"author": "tv64738",
					"content": "You live in that world.",
					"date": "2017-09-13",
					"id": "dmyl0rq",
					"isArchived": true,
					"isControversial": false,
					"score": 26
				},
				{
					"author": "leimy",
					"content": "Uhm go doesn\u0027t need C for most things. In fact that\u0027s one reason I worry about stability of Go on Mac OS. ",
					"date": "2017-09-14",
					"id": "dmz4o1f",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				}
			]
		},
		{
			"author": "tscs37",
			"date": "2017-01-24",
			"id": "5px9as",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Pre-Alpha Prototype of the Go Dependency Tool: dep",
			"comments": [
				{
					"author": "unit_circle",
					"content": "Used this today, and it was refreshingly... Boring. I mean, it just worked... 👌\n\nLockfiles and errything",
					"date": "2017-01-25",
					"id": "dcvims7",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; it was refreshingly... Boring. I mean, it just worked...\n\nThat is what we want, no?\n\n\u0026gt; Lockfiles and errything\n\nSadly I don\u0027t think there is a way to avoid those pesky lockfiles. I was hoping for a solution that keeps the Go source code as the only source of truth (no manifest files and stuff) but after following the discussions, it didn\u0027t seem possible. :(",
					"date": "2017-01-25",
					"id": "dcvk2o8",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "unit_circle",
					"content": "\u0026gt;\u0026gt; it was refreshingly... Boring. I mean, it just worked...\n\n\u0026gt; That is what we want, no?\n\nYeah! It was great, it did crash once, but it was because I Ctrl+C\u0027d it (man, dep init takes a *long* time!) That left some things in a bad state. But error messages were helpful, the fix was quick and otherwise it just worked. I didn\u0027t have to do anything and *go build* automagically pulled from the vendored requirements.\n\n\u0026gt;\u0026gt; Lockfiles and errything\n\n\u0026gt; Sadly I don\u0027t think there is a way to avoid those pesky lockfiles. I  was hoping for a solution that keeps the Go source code as the  only source of truth (no manifest files and stuff) but after following the discussions, it didn\u0027t seem possible. :(\n\nI wasn\u0027t being facetious! As Pythonista I really appreciate the lockfile. Just having requirements isn\u0027t enough when you\u0027re trying to hunt down an issue introduced in a dependency between x.x.1 and x.x.? \u0026gt;:|\n\nIf you don\u0027t have a lockfile you have to go pull your asset from production, crack it open and get the version number of your dep. Lockfiles help get rid of the extra steps.",
					"date": "2017-01-25",
					"id": "dcvksbw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; Yeah! It was great, it did crash once, but it was because I Ctrl+C\u0027d it (man, dep init takes a long time!)\n\nThankfully there is already an [issue](https://github.com/golang/dep/issues/131) about that so hopefully it will be addressed early.\n\n\u0026gt; As Pythonista I really appreciate the lockfile.\n\nAs a gopher I appreciate the source code being the only source of truth. Not having to deal with configuration files (and other non go files) was refreshing. But in the end I agree with you. All the points you mentioned are true. It is the unfortunate reality.",
					"date": "2017-01-25",
					"id": "dcvl3ks",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Athaba",
					"content": "Wouldn\u0027t manual work?\n\nWell, I guess you have a .gitsubmodules then.",
					"date": "2017-01-26",
					"id": "dcwvh2n",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; Wouldn\u0027t manual work?\n\nNot sure what you mean by that.\n\n\u0026gt; Well, I guess you have a .gitsubmodules then.\n\nThose are cool but they are not a good dependency solution for the whole community.",
					"date": "2017-01-26",
					"id": "dcx8xjw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Athaba",
					"content": "\u0026gt; Not sure what you mean by that.\nMeant that: https://github.com/kovetskiy/manul\n\n\u0026gt; Those are cool but they are not a good dependency solution for the whole community.\nI think you are right. Don\u0027t know other VCSs well and whether they support similar.\n\nIt just felt fitting to have something, like the VCS solve that issue as a way to reuse tools, rather the re-implementing them. I don\u0027t know, but to me it seems strange, that editors and VCSs don\u0027t have to be reinvented, but somehow dependency and package management gets redone over and over.\n\nI can see some reasons for that and it\u0027s certainly not something that Go stands out with, but while the things that get done are similar, they are re-implemented over and over. Would love to see if something like Git or something smaller and generic could become the default solution.\n\nBut again, it\u0027s a more general topic and looks like the right way just hasn\u0027t come up yet.",
					"date": "2017-01-27",
					"id": "dcyj8a6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-01-25",
					"id": "dcvy0sx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "peterbourgon",
					"content": "Yes, libs can declare dep constraints, and can even check in vendor dirs, if they choose to.",
					"date": "2017-01-25",
					"id": "dcw32ru",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-01-25",
					"id": "dcw3h5b",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "peterbourgon",
					"content": "dep ensures that the entire dependency graph is solved with a single solution, and that transitive vendor folders are \u0027collapsed\u0027 to the root vendor folder. That\u0027s the problem that motivates the advice \"never vendor deps in libraries\", and one that dep solves. But perhaps I\u0027m talking past your concerns, can you clarify?\n\n\u0026gt; Honestly, if we have a good lock file and all Go packages are defining a proper dep lockfile, i see no reason to even use vendoring in the majority of the cases.\n\nVendoring in its current form is best understood as an implementation detail of how we ensure (heh) the deps declared in the manifest (really lock) file are pulled in to the compilation unit. The dep tool currently leverages the vendor dir, but there\u0027s nothing saying it will stay that way in the future.",
					"date": "2017-01-25",
					"id": "dcw42yd",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-01-25",
					"id": "dcw4nku",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "peterbourgon",
					"content": "\u0026gt; a type from a library . . . can be vendored in two separate locations, and if they\u0027re exposed somehow they become incompatible and cannot compile.\n\nThat\u0027s correct. Dependency management tools therefore typically need to solve for a single version of each dependency. If such a solution is impossible, the tool will error out.\n\n\u0026gt; Now glide can scrub vendor directories iirc, and perhaps dep does something similar \n\nIt does.\n\n\u0026gt; i don\u0027t think it matters, we can just use lockfiles and be done with it.\n\nLockfiles essentially encode the output of a solve run. They don\u0027t really solve the problem themselves, it\u0027s the solver that solves the problem :)\n\n\u0026gt; This was being discussed recently here, on whether or not we should move cmd/* out of library repos entirely. As it meant if your library also had a binary, and thus a vendor dir, you were going to cause problems and break compilations.\n\nWith `dep` and many other tools, this is no longer the case. If your repo has both libraries and binaries, and therefore has manifest/lock/vendor as well, then, assuming `dep` is used universally…\n\n- Users installing the binary will take the deps exactly as you specify them\n- Users importing your package will have your manifest constraints sort of folded in to their own manifest constraints and solved-for; if a solution is possible, great; if not, the tool will error out and you\u0027ll have to fix it somehow.\n\nHopefully this clarifies...",
					"date": "2017-01-25",
					"id": "dcw52hf",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "shovelpost",
					"content": "[\u0026lt;insert suppressed squeal of excitement\u0026gt;](http://i.imgur.com/7drHiqr.gif)",
					"date": "2017-01-24",
					"id": "dcuo9nz",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "tscs37",
					"content": "[](/lsquee) \u0026lt;/insert suppressed squeal of excitement\u0026gt;",
					"date": "2017-01-24",
					"id": "dcuocs2",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "Absona",
					"content": "**Error:** End tag had attributes.",
					"date": "2017-01-24",
					"id": "dcusxor",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "NeedsMoreTests",
					"content": "What error?\n\n    make \u0026gt; /dev/null 2\u0026gt;\u0026amp;1\n\n",
					"date": "2017-01-25",
					"id": "dcv4quv",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "F21Global",
					"content": "Super awesome! I\u0027ve tried a lot of different vendoring tools over the last year or so, and each of them had their own idiosyncrasies and bugs. I believe the official tool will consolidate most efforts and make it the de facto vendoring tool for go. ",
					"date": "2017-01-24",
					"id": "dcux3eo",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "andradei",
					"content": "Perfect birthday gift! Thank you!",
					"date": "2017-01-25",
					"id": "dcvgmj4",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "samuraisam",
					"content": "Another year, another go dependency tool to migrate to! ",
					"date": "2017-01-24",
					"id": "dcuqzda",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "tscs37",
					"content": "Well, it\u0027s the official tool, so we might see and end to that.\n\nAnd it\u0027s not yet finished either.",
					"date": "2017-01-24",
					"id": "dcur0zm",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "samuraisam",
					"content": "I\u0027m not really complaining. I hope it\u0027s the last one!",
					"date": "2017-01-24",
					"id": "dcur2cz",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "tscs37",
					"content": "I sure hope too!",
					"date": "2017-01-24",
					"id": "dcur2w7",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "sdboyer",
					"content": "you and us all :)",
					"date": "2017-01-25",
					"id": "dcv84x6",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "r3m0t3_c0ntr0l",
					"content": "I have nothing more meaningful to add other than I WANT THIS",
					"date": "2017-01-24",
					"id": "dcuwioe",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "unit_circle",
					"content": "*go get* it!\n\nI\u0027ll show myself out.",
					"date": "2017-01-25",
					"id": "dcvl4pj",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "joeyGibson",
					"content": "I\u0027m curious how they are going to handle \"versions\", since all the dependency management so far has been based on pulling the head of master of some git repo. I know that `govendor` and `gb` both let you specify a version, but that\u0027s still just a Git commit SHA.\n\nYou can still get the \"just get head of master\" functionality by adding `branch: master` in your manifest file. I guess if you use the version it\u0027s going to look for a Git tag with that name? ",
					"date": "2017-01-25",
					"id": "dcvhxq3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mcandre",
					"content": "Am I the only one having success with go1.5 experimental git submodules?",
					"date": "2017-01-25",
					"id": "dcvkgb2",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "jdeville",
					"content": "Glide uses that technique (looking for a tag with a given name to specify actual versons) and I believe this is doing the same. Iirc, the author of glide was part of the committee ",
					"date": "2017-01-25",
					"id": "dcvtpld",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "joeyGibson",
					"content": "It\u0027s certainly better than a commit SHA.",
					"date": "2017-01-25",
					"id": "dcvus18",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jdeville",
					"content": "I hate how much gophers are ok with SHAs... I\u0027ve tried to open issues to ask for changes to semver and multiple projects have replied that it is \"just not how it is done in go\"... /me facepalm ",
					"date": "2017-01-25",
					"id": "dcvx0kz",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-01-25",
					"id": "dcvy701",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jdeville",
					"content": "When you say that, are you thinking of a cargo style file that specifies the versions of the project and using that instead of tags? If so, totally in favor ",
					"date": "2017-01-25",
					"id": "dcwspr2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sdboyer",
					"content": "There are definitely advantages to that approach. But, think about it - you commit that file with a version in it, and now *every subsequent commit* \"has\" that version.\n\nAs long as we\u0027re still interacting directly with source repositories, we can\u0027t use that strategy. Cargo makes this work by having crates decide which revision of the code gets assigned that version number, when you publish the crate.\n\nMy hope is that we\u0027ll eventually be able to use VCS repos OR a central registry a la crates, at which point something like this would become more feasible.",
					"date": "2017-01-26",
					"id": "dcww93m",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; I hate how much gophers are ok with SHAs...\n\nHuh? Who says that? Besides as far as I know, the new tool will use semver.",
					"date": "2017-01-25",
					"id": "dcwhv8i",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jdeville",
					"content": "The new tool will, which I love. Numerous projects that I use as dependencies at work are against switching to semver and cite the community as a reason ",
					"date": "2017-01-25",
					"id": "dcwso2e",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; are against switching to semver and cite the community as a reason\n\nDo they have an actual reason or do they at least know the reason the \"community is against semver\" because I don\u0027t think the latter is true. \n\nTo be honest I am one of the people that are very skeptical about semver but not in the sense \"I am against semver\" but in the sense \"can we do better?\"",
					"date": "2017-01-26",
					"id": "dcx8vdy",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jdeville",
					"content": "It wasnt due to being directly against semver. It was usually refusing to version because they felt that wasn\u0027t how things were usually done in go and they would suggest a Sha instead ",
					"date": "2017-01-26",
					"id": "dcxgn4w",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sdboyer",
					"content": "The new tool allows users to place version constraints using semver (tags only), branches, arbitrarily named tags, revisions (commit hashes), or the same \u0027default branch\u0027 behavior that go get currently uses. semver strongly preferred :)\n\nAbsent any constraint, there\u0027s an [order](https://godoc.org/github.com/sdboyer/gps#SortForUpgrade) in which versions will be attempted.",
					"date": "2017-01-26",
					"id": "dcwwcoh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "joeyGibson",
					"content": "I prefer SemVer, too. I also prefer binary dependency downloads (like jar files), but I don\u0027t see that happening any time soon.",
					"date": "2017-01-26",
					"id": "dcwyld8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sdboyer",
					"content": "yeah, that\u0027s kind of a wholly separate thing. might be possible with a central registry/service, but as long as we\u0027re only working directly with VCS repositories, it\u0027s unlikely.",
					"date": "2017-01-26",
					"id": "dcx5yyh",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "epiris",
					"content": "You don\u0027t really, [versions are problem zero](https://www.reddit.com/r/golang/comments/5i47ha/the_saga_of_go_dependency_management/db6bn20/) in my opinion. They are also the easiest to solve so I am still perplexed we are so determined to engineer our way through them from the other end.",
					"date": "2017-01-25",
					"id": "dcw1b5s",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "saturn_vk",
					"content": "How would you guys provide vendoring for a repo with mulitple commands (e.g.: ./cmd/foo, ./cmd/bar). \nAre we supposed to run `dep init; dep ensure -update` inside each cmd directory?",
					"date": "2017-01-25",
					"id": "dcvp88g",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tscs37",
					"content": "I think this is more intended to work globally on a repository.\n\nSo instead of vendoring in `example.org/project/cmd/foo` you vendor in `example.org/project` and `cmd/foo` will pull it\u0027s dependencies from there and can share them with `cmd/bar`",
					"date": "2017-01-25",
					"id": "dcvp8zx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "saturn_vk",
					"content": "I never understood how vendoring works. A lot of places glance over it saying that the go tool looks for ./vendor, but that would mean that if you place the directory in the VCS root, sub packages would not use it. Moreover, how would you do vendoring for multiple commands if that was the case\n\nBased on what you said that might not be the case. And if so, does that mean that `dep init` would gather all dependencies from all sub directories and put them in the manifest?",
					"date": "2017-01-25",
					"id": "dcvpukk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tscs37",
					"content": "Go will look for a vendor folder in the current directory first.\nThen in the parent directory and so forth until it can no longer shorten the path without leaving the gopath of the current project. (IIRC)\n\nIn practise this means that if you have `example.org/project/cmd/foo`, then the go tool will look for the following folders in that order:\n\n* `example.org/project/cmd/foo/vendor`\n* `example.org/project/cmd/vendor`\n* `example.org/project/vendor`\n* `example.org/vendor`\n\nIf it finds any of these vendor folders, all imports are interpreted as being relative to this vendor folder, the tool will also take the longest path with a vendor folder.\n\nSo if you have `example.org/project/cmd/vendor` and `example.org/project/vendor`, the go tool will use `cmd/vendor` to compile anything under `cmd`.\n\n\u0026gt;And if so, does that mean that dep init would gather all dependencies from all sub directories and put them in the manifest?\n\nAs far as I can tell, yes, the dep tool will look for dependencies from the current directory downwards and write a vendor folder into the current folder.\n\nSo you can execute it inside `cmd/` and at the project root.",
					"date": "2017-01-25",
					"id": "dcvpz1l",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "m3wm3wm3wm",
					"content": "Is this official tooling? It is under golang github org.",
					"date": "2017-01-25",
					"id": "dcvgh5p",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "swagpapi420",
					"content": "Yes. The repo is http://github.com/golang/dep",
					"date": "2017-01-25",
					"id": "dcvheg8",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "sdboyer",
					"content": "No! Not \"official\" - not yet. I\u0027m working on updating the README to reflect this.\n\nThe goal is very much to make this tool official (and eventually merge it into the go toolchain), but it remains an experiment for now, and there\u0027s no guarantee we\u0027ll get there.",
					"date": "2017-01-26",
					"id": "dcwwkbw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SerialMiller",
					"content": "Does anybody know if it possible to have the manifest and lock file in your `$GOPATH/.`, and make `dep` vendor to `$GOPATH/src/vendor`, while the rest of your code is just in `$GOPATH/src/main`, `$GOPATH/src/businesslogic` etc.?",
					"date": "2017-01-25",
					"id": "dcvslvj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jdeville",
					"content": "You probably could by setting a git repo to GOPATH, but that seems like a lot of extra work when you could just move it down a level to fit the expected workflow ",
					"date": "2017-01-25",
					"id": "dcvtr7r",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SerialMiller",
					"content": "For a lot of my projects GOPATH is my git root. Will experiment with it. Thanks :)",
					"date": "2017-01-25",
					"id": "dcvu8bp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jdeville",
					"content": "That\u0027s fair. I tried that at first but then just setup a single GOPATH and put my projects into it instead. I prefer that to changing GOPATH as I move around ",
					"date": "2017-01-25",
					"id": "dcvwxio",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sdboyer",
					"content": "This isn\u0027t the intended use pattern, but it should probably work (once we fix [this](https://github.com/golang/dep/issues/148), anyway). It\u0027ll end up meaning that dep tries to compute a single dependency graph for EVERYTHING in your GOPATH.\n\nIf you do try this, please provide feedback on your experience in an issue on the repo - it\u0027d be great to hear more :)",
					"date": "2017-01-26",
					"id": "dcwwp14",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "elingeniero",
					"content": "Finally Go might become a real modern language. ",
					"date": "2017-01-24",
					"id": "dcv4ghe",
					"isArchived": true,
					"isControversial": false,
					"score": -24
				},
				{
					"author": "swagpapi420",
					"content": "Go is probably the best general purpose language right now. Oh and it\u0027s definitely modern. Go has had package managers before this. ",
					"date": "2017-01-25",
					"id": "dcvnfxi",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				}
			]
		},
		{
			"author": "divan0",
			"date": "2016-04-02",
			"id": "4d0yft",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.7 toolchain improvements",
			"comments": [
				{
					"author": "bmhatfield",
					"content": "Thanks for putting this post together! Appreciate all of the effort to quantify the 1.7 changes, and it\u0027s awesome that they are a net improvement in all dimensions!",
					"date": "2016-04-02",
					"id": "d1mx4u9",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "LordAro",
					"content": "I see compile times getting compared to 1.4.x a lot, what was added to 1.5 that slowed things down so much?",
					"date": "2016-04-02",
					"id": "d1n0o4z",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Frakturfreund",
					"content": "Both the Go compiler and the runtime where converted from C to Go.",
					"date": "2016-04-02",
					"id": "d1n0qhq",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "[deleted]",
					"content": "#",
					"date": "2016-04-02",
					"id": "d1ngdr3",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "Because they can now move a lot faster than before... And everyone can, theoretically, contribute to the code. And because even with this slowdown, Go is still vety fast compared to many, many other languages. But people like to exaggerate things because... Internet ",
					"date": "2016-04-02",
					"id": "d1nhif1",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "Jahava",
					"content": "I think it\u0027s also worth emphasizing that using the new Go compiler resulted in a slower *compile* time (time to build), not the actual performance of the application at runtime. A 2x loss of runtime performance would almost certainly never fly.",
					"date": "2016-04-03",
					"id": "d1nkix2",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "SilentWeaponQuietWar",
					"content": "I mean, is it exaggerated? It seems like they\u0027ve been very transparent about the speed loss. It\u0027s a fairly moot point because the speed is still fast as you mentioned--but the stats speak for themselves, no hyperbole needed.",
					"date": "2016-04-03",
					"id": "d1nk5lk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dilap",
					"content": "(Side-note: people are too trigger-happy with the downvote button.)\n\nI expect it\u0027ll definitely be worth it in the long-term, for all the reasons that many projects are worth doing in Go instead of C. The new SSA backend which is giving us smaller executables and faster compiled code is already one payoff, in a very short amount of time.",
					"date": "2016-04-03",
					"id": "d1oj1m4",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "qu33ksilver",
					"content": "Sweet !\n\nThanks again to the effort put together by the go team. Eagerly waiting for the release.",
					"date": "2016-04-03",
					"id": "d1o3jro",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kaeshiwaza",
					"content": "The tests are with SSA enable and his down and plus sides ?",
					"date": "2016-04-02",
					"id": "d1mwxmf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "kirilldanshin",
			"date": "2016-10-17",
			"id": "57w79c",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Why you REALLY should stop using Iris.",
			"comments": [
				{
					"author": "manueslapera",
					"content": "This is becoming a popcorn worthy drama",
					"date": "2016-10-17",
					"id": "d8vj8d8",
					"isArchived": true,
					"isControversial": false,
					"score": 57
				},
				{
					"author": "kirilldanshin",
					"content": "Some time ago I merged PR with removing Iris from awesome-go (https://github.com/avelino/awesome-go/pull/1135). But he want to re-add it, and see what happenned.",
					"date": "2016-10-17",
					"id": "d8vgimn",
					"isArchived": true,
					"isControversial": false,
					"score": 32
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-17",
					"id": "d8vme8r",
					"isArchived": true,
					"isControversial": false,
					"score": 26
				},
				{
					"author": "bgeron",
					"content": "Could also call it copyright infringement I think. ",
					"date": "2016-10-17",
					"id": "d8vriln",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "jandunm",
					"content": "As far as I know from my experience with iris, features that its provides are not exists in other web frameworks I have ever worked with,  your comment is meaningless, be careful, do not write things you don\u0027t know for sure(iris is a copyrighted project, if iris\u0027 author learns about your comment, he may asks from reddit to remove your comments, by the law)\n\nIt\u0027s somewhat depressing how many people take this post seriously.﻿",
					"date": "2016-10-28",
					"id": "d9arz84",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Hipponomics",
					"content": "hahaha, hello obvious Gerasimos Maropoulos.",
					"date": "2016-11-14",
					"id": "da0hynr",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "chezalfredo",
					"content": "[Iris is under attack! ](http://i.imgur.com/Hgp41wE.png)\n😂",
					"date": "2016-10-18",
					"id": "d8wiacs",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "kirilldanshin",
					"content": "LOL :D",
					"date": "2016-10-18",
					"id": "d8wirzu",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "andradei",
					"content": "This is priceless!",
					"date": "2016-10-19",
					"id": "d8yezew",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "robvdl",
					"content": "He just squashed all his commits again, 10 minutes ago, now there is only a single commit in Iris.\n\nWhat I don\u0027t get is why he still has 5000 stars? do people not remove stars from his repo once they find out about Iris and the authors dealings?\n\nI know I had a friend that was almost going to pick and use Iris so I had to point him to articles like this to talk him out of it, now he won\u0027t use it which is great.  But the point is, he still didn\u0027t know about Iris even though it\u0027s been mentioned on reddit a lot.\n\nThis almost needs to be a sticky post \"don\u0027t use iris\", it used to be \"don\u0027t use martini\" but now it seems we need to protect new developers from picking up Iris more than anything.",
					"date": "2016-10-17",
					"id": "d8vzwg1",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "FIuffyRabbit",
					"content": "I\u0027m not saying this with fact but do botted stars exist? ",
					"date": "2016-10-17",
					"id": "d8w1iiq",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "zossle",
					"content": "Yes. Something similar happened with the [PHP-FIG](https://news.ycombinator.com/item?id\u003d11661986).",
					"date": "2016-10-17",
					"id": "d8w8p69",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "aequasi08",
					"content": "Didnt really happen to PHP-FIG, but to a framework in the PHP community (PHPixie). Was rumored to be the framework author that did the botting.",
					"date": "2016-11-21",
					"id": "da9drwu",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Thin_K",
					"content": "Yes. Star botting is actually a thing.",
					"date": "2016-10-17",
					"id": "d8w8uar",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "ineedmorealts",
					"content": "Why tho? AFAIK stars don\u0027t so anything ",
					"date": "2016-10-19",
					"id": "d8zfpbh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Thin_K",
					"content": "Neither does reddit karma. Some people still do crazy things to get it.",
					"date": "2016-10-21",
					"id": "d91inxe",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "gohacker",
					"content": "They get you to the trending page: https://github.com/trending?l\u003dGo\n\nIris is there as of 2016/10/20.\n\nAnd the more stars, the higher you are in the search results.",
					"date": "2016-10-20",
					"id": "d902aux",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Lars_T_H",
					"content": "\u0026gt; What I don\u0027t get is why he still has 5000 stars? do people not remove stars from his repo once they find out about Iris and the authors dealings?\n\nI had just fallen over the Iris blog post. read it, and jumped to reddit and came to your post.\n\nI had removed my star. Thank you for your post.",
					"date": "2016-10-21",
					"id": "d92awk2",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "kirilldanshin",
					"content": "even if you use martini it isn\u0027t so bad like if you use iris, I think.",
					"date": "2016-10-17",
					"id": "d8wd5j6",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "shift8creative",
					"content": "I read something a while ago (always too busy) about this project, so I starred it because it sounded neat and I\u0027m a fan of fast http frameworks (just saves me a lot of boilerplate). I recently happened upon this as I sat down to research which one might be good to use for a new project.\n\nPerhaps many others are in this boat too as we all see new things sprouting up and immediately star them as a bookmark for later.\n\nMany of the \"don\u0027t use this\" posts I see are usually superficial. It\u0027s more like, \"don\u0027t use this under X condition\" it\u0027s opinion and circumstance of your application. However this. This is entirely something different and is about morality. It\u0027s a very valid concern given we are dealing with open-source software. That said, I do believe we are free to star and use whatever we want.\n\nMe personally? I just removed the star on GitHub and won\u0027t use this project on general principle. I have only about a dozen others to choose from, but would rather write my own with standard libraries than support something like this. I seriously can not believe someone, in the open-source space, would do this. One should only be so lucky to have thousands of stars and interest in their projects...And to take a dump on the foundation of open-source? Unbelievable.",
					"date": "2016-10-23",
					"id": "d94dzf3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "semi-",
					"content": "Maybe instead of a sticky we need a not-awesome-go to list projects that should be avoided, why, and any suggested replacements. ",
					"date": "2016-10-18",
					"id": "d8wqwnj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "4ad",
					"content": "Their English is so bad I couldn\u0027t understand what was going on.\n\nSo, what is going on? Why should I care?\n",
					"date": "2016-10-17",
					"id": "d8wdynd",
					"isArchived": true,
					"isControversial": false,
					"score": 37
				},
				{
					"author": "dlsniper",
					"content": "Depends.\n\nThe author has been called on the second time for various issues with the project and for the second time he\u0027s trying to downplay them.\nRight now the project closed the issues in an attempt to hide the previous issues opened.\n\nIf you really want to read about it do it here: http://www.florinpatan.ro/2016/10/why-you-should-not-use-iris-for-your-go.html. I\u0027ve done the post to warn people about it and it seems the author is doing more to destroy his image and credibility by each second that passes. At least some people have their code mentioned again in the project but there are still plenty of other issues.\n\nI hope this helps shedding some light about it.\n\nP.S. I\u0027m not a native English speaker so any tips on how to improve it would be great. Thank you.",
					"date": "2016-10-18",
					"id": "d8wic7b",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "4ad",
					"content": "What a wreck.\n\nWhy do people invest time in this? Just stay away from crazy.\n",
					"date": "2016-10-18",
					"id": "d8wzfig",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dlsniper",
					"content": "I\u0027ve only wrote it because it breaks the user experience of Go newbies so much it creates a bad image on the ecosystem. ",
					"date": "2016-10-18",
					"id": "d8wzgsh",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-17",
					"id": "d8vz48q",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-17",
					"id": "d8w7a8z",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "FIuffyRabbit",
					"content": "Now it\u0027s\n\n\u0026gt;Author of the most discussed package in the Go Community. ------- I know one thing: that I know nothing.\n\nHe has completely rewritten his bio on his about.me, changed all of his photos, added MLS Tech Ltd. to his github...",
					"date": "2016-10-18",
					"id": "d8wquhd",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "zandorz",
					"content": "i started with Echo, then moved to Iris, then totally regreted my decision, and now i\u0027m back to Echo",
					"date": "2016-10-17",
					"id": "d8w6ucx",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "shift8creative",
					"content": "I almost did this. It was this reddit post that saved me from doing the EXACT same thing. Thank you for your comment.",
					"date": "2016-10-23",
					"id": "d94e57q",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "thewhitetulip",
					"content": "Since when did this began? ",
					"date": "2016-10-17",
					"id": "d8vjved",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "AlekSilver",
					"content": "https://www.reddit.com/r/golang/comments/4psfzq/katarasiris_author_is_crazy/",
					"date": "2016-10-17",
					"id": "d8vkjvr",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "bobroberts10",
					"content": "It seems that the iris chat is not as friendly as the author pretends to be.\nPeople are being kicked for pointing out possible Go code issues, asking questions or right now the chat is in read-only mode and users are left without answers to questions on why the commits where removed and why the Issues on Github are closed:\n\n- http://i.imgur.com/TvfJMGF.png\n- http://i.imgur.com/iORGP6i.png\n- http://i.imgur.com/WYCbF4F.png",
					"date": "2016-10-18",
					"id": "d8wl17o",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "shackra",
					"content": "wow, what\u0027s up with that guy!?",
					"date": "2016-10-20",
					"id": "d8zwcn4",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "pinpinbo",
					"content": "Gotta say, I am a happy user of [chi](https://github.com/pressly/chi).\n\nZero regret moving to it from gorilla/mux.",
					"date": "2016-10-18",
					"id": "d8wl9me",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "luckyleprechaun98",
					"content": "Thanks for that.  I hadn\u0027t seen chi before but it looks really good. ",
					"date": "2016-10-19",
					"id": "d8ym1hq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "justinisrael",
					"content": "I\u0027m really confused at the whole purging of commit history practice. Maybe an Iris supporter can explain this to me? For a while now I had only been thinking about it from the standpoint of masking contributions in the history. But randomly it clicked for me that it also kills support for anyone on, say, v3 of Iris that needed a patch fix. Where do those patch fixes go? If v4 is a major version with breaking changes, it means you are instantly required to switch major versions of Iris in your project if you want support. What about projects that only vendor the commit information and not the actual source? Those projects can no longer be built as-is, because previous major versions are now gone. \n\nI would love to honestly hear an explanation from the Iris community about how this is inspiring their confidence in the project? ",
					"date": "2016-10-18",
					"id": "d8xnosy",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dlsniper",
					"content": "I\u0027d like to point out the the iris project open-source community as of time of writing is composed of 12 different projects from 9 different users indexed by godoc and here\u0027s the link for it: https://godoc.org/github.com/kataras/iris?importers\n\nAnd the best part is that you don\u0027t even have to trust my word on it, it\u0027s all public record that can\u0027t be altered by me or anyone else :)",
					"date": "2016-10-18",
					"id": "d8xqjct",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "prodz",
					"content": "This doesn\u0027t solve the problems that affect people who use, let\u0027s say, glide, which depends on commits to be able to build.",
					"date": "2016-10-19",
					"id": "d8yucph",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "Well, talk to him, not me. I\u0027m not the one deleting history and force pushing into master just so that I can hide my mistakes.\n\nOr maybe he\u0027ll label you as a competitor and close the issues again.\n\nWho knows? ",
					"date": "2016-10-19",
					"id": "d8yxnzq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "skyrim4life",
					"content": "I had starred this repo a long time back, Now after reading all this shit drama, I removed it.\n\nCurrently saw the repo, he squashed everything. The entire repo has 10 commits lol.",
					"date": "2016-10-20",
					"id": "d90041w",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "shuwatto",
					"content": "I don\u0027t really understand why this guy keeps on telling cheap lies and believes he can convince others?  \n \nIt\u0027s like shooting himself with AK-47.",
					"date": "2016-10-17",
					"id": "d8wd4ky",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "thesyncim",
					"content": "Iris broke my code so many times that i cannot remember(had to switch to GIN) (API breaks without warning,commit history deleted (multiple times,including my Pull requests))",
					"date": "2016-10-25",
					"id": "d971g4p",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "jandunm",
					"content": "It\u0027s somewhat depressing how many people take this post seriously.﻿",
					"date": "2016-10-28",
					"id": "d9arjgw",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "1 month later https://github.com/kataras/iris/commit/948eb2ecc132e299e476bfbd051a8100e216f2ac \n",
					"date": "2016-11-15",
					"id": "da0nnjt",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dj-amma",
					"content": "Fuuuuuuck. I can\u0027t believe this. I spend 2 days on writing a chat using websockets with Iris. Now I don\u0027t want to touch this. I kept telling myself \"do not read reviews until you\u0027re done, do not do it\" because everytime I do it just slows me down and fills me up with unnecessary doubts. Should have done it this time. 2 days wasted. ",
					"date": "2016-10-18",
					"id": "d8xgd2p",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "m3wm3wm3wm",
					"content": "Why does a chunky part of the divided Go community get attracted to libraries/frameworks/kits/whatever-you-call-it that promise a nice and easy solution for web dev in Go? A vacuum which I argue can only be filled by an official, or at least a de facto community, solution. Otherwise, we\u0027ll be witnessing a sudden spike of creatures like Martini, and now Iris.\n\nOnce there was a vacuum of lack of http context, which now finally, after so many years, is officially supported by `context.Context`. It seems like a obvious requirement to have a sensible context, but the ultra right wing Go community (aka: _all you need is net/http_) had always rejected it. Once it became part of the official package, suddenly it is acceptable by those people like something sacred.\n\nYet another vacuum is the lack of an official package manager. Again, it seems obvious for a modern language to come with one,... but then again the community is so divided on this, and we have witnessed the birth and death of so many Go package managers. Again, it looks like finally there are some serious moves about an official support.\n\nI believe ultimately there will be a de facto Go web stack, it is inevitable. The reason is not technology-driven, the reason is that there is a big vacuum for this, validated over and over by the community need. But it could take many painful years for it to appear. Until then, I\u0027d suggest to have enough popcorn supply.",
					"date": "2016-10-17",
					"id": "d8vqx52",
					"isArchived": true,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "comrade_donkey",
					"content": "I can see your point.\n\nPersonally, I find net/http to be abstract or \"deep\" enough for Go/my standards.  But if you\u0027re used to build on abstractions, regardless of their depth, as is the case in so many other languages/environments, I completely understand the perceived void you talk about.\n\nWhen somebody asks me to recommend a framework to them, I give the \"just use net/http\" answer, not because I\u0027m a purist, but because it\u0027s the simplest answer and one where I can actually help them if they have questions down the road.",
					"date": "2016-10-17",
					"id": "d8vvotd",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "weberc2",
					"content": "So you want standardization to happen faster, but what solution do you propose? Presumably you agree that we should settle on a high quality solution, but how do we figure that is without lots of people experimenting with said solution?",
					"date": "2016-10-17",
					"id": "d8whd8q",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "FIuffyRabbit",
					"content": "Except this  solution was called aids from the beginning and has proven to be that and more. ",
					"date": "2016-10-18",
					"id": "d8wmtpv",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "weberc2",
					"content": "Not following. Try again?",
					"date": "2016-10-18",
					"id": "d8wmyz7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "FIuffyRabbit",
					"content": "Not so much the project but the author. Essentially faking test results when he first pushed the package. Since then, he has been stealing code under the guise of open-source and claiming it as his own. He acknowledges he does it but won\u0027t fix it. ",
					"date": "2016-10-18",
					"id": "d8wrp8q",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "weberc2",
					"content": "I think you misunderstood the original post you responded to. In no way is your point an exception to mine; I hold the same position as you on this project, but that\u0027s all unrelated to this particular thread, since the person I responded to was complaining about the slow pace of standardization within Go.",
					"date": "2016-10-18",
					"id": "d8wrzsf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "FIuffyRabbit",
					"content": "Heh, sounds like it. Thought it was in reference to iris being the project for the standardization.",
					"date": "2016-10-18",
					"id": "d8ws7xl",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-18",
					"id": "d8wtbcf",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "Glide is definitely my favorite as well, and feels more idiomatic than gb. ",
					"date": "2016-10-19",
					"id": "d8y5595",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "imdevin567",
					"content": "https://xkcd.com/927/",
					"date": "2016-10-18",
					"id": "d8x7xl9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "xkcd_transcriber",
					"content": "[Image](http://imgs.xkcd.com/comics/standards.png)\n\n[Mobile](https://m.xkcd.com/927/)\n\n**Title:** Standards\n\n**Title-text:** Fortunately, the charging one has been solved now that we\u0027ve all standardized on mini\\-USB\\. Or is it micro\\-USB? Shit\\.\n\n[Comic Explanation](https://www.explainxkcd.com/wiki/index.php/927#Explanation)\n\n**Stats:** This comic has been referenced 3674 times, representing 2.7955% of referenced xkcds.\n\n---\n^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to\u003dxkcd_transcriber\u0026amp;subject\u003dignore%20me\u0026amp;message\u003dignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to\u003dxkcd_transcriber\u0026amp;subject\u003ddelete\u0026amp;message\u003ddelete%20t1_d8x7ybw)",
					"date": "2016-10-18",
					"id": "d8x7ybw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "\u0026gt; I believe ultimately there will be a de facto Go web stack, it is inevitable. The reason is not technology-driven, the reason is that there is a big vacuum for this, validated over and over by the community need. But it could take many painful years for it to appear. Until then, I\u0027d suggest to have enough popcorn supply.\n\nSadly you are missing the point on this. There are many alternatives out there, some of them idiomatic, some of them less idiomatic. But, at least as far as I know, iris is the only one which displays such leadership and does not attribute code to the rightful owners. And this happens for a second time now. That\u0027s what all of this is about. ",
					"date": "2016-10-17",
					"id": "d8vvbw8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "aboukirev",
					"content": "I\u0027d like to point also that official `context` is well suited for request cancellation.  However, it\u0027s not as good for passing values down the middleware/handler chain - to many reallocations of entire request that lead to sometimes unpredictable results.  I much prefer 3rd party context that wraps these additional parameters/values and parsed information from the route and provides various convenience methods.  Cleaner testable code is achieved that way.",
					"date": "2016-10-18",
					"id": "d8wi9rn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mixedCase_",
					"content": "There are two \"de facto\" widely accepted Go web stacks. One is the standard library\u0027s net/http, the other is httprouter. Similarly to how sqlx is widely known to be a good extension to database/sql, the Gorilla toolkit extends upon net/http.\n\nAs for httprouter, there\u0027s things like labstack/echo and gin that extend upon the first to cover some common situations that you might or might not face in the particular project you\u0027re working on; but if you are facing those situations, you would\u0027ve had to roll your own solution anyway.\n\nNow you could say \"why two stacks\". Well net/http supports a lot of features that are commonplace and often expected across the industry, while httprouter sacrifices some of them to squeeze some extra performance in case you don\u0027t need them. If you have such a hard time reading a couple of project pages to understand why they exist, then just go to net/http and if you need something on top, Gorilla.",
					"date": "2016-10-17",
					"id": "d8vvkb7",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "aboukirev",
					"content": "`labstack/echo` does not \"extend\" on `httprouter`.  It allows paths like `articles/all` and `articles/:id` routes with different handlers coexist and be properly routed.  Besides that a lot of convenience methods on top of the router, and pretty well engineered at that, are what makes `echo` attractive.  By the way, `v3` branch drops off support for `fasthttp`and gets back to its nice and lean roots but using the latest `context`.  I tried to build on top of `go-playground/lars` but ended up writing a whole library.  Then decided to go back to `echo.v3` and need only 2 files out of that library.  Everything else is \"batteries\" in `echo`.  YMMV, as usual.",
					"date": "2016-10-17",
					"id": "d8vzfzy",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "karnd01",
					"content": "Thanks for the shout out @aboukirev just wanted to say that go-playground/lars is an http router and not a framework hence needing to write some things yourself :)",
					"date": "2016-10-17",
					"id": "d8w82d5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "andradei",
					"content": "Iris author really teaches how to be a dictator in open source.",
					"date": "2016-10-19",
					"id": "d8yf692",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "I hate to draw conclusions like this, but the horridly broken english alone is enough for me to completely ignore his project. It isn\u0027t _that_ hard to find a native english speaker to help out with your documentation. If your project is good enough, you shouldn\u0027t even need to look for it; its the lowest of low hanging fruit that potential contributors can tackle. Clearly his project isn\u0027t good enough.",
					"date": "2016-10-19",
					"id": "d8y57uv",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "dlsniper",
					"content": "If you judge a project just by the broken English of a noj-native speaker then I\u0027d say your way to evaluate things could use an update.\n\nNot everyone is a native speaker.",
					"date": "2016-10-19",
					"id": "d8ygfbf",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "thewhitetulip",
					"content": "It is hard to get someone to help you out with documentation or anything for that matter. I speak from experience. I asked ten people to help me with the FOSS book I initiated, and only a few helped me out, others ignored. I understood that people are busy with things! It is difficult to build a community around your project.\n\nAlso, the quality of project does not depend on how well you speak English. (although the quality of the tech docs can be considered a measure of quality) \n\nEven I am not a native speaker.",
					"date": "2016-10-19",
					"id": "d8yisbc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "There\u0027s a huge difference between a book with potentially arcane topics and a simple grammar check. Anyone who speaks english well, not even natively, could do it. I\u0027ve done it for over a dozen random projects on Github. \n\nThe quality of the project does not depend on how well you speak English. Except when it does. Bad english might mean terribly commented code. This was a big problem with OpenOffice for a long time that scared contributors away. It might mean terrible technical documentation. It might be a canary for a lead maintainer who is a pain to work with. ",
					"date": "2016-10-19",
					"id": "d8zg9y4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "I have no idea about OpenOffice, but I can testify that it is difficult to get someone to edit your project and help you with docs",
					"date": "2016-10-20",
					"id": "d8zl2y1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "Not for a repository with 5.5 thousand stars. ",
					"date": "2016-10-20",
					"id": "d8zm8ju",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "I have a repository with 1049 stars, still find it difficult to do what you asked.",
					"date": "2016-10-20",
					"id": "d8zwe7w",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shadowmint",
					"content": "oh come on, grow up everyone.\n\nIf you don\u0027t like iris, don\u0027t use it. \n\nI think it\u0027s a stupid project but I\u0027m sick to death of everyone talking about it here and on the gophers slack. \n\nJust let it die quietly. \n\nHow exactly do you imagine shouting and making a fuss about this is going to encourage people not to use it?\n\nAnyone who has enough sense to listen *already* doesn\u0027t use it; all you\u0027re doing is pulling more page views to it.\n\nRemember the lesson? http://99u.com/articles/25151/dont-feed-the-haters-the-confessions-of-a-former-troll\n\nDon\u0027t feed trolls.",
					"date": "2016-10-17",
					"id": "d8vlplt",
					"isArchived": true,
					"isControversial": false,
					"score": -14
				},
				{
					"author": "Zyst",
					"content": "I didn\u0027t know about the Iris situation.\n\nBased on the Iris situation I\u0027ve read yesterday and today I likely wouldn\u0027t use it.\n\nBoth of the threads informed me, at the very least. Likely others too. \n\nSo no, I hope people don\u0027t stop talking about it, I hope that when someone is asking about \"which framework to use\", someone pops up and says \"I just joined yesterday but don\u0027t use Iris\". For that matter, Iris author frankly doesn\u0027t seem to be a troll. Just awfully misguided in his practices. \n\nI understand that it might be a mild inconvenience for someone who spends their entire time immersed in the language community, but hey, you are the vast minority. The rest of us would really have no way to find out if it weren\u0027t for things such as this.",
					"date": "2016-10-17",
					"id": "d8vocfi",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "SaltTM",
					"content": "It should probably be titled: stop sending PR\u0027s if the author is taking credit for them.",
					"date": "2016-10-17",
					"id": "d8vn91d",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "tech_tuna",
					"content": "\u0026gt;Anyone who has enough sense to listen already doesn\u0027t use it\n\nSure, but not everyone has heard about this yet.  I\u0027m glad this was posted, but there\u0027s no more drama for me, I\u0027m just going to disregard this project and move on.\n\nIt\u0027s that simple really.",
					"date": "2016-10-17",
					"id": "d8voskw",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-17",
					"id": "d8vuot3",
					"isArchived": true,
					"isControversial": false,
					"score": -47
				},
				{
					"author": "mixedCase_",
					"content": "So you didn\u0027t read the article. Okay, thanks for letting us know.",
					"date": "2016-10-17",
					"id": "d8vuyjp",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-17",
					"id": "d8vv6wp",
					"isArchived": true,
					"isControversial": false,
					"score": -21
				},
				{
					"author": "mixedCase_",
					"content": "\u0026gt; how he manages his project.\n\nThat\u0027s one way of saying breaking the law I guess.",
					"date": "2016-10-17",
					"id": "d8vw5oy",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-17",
					"id": "d8vwf3r",
					"isArchived": true,
					"isControversial": false,
					"score": -17
				},
				{
					"author": "justinisrael",
					"content": "\n\n\u0026gt;Don\u0027t like Iris ? then go write something better instead of trying to shoot down that project and its author. Of course it\u0027s easier to destroy someone\u0027s career with slander than building an effective tool. But it\u0027s seems that bullying is the go way.\n\nIsn\u0027t \"slander\" when you say things that aren\u0027t true to attempt to damage someone\u0027s image? As far as I know, people are just making the community aware of facts regarding extremely poor community behavior. And if all you saw are two github issue links, then you have some more history to read. \n",
					"date": "2016-10-17",
					"id": "d8w1yy6",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "icholy",
					"content": "\u0026gt; the same kind of cabal was orchestrated against Martini\u0027s author , until he quits Go\u0027s community.\n\nI don\u0027t think that ever happened.",
					"date": "2016-10-17",
					"id": "d8vxd3k",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-17",
					"id": "d8vxtvp",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "bonekeeper",
					"content": "He just wrote Negroni instead as a more idiomatic option.",
					"date": "2016-10-17",
					"id": "d8vznq0",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "FIuffyRabbit",
					"content": "\u0026gt; unless you sue him successfully he didn\u0027t break any law, and it\u0027s not even up to you to decide.\n\nJust because you killed someone  in cold blood and not get charged for it doesn\u0027t make it murder and illegal, right?",
					"date": "2016-10-17",
					"id": "d8w4w1r",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "goomba_gibbon",
					"content": "This guy...\n\nI don\u0027t think there is any basis for calling this harassment. It would be a concern for any team using or contributing to open-source software if commit history is being squashed and licences are being removed, seemingly at random, on purpose!\n\nIt\u0027s not just the go community to consider, it gives open source software a bad name.",
					"date": "2016-10-17",
					"id": "d8w1m94",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "nameless912",
					"content": "This isn\u0027t shitting on someone else\u0027s work. This is literally illegally removing another project\u0027s license. Besides that, he\u0027s being a HUGE dick to the rest of the Go community. You. Do. Not. Squash. Commits. in open source.\n\nI mean, forget squashing commits, this guy goes one level further: he edits git\u0027s history so that all contributions look like they\u0027re from him, and then he squashes those too. First of all, it\u0027s literally impossible to navigate the history of his project, which is against the spirit of open source, but second of all, it\u0027s incredibly rude to completely wipe out others\u0027 contributions.\n\nAnd he does it *all for the starz bruh*, fuck that. He\u0027s literally doing this for fake internet points.",
					"date": "2016-10-18",
					"id": "d8ws85s",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "koalefant",
			"date": "2016-09-29",
			"id": "552gfp",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "Was talking to a fellow developer last night and they were trying to deploy a rails server on elastic beanstalk and having a lot of trouble. Their app is quite simple logic and feature wise but they have a lot of dependencies in the form of gems. Most of the time they don\u0027t use half of the features. As a result their zipped file size comes to hundreds of megabytes each time they need to deploy.\n\nMeanwhile I\u0027m sitting here uploading my statically linked binary file with minimal dependencies on large external frameworks, don\u0027t even need an ORM (most of the time im returning json results from PostgreSQL and just json_agg everything without having to unmarshal/marshal into structs) - so easy. My whole zipped file comes to less than 15MB each time I need to deploy.\n\nSame with learning Swift. I started with Swift 1, did desktop applications. Then they came out with Swift 2 and the recent Swift 3. Each time introducing breaking API changes. Then when I tried learning Swift 3 again I was pulling my hair at the way errors were managed - try/throw/catch anyone? Optionals are such a pain too and I feel are at times a proxy for whether there was an error (if let foo \u003d optional almost means \u0027I want to run the below code if there isn\u0027t an error), without dealing with the error itself.\n\nThe Go community I find is super helpful and friendly too. So many great articles and even posts here to learn from.\n\ntl;dr breathing sighs of relief how simple and uncomplicated Go is and how much headache it has saved me",
			"title": "Go has spoiled me",
			"comments": [
				{
					"author": "pschlump",
					"content": "I came to Go because it outperformed Node.JS .  I stayed because it was way easier to develop in Go with real concurrency controls than it was to use callbacks for everything.  Go just works.  Go is fast.",
					"date": "2016-09-29",
					"id": "d86znnl",
					"isArchived": true,
					"isControversial": false,
					"score": 67
				},
				{
					"author": "Probotect0r",
					"content": "How is back end development in Go? I am deep into nodejs, but have been considering learning Go for a while. Anything I should keep in mind before dropping in?",
					"date": "2016-09-29",
					"id": "d870vw0",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "RevMen",
					"content": "Go is an excellent alternative to Node.js. I moved from Node to Go and I won\u0027t be going back.\n\nMy problems with Node were difficult concurrency (unless the event loop is enough for you) and massive callback pyramids. Go solves both of those issues nicely.\n\nIt\u0027s actually really easy to learn. I took a week to dive in and I felt like I was pretty comfortable with it after that.\n\nGo isn\u0027t as loosey-goosey as Javascript, so you\u0027ll have to adjust to using types and Go idioms, but it really is for the best and becomes easy after just a day or two.",
					"date": "2016-09-29",
					"id": "d871huu",
					"isArchived": true,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "jadbox",
					"content": "\u0026gt;  massive callback pyramids\n\nCheck out RxJS... it\u0027s amazing and can\u0027t imagine going back to Node callbacks.",
					"date": "2016-09-30",
					"id": "d87pxnq",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "a_blue_ducks",
					"content": "Coroutines and soon async/await get the job done pretty nicely too",
					"date": "2016-09-30",
					"id": "d87v0uw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "saturn_vk",
					"content": "ReactiveX is a great idea for any language. It\u0027s a shame it can\u0027t be implemented for go.",
					"date": "2016-09-30",
					"id": "d88595k",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Probotect0r",
					"content": "Thanks! The massive callback pyramids aren\u0027t too much of a problem now a days with newer versions of node, but the finer concurrency control would definitely be nice.",
					"date": "2016-09-29",
					"id": "d8767v0",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "pschlump",
					"content": "I have reason to believe that concurrency control via callbacks in Node.JS is NP-Complete.  That makes it *very* hard to test in node.js.  ",
					"date": "2016-09-29",
					"id": "d8745fb",
					"isArchived": true,
					"isControversial": false,
					"score": -6
				},
				{
					"author": "mhernandez1988",
					"content": "Callbacks are concurrency control. Throwing around theory of comp sci words does not make your case at all.\nA very nice abstraction of nodejs is it streaming api.\nBtw, Connect was a great way to remove callbacks in general if used correctly.\nDeclaring callbacks as functions of an object or global scope rather than nesting anonymous functions results in extremely legible code.\nStack and Values can be tracked via Continuation Local Storage.\nPromises still technically use callbacks, however they break the pyramid, like connect does.\n\nJavascript is awesome, its the \"script kiddies\" that use it, that make it bad. \n\nIf i want to write cool experimental code I choose javascript.\nIf I want to write stable, performant code, I choose Go.\nSimple as that...",
					"date": "2016-10-05",
					"id": "d8f8l5i",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "d_rudy",
					"content": "This is my personal opinion, but as someone who works in Ruby and Node a lot, for building backends, nothing touches Go. It\u0027s not as slick as ruby with syntactical sugar, but the static types and compiling more than make up for that. It\u0027s super reliable and very easy to reason about.\n\nThe only thing I wish they would work out is a better package management solution, and generics might be cool, but not necessary.",
					"date": "2016-09-29",
					"id": "d878vml",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "SupersonicSpitfire",
					"content": "Check out Glide. It may take a few minutes to set up the yaml dependency configuration the first time, but then it\u0027s near perfect. [Glide](https://glide.sh)",
					"date": "2016-10-22",
					"id": "d92ylh1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tscs37",
					"content": "Go is very rigid in a good way.\n\nThere is the go way and if you don\u0027t use the go way, you\u0027re in for the painful way.\n\nIt is a very opinionated language and a large set of libraries are (sometimes explicitly) opinionated.\n\nWhich is not bad, since instead of offering 10 ways to do something, you get 2 ways one of which is supported, the other not.\n\nAdditionally, go has figured out concurrency. Spinning up go routines for concurrency happens almost subconsciously.\n\nThe only thing to keep in mind is the pitfalls of go; shadowing and scope.\n\nThere are some really nasty things when you do a lot of shadowing, so I generally try to avoid it, pass variables as parameters into goroutines instead of just using them from the outer scope.\n\nYou\u0027ll probably stumble into this a couple times and then use gometalinter.",
					"date": "2016-09-29",
					"id": "d87a2yh",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "Probotect0r",
					"content": "Thanks. It\u0027s good to hear that it\u0027s opinionated. After working for so long with Js where there are a million ways to do things, and then using a framework like angular 2 which is pretty opinionated, I love it. You know exactly how you should be doing things in your code.",
					"date": "2016-09-29",
					"id": "d87adr9",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "pschlump",
					"content": "\"back end development int Go\" is very good.  I have built about 150k lines of \"back end\" code so far.  Libraries are extensive and well tested.  Documentation is excellent. Tools are comprehensive.  ",
					"date": "2016-09-29",
					"id": "d873xd0",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "bilgee0629",
					"content": "I see what you did there buddy. Muscle memory FTW.",
					"date": "2016-09-30",
					"id": "d883a9w",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Lord_NShYH",
					"content": "Honestly, Go is light years ahead of Node - in my opinion - in every metric I care about.  Static typing, static binaries, powerful primitives for CSP-style concurrency, superior tooling, etc.  \n\nPersonally, I think Node is suitable for small micro-services that are easy to reason about.  Large systems in Go are pleasant enough to build.  For me, Go is the best choice for my full-stack development needs.",
					"date": "2016-09-30",
					"id": "d87rtd5",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "rimpy13",
					"content": "Go has been fantastic for me for building small micro-services as well.",
					"date": "2016-09-30",
					"id": "d87xsx5",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Lord_NShYH",
					"content": "Same here.  Go really is a great general-purpose language for modern systems development.",
					"date": "2016-09-30",
					"id": "d87ye5d",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Thaxll",
					"content": "There are less libraries a lot less, NPM is better than what exists in Go. Otherwise Go is very good for backend dev.",
					"date": "2016-09-29",
					"id": "d871f6h",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "pschlump",
					"content": "More libraries is not necessarily better.  When I setup Angular2.0 with NPM I get over 18000 libraries.  That is a *LOT* of licenses to verify and a *LOT* of points of external failure to deal with.  node/npm has a more libraries that cover more cases but it is at a cost too.   ",
					"date": "2016-09-29",
					"id": "d8742uc",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "Probotect0r",
					"content": "This is definitely true. I was reading an article the other day where someone found that one of their modules in node_modules was automatically liking a tweet every time it was used.",
					"date": "2016-09-29",
					"id": "d877wxm",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "patrickdappollonio",
					"content": "Huh, that looks weird... Any link?",
					"date": "2016-09-29",
					"id": "d8792rl",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Probotect0r",
					"content": "[Here](https://medium.com/friendship-dot-js/i-peeked-into-my-node-modules-directory-and-you-wont-believe-what-happened-next-b89f63d21558#.xldddrbr4) you go.\n\nEdit: this is a joke article apparently.",
					"date": "2016-09-29",
					"id": "d879bgc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "gjs278",
					"content": "that was a joke article thankfully",
					"date": "2016-09-29",
					"id": "d87aygz",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Probotect0r",
					"content": "Ah! I thought so! I was so confused he was saying things like \u0027searching on google\u0027 and then linking to Bing. Thanks for letting me know.",
					"date": "2016-09-29",
					"id": "d87b1ed",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jrop",
					"content": "Much of what is in that blog post isn\u0027t true",
					"date": "2016-09-29",
					"id": "d87b502",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "_Elements",
					"content": "I love GO\u0027s concurrency, but its very annoying working with databases like MongoDB with large complex data structures that have to be marshalled onto rigid structs. If the performance benefits of Golang and not needed in a project, I still choose JavaScript",
					"date": "2016-09-30",
					"id": "d888ezt",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "\u0026gt; MongoDB\n\nReally?",
					"date": "2016-10-01",
					"id": "d89ijru",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "_Elements",
					"content": "What",
					"date": "2016-10-01",
					"id": "d89xrhh",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Yojihito",
					"content": "http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/",
					"date": "2016-10-01",
					"id": "d89yatw",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "_Elements",
					"content": "I have never had any issues with MongoDB. It has scaled well with my projects and I have found it to be very easy to use / performant. ",
					"date": "2016-10-01",
					"id": "d89yyed",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "I work on an embedded product and we were using node.js (don\u0027t ask me why, our previous software lead was a glutton for punishment). We ran into a weird memory leak issue (ended up being GC badness) that would cause us to crash and it was taking forever to debug, so we switched to Go.\n\nIt took less time to port our application than to track down the GC bug and it ended up using far fewer resources and fixed several other problems related to that. We ended up getting a memory leak, which we were able to resolve in 15 minutes with pprof, which really sold us on Go.\n\nGo is quite awesome, but we learned the hard way that it isn\u0027t perfect. We thought we were doing concurrency right and made some assumptions that didn\u0027t hold: we thought we were running in parallel on our dev machines (not true until Go 1.5 or 1.6, which exposed tons of races) and we thought maps were thread safe (also not the case, and it\u0027s documented). However, with the race detector, we were able to track down most of our data races quite quickly, so there\u0027s yet another win for Go.\n\nI\u0027m starting to look to Rust now for sure projects, but Go will likely always have a place for rapid development of web services for me.",
					"date": "2016-09-30",
					"id": "d87yaze",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "metamatic",
					"content": "Concurrency is difficult in any programming language. It requires different ways of thinking about problems. I predict you\u0027ll hit similar problems with Rust too.",
					"date": "2016-09-30",
					"id": "d88al1m",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "I completely agree. The problem though is that Go makes concurrency easy, but doesn\u0027t do much to help avoid accidentally writing unsafe code.\n\nSome features of Rust that I really like in this regard are:\n\n* Parameterized mutexes and destructors (the compiler can guarantee that mutexes get unlocked; defer is often not good enough)\n* Borrow checker prevents unsafe data access\n* No global/module level mutable state (encourages better design)\n\nI feel like it makes bad design obvious, which forces the programmer to think. Go makes it too easy to make assumptions and end up with a poor design.\n\nRace conditions are still obviously possible with Rust, but data races are preventable by the compiler. I expect to run into concurrency problems, but I expect to avoid the hard to debug/reproduce data corruption bugs and just have to deal with logic issues.",
					"date": "2016-09-30",
					"id": "d88cou7",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "metamatic",
					"content": "People are using defer to unlock mutexes?!",
					"date": "2016-09-30",
					"id": "d88dyrm",
					"isArchived": true,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "I do occasionally. It\u0027s nice when use `recover` to ensure that it will always get unlocked and works best when your function is scoped only to changes that need to be protected. Since defer guarantees that a function will get called, it\u0027s a very nice guarantee.\n\nRust does the same thing, but with lifetimes and destructors instead of defer. I tend to follow this pattern in Rust:\n\n    if let Ok(x) \u003d x.lock() {\n        // protected\n    }\n\nIn Go, I tend to do:\n\n    func protected(mutex *Mutex) {\n        mutex.Lock()\n        defer mutex.Unlock()\n\n        // protected\n    }\n\nIt ensures that your lock *will* get released and doesn\u0027t require a lot of bookkeeping. The problem is accidentally holding the mutex too long. Having scoped defers would allow me to approximate Rust\u0027s behavior with the destructor, but it won\u0027t give me the protection that Rust does (I can pass `x` around with impunity once it\u0027s locked and the borrow checker will keep me honest (no accidental passing to another thread, for example).\n\nThe main reason I got into the mess with mutexes was because we made some incorrect assumptions (namely that map writes are atomic) and didn\u0027t catch them because by default, Go ran single threaded on 1.4 and previous. Rust catches these sorts of errors at compile time, so I believe we would have taken a different design. We\u0027re slowly refactoring our code to not require mutexes, but we have tens of thousands of lines of code and 100+ goroutines running concurrently, so it\u0027s slow going.\n\nNow, I\u0027m not saying Go is to blame for our error, but that Rust would have helped us detect the error much sooner.",
					"date": "2016-09-30",
					"id": "d88g760",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "fabstu",
					"content": "\u0026gt; Having scoped defers would allow me to approximate Rust\u0027s behavior with the destructor [...]\n\nWhat is a scoped defer? I thought defer gets executed at function end, not at scope end.",
					"date": "2016-10-01",
					"id": "d89oo6c",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "Exactly. You explained the current behavior correctly.\n\nIf there were a block scoped defer (what I meant by \"scoped\"), I could more closely approximate the Rust\u0027s behavior with locks and basically implement Python\u0027s `with`.\n\nThe better solution is to have destructors, and to be useful, these destructors must run deterministically (I.e. don\u0027t have to wait for the garbage collector).",
					"date": "2016-10-01",
					"id": "d89p02c",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "fabstu",
					"content": "Ah I see, thanks for the explanation!",
					"date": "2016-10-01",
					"id": "d89r6ry",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "s-expression",
					"content": "The most popular application of `defer` is for cleaning up or otherwise releasing resources that were acquired within a function.\n\nC++ does the same thing with RAII, though it\u0027s far less clear since destructors are invisible function calls. I find `defer` to be much better for this purpose.",
					"date": "2016-09-30",
					"id": "d88xxhh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "metamatic",
					"content": "Yes, that\u0027s a completely reasonable use of `defer`, and what it\u0027s supposed to be for.\n\nHowever, mutexes should be held for as little time as possible. Ideally you refactor your code as necessary so that you can grab the mutex, do all the manipulation of shared state, and then immediately release the mutex. This is not _generally_ compatible with the semantics of `defer`, which are \"do any number of things, including the specified thing, on leaving the scope of the current function\".\n\nSure, there may be situations where you have no other deferred cleanup, and the last statement in the function is also the last point at which you need to access the shared state. In that situation, defer would be fine, albeit adding some overhead. I suspect that precise situation is infrequent, though, and that refactoring to that pattern (for example, by always splitting out the minimum set of shared state manipulations into their own function) probably doesn\u0027t help greatly with code clarity.",
					"date": "2016-10-01",
					"id": "d8960l2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rem7",
					"content": "am I the only one who gets turned off by Go\u0027s static typing when it comes to web development? I use Go for pretty much everything except web. I end up going to node for that. Most of the APIs I write are json and I don\u0027t think there\u0027s anything better for json than javascript (doh!)... Parsing json objects into Go structs or putting everything in a map[string]interface{} and having to encode/decode really annoys me. Maybe I\u0027m doing it the wrong way? Open to suggestions! :)",
					"date": "2016-09-29",
					"id": "d87d8ln",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "justinisrael",
					"content": "I\u0027ve found that working with JSON in Go is really nice when you know your JSON structure. You get all that mapping for free, into your defined (nested) struct. To be honest, I haven\u0027t had much experience yet in Go where I needed to handle arbitrary json.",
					"date": "2016-09-29",
					"id": "d87jisx",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "PaulCapestany",
					"content": "\u0026gt; Parsing json objects into Go structs or putting everything in a map[string]interface{} and having to encode/decode really annoys me.\n\nAre you manually creating Go structs for your JSON? Cuz yeah... that can be a bit of a pain :)\n\nHave you come across https://mholt.github.io/json-to-go/ or http://json2struct.mervine.net or https://github.com/ChimeraCoder/gojson? \n",
					"date": "2016-09-30",
					"id": "d88azzy",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "rem7",
					"content": "Well that sure will help next time I have to deal with json in Go. Thanks!",
					"date": "2016-09-30",
					"id": "d88e3s4",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "yellowafternoon",
					"content": "You could check out Gabs: https://github.com/Jeffail/gabs",
					"date": "2016-09-29",
					"id": "d87ku60",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "kaeshiwaza",
					"content": "Even in a dynamic language, if you don\u0027t know the structure, or if this structure change, it\u0027s a pain ! Just that this pain is not at the same place. In Go you have to decode early, before you can use your data, your Go struct is self documented, you can use it safely. In a dynamic language you decode blindly and you don\u0027t know where your problems will land.",
					"date": "2016-09-30",
					"id": "d881u6b",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rem7",
					"content": "Sure, planning ahead of time and good documentation of your API will save you a lot of headaches. But a lot of the times API resources take in completely different payloads. Having to create a struct almost per API resource is a big pain.",
					"date": "2016-09-30",
					"id": "d886e22",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "metamatic",
					"content": "Here, [this should help](https://mholt.github.io/json-to-go/). Paste in example JSON, get Go struct.",
					"date": "2016-09-30",
					"id": "d88ajmm",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Redundancy_",
					"content": "Wow, that is amazingly useful.",
					"date": "2016-09-30",
					"id": "d88h6cx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "analogphototaker",
					"content": "Working with JSON is awfully annoying in both Go and Rust (especially Rust). \n\nYou\u0027d think that they\u0027d have a cleaner way to do it since it\u0027s such a common function in web dev.",
					"date": "2016-09-29",
					"id": "d87i9g1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "SilentWeaponQuietWar",
					"content": "same here, plus Go has the additional benefit of allowing us to send binaries to clients/vendors without sharing the source code. Something that was a huge issue with previous nodejs projects in comparison.",
					"date": "2016-09-29",
					"id": "d870inn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-09-29",
					"id": "d87dfjv",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "bartavelle",
					"content": "\u0026gt; HOW IN THE WORLD ISN\u0027T THIS THE NORM.\n\nThat\u0027s just a tuple in languages with generics (ie. all modern languages but Go). There even are languages where those \"multiple return values\" don\u0027t break function composition.",
					"date": "2016-10-01",
					"id": "d89r5ap",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Thin_K",
					"content": "Any language with tuples and destructuring in assigments would allow you to replicate multiple return values. The benefit of having it as a core part of the language is that you can\u0027t accidentally assign two return values to a single name.",
					"date": "2016-09-30",
					"id": "d884csv",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "saturn_vk",
					"content": "On the other hand, actually being able to use tuples everywhere else, as opposed to only for return values, would\u0027ve been great.",
					"date": "2016-09-30",
					"id": "d885p1f",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "titpetric",
					"content": "It\u0027s not the only benefit. PHP: `list($a, $b) \u003d $object-\u0026gt;getAB()` - there\u0027s literally nothing being said about $a, $b, or even getAB(), and more importantly, even with type *hints*, it\u0027s still a ... toy. A powerful toy, but nowhere near to what Go can do.\n\n",
					"date": "2016-09-30",
					"id": "d887eay",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-09-30",
					"id": "d884ewj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jetstream96r",
					"content": "There is tuple syntax in C# 7.",
					"date": "2016-09-30",
					"id": "d8882j3",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "DerNalia",
					"content": "ruby does that. \n\nbut!, I don\u0027t know of any other compiled language that does that. ",
					"date": "2016-09-29",
					"id": "d87gsub",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "Well, you can\u0027t really compare multiple returns between static and dynamic languages because the behavior is necessarily very different between the two. Ruby\u0027s version of multiple returns is a hot nightmare.\n\nAs far as multiple returns in other compiled langs goes, it really depends on how you define multiple return values. In go\u0027s case, multiple return values are actually just tuples which are automatically destructured. Except this kinda sucks because go doesn\u0027t expose tuples to the user, so you cant really do any of the cool stuff tuples allow. (for instance, multiple returns could be packed into a tuple, which can be used as a single argument value to an n-ary function. that kinda stuff is cool at first but quickly becomes a nightmare.)\n\nBasically what I\u0027m saying is: go is actually on the less featurful side of multiple return values. I think this is a good design decision; we get the \u0027nice\u0027 bits of multiple returns without tge headaches. But it\u0027s nowhere near the only language that allows this, compiled or not.",
					"date": "2016-09-29",
					"id": "d87jc4p",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "darthsabbath",
					"content": "Swift allows for multiple return values. Not sure about Rust.",
					"date": "2016-09-30",
					"id": "d8806io",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "steveklabnik1",
					"content": "So, in a certain sense, Rust does not allow for multiple return values. However, thanks to tuples, \"multiple things\" can be a single thing.\n\n    fn return_two_numbers() -\u0026gt; (i32, i32) {\n\n    let (x, y) \u003d return_two_numbers();",
					"date": "2016-09-30",
					"id": "d88ebx6",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-09-29",
					"id": "d87i9pa",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DerNalia",
					"content": "python is interpreted, rather than compiled, like go?",
					"date": "2016-09-29",
					"id": "d87ikz9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sammymammy2",
					"content": "THIS HAS BEEN REMOVED BY THE USER",
					"date": "2016-10-01",
					"id": "d8a0upf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "metamatic",
					"content": "Yeah, back in the 80s I thought \"Wow, C would be great if it had multiple return values\".",
					"date": "2016-09-30",
					"id": "d88ao6d",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "s-expression",
					"content": "The solution to the problem is an optional or maybe return type, or exceptions (or both). These are both way cleaner and clearer than multiple return values.\n\nGo\u0027s multiple return values were intended for errors. This is an improvement over C for sure, but still has downsides that the alternatives mentioned above do not suffer. For example composing functions that can fail, which can not be done in Go.",
					"date": "2016-09-30",
					"id": "d88ydat",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "s-expression",
					"content": "Because it breaks function composition.",
					"date": "2016-09-30",
					"id": "d88y77n",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-09-29",
					"id": "d86z9yj",
					"isArchived": true,
					"isControversial": false,
					"score": 36
				},
				{
					"author": "zossle",
					"content": "\n\n\u0026gt;and then...\n\nAnd then what? Don\u0027t leave us hanging! ",
					"date": "2016-09-29",
					"id": "d872ylv",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "disintegore",
					"content": "Legend says he\u0027s still testing",
					"date": "2016-09-29",
					"id": "d876b6n",
					"isArchived": true,
					"isControversial": false,
					"score": 30
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-09-29",
					"id": "d87awt5",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "svens_",
					"content": "Thankfully there\u0027s `realloc`.",
					"date": "2016-09-30",
					"id": "d883nkr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "And then he needed a hash table. And then he re-implemented reference counting. And then he hacked-in inheritance using unsafe pointer casts.",
					"date": "2016-09-30",
					"id": "d8862mu",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "RalphCorderoy",
					"content": "Go can\u0027t `append` to an array either. ;-)",
					"date": "2016-09-30",
					"id": "d888afb",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rimpy13",
					"content": "Segmentation fault?",
					"date": "2016-09-30",
					"id": "d882484",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "karma_vacuum123",
					"content": "came to Go from the opposite direction...got tired of wrestling with Haskell, i needed a tool that was a little less rigid",
					"date": "2016-09-29",
					"id": "d874g96",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "ngrilly",
					"content": "What made you tired of Haskell?",
					"date": "2016-09-30",
					"id": "d87mxf2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "karma_vacuum123",
					"content": "wrestling with it....and not all wrestling is the result of programmer stupidity or laziness...i think even most Haskell fans accept that",
					"date": "2016-09-30",
					"id": "d88gesz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sir_alvarex",
					"content": "I started using GO because I needed to develop a highly threaded app that would deploy via docker containers so needed a small footprint.  At that time Python (my other language) was suboptimal in both of these areas.\n\nI quickly turned from a GO skeptic (*another* compiled language?  From Google?  Cocky !) to a GO zealot.  Everytime I\u0027m asked to write something in Python or bash now a bit of me dies inside.",
					"date": "2016-09-29",
					"id": "d871lan",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "ROGER_CHOCS",
					"content": "Asked colleague about go, he scoffed and said the same thing. I\u0027ll have to try it out.",
					"date": "2016-09-29",
					"id": "d875md2",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kor_the_fiend",
					"content": "Have you tried the docker-ception pattern for building go containers? The idea is one container to build the binary, which gets piped to another container for execution. We usually get 10x size reduction.",
					"date": "2016-09-29",
					"id": "d875137",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "slrz",
					"content": "What\u0027s the point with these patterns? If you care about size why would you ever use a container including build tools and what not in the first place?\n\nYou might want to try the KISS pattern: simply leave off all the containerization (except where required by infrastructure needs) and yield a 10x reduction in complexity.",
					"date": "2016-09-29",
					"id": "d87cedp",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "bobappleyard",
					"content": "\u0026gt; You might want to try the KISS pattern: simply leave off all the containerization (except where required by infrastructure needs) and yield a 10x reduction in complexity.\n\nsounds great. is there a dockerfile for that i could try?",
					"date": "2016-09-29",
					"id": "d87e75n",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "rem7",
					"content": "agreed. 90% of the use cases I had for docker went away when I started using Go. ",
					"date": "2016-09-29",
					"id": "d87dyy2",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "kor_the_fiend",
					"content": "Containerization adds complexity up front, but makes managing your services much simpler in the long run. If you have 20 services running on a server and the server gets patched, you may end up having to make 20 separate fixes. Using containers, I only have to worry about one point of failure. Plus I can safely deploy services to any server in the infrastructure without worrying about the configuration of the server.",
					"date": "2016-10-01",
					"id": "d89ubqw",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Tacticus",
					"content": "The only reason our go apps are containerised is the packaging format and integration with mesos\\marathon. much \u0026lt;3 for a 3 file deploy (binary, root CAs and cert and key (tempted to shrink this to a single file and build the certs into the binary))",
					"date": "2016-09-29",
					"id": "d87ldgz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "driusan",
					"content": "What benefit does having a container to build the binary have over just cross compiling using the standard Go tools and adding it to a container?",
					"date": "2016-09-30",
					"id": "d889z4b",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "sir_alvarex",
					"content": "We do something similar.  We use Teamcity in house to build the binary (which happens in a Docker container).  That binary is then placed inside the container by the Dockerfile.  My docker containers are usually ran on Alpine and are just the size of the go-binary.  If there are external requirements like OpenSSL then we\u0027ll use ubuntu-debootstrap and install the required packages (with appropriate cleanup commands).\n\nI\u0027ve also used [centurylinks go-builder](https://www.yammer.com/microsoft.com/#/Threads/show?threadId\u003d773681411) in the past when we didn\u0027t have a good Golang CI/CD pipeline.",
					"date": "2016-09-29",
					"id": "d878ei3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "carsncode",
					"content": "Honestly for me Go fits exactly what I\u0027ve wanted out of a platform for a long time. I prefer static typing, I feel like dynamic typing is a large gun that is always trained on your foot. I prefer compiled over interpreted, because performance tends to be better, and because it helps find defects earlier, like a required form of static code checking. I like simplicity - I always despised the Java/C# ways of turning a simple requirement into a sea of interfaces and abstract types and factories and then writing some XML to wire it up in your IoC container and... ugh. The Go Way is to keep things simple, and I\u0027m on board with that. Garbage collection for me is a must - it eliminates a whole class of potential defects.\n\nMost of all though is the \"here\u0027s a binary, run it\" deployment. You don\u0027t need ruby or node or JVM or CLR installed, no shared libraries or ruby gems or npm modules, you just need one binary file. I keep my source code to myself unless I choose to publish it, and I get to ship a binary that you drop in and run and it works, period. Cross-compiling the same code for windows/linux/mac on x86/x64 is a breeze, and platform-specific code is easily managed. I\u0027m really resistant to hype but I feel like Go really hits a sweet spot, at least for me. It\u0027s not without its faults, of course, but in terms of pros/cons I can\u0027t think of anything else I would rather work with.\n\nAnd yes, every time I need to install something made with ruby or node I cry a little bit inside now that I\u0027ve gotten used to go.",
					"date": "2016-09-29",
					"id": "d87f13i",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "tech_tuna",
					"content": "\u0026gt; Most of all though is the \"here\u0027s a binary, run it\" deployment.\n\nTHAT is effing huge.  I\u0027m thinking or replacing the entire toolset at my company with Go.  We have some apps that need to run on a number of different OSes and our current infrastructure is this hodgepodge of Ansible, bash and plain old Python + Jenkins.  \n\nTo just say, \"hey, here\u0027s the foobinator executable, just copy that onto these 30 hosts\" is such a huge win for me.\n\nBTW, I love Python and I love/hate bash but we\u0027re hitting problems like we need Python 3 on these boxes, but Ansible only supports Python 2.x but we have also have these old RedHat VMs that have to run 6.6. . .\n\nIt\u0027s a big legacy mess and I wish I could just replace the whole thing but I can\u0027t. . . and with Go, I could literally build almost all of our tools as single binaries. . . and. . . I can\u0027t even believe this, I can build them ALL on one build machine because Go does CROSS COMPILATION!!!\n\nI\u0027m still stunned. . .",
					"date": "2016-10-03",
					"id": "d8blggj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "carsncode",
					"content": "I have the same \"rewrite everything in go\" urge for the same reason. I hate having to drop python and perl and Java and Ruby on boxes now. I just want a binary.",
					"date": "2016-10-03",
					"id": "d8bnjwy",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tech_tuna",
					"content": "It\u0027s so simple.  Also, so much easier to do than compiling a binary in C or C++, especially cross platform.",
					"date": "2016-10-03",
					"id": "d8bp9pf",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jugalator",
					"content": "Yeah Go is really attractive for\n\n* Solid base library\n* Good documentation\n* Performance\n* First class concurrency primitives\n* Lack of dependency hell causing 100 MB shit\n* Quick compiles\n* Static native code for not even runtimes\n* Standardized format (gofmt)\n* Sane non-overengineered documentation (godoc)\n\nNot many languages manage to tick these boxes and in hindsight that almost feels weird since much is obvious! Even details like built in, smart concurrency features. Of course a modern language in a world of quad and octo core CPU\u0027s need that, for example. Of course standard docs should be easy to write by hand with no XML or tagging given the importance of convenience to make documentation happen in the first place. And so on. ",
					"date": "2016-09-29",
					"id": "d87jtj9",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "kovensky",
					"content": "Go has the other kind of dependency hell. You can\u0027t state your versions, so every single one of your dependencies and indirect dependencies have to be API-compatible with each other.\n\nThe vendor folder hides the issue by committing the current, presumably working, version of your dependencies to source control, but you will have to deal with it again when you update dependencies.",
					"date": "2016-09-30",
					"id": "d87oi5p",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "lolidaisuki",
					"content": "And good luck updating the shit when there is a security vulnerability.",
					"date": "2016-10-01",
					"id": "d89smrg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "djslakor",
					"content": "Coming from being a node dev, this is the first thing I noticed.  Since go get always pulls from master, it puts a lot of pressure on github contributors to always have a relase-worthy master head, doesn\u0027t it?  At least npm lets authors determine when something is in a usable state.\n  \nAlso, as a node dev, I routinely run npm outdated -l to see what\u0027s changed in my npm packages and what I should consider updating.  Is there any equivalent in Go-land?  Is there any semver anywhere?  How would I know if pulling the latest head from dependency x isn\u0027t going to totally break the API i depended on? \n  \nSeems to be a problem that would definitely need to be tackled before node people would defect en masse. ",
					"date": "2016-12-27",
					"id": "dboq7oo",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; Since go get always pulls from master, it puts a lot of pressure on github contributors to always have a relase-worthy master head, doesn\u0027t it?\n\nYup and that\u0027s a good thing.\n\n\u0026gt; Is there any equivalent in Go-land?\n\nThe closest thing there is is `go get -u`.\n\n\u0026gt; Is there any semver anywhere?\n\nThere is a committee working on an official dependency manager that uses SemVer.\n\n\u0026gt; How would I know if pulling the latest head from dependency x isn\u0027t going to totally break the API i depended on?\n\nYeah... because with SemVer you do know that...\n\nJokes aside, because of that pressure to not break backwards compatibility, it is very rare for a Go package to do that so in the majority of cases pulling is safe. Still it is recommended that you vendor your dependencies.\n\n\u0026gt; Seems to be a problem that would definitely need to be tackled before node people would defect en masse.\n\nDear god I hope that never happens! (The node people, not tackling the problem :D) ",
					"date": "2016-12-27",
					"id": "dbor67o",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "djslakor",
					"content": "What does a package author do if he wants to improve his project in a way that breaks backward compatibility?  Create a new repo?\n  \nI am brand new to Go, so pardon my ignorance.  If it\u0027s a few sentences to describe vendoring your dependencies, would you mind explaining that?",
					"date": "2016-12-27",
					"id": "dbowo67",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; What does a package author do if he wants to improve his project in a way that breaks backward compatibility? Create a new repo?\n\n* You can use: http://labix.org/gopkg.in\n* You create a new repo.\n* You just don\u0027t.\n\nStability is much more important. Being able to compile my programs with every new Go version (and not only they just work, they get faster too) is pure bliss. And all thanks to the Go 1 compatibility promise. Usually this is also the case for go packages but obviously not every developer out there can be trusted. Still, having this culture of not introducing breaking changes is very good.\n\n\u0026gt; If it\u0027s a few sentences to describe vendoring your dependencies, would you mind explaining that?\n\nYou simply copy all the .go files of a dependency package under the `vendor` folder of your project. Then you can simply import them in your code and Go will find them as if you had gotten them with `go get`. This way you can ensure that the dependency will never break your code since you keep a local copy of it in the `vendor` folder. \n\nThere are many tools that make that procedure easier but you can always do it yourself manually. The tool I usually use is [gvt](https://github.com/FiloSottile/gvt). The vendor committee is working on making an official tool.",
					"date": "2016-12-27",
					"id": "dboy5zt",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "djslakor",
					"content": "For the vendor-scheme imports, do you still have to specify a full import path with a root at your workspace src, or can you do it relative to your project?",
					"date": "2016-12-28",
					"id": "dbpaguw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; For the vendor-scheme imports, do you still have to specify a full import path\n\nLet\u0027s say you write a program `github.com/foo/foo.go` that depends on `github.com/bar`.\n\nWithout vendoring:\n\n* `go get github.com/bar`\n* goes in `$GOPATH/src/github.com/bar`\n*  `import github.com/bar` (in foo.go)\n\nWith vendoring:\n\n* `gvt fetch github.com/bar` (or [any other tool](https://github.com/golang/go/wiki/PackageManagementTools) or copy manually)\n* goes in `$GOPATH/src/github.com/foo/vendor/github.com/bar`\n* `import github.com/bar` (in foo.go)\n\nSo the only thing that changes is the location of `github.com/bar`. When you vendor it, it lives under your project\u0027s `vendor` folder. But from the perspective of the programmer, it is the exact same import.",
					"date": "2016-12-28",
					"id": "dbpj9im",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "djslakor",
					"content": "Thank you for taking the time to explain this. :)",
					"date": "2016-12-28",
					"id": "dbpx8wg",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "eeojun",
					"content": "Similar story; Came to Go from Python after needing to compile to Windows (I mean I can ask my friends to have Python installed but that sucks). I\u0027m quite a new Go developer but I love it. even though I\u0027ve been writing Python for ~5 years now, I\u0027m immediately productive in Go. With Go I find myself abstracting less and working more on the problem itself.\n\nMy current workflow is to prototype in Python and then write a high performance version in Go, but I do sometimes miss generics. Alas, life\u0027s too short to not catch type or spelling errors, or write the shitload of unit tests. However sometimes Pythons tools are nice like Matplotlib so I usually have CPU intensive code in Go and pipe the output to some ad hoc plotting code.\n\nUpdate: What I meant to say is that I miss specialised code generation from the use of generics. Names, heh.",
					"date": "2016-09-29",
					"id": "d872apk",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "[deleted]",
					"content": "py2exe works but can be a pain sometimes.",
					"date": "2016-09-30",
					"id": "d8865wo",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "weberc2",
					"content": "\u0026gt;  but I do sometimes miss generics\n\nGo has generics in exactly the sense Python has them: `interface{}`. The only difference is the boilerplate in Go required to opt-out of the type system (i.e., type assertions).",
					"date": "2016-09-29",
					"id": "d8784wv",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "eeojun",
					"content": "I am aware of that, but `interface{}` introduces some overhead (I believe another word for the type information), and circumvents the type system. Also with generics the compiler can generate specialised versions of functions, e.g. a specialised `Max` for `float64`, `uint`, etc. while being type safe.",
					"date": "2016-09-29",
					"id": "d87jb4a",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "weberc2",
					"content": "All of that is equally true for Go\u0027s interface{} and any object in Python. Neither benefit from specialized optimizations. Neither benefit from static typing. Both maintain runtime type information.",
					"date": "2016-09-30",
					"id": "d87qsty",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "eeojun",
					"content": "Yes it\u0027s true, the empty interface is the same as Python objects, and yes, both do not benefit from static typing, but what I really want is the compiler to automatically generate specialised functions, which is not a deal breaker but definitely would make me more inclined to use a language.",
					"date": "2016-09-30",
					"id": "d882q7c",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "Sure. I think that\u0027s a reasonable request, I was just pointing out that you\u0027re not going to get that with Python. I wouldn\u0027t give up on Go though. Go has great profiling tools that help you optimize such that you can make Go very fast, and generics aren\u0027t actually necessary all that often. (All that said, I\u0027m with you in wanting a good generic system).",
					"date": "2016-09-30",
					"id": "d887mbc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "nsd433",
					"content": "FWIW 2 pointers (value \u0026amp; type) is the same overhead as python and other dynamic languages have, where an object is passed by reference (pointer), and contains a pointer to its type information.",
					"date": "2016-09-30",
					"id": "d87xcqc",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "eeojun",
					"content": "I think I explained myself badly here. Some libraries like go-set require that you convert things you want to store to `interface{}` before you store it, which is sometimes what you want, esp. if you need to store objects of different types. That overhead I am perfectly OK with. but I\u0027m not fine with the situation when I need to store a set of the same objects. In that case the extra pointers are really not necessary.\n\nOf course, you can argue that I can use something like intset, but do we really want to write another set library for every type we have? Also I\u0027m aware that something like code generation is present in the form of `clipperhouse/gen` but I\u0027m not sure how recommended it is.\n\nTLDR: I\u0027m butthurt that something like Rust\u0027s `Set\u0026lt;T\u0026gt;` is not in Go.",
					"date": "2016-09-30",
					"id": "d882trd",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kovensky",
					"content": "That would be templating, not generics.",
					"date": "2016-09-30",
					"id": "d87oc43",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "weberc2",
					"content": "Templates are a form of generics.",
					"date": "2016-09-30",
					"id": "d87r7h8",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rosencreuz",
					"content": "Wot?",
					"date": "2016-09-29",
					"id": "d87ghsd",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "weberc2",
					"content": "What are you confused about?",
					"date": "2016-09-30",
					"id": "d87r65o",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-09-29",
					"id": "d873miv",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "thramp",
					"content": "Yep, optionals protect you from nil values. There\u0027s nothing stopping you from using the `if value !\u003d nil` syntax, but the `if let x \u003d x` syntax unwraps that value, and lets you refer to the unwrapped value as `x`, not something like `unwrappedX`, like in Java.\n\nOptionals also prevent you from passing `nil` as an argument to a function that doesn’t expect a nullable argument. Practically speaking, I can keep the null values at the boundaries of a system, and have my core clean and simple.\n\nOne more thing: I like optionals *a lot* because they force me to state my assumptions. When I do that, handling edge cases because much easier. It has the nice side effect of making programming feel like a conversation with compiler.",
					"date": "2016-09-29",
					"id": "d875r3b",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "weberc2",
					"content": "Optional is just a special case of a compiler-verified tagged union (or \"enum\" in ML-jargon). These are pretty useful, and I do wish Go had them. You can do similar things with interfaces or structs, but these solutions are hokey, less-safe, and suboptimal (interfaces \u003d allocs, structs \u003d wasted memory). That said, the situation is still workable.",
					"date": "2016-09-29",
					"id": "d878b6b",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "bartavelle",
					"content": "\u0026gt; I guess on the other hand why wouldn\u0027t they just use if (a !\u003d nil) then...\n\nBecause you won\u0027t have to write this test for things that are not defined as optional.",
					"date": "2016-10-01",
					"id": "d89r0ag",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "postman_",
					"content": "lol no generics",
					"date": "2016-10-01",
					"id": "d89obue",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "DualRearWheels",
					"content": "Among many other good things listed here, one thing I found to be perfectly natural and effective but lacking in all other languages I used is package file structure.\n\nI don\u0027t want to lose time on overly organizing my code, moving functions from file to file then updating \"import\" hell. Package is just one folder with bunch of anonymous files. They are all imported, you don\u0027t have to think about inter relations or contents. Place code where ever you want, change, rename files etc.\n\nIt is a big time saver, same as gofmt.",
					"date": "2016-09-30",
					"id": "d883246",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "koffiezet",
					"content": "The main advantages go has over other languages I use(d) (C++/C/Java/Python/...) are for me:\n\n* syntax formatting standard: `go format`\n* diving into the source code of the stdlib and other libraries feels natural\n* it\u0027s development environment encourages writing everything as a reusable library, where your app is a small shim around this. This results in a ton of useful reusable stuff.\n* built-in test and benchmark framework\n* cross-compiling is dead-easy\n* simple concurrency\n* built in production-ready webserver\n* `defer`\n\nFor scripting languages, the static typing, compile-time warnings and ease of deployment are a big win.\n\nThere are however also some downsides/problems imho:\n\n* the library versioning and vendoring mess\n* the GOPATH stuff that needs to be updated for each project if you want to cleanly separate them\n* some bad early stdlib choices, where some things don\u0027t use interfaces (filesystem stuff for example)\n\nAnd then there is stuff I have mixed feelings about like like channels. Nice to have in some scenarios, but with many more pitfalls than many seem to realize.\n\nBut writing code in it is fun, and feels productive. Not perfect, but all in all, one of the nicer options out-there.",
					"date": "2016-09-30",
					"id": "d88d0aj",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "titpetric",
					"content": "You deserve all the high fives. I even wrote a book about using Go for APIs, and it\u0027s like taking something for the longest decade running migrane which is PHP. I still program in PHP every so often (and more so in my near future) but... god, it feels so good to exclusively work in Go for the last half of a year. It really feels like when I was learning C++ in high school on my own, people were super friendly, and you\u0027d feel really good about your self for writing programs which were not your typical \"hello world\". I learned a lot, and working with PHP/Node is just... fighing with the language, like you\u0027re fighting with Swift. The progression in Go feels natural and limitless :)",
					"date": "2016-09-30",
					"id": "d887b3l",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mvitorino",
					"content": "Your fellow Rails developer should try using Docker images for deployment.",
					"date": "2016-09-29",
					"id": "d873hc5",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "DerNalia",
					"content": "I\u0027ve never had a problem deploying rails without docker. asfaik, most of issues with AWS are just configuration issues, which are just one time things.",
					"date": "2016-09-29",
					"id": "d87guk0",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mvitorino",
					"content": "It does give you the ability to test you configuration locally in a reproducible way.",
					"date": "2016-09-30",
					"id": "d888ffo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DerNalia",
					"content": "docker? or go? or both?",
					"date": "2016-09-30",
					"id": "d888rqa",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mvitorino",
					"content": "Docker is what gives you reproducibility of your configuration. If an image works on your machine, it\u0027s almost surely will on some other server somewhere else.",
					"date": "2016-09-30",
					"id": "d8890uz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DerNalia",
					"content": "yeah, right on. wasn\u0027t sure which thing you were talking about",
					"date": "2016-09-30",
					"id": "d8896i1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "koalefant",
					"content": "Yea that\u0027s what I suggested too. He didn\u0027t like the extra level of abstraction. I can kind of understand the sentiment.",
					"date": "2016-09-29",
					"id": "d875h6d",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "metamatic",
					"content": "If you\u0027re using Rails, overhead from Docker is the least of your problems.\n\nAnother option, though, is to use Phusion Passenger on the server, and deploy using `rsync`.",
					"date": "2016-09-29",
					"id": "d875sm7",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "andradei",
					"content": "That\u0027s what my team did on a past project. And we deploy targeting a big financial corporation and some of its clients.\n\nThough, I would love to be using Go for all that instead. But I think the team will decide to go with Java and Groovy.",
					"date": "2016-09-29",
					"id": "d87jei4",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mvitorino",
					"content": "I thought Groovy was dead...",
					"date": "2016-09-30",
					"id": "d888h1i",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "andradei",
					"content": "Sometimes I wish it was. But it is alive and well. Tools like Gradle and Grails make it relevant still today. It is definitely more satisfying to write in it then in Java, but I am not a fan of its Ruby-like block/metaprogramming-heavy approach to things.",
					"date": "2016-09-30",
					"id": "d88eaqk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "You should be more concerned in an equivalent position, as the Go library may have less road hours than Ruby on Rails and contain bugs we won\u0027t know about for years, that Rails already figured out and forgot a bunch.",
					"date": "2016-09-30",
					"id": "d881ai5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "bustyLaserCannon",
					"content": "I\u0027m currently a node dev - Go has interested me lately and I see all these posts on how great it is but I\u0027m not sure the best way to get started with it.\n\nI\u0027ve seen the online tour but I was looking for a MOOC course but I can\u0027t find one online - anyone know of any good ones or some interactive tutorials?",
					"date": "2016-10-02",
					"id": "d8atl49",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "koalefant",
					"content": "I find it\u0027s easiest to learn by building something. I found a good starting point is \u0027Learn Go By Example\u0027 and then jump straight into making a simple server (it\u0027s literally less than 10 lines to make one).\n\nThen add in a database connection after that. Then maybe fancier routing if necessary. By that time you should have a decent understanding to be able to play around and extend functionality at will, learning a bit more here and there on the way.",
					"date": "2016-10-02",
					"id": "d8atuzy",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "basiclaser",
					"content": "For my next main project, I wanna build an app which chunks binary and streams to some view layer. My target platforms are webview and android. \nFor my second project I\u0027d like to build an app which lives in the OSX / ubuntu toolbar and triggers system notifications. \nCan/Should I use go for these? or something like clojure for the first and swift for the second?",
					"date": "2016-09-30",
					"id": "d881px1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jocull",
					"content": "Dockerize. Wrap up the dependencies or EBS can be hell :(",
					"date": "2016-09-29",
					"id": "d87ebbd",
					"isArchived": true,
					"isControversial": false,
					"score": -4
				}
			]
		},
		{
			"author": "howeman",
			"date": "2017-09-21",
			"id": "71n0pz",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go: Ten years and climbing",
			"comments": [
				{
					"author": "mwholt",
					"content": "The image of gophers stacked up to fix/tune/build \"the cloud\" is brilliant.",
					"date": "2017-09-22",
					"id": "dnc6gbu",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "sh41",
					"content": "I like how one of the gophers is upside down. But because he\u0027s on the bottom stack, it doesn\u0027t matter, he\u0027s still doing his job successfully.\n\nThat\u0027s gophers for you.",
					"date": "2017-09-22",
					"id": "dnc8efu",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "bifurcationman",
					"content": "Australian Gopher",
					"date": "2017-09-22",
					"id": "dnca0ll",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "gohacker",
					"content": "\u0026gt; That\u0027s gophers for you.\n\nThat means disapproving, doesn\u0027t it?\n\nhttps://dictionary.cambridge.org/dictionary/english/that-there-s-for-you",
					"date": "2017-09-22",
					"id": "dncavdq",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "sh41",
					"content": "I didn\u0027t know that, thanks for pointing it out.\n\nI meant it in a positive sense, like \"that\u0027s [the eccentric and awesome] gophers for you.\"",
					"date": "2017-09-22",
					"id": "dnceusq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jeffrallen",
					"content": "These have been the 8 best years of my programming life. Thank you Go.",
					"date": "2017-09-22",
					"id": "dncgcpg",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "R2A2",
					"content": "Awesome. 5 years since I began my go journey. Easily the best 5 for me too",
					"date": "2017-09-22",
					"id": "dnckr9g",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Kuurde",
					"content": "Rob \u0027Commander\u0027 Pike ^^",
					"date": "2017-09-22",
					"id": "dncl5xv",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Testiclese",
					"content": "I love listening to Rob Pike talk. His talks are succinct and without any useless fluff or air - it\u0027s just knowledge getting hammered into your brain. There\u0027s an \"old school\" feel to Go and its documentation - everything feels \"brief\", and business-like. This is a tool. This is how you use it. We won\u0027t waste your time. Go. ",
					"date": "2017-09-22",
					"id": "dnczp30",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "leimy",
					"content": "I remember some time ago replying to a question from a talk Rob Pike gave on NewSqueak. I think it was a tech talk. Anyway I think Rob was looking for some CSP-like way to write concurrent applications in C++. I eventually found one that looked good and he said something back to me like “we are working on another solution”. \n\nA few months later Go was announced and available. Russ Cox has his video showing how fast it was to build the toolchain all the tests and run them and I was basically blown away that things could be this simplified.\n\n(I had considered Rob and Russ to be friendly acquaintances from my Plan 9 days. I still use Rob’s Acme system to this day!)\n\nSince then I’ve modeled PoC software in Go that I could not get myself to commit to companies I worked for supporting and wrote some hobby software with it that powers some of an internet radio station’s twitter/irc presence (a hybrid bot). I have been amazed at how few iterations it took to make such software stable and it runs reliably for months on end until our server needs a reboot!\n\nThanks for Go!",
					"date": "2017-09-22",
					"id": "dnctcn8",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				}
			]
		},
		{
			"author": "rsc",
			"date": "2018-02-20",
			"id": "7yxlfz",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "research!rsc: Go +\u003d Package Versioning (Go \u0026amp; Versioning, Part 1)",
			"comments": [
				{
					"author": "sethammons",
					"content": "\u0026gt; With proxies available to ensure availability and go.mod to define which code to use, vendor directories are no longer needed\n\nPlease, please do not remove vendor (or a very similar way to easily check in dependencies into our applications). I don\u0027t want to \"set up trivial proxies\" to ensure that my builds don\u0027t suddenly fail when leftpad.go happens. I absolutely want that code checked in and not require the network to build. My build servers are happier and I\u0027m happier. This is for applications, not libraries. Don\u0027t make us set up more infrastructure to keep the same level of safety we currently enjoy. \n\nBy all means, let the proxy solution exist. But don\u0027t remove vendor. And thanks Russ for continually driving the language and ecosystem forward. ",
					"date": "2018-02-21",
					"id": "dukwq7u",
					"isArchived": false,
					"isControversial": false,
					"score": 35
				},
				{
					"author": "akavel",
					"content": "And besides leftpad.go, there\u0027s also the story of code.google.com. Our company still has code from there in our `_vendor/` directory (which itself was created before `vendor/` became canonical, and before `go test` et al. started ignoring `vendor/` recently)!",
					"date": "2018-02-21",
					"id": "duldgkn",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "neoasterisk",
					"content": "So now the question is, why is your company still depending on this code all these years?",
					"date": "2018-02-21",
					"id": "duldlt1",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "akavel",
					"content": "For the very good reason of *because it [Just Works\u0026amp;trade;](https://en.wiktionary.org/wiki/if_it_ain%27t_broke,_don%27t_fix_it)*.",
					"date": "2018-02-21",
					"id": "dulegky",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "aarzilli",
					"content": "I hope vendoring *and committing the vendor directory* won\u0027t be discouraged. Yes, you can set up a proxy for the packages but (a) nobody does it anyway and (b) it doesn\u0027t help when I download a 10 year old open source project, because I can\u0027t go back in time and make a proxy ten years ago.\nThe vendor directory guarantees that, at least, the project will always compile.",
					"date": "2018-02-20",
					"id": "duk8cke",
					"isArchived": false,
					"isControversial": false,
					"score": 30
				},
				{
					"author": "merb",
					"content": "\u0026gt;  from my distribution, that\u0027s what it\u0027s for. When I use the go tool, I do it as a Go developer and I always want the latest and freshest. If stuff breaks - that\u0027s fin\n\nand ci performance will be worse without vendoring.\nI realldy hope vendoring will be supported **all** the time.\n",
					"date": "2018-02-20",
					"id": "dukce7k",
					"isArchived": false,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "nemith",
					"content": "vendoring works well for binaries but is usually a really poor idea for libraries and easily runs into dependency nightmares although I am not sure how vgo would help besides allowing for one version to be good for all children dependencies via MVS.\n",
					"date": "2018-02-20",
					"id": "dukipx1",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "n1ghtm4n",
					"content": "`dep` disregards the `vendor/` directory in libraries. The traditional advice to not vendor libraries may be out of date. Vendoring libraries can help make the library\u0027s tests more reproducible, since `go test` will use the packages in `vendor/`.",
					"date": "2018-02-21",
					"id": "dul00o8",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Queue29",
					"content": "\u0026gt; (a) nobody does it anyway\n\nCompletely disagree. One of the most common reasons dep is not being adopted in the enterprise space is that there\u0027s no way to consolidate and manage internalized 3rd party dependencies. There are rules (licenses), and there are bad actors (hello, random new go-bindata owner) that we are absolutely concerned with. Vetting 3rd party packages as they get vendored into each of our hundreds of Go git repositories is completely not going to happen. There *must* be support for internal mirrors of 3rd party dependencies, and dep never provided that. I don\u0027t see any vendoring solution based on vendor directories providing that. https://github.com/golang/dep/issues/174",
					"date": "2018-02-21",
					"id": "dukjs6h",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "alficles",
					"content": "This is critical. And for open source projects, the proxy solution is even less palatable, since it creates a dependency that can disappear. I\u0027ve said it before and I\u0027ll say it again, but if you need an Internet connection to build your project, you probably have a security nightmare waiting to happen. ",
					"date": "2018-02-21",
					"id": "duklsf1",
					"isArchived": false,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "advincze",
					"content": "there is a big difference in this matter for libraries and executables. The executable problem was sufficiently solved with the godep, vendor, ... etc.",
					"date": "2018-02-21",
					"id": "dulegnf",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ngrilly",
					"content": "I think that deprecating the vendor directory is a good decision, if and only if vgo is able to manage an \"offline mirror\" directory which would contain a copy of all the .zip archives used by the module. \n\nThis \"offline mirror\" directory could be committed along the project source code.\n\nThis is what yarn does for example: https://yarnpkg.com/blog/2016/11/24/offline-mirror/ ",
					"date": "2018-02-21",
					"id": "dulgngd",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ngrilly",
					"content": "Discussion with Russ on this issue, for future reference: https://research.swtch.com/vgo-module#comment-3771676619",
					"date": "2018-02-23",
					"id": "dupaa2b",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "kemitche",
					"content": "\u0026gt; I believe this is the wrong default, for two important reasons. First, the meaning of “newest allowed version” can change due to external events, namely new versions being published. Maybe tonight someone will introduce a new version of some dependency, and then tomorrow the same sequence of commands you ran today would produce a different result.\n\nMaybe the new version is a security patch, and really almost all consumers should be using the newer version. For an end-user fetching and building an executable (`go get github.com/golang/dep`, etc) the correct approach is probably to pull the latest bug fixes and security updates for the tool and its dependencies. Especially if we\u0027re going off of the base assumption that each dependency\u0027s maintainer is properly using semantic versioning.\n\nFor an engineer building a CI/CD pipeline, yes, reproducibility is important, and so there should be an easy option to enable at runtime. But the default, imo, should be to get the latest versions of things that, based on defined semantic versions, are likely to work. (And I already have a method for doing that - committing a populated `vendor/` directory)",
					"date": "2018-02-21",
					"id": "dukljq7",
					"isArchived": false,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "stephens2424",
					"content": "I think this is important. It removes an important security safeguard I think we take for granted today.\n\nConsider a project that\u0027s popular, but doesn\u0027t see frequent updates and imagine a dependency it imports finds a security flaw. Today, the dependency\u0027s maintainer has the ability to update end users when they do a `go get -u`, even if the original project does nothing. For serious flaws, dependency maintainers can essentially communicate with their indirect users: if they break compatibility deliberately, the importing project will break, and that can be a useful signal to potential users that something is out of date and potentially untrustworthy. The proposal at hand inherently removes any such mechanism. All that said, it wasn\u0027t a great communication channel anyway, so I think we have an opportunity to make things much much better.\n\n/u/rsc - perhaps we need an extra notation in the `go.mod` file of the dependency to declare versions as unsafe. These versions (and below?) would be simply excluded from the minimum version selection process.\n\nI think there\u0027s some reasons we might need importers to be able to override a ban on a particular version, like for security research. As an end user, though, I think it\u0027s best for me to know I\u0027m building a binary that\u0027s potentially unsafe, even when the project I\u0027m building has imported a flawed dependency deliberately, and to make me also request that deliberately. There\u0027s probably a compromise in here somewhere between errors/warnings, adding more rules and options, and security as a default, but I really enjoy the security as a default.\n\nOne last note: I think we should avoid telling maintainers to change tags to solve this: that seems like it forces us to hide useful original version information in our repositories. Sometimes those tags are used beyond a build process, like for bisecting bugs, or in some corporate process, and if they move around, they aren\u0027t really meaningful in the way I think people expect.",
					"date": "2018-02-21",
					"id": "dul15tp",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "kaeshiwaza",
					"content": "Explicit is better than implicit. Even for security patch. An implicit upgrade can also be a security flaw",
					"date": "2018-02-21",
					"id": "dul7017",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "stephens2424",
					"content": "I agree. I think the best path to fixing any security issue like I described is making a fork of the parent project and setting the dependency import to the proper version. I also think it\u0027s a good idea if this system can help us know when we need to do this.\n\nTo put it another way: as a package maintainer, if I issue a security fix, and I\u0027d like importers to know they ought to update, and a version-aware `go` informing end users seems like the best way to encourage proper maintenance like this, be it by the original maintainer or in a fork. The ethos of the proposal here is: it\u0027s okay to stay on the lower version. But sometimes it\u0027s not, and the package maintainer is aware, and a `vgo` tool ought to have the ability to present that information, rather than deliberately ignore it.\n\nAll that said, the rest of the reasoning to use the minimum version makes sense to me. Using such a \"version insecure\" indicator could potentially break reproducibility, but for security issues, that sounds like a good thing. I believe having the indicator be clearly security-related will stem abuse where maintainers want to get pushy about updates for other reasons. In fact, as a community, we should consider this improper maintenance to be a strong \"code smell\" of sorts, giving cause to distrust or fork projects.",
					"date": "2018-02-21",
					"id": "dulgucx",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "sir_alvarex",
					"content": "It often is.\n\nJust because something is new doesn\u0027t mean it\u0027s more secure. \n\nFor a lot of packages it may be true that future upgrades are only security patches.  But far more often they are new features and new features can bring more vulnerabilities. \n\nExplicit is better than implicit in most workflows. ",
					"date": "2018-02-21",
					"id": "dule3bf",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "cep221",
					"content": "I am so happy Go is moving towards a more module based workflow.  This will solve a huge category of real problems I have working with publicly forked Go code.\n\nI know many of us have argued for project/module based workflows for a while and told we were wrong.  I think `gb` had something in the FAQ about a philosophical difference.  The linked article was a great history summary, but I wish there was more insight into why project based workflows were rejected in the past, but are now part of vgo.\n\nGoogle frequently talks about getting more non Google Go developers.  I get the sense the dep team has a lot of core knowledge in this area.  Could they have been drafted to take a lead on vgo?\n\nThe decision to remove the lock file is interesting.  I\u0027m unsure how this will work in practice: I think there are a lot of side benefits a lock file has that solve tricky corner cases.",
					"date": "2018-02-20",
					"id": "dujy4r9",
					"isArchived": false,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "mvdan",
					"content": "While I am interested in how lock files are completely out of the equation with vgo, I also wonder about the disadvantages of keeping them out.\n\nOne easy win of lock files is how one can ensure reproducible builds by locking in the commits of each git repo for all the dependencies.\n\nI realise that vgo suggests resolving this with a module-download proxy, but that requires extra infrastructure and work. Which is fine for companies, but means a higher barrier for developers wanting reproducible builds on their side projects (given that vendoring shouldn\u0027t be an option).\n\n/u/rsc I assume you\u0027ve given thought to these concerns - what is your opinion?",
					"date": "2018-02-20",
					"id": "dujzshk",
					"isArchived": false,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "rsc",
					"content": "Good question. I\u0027ll post something short about reproducible builds tomorrow.\n",
					"date": "2018-02-20",
					"id": "duk1o0x",
					"isArchived": false,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "Absona",
					"content": "Doesn\u0027t using the minimum suitable version fix this problem, at least in theory? No module should ever be updated automatically, unless some other change to dependencies requires it, so the dependency versions are essentially locked in until you make such a change.",
					"date": "2018-02-20",
					"id": "duk0gzg",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "mvdan",
					"content": "Sure - but I mean, what happens if a library\u0027s upstream is sketchy, or if someone replaces the git repository to serve bad code. If I\u0027m simply locking a git tag, there\u0027s no way to know if the code is the same.\n\nThis is why the post talks about proxies, so an organization can control exactly what source code is being served. Something that people tend to do as well is lock with git commits, which serve as checksums of the repository\u0027s contents at that tag. My point is that, from the point of view of someone who develops side projects, being able to use commits would be much easier than having to set up a proxy.",
					"date": "2018-02-20",
					"id": "duk1clj",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Absona",
					"content": "Ah, I see.\n\nIt seems like a major downside of locking to a git commit is that it would make it harder for anything depending on your code to resolve incompatibilities nicely.\n\nIf nothing depends on your code, then what about the clone-and-use-replace method at the end of the example post? It\u0027s shown there for fixing a bug in a dependency, and it\u0027s described as a temporary measure, but it seems like it would maybe work for this.",
					"date": "2018-02-20",
					"id": "duk2em1",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "mvdan",
					"content": "I would imagine checksum locks to apply to builds only. As in, they would take effect in one\u0027s module, but discarded when the module is imported by other modules. I believe the proposal already separates the feature set in two, depending on whether you are in charge of building or not.",
					"date": "2018-02-20",
					"id": "dukau0w",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "MonkeeSage",
					"content": "Isn\u0027t that was this bit was about?\n\n\u0026gt; When developing using Git, developers will define a new semantic version of a module by adding a tag to the module\u0027s Git repository. Although semantic versions are strongly preferred, referring to specific commits will be supported as well. [...]\n\n\u0026gt; Authors will be expected to tag releases with semantic versions, and vgo encourages using tagged versions, not arbitrary commits. The rsc.io/quote module, served from github.com/rsc/quote, has tagged versions, including v1.5.2. The golang.org/x/text module, however, does not yet provide tagged versions. **To name untagged commits, the pseudo-version v0.0.0-yyyymmddhhmmss-commit identifies a specific commit made on the given date.** In semantic versioning, this string corresponds to a v0.0.0 prerelease, with prerelease identifier yyyymmddhhmmss-commit. Semantic versioning precedence rules order such prereleases before v0.0.0 or any later version, and they order prereleases by string comparison. Placing the date first in the pseudo-version syntax ensures that string comparison matches date comparison. ",
					"date": "2018-02-20",
					"id": "dukgwk3",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mvdan",
					"content": "I don\u0027t think this is the same. For one, vgo discourages the use of commits here. But also, I think this is the minimum version, so it\u0027s not guaranteed to be the exact tree you end up with.",
					"date": "2018-02-20",
					"id": "dukhlx0",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "MonkeeSage",
					"content": "Yeah that was my reading as well, it would just specify the minimum version, which will be picked by default if a module doesn\u0027t specify a newer version (\"minimal version selection\"). I think the idea is that packages requiring same dependencies with different versions--whether semantic tags or specific commits doesn\u0027t really matter--will be isolated in different modules rather than trying to resolve some happy medium, so they can all coexist and you can know the exact state of the tree. Effectively, each module (go.mod) can lock itself by specifying a version, specific commit, or it can just use the lowest common version. So lock files become redundant.",
					"date": "2018-02-21",
					"id": "dulauas",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jacobu9",
					"content": "First of all, this is awesome, and I think it\u0027s great that it\u0027s coming by from a core Go team member with the power to actualize such a change.  It\u0027s much easier to start with a straw-man proposal and tweak it to meet 90% of people\u0027s needs (and allow people to adjust their processes to make up that other 10%) than to construct something from scratch that suits 100% of an enormous number of use cases (something that `dep` had to contend with).\n\nRegarding the actual proposal, what\u0027s the upgrade path for repositories that contain both library and executable components (e.g. the root of the repository contains multiple packages used by executables in a `cmd` subdirectory).  This is a pretty standard/idiomatic pattern for Go projects.  Would both the library portion and each executable have their own `go.mod`?\n",
					"date": "2018-02-20",
					"id": "duk1f3p",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "[deleted]",
					"content": "I\u0027m really excited about this!\n\nOne thing I\u0027m wondering though, is where `vgo` downloads the modules? Inside a folder on the project workspace?  ",
					"date": "2018-02-20",
					"id": "duk4xpx",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "rsc",
					"content": "$GOPATH/src/v.\n",
					"date": "2018-02-20",
					"id": "duk8mun",
					"isArchived": false,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "kavirajk",
					"content": "wondering why does vgo try to download every package in my $GOPATH/src when I run `vgo build`?\n\nNOTE: I tried `vgo build` inside `$HOME/hello/hello.go` as mentioned in the Tour.  and my $GOPATH is $HOME",
					"date": "2018-02-21",
					"id": "dum8uel",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "kaeshiwaza",
					"content": "They are downloaded under .cache/go-build i believe\n\nedit: .cache is only used for build, the sources are in $GOPATH/src/v",
					"date": "2018-02-20",
					"id": "duk7wkj",
					"isArchived": false,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "detour_",
					"content": "This is honestly really frustrating. I finally felt like we were at a point where dep had traction and people were standardizing behind it. I literally just got out of a meeting where the organization I work for was discussing languages we might want to move to in the future. I was arguing for Go and the big point of contention was tooling. This churn on such a crucial piece of tooling just proves the dissent right. ",
					"date": "2018-02-20",
					"id": "dujweer",
					"isArchived": false,
					"isControversial": false,
					"score": 38
				},
				{
					"author": "TrueFurby",
					"content": "\u0026gt; dep had traction and people were standardizing behind it\n\nI would say they were migrating from other various tools like glide, godep, govendor to dep which was step to right direction, single and more official one to be precise, but not yet being integrated in to the official tooling yet.",
					"date": "2018-02-20",
					"id": "dujx4ml",
					"isArchived": false,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "SeerUD",
					"content": "That is true, but I\u0027ve just got part way through a migration to dep at work. My co-workers and I were just getting used to the gotchas that Go has, and now we\u0027re thinking about the possible future gotchas that this new approach will have too. It\u0027s a little frustrating that this hasn\u0027t happened sooner, and it feels a little like now the problem was just being avoided for a long time.",
					"date": "2018-02-21",
					"id": "dulmcn1",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TrueFurby",
					"content": "We did the migration at work as well. And for several projects at once. Overcoming various issues related to kubernetes for example, https://github.com/golang/dep/issues?utf8\u003d%E2%9C%93\u0026amp;q\u003dis%3Aissue+is%3Aopen+kubernetes. However vgo still promises:\n\u0026gt; ..for a smooth migration from dep and its predecessors. \n\nSo the migration isn\u0027t for nothing, it\u0027s still better than using glide as we did before. And hopefully some ultimate solution comes from dep and vgo so we can all finally be happy.",
					"date": "2018-02-21",
					"id": "dulmk0u",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "SeerUD",
					"content": "Agreed. I have faith that this will be \"the one\", because this does seem much more likely to be officially integrated into the Go toolchain, as it\u0027s sort of already there in a way. I like how it feels, and am eager to see how some of the problems that have been identified with it will be addressed.",
					"date": "2018-02-21",
					"id": "dulp2tc",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "rsc",
					"content": "I\u0027m sorry about that. I know this is long-overdue. It\u0027s about a year later than I wanted it to be. We will work very hard to make sure that transition from dep or any other tools is as smooth as possible. For example, these work today:\n\n    cd /tmp # not in GOPATH\n    git clone https://github.com/golang/dep dep1\n    cd dep1/gps\n    vgo test -short ./...\n\nor\n\n    git clone https://github.com/upspin/upspin upspin1\n    cd upspin1\n    vgo test -short ./...\n\nThese projects do not use go.mod files yet (probably dep never will!). But the existing version control metadata is good enough for vgo to get situated and let you work outside GOPATH. Both of these are dep but vgo can also convert from pretty much every other Go vendoring file format I was able to find.",
					"date": "2018-02-20",
					"id": "duk1xa9",
					"isArchived": false,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "metamatic",
					"content": "So this is basically a done deal?",
					"date": "2018-02-21",
					"id": "dulw6jz",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rsc",
					"content": "A done deal? No. We will certainly fix things. For example it seems clear that we cannot completely drop vendoring. But yes the proposal is that we do something more like vgo than like dep for the eventual go command integration.\n",
					"date": "2018-02-26",
					"id": "duty1tr",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dilap",
					"content": "it\u0027s been clear to me for a while that dep was not going to be \"it\", and while opinions will differ, i think it\u0027s the right call. this is a much-delayed step, but it almost surely marks the end of the churn. cheer up!",
					"date": "2018-02-20",
					"id": "duk0hqb",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "the_birds_and_bees",
					"content": "To be fair dep was never meant to be \"it\", at the very top of the readme it says\n\n\u0026gt; dep is a prototype dependency management tool for Go. It requires Go 1.8 or newer to compile. dep is safe for production use.\n\n\u0026gt; dep is the official experiment, but not yet the official tool. Check out the Roadmap for more on what this means!",
					"date": "2018-02-20",
					"id": "dukaloq",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "dilap",
					"content": "i think there were different bits of messaging at different times.\n\nif i remember correctly, for a while the dep homepage had language that suggested it _would_ become the standard tool, and then at the request of go people they clarified.",
					"date": "2018-02-20",
					"id": "dukinq9",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "ofpiyush",
					"content": "We\u0027ve had similar issues. Dissenters always dissent and it\u0027s ok. Other features of the language more than make up for the struggle in this area.\n\nWe were using glide before dep.\n\nAnd moving from glide to dep was as simple as `dep init`\n\n\nI believe the transition will be this simple again.",
					"date": "2018-02-21",
					"id": "dukt6z0",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "icholy",
					"content": "dep is slow, has bad ux, and crashes. But the main reason keeping me from using it, is that dep doesn\u0027t support private repositories.",
					"date": "2018-02-20",
					"id": "duk9eps",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "n1ghtm4n",
					"content": "I don\u0027t think `dep` is slow at all, given how much work it\u0027s doing. You only have to run `dep ensure -update` every once in a while (like monthly), so who cares?\n\nAm I correct in guessing that you\u0027re not checking your deps into `vendor/`, so you have to fetch them during every build?",
					"date": "2018-02-21",
					"id": "dul0dx8",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "earthboundkid",
					"content": "The slow speed of dep is kind of a pain when you\u0027re debugging a new Dockerfile, since you end up running it a bunch while you try to figure out the best order for all your COPY and RUN commands. I think it\u0027s made worse in my case by the slow speed of SSH here at work (they must be throttling something; git pull is so slow!). ",
					"date": "2018-02-21",
					"id": "dulodkx",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "theshrike",
					"content": "Copy the vendor directory to the docker image, that way you don\u0027t have to download anything.",
					"date": "2018-02-22",
					"id": "duo1yr8",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "justinisrael",
					"content": "\u0026gt; This is honestly really frustrating. I finally felt like we were at a point where dep had traction and people were standardizing behind it\n\nI share this same frustration, with the sea of package management options, and \"dep\" supposedly becoming the path to the standard.\n\n\u0026gt; But the main reason keeping me from using it, is that dep doesn\u0027t support private repositories.\n\nSimilarly I can\u0027t use dep because of an issue mixing private and public dependencies, behind a proxy: https://github.com/golang/dep/issues/860\n\nSo now I have to hope that vgo also doesn\u0027t have this issue. ",
					"date": "2018-02-20",
					"id": "dukblrm",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "peterbourgon",
					"content": "dep absolutely supports private repositories.",
					"date": "2018-02-20",
					"id": "dukbw25",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "icholy",
					"content": "The vanity server hackery doesn\u0027t cut it.",
					"date": "2018-02-20",
					"id": "dukbyyr",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "scottjbarr",
					"content": "We\u0027re using dep with a mixture of public and private repositories. No vanity servers involved. Have you checked your ssh and git config? Admittedly none of us are working behind a proxy. Is it the proxy that makes the difference for you?",
					"date": "2018-02-21",
					"id": "dukqmdo",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "merb",
					"content": "\u0026gt; is that dep doesn\u0027t support private repositories.\n\ncan you explain? I\u0027m using private repositories with dep.",
					"date": "2018-02-20",
					"id": "dukbxt0",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "icholy",
					"content": "https://github.com/golang/dep/issues/174",
					"date": "2018-02-20",
					"id": "dukc2eq",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "metamatic",
					"content": "I just use [the Git configuration workaround](https://github.com/golang/dep/issues/174#issuecomment-334578808) mentioned in the thread.",
					"date": "2018-02-21",
					"id": "dulw5vl",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "steveklabnik1",
					"content": "Glad to see this! I\u0027m still digesting the details, but to comment on https://research.swtch.com/cargo-newest.html\n\nCargo does not use the latest version. Saying\n\n    toml \u003d \"0.4.1\"\n\nis the same as saying\n\n    toml \u003d \"^0.4.1\"\n\nNOT saying\n\n    toml \u003d \"\u003d0.4.1\"\n\nwhich is what rsc would guess.\n\nThis decision was made because `^` is the most reasonable default; over-use of `\u003d` destroy\u0027s Cargo\u0027s ability to help you upgrade, given that you basically asked it to not think about it at all. Further, it would significantly bloat binaries, as this would mean many more duplicate versions of packages in your project. Basically, idiomatic use of `\u003d` is only in very specific situations.\n\nWe could have required that you always specify some operator, but we also like reasonable defaults. Writing `^` everywhere is just more typing.\n\nThe transitive dependency issue isn\u0027t any different, really: that\u0027s due to said packages also not using `\u003d`.",
					"date": "2018-02-20",
					"id": "duk0k6t",
					"isArchived": false,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "rsc",
					"content": "[Reposting from HN]\n\nHi. As I said in that page, I do know that cargo is working as designed, and that \"0.4.1\" is the same as \"^0.4.1\". My point is maybe a little more subtle, that cargo takes the newest allowed under the constraints, so given \"^0.4.1\", it has a choice between 0.4.1, 0.4.2, 0.4.3, 0.4.4, and 0.4.5, and it takes the last.\nWhen you\u0027re adding a new direct dependency, taking the latest is almost certainly right. But when you\u0027re pulling in a new transitive dependency, I think taking the last is problematic: it seems much safer to me to take the one closest to what the author of that code tested with.\n\nI\u0027ll elaborate more on this in a post tomorrow.\n\nFor what it\u0027s worth, I think I do understand what cargo is doing, and why, and I completely respect that approach. I just think this other approach might have some different properties worth exploring. As I\u0027ve been working on this I\u0027ve been using cargo as the gold standard, really. If the end of this all is that people say Go\u0027s package management is as nice as cargo, then I will be very very happy. A long way to go yet for sure.",
					"date": "2018-02-20",
					"id": "duk1m7p",
					"isArchived": false,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "steveklabnik1",
					"content": "[Reposting from HN too, haha \u0026lt;3]\n\nTo be clear, I don\u0027t think you don\u0027t understand it; I\u0027m afraid that the way that you\u0027ve worded it means that others won\u0027t understand it.\n\nI also very much don\u0027t think you should cargo cult! As munificient said on HN, this is a Hard Problem, and there are a lot of options. In some senses, I\u0027m glad you\u0027re not just copying things, as well, that\u0027s how we all learn. ",
					"date": "2018-02-20",
					"id": "duk1utm",
					"isArchived": false,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-02-20",
					"id": "dukaxy7",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "shadowmint",
					"content": "Me too! Seeing cargo acknowledged makes me tangibly more positive that this proposal is actually an incremental step, not just throwing everything away and doing it from scratch (again).\n\n\u0026lt;3 cargo.\n\nIf I can one day say that about go package management, it\u0027ll be a fine day.",
					"date": "2018-02-21",
					"id": "dukng62",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "k0ns3rv",
					"content": "Hey Steve, I\u0027ve got moderate experience with Rust(several projects, thousands of lines) and this is new to me. I think it\u0027s a great idea for all the reasons you outlined, but maybe it isn\u0027t adequately communicated? I think a point should be made on pages like https://doc.rust-lang.org/cargo/guide/dependencies.html to call this out in a very clear and hard to miss way since it\u0027s a divergence from most other popular package managers.",
					"date": "2018-02-20",
					"id": "duk1cul",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "steveklabnik1",
					"content": "Cargo\u0027s docs have sadly not gotten as much love as the other docs; I\u0027m hoping to rectify that this year. Will do that for sure!\n\n\u0026gt; since it\u0027s a divergence from most other popular package managers.\n\nI\u0027d like to put a teeny fine point on this: The advice to not use `\u003d` is, in my understanding, the same for all of the managers that use semver constraints. Most do treat \"no constraint\" as being the same as a \"\u003d\", but as a consequence, people tend to write `~` or `^` out manually. So while it is literally a divergence, it\u0027s making the convention the default, rather than the antipattern the default.",
					"date": "2018-02-20",
					"id": "duk23cn",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "k0ns3rv",
					"content": "\u0026gt; I\u0027d like to put a teeny fine point on this: The advice to not use \u003d is, in my understanding, the same for all of the managers that use semver constraints. Most do treat \"no constraint\" as being the same as a \"\u003d\", but as a consequence, people tend to write ~ or ^ out manually. So while it is literally a divergence, it\u0027s making the convention the default, rather than the antipattern the default.\n\nAbsolutely, all I am saying is that my experience, based on all the other dependency managers I\u0027ve used, is that `x.y.z` should resolve exactly to version `x.y.z`and nothing else. Cargo diverges from this for good reason.",
					"date": "2018-02-20",
					"id": "duk2odf",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "imbaczek",
					"content": "Observation: vendored packages are like dereferenced lock files.",
					"date": "2018-02-20",
					"id": "duk9mzt",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "youguess",
					"content": "can we *please* have the necessary security discussion arising from the \"just use the oldest possible version\" concept?\n\nthis is horrible if a project notices an issue and rightfully patches it in a minor version\n\neven if 2.1.2 is fine, vgo will happily pull in 2.1.0",
					"date": "2018-02-21",
					"id": "dul39nt",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "BubuX",
					"content": "\u0026gt; The uniform representation of modules as zip archives makes possible a trivial protocol for and implementation of a module-downloading proxy. Companies or individuals can run proxies for any number of reasons, including security and wanting to be able to work from cached copies in case the originals are removed. With proxies available to ensure availability and go.mod to define which code to use, **vendor directories are no longer needed**.\n\nCan we pretty please still have the option of using /vendor?\n\n* When dependencies are updated in my team I want to see the code changes clear as sky in a PR and review it.\n* Requiring a proxy server adds a toll on everyone but large corporations.\n* Having dependencies in /vendor means faster, more secure, reproducible builds with no need for internet.\n* When my CI builds breaks I\u0027d like to not have to check if the author removed/changed the code, for each dependency.",
					"date": "2018-02-20",
					"id": "dukidmc",
					"isArchived": false,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "tv64738",
					"content": "You can recreate vendor/ with the `replace` mechanism, but right now it seems like you need to write lots of replaces: https://www.reddit.com/r/golang/comments/7yxlfz/researchrsc_go_package_versioning_go_versioning/dukil6e/",
					"date": "2018-02-21",
					"id": "dukkdwn",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "BubuX",
					"content": "That feels more like a unmaintainable hack.",
					"date": "2018-02-21",
					"id": "dul1q38",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "bluetech",
					"content": "The proposal is very clever - looking at existing solutions to the problem and removing as much complexity as possible.\n\nRelying on vX.Y.Z tags is a good idea - it\u0027s good practice anyway.\n\nRelying on the major version being part of the path is a good idea - solves the multiple-installed-versions naturally.\n\nThe minimal version selection is certainly the most contentious decision - it will be interesting to see how it turns out, in any case.\n\nLooking at the vgo tour, I have one question. Let\u0027s say I\u0027m writing a package for a binary, so it will not be depended upon. Let\u0027s say I depend on package A which depends on package AB at version 1.0.0. Let\u0027s say package A is abandoned (or just finished and not in need of maintenance), but package AB has a bug, fixed in version 1.0.1. The way the tour suggests to solve this is to add a `require { \"AB\" v1.0.1}` to my module. The problem is that it is a transitive dependency, but it looks just like a direct dependency - there is no distinction at the semantics level. That\u0027s not very good -- transitive dependencies should not look like direct dependencies.\n\nI suppose the tool can mitigate the situation, on the practical level at least - if the dependency is not imported by my module, than it is not direct; if it is not direct, and there is no transitive dependency which depends on a lower version of it, then it is useless; and if it is useless, then it can be a warning/error. But the semantic distinction is still important.",
					"date": "2018-02-20",
					"id": "dukjkfm",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "rsc",
					"content": "\u0026gt; transitive dependencies should not look like direct dependencies.\n\nI thought that at first, but now I\u0027m not so sure. I think in a large program the distinction gets blurry. In any event, if you want to record why you are adding the requirement, you can put comments in the go.mod file and they will be preserved.\n",
					"date": "2018-02-21",
					"id": "dukka02",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "bluetech",
					"content": "The lack of distinction can bring about situations like this: A is updated and no longer depends on AB. But AB is still fetched. Or a bit more subtle, another dependency C depends on a newer version of A which no longer depends on AB. Again, AB is no longer needed but still fetched.\n\nI think this shows at least that this is not a pure win on all parameters, in this edge case there is additional mental overhead compared to latest-version selection, or having a lock file.\n\n---\n\nOh and I forgot to mention in my comment - making it possible to have a project-based layout without needing GOPATH - definitely welcome.",
					"date": "2018-02-21",
					"id": "duklp93",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "epiris",
					"content": "This is fantastic, while I\u0027m thankful for the efforts of dep developers I\u0027ll admit I\u0027m glad it will not be the official tool for various reasons that aren\u0027t important anymore. Small note, you have a dead link in your [tour]( https://research.swtch.com/vgo-tour), it\u0027s relative to your domain and seems to be https://github.com/golang/vgo/issues but that gives me a 404 /u/rsc - is it private?",
					"date": "2018-02-20",
					"id": "dujvmpo",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "rsc",
					"content": "The link is fixed but will take a while to get through the caches. Please use the main issue tracker and use an \"x/vgo:\" prefix in the issue title. That text about a separate issue tracker is outdated. Thanks.\n",
					"date": "2018-02-20",
					"id": "dujykoo",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Mittalmailbox",
					"content": "Depends is not going to be official? I thought it was going to be.\n\nEdit: damn you autocorrect, dep not depends",
					"date": "2018-02-20",
					"id": "dujw6rq",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SeerUD",
					"content": "Read the post you\u0027re commenting on :P\n\nDep has been an official experiment. It will continue to receive support, but it\u0027s likely that the go toolchain will incorporate lessons learned from dep like those outlined in the original post.\n\nDep has a lot of issues IMO, and is not very nice to work with overall. This new solution seems to fix several of those issues, but introduces more questions. Over time I\u0027m looking forward to seeing how the new official tooling develops.",
					"date": "2018-02-21",
					"id": "dulfh40",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "TrueFurby",
					"content": "dep*",
					"date": "2018-02-20",
					"id": "dujwvqd",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "JGailor",
					"content": "Don\u0027t want to file this as an issue, since it may just be a misconfiguration on my part.  Getting this error when running vgo per the example you provide:\n\n```vgo: cannot determine module path for legacy source directory {somewhere on my filesystem}/scratch/hello (outside GOROOT, no import comments)```\n\nThis is on OS X, with Go installed via Homebrew.",
					"date": "2018-02-20",
					"id": "duk6mpk",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "rsc",
					"content": "You probably didn\u0027t put in the import comment.\n\n    package main // import \"github.com/you/hello\"\n\nthat\u0027s where the initial go.mod gets the initial module line from. Or you can just create a go.mod that says\n\n    module \"github.com/you/hello\"\n\n",
					"date": "2018-02-20",
					"id": "duk8m14",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "JGailor",
					"content": "Thanks!  Did not realize the // import \"github.com/you/hello\" was not just a comment but something akin to a preprocessor directive.",
					"date": "2018-02-20",
					"id": "duk8svu",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "kaeshiwaza",
					"content": "I was also disappointed with this strange comment !\n\nWonder why it could not work without and just take the current dir as a default name, or even no name at all.",
					"date": "2018-02-20",
					"id": "duk9350",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "The_Sly_Marbo",
					"content": "This looks like a great proposal and seems to work very cleanly in practice.\n\nOne impression I get, which would be nice to have greater clarity on, is that:\n\n- $GOPATH continues to be used for storing dependencies (in $GOPATH/src/v)\n- $GOPATH continues to be used for storing build artifacts (including output from `go install`)\n- $GOPATH is no longer used (necessarily) for project code\n\nFor example, your code could be in $HOME/go and $GOPATH could point to /tmp and everything would work (if inefficiently).",
					"date": "2018-02-21",
					"id": "dul8wwa",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "bestform",
					"content": "This is a very good proposal. The minimal version approach and getting rid of the lock file sounds strange at first. But seeing there is a way of easily upgrading dependencies (see the vgo-tour), the mod file will essentially be an upgradeable lock file without the shortcomings. And resolving versions in combination with other dependencies will be easier this way as well. \n\nSo while my first thought was \"oh no! do not get rid of a lock file in favour of the least developed and secure version!1!\", when thinking about it, it might really be a good solution after all.",
					"date": "2018-02-21",
					"id": "dulawx4",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "daydreamdrunk",
					"content": "I don\u0027t fully understand why the new import path is necessary for major versions. It seems redundant given the existence of that information in the version tag. If vgo was never meant to be part of the official toolchain, this would make sense to me since it would need to remain go get-compatible.\n\nI get that this is to allow having n copies of the repo with different major versions in the build, but why can\u0027t vgo mechanically handle the import resolution by some means? I realize that would make vgo itself more complicated but it seems like it would make using it simpler for everyone, especially authors creating a major version.",
					"date": "2018-02-20",
					"id": "dukcksz",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rsc",
					"content": "Tomorrow\u0027s post will help with this question. It\u0027s a long story.\n",
					"date": "2018-02-21",
					"id": "dukkgw4",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "joncalhoun",
					"content": "/u/rsc Could you clarify on what you mean by \"older\" in the post? I think this is a source of much confusion, especially on HN.\n\nIn the post you write:\n\n\u0026gt; This proposal takes a different approach, which I call minimal version selection. It defaults to using the oldest allowed version of every package involved in the build. This decision does not change from today to tomorrow, because no older version will be published.\n\nI think what you are intending here is that semantic versions will always be increasing (within their respective `MAJOR.MINOR.*` categories), so minimal version selection defaults to the minimal semantic version that meets its requirements.\n\nie a package developer can release versions in the following order:\n\n1. `1.2.0` at T0\n2. `1.3.0` at T1\n3. `1.2.1` at T2\n\nIn this case, `1.2.1` is \"newer\" than `1.3.0`, but as I understand it minimal version selection would prioritize versions in the order:\n\n1. `1.2.0`\n2. `1.2.1`\n3. `1.3.0`\n\nChoosing the first version in that list that satisfies all of its modules, even though `1.2.1` may not technically be the \"oldest\" version. Is this inaccurate?\n\n\nEdit: I grabbed `vgo` and experimented with this a bit, and `vgo` works as I assumed. I am going to assume that what was intended is that with proper semver you won\u0027t release a lower version under the same `major.minor.*` branch later in time, which is a reasonable assumption. Everyone took this to mean that you couldn\u0027t release `v1.2.1` after `v1.3.0` which is untrue.\n\n\n    $ vgo list -u -m\n    MODULE                          VERSION                    LATEST\n    github.com/joncalhoun/vgo_main  -                          -\n    github.com/joncalhoun/vgo_demo  v1.0.1 (2018-02-20 18:26)  v1.1.0 (2018-02-20 18:25)\n\nv1.0.1 in this example was released after v1.1.0, but is treated correctly by `vgo`.",
					"date": "2018-02-20",
					"id": "duke432",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rsc",
					"content": "Yes, sorry, \"oldest\" means \"minimal under semver\" not time-ordered.\nI tried pretty hard to avoid saying that in most places, but that one slipped in.\n",
					"date": "2018-02-21",
					"id": "dukkghy",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "joncalhoun",
					"content": "No worries, and thanks for the response. Unfortunately most critical people on HN seem unwilling to give you the benefit of the doubt or to verify which it actually is 😩",
					"date": "2018-02-21",
					"id": "dukmrea",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "joncalhoun",
					"content": "Followup Q - Does this mean builds require internet access now? Are there plans to support offline builds in some way?\n\nEdit: Testing locally, the build cache is used so you don\u0027t need to download the packages every build, but I\u0027m not sure how long that cache lasts or if it could be automatically cleared by the OS causing issues.",
					"date": "2018-02-20",
					"id": "dukfrii",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "tv64738",
					"content": "As far as I can tell, only in the sense that `go get` requires internet too, unless you already have the source. Your second `vgo build` should not access the internet. `vgo get` or `vgo list -m -u` check for updates, so they need internet access.",
					"date": "2018-02-20",
					"id": "dukhzi4",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "joncalhoun",
					"content": "`go get` will download the source into your `$GOPATH/src/` directory, and then used from there for builds.\n\n`dep` uses a vendor directory, which again is in your source code and won\u0027t be randomly cleared.\n\n`vgo` seems to use the go build cache and DOES NOT download the source code into your $GOPATH or a vendor directory. Using the cache isn\u0027t necessarily an issue, but it is unclear whether this will be retained permanently on all operating systems, or if it could be cleared by a reset or any other random action.",
					"date": "2018-02-21",
					"id": "duknb4e",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tv64738",
					"content": "See `$GOPATH/src/v`. rsc mentioned this in another comment. I wonder if the long-term plan is something else, and that\u0027s just a hack.",
					"date": "2018-02-21",
					"id": "duknor4",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "joncalhoun",
					"content": "Thanks I missed that.",
					"date": "2018-02-21",
					"id": "dul7k9i",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tv64738",
					"content": "Okay, I\u0027m unclear. Does vgo use import path segments like `foo/v1/bar` for something, and if so what?",
					"date": "2018-02-20",
					"id": "dukib7e",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "0xjnml",
					"content": "I\u0027ve misread and wondered why are you *nuclear*. Twice ;-)",
					"date": "2018-02-21",
					"id": "dul7jqh",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tv64738",
					"content": "I wish\n\n    $ echo \u0026gt;go.mod\n    $ vgo build\n\ndid the equivalent of `vgo get -u`; require everything to be at least the current version. Think about it, I see on the web that rsc.io/sampler v1.3.1 was released with this great new (backwards compatible) improvement, and I want to write a little test app to try it. It\u0027s natural for me to expect that I\u0027d start with v1.3.1 by default.",
					"date": "2018-02-20",
					"id": "dukigm2",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "joncalhoun",
					"content": "By default, the latest version of a NEW dependency will be used. Check out the tour - it shows this with the `rsc.io/quote` package when the `v1.5.2` version is used by default when it is added as a dependency. ",
					"date": "2018-02-21",
					"id": "duknh72",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "tv64738",
					"content": "But my `rsc.io/sampler` is still 1.3.0 not 1.3.1 or 1.99.99.",
					"date": "2018-02-21",
					"id": "duko17a",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "joncalhoun",
					"content": "I don\u0027t know if you have an existing `go.mod` file or something else is going on. Can you share code?",
					"date": "2018-02-21",
					"id": "dulci0u",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tv64738",
					"content": "Literally the examples in the vgo tour.",
					"date": "2018-02-21",
					"id": "duljga2",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rsc",
					"content": "Your program imports rsc.io/quote. You get the newest version of that. You get the rsc.io/sampler that rsc.io/quote built and tested against. This is by design. The point is that you don\u0027t get the untested, buggy 1.99.99. I don\u0027t make much distinction between 1.3.1 and 1.99.99. They\u0027re both \"something newer than what rsc.io/quote has been tested with\".",
					"date": "2018-02-22",
					"id": "dumtn3t",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tv64738",
					"content": "I understand what you\u0027re going for, but I do hope you realize that most people will just opt to `vgo get -u` regularly.",
					"date": "2018-02-22",
					"id": "dumwi0f",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rsc",
					"content": "That\u0027s fine. If a user asks for upgrades I have no problem delivering upgrades. It\u0027s when the user _doesn\u0027t_ ask that I object.\n",
					"date": "2018-02-26",
					"id": "dutxuui",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tv64738",
					"content": "If I need to fork and patch a dependency, and then months pass and I merge in new upstream versions, always carrying my fix forward, how does that interact with the `replace` functionality? Right now, it seems the left hand side of replace has to say a specific version:\n\n    replace \"rsc.io/quote\" v1.5.2 \u003d\u0026gt; \"../quote\"\n\nSo if I run `vgo get -u` ever, I lose my bugfix? That\u0027s not ideal.",
					"date": "2018-02-20",
					"id": "dukil6e",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rsc",
					"content": "We haven\u0027t used this yet at all. If that doesn\u0027t work in practice then it\u0027s easy to add power to both replace and exclude, such as allowing \u0026gt;\u003dv1.5.2 instead of v1.5.2. They can be just about arbitrarily complex, because they only affect the current module.\n",
					"date": "2018-02-21",
					"id": "dukkblr",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "tv64738",
					"content": "Heh, `\u0026lt;\u003dv1.5.2 \u003d\u0026gt;`. Go finally gets its own spaceship operator!",
					"date": "2018-02-21",
					"id": "dukkt48",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ofpiyush",
					"content": "\u0026gt;The uniform representation of modules as zip archives makes possible a trivial protocol for and implementation of a module-downloading proxy. Companies or individuals can run proxies for any number of reasons, including security and wanting to be able to work from cached copies in case the originals are removed. With proxies available to ensure availability and go.mod to define which code to use, vendor directories are no longer needed.\n\n\nBrings tears to my eyes! Thank you!\n\nThank you Russ",
					"date": "2018-02-21",
					"id": "duksvy3",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jsteenb2",
					"content": "Great stuff /u/rsc. Has there been any thought given to building something for the go toolchain that publishes package and automatically assigns semver?  Similar to how elm-package proposed semver by looking at the exported types land comparing changes from the previous version to the next https://github.com/elm-lang/elm-package#version-rules\n\nVery excited to give vgo a run for its money. Awesome work Go team and looking forward to where this is headed :-D",
					"date": "2018-02-21",
					"id": "dul4ni6",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "014a",
					"content": "\u0026gt; vgo has special cases to use those hosting sites\u0027 APIs to fetch archives.\n\nWhat happens here if I host my git repositories on a site which isn\u0027t \"christined\" by Google to use some special APIs? \n\nI like that those are supported. It allows huge websites like Github to do some special CDN caching every time you publish a new release. That\u0027s nice.\n\nBut what if my module is a git repository normally cloneable at the URL `mywebsite.co/left-pad`? Does it use something like `git archive` to generate these zip files dynamically given a git commitish? I\u0027d hope so, but the article seems to imply that vgo isn\u0027t even \"aware\" of git anymore, it just does zip over HTTP?\n\nAlso, if my organization wanted to run our own CDN (say, leveraging S3) such that my git repository is hosted on `mywebsite.co/left-pad` but my archives are at `archives.mywebsite.co/left-pad`, does that mean all of the import paths now have to reference `archives.mywebsite.co/left-pad`? Is there even a way to do this, given that defining a mapping between commitish tags and archives seems like a problem that doesn\u0027t have an easy solution?\n\nOverall, its a great change. I think some of these specifics need to be outlined. ",
					"date": "2018-02-21",
					"id": "dulput2",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rsc",
					"content": "research.swtch.com/vgo-module outlines those specifics. You can import mywebsite.co/left-pad as long as that URL has a \u0026lt;meta\u0026gt; tag pointing at archives.mywebsite.co/left-pad.\n",
					"date": "2018-02-26",
					"id": "dutxpzz",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "014a",
					"content": "Thanks; that enumeration is perfect. vgo looks great so far, can\u0027t wait to see the impact it has on the Go community when its ideas are brought into go. ",
					"date": "2018-02-26",
					"id": "duu5ji9",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sweaty-balmer",
					"content": "I feel like this is taking away one of the best features of `go get` and replacing it with one of the worst ones from other package managers. I can no longer just build a thing with any confidence that it\u0027s not going to try to pull in random crap from the internet or advertise to the world that I\u0027m now doing a build.",
					"date": "2018-02-20",
					"id": "dukeoqd",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rsc",
					"content": "We can add a flag for people who are worried about this. I don\u0027t honestly see the practical difference between you running \"go build\", having it fail due to missing dependencies, and then you run \"go get\" and \"go build\" again. How often are you really going to stop and not finish the build just because you don\u0027t have a dependency cached?",
					"date": "2018-02-21",
					"id": "dukkezz",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "ngrilly",
					"content": "Suggestion: add an -offline flag similar to `yarn install --offline` (https://yarnpkg.com/en/docs/cli/install#toc-yarn-install-offline)",
					"date": "2018-02-21",
					"id": "dulgsrk",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "alficles",
					"content": "The \"automatically pull from the Internet\" gives me serious security concerns. The simplest is that the packages are served via HTTP, which makes them easier to modify in flight if you own the right router. Even if you fix that, though, you have the go-bindata situation. That author could trivially swapped in a mostly similar but slightly evil version.\n\nWhen I trust a dependency, I only trust it now. I don\u0027t necessarily trust all future copies of that source. Signed releases might help here, but that\u0027s kinda the opposite of simple. ",
					"date": "2018-02-21",
					"id": "dukmx1y",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "joncalhoun",
					"content": "Check out the `vgo` source - https is used throughout it. \n\nWhen rsc mentions `HTTP` in the post I think he meant it as the protocol (as opposed to say `git clone ...` which doesn\u0027t have to use the http protocol).",
					"date": "2018-02-21",
					"id": "duknua1",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "youguess",
					"content": "and https is soooo secure...\n\ni mean there\u0027s no way that anyone *ever* encountered a rogue CA which gave out *.google.com certs right?\n\nhttps://youtu.be/tJFfDOQT46k",
					"date": "2018-02-21",
					"id": "dul357l",
					"isArchived": false,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "joncalhoun",
					"content": "I\u0027m not sure what your point is. https is strictly better than regular http, and as far as I\u0027m aware there aren\u0027t better alternatives out there that would be viable here. Eg I don\u0027t expect `git clone git@github.com:...` to be any more secure.",
					"date": "2018-02-21",
					"id": "dulcgmp",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "4ad",
					"content": "\u0026gt; Eg I don\u0027t expect `git clone git@github.com:...` to be any more secure.\n\nErm, git clone done like that uses ssh, which mutually authenticates the server and client. Yes, it is vastly more secure than HTTPS.\n\n(Though by default go get does git clone over HTTPS, not SSH).\n",
					"date": "2018-02-21",
					"id": "duleix8",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "joncalhoun",
					"content": "Not sure why I missed that. Guess I\u0027ve been working too long. 😴",
					"date": "2018-02-21",
					"id": "dulevo1",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "lonahex",
					"content": "The whole dep issue aside, this does look very interesting. Some things I really like:\n\n- No automatic minor version upgrades\n- Ability to exclude dependencies\n- No GOPATH\n- Easy way to downgrade, replace with forks\n- Seamless integration into existing go tool chain\n\nI\u0027ve been burned so many times because of the automatic minor version upgrades in other languages that all my projects at work specify exact versions. Making this default IMO is a great engineering practice. \n\nI still hope vendoring dependencies is allowed and works well. I want to be able to reproduce and ship builds even if a server some dependency is served from has problems. This is especially true for Go because of the distributed nature of software repositories.",
					"date": "2018-02-21",
					"id": "dukjwga",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TheMerovius",
					"content": "I know I\u0027m the exception, but: I\u0027m really disappointed by this. I was really excited to see at least some voices in the [mainstream programmer community](https://www.youtube.com/watch?v\u003dtISy7EJQPzI) catch up with Go\u0027s \"live at head\" mentality - and now, Go is taking what appears to me to be a major step back by making it intentionally hard to stay up-to-date. When I want stable, maintained software, I install them from my distribution, *that\u0027s what it\u0027s for*. When I use the go tool, I do it as a Go developer and I *always* want the latest and freshest. If stuff breaks - that\u0027s fine. It *needs* fixing then. vgo *inverts* what I\u0027d see as the correct pattern here - it makes developers use stale versions, while distributions will have to figure out how to do the upgrades and resolve the breakages (as they need a consistent view on the world as a whole).\n\nLastly (again, knowing that I\u0027m the exception), I really *like* GOPATH and I don\u0027t like seeing it go away :(\n\nI really hope there will be some way to keep living at head…",
					"date": "2018-02-20",
					"id": "duk6ztd",
					"isArchived": false,
					"isControversial": true,
					"score": 5
				},
				{
					"author": "kaeshiwaza",
					"content": "I don\u0027t see why you could not keep your GOPATH like any path and use vgo get -u when you want to be at head ?",
					"date": "2018-02-20",
					"id": "duk83y6",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "TheMerovius",
					"content": "For one, because that\u0027s not a GOPATH; there are as many versions of a package installed, as there are modules, instead of one and only one. I specifically do *not* want project-specific versions of any package on my system, whether they are at head or not.",
					"date": "2018-02-20",
					"id": "duk8ym9",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "justinisrael",
					"content": "\u0026gt; Lastly (again, knowing that I\u0027m the exception), I really like GOPATH and I don\u0027t like seeing it go away :(\n\nI like the idea of GOPATH as a developer on my own project. But I don\u0027t like it for the idea of some other user wanting to clone and build my project just for the build artifacts. Vendor directory solved that second problem for main programs, but the advice has been to not do this for libraries. So then we want a good way to specify the dependencies of a library, without vendoring them, and programs consuming those libraries can vendor direct and transient dependencies properly.  ",
					"date": "2018-02-20",
					"id": "dukava3",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; But I don\u0027t like it for the idea of some other user wanting to clone and build my project just for the build artifacts.\n\nThen publish binary releases, so they don\u0027t have to. Ideally, package them for distributions.\n\nI don\u0027t understand why people think go-get (or vgo or dep) has to be the tool of choice to distribute their software.",
					"date": "2018-02-20",
					"id": "dukb4ri",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "justinisrael",
					"content": "\u0026gt; Then publish binary releases\n\nNo offense, but that is a bit of a naive suggestion. Sure, in some cases it is possible to always provide binary releases and no one ever has to build your code. There are situations where the application has cgo dependencies that rely on a build in the local system. The user may not be a Go developer, but they can make sure they have system lib deps X, Y, and Z, and run the build commands to produce an artifact.\nAt my work, we package and deploy our software, of course. But there are also situations where some other non-Go developer needs to check out a project, make a small tweak, and deploy a new version. I had to jump through some GOPATH manipulation hoops to get our build system Go plugin to handle self-contained projects for non-go developers to build.\n\nI\u0027m just saying there are valid cases where it should be easy for a project to be checked out and built, without needed special build tools (gb), or Go-specific dev environments. Vendoring solves most of this. But 100% not needing a GOPATH to build a project is really great. ",
					"date": "2018-02-20",
					"id": "dukdung",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; There are situations where the application has cgo dependencies that rely on a build in the local system.\n\nBut `vgo` is neither conscious of what versions of C-libraries are installed on the system, nor would it be able to enforce its notion of what version you\u0027d want. There *is* already a solution for reconciling required versions of code written in different languages, though; the distributions\u0027 package manager.\n\nThis is an argument *in favor* of properly packaging your software, not against.\n\n\u0026gt; The user may not be a Go developer, but they can make sure they have system lib deps X, Y, and Z, and run the build commands to produce an artifact.\n\nIf you already know and specify what versions of what C libraries will be required *and* trust the user to enforce that, why would the Go code need to be built on the users system? It would seem that in that case you can simply ship a dynamically linked binary (which is what would be produced anyway) which loads its dependencies like any other software.\n\n\u0026gt; I\u0027m just saying there are valid cases where it should be easy for a project to be checked out and built, without needed special build tools (gb), or Go-specific dev environments.\n\nCan you elaborate? Because that seems highly unlikely. I basically never built any software that did not require me to install at least *some* things specific to the language or even software itself.\n\nI agree that this is a problem and it shouldn\u0027t be the case, but I really don\u0027t see how GOPATH is, in any way, more of a special snowflake here than Python\u0027s virtualenv or autoconf or manually having to install a random set of headers of extra C-libraries. And again, a generic, language agnostic solution to this would seem preferable. For example debian at least has tools to build a package reproducibly in a container.\n\n---\n\nThis gets at the heart of the main problem I\u0027m having with this development of language-specific package managers: They conflate development workflows with distribution workflows. But software distribution (and reproducible builds are part of that) should, as much as possible, have a language-agnostic solution. If nothing else, then because most actual software relies on more than libraries written in a single language (be it documentation-generators, databases, testing tools…).\n\n`go get` (and `vgo`) as language-specific tools should be tailored for the use case of Go developers hacking on Go code. And for *that* usecase, living at HEAD is the healthier option for the whole ecosystem. Solve the resolution of compatible versions in the distributions, where it needs to happen anyway, instead of the individual Go packages. And save everyone some duplicated work.\n\n---\n\nAnyway, as I said, I\u0027m aware that I\u0027m the exception with these views. I\u0027ll still mourn what I perceived as one of Go\u0027s main areas of innovation going away, though.",
					"date": "2018-02-20",
					"id": "dukiyfr",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "shovelpost",
					"content": "According to the [vgo examples](https://research.swtch.com/vgo-tour):\n\n\u0026gt; The vgo get -u behavior of taking the latest of every dependency is exactly what go get does when packages being downloaded aren\u0027t in GOPATH. \n\n\u0026gt; The important difference is that vgo does not behave this way by default.\n\nFrom a first look it seems that you can still have the old behavior if you so wish.",
					"date": "2018-02-20",
					"id": "duk8fkw",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TheMerovius",
					"content": "AIUI, this is intended to be used by the upstream developer, not by the user. As a user, I *always* want to use the latest version of everything and as a developer, I want my users to *always* use the latest version possible (at least if they are installing an unpackaged version).",
					"date": "2018-02-20",
					"id": "duk8os6",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "JRMWarfare",
					"content": "I understand where you\u0027re coming from, but reproducible builds are something I care about and in that regard, using the HEAD version of all packages can, in a small percentage of cases, cause challenges. I haven\u0027t looked at vgo yet, but I intend to this evening. I imagine a final version will support a \"HEAD\" dependency version, if it doesn\u0027t already, while still allowing people in my situation to be more specific if need be. ",
					"date": "2018-02-20",
					"id": "duka65n",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "TheMerovius",
					"content": "Reproducible builds are important. But all that implies for Go, is that it should provide the same output given the same inputs (which it doesn\u0027t, right now, coincidentally).\n\nIf you want reproducible builds, collect the information about all the versions going into your software and publish them as a lockfile. How you do version resolution and how your development cycle works, is independent of that.",
					"date": "2018-02-20",
					"id": "dukavvp",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "joncalhoun",
					"content": "I\u0027m trying to understand what your concern is but having trouble placing it. Perhaps you can help me out? 😀\n\nSo let\u0027s say I\u0027m creating a new project and importing a module (let\u0027s call it `demo/pkg`) for the first time - in this circumstance it appears that `vgo` *will* default to the newest version.\n\n\u0026gt; We\u0027ve seen that when a new module must be added to a build to resolve a new import, `vgo` takes the latest one.\n\nThat seems like a sane default - new projects likely want to use the newest version, but automatic upgrades can be problematic. My Go version doesn\u0027t auto-update. My Rails version doesn\u0027t auto-update. These are all user driven changes whenever they are ready to upgrade. I\u0027m not sure why I would want my dependencies auto-updating as well.\n\nNow later let\u0027s say I use a new module that needs version. Perhaps I am on `v1.3.2` and it needs  `demo/pkg` with `v1.3.4`. There isn\u0027t any way for my code to run on my \"pinned\" version of `v1.3.2`, so this proposal would have `vgo` bumping everything up to `v1.3.4`. Again, this sounds pretty sane - upgrading both packages to `v1.3.5` is the current default, but neither package may have been tested on that version of `demo/pkg` and right now I\u0027m not trying to upgrade dependencies, I\u0027m trying to add a new module to my code. An upgrade of `demo/pkg` would be a hidden side effect, so using `v1.3.4` minimizes the change.\n\nNow at some point down the road I might decide I do want to create a new build so I check the versions of all my dependencies w/ `vgo list -m -u`. This tells me which packages can be upgraded, and I can manually use `vgo get demo/pkg` to upgrade (or `vgo get -u` for all deps). This would bump me to `v1.3.5` or whatever the newest version is, I could test my code, then build. \n\nIt sounds like you are saying the last step - manually upgrading - is a bad thing and should be done automatically when code gets built, but I\u0027m not sure if thats what you mean.\n\n \n\n",
					"date": "2018-02-20",
					"id": "dukffvt",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "earthboundkid",
					"content": "1. Why not use TOML?\n\n2. The meaning of “package” and “module” are now backwards from Python, where packages are projects and modules are files. Why not some other word?",
					"date": "2018-02-21",
					"id": "duklbmc",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rsc",
					"content": "1. To start, every require directive would take 3-4 lines instead of 1. Honestly I didn\u0027t look much further. I want these files to be human-readable first, machine-readable second; not the other way around.\n\n2. Other languages besides Python have modules too, with varying meanings, enough that there\u0027s no one right meaning. Python programmers arriving at Go may be confused for a tiny while but I don\u0027t anticipate them having a problem adjusting. We spent a while looking at words and didn\u0027t find anything better.",
					"date": "2018-02-21",
					"id": "dukrchv",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "robinst",
					"content": "It\u0027s only a single line per dependency in `Cargo.toml`, for example:\n\n    hello_utils \u003d \"0.1.0\"\n\nIf you need to specify more than a version, it looks like this (still one line):\n\n    hello_utils \u003d { path \u003d \"hello_utils\", version \u003d \"0.1.0\" }\n\nSo not sure where \"it would take 3-4 lines\" comes from?",
					"date": "2018-02-21",
					"id": "dul9s00",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "earthboundkid",
					"content": "On 2, what’s wrong with “project”? Seems to cover the basic meaning of an indivisible set of packages. ",
					"date": "2018-02-21",
					"id": "dukrghx",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rsc",
					"content": "Project is already quite overloaded. \"The Go Project\" arguably describes many different modules, for example. And GitHub has a very specific meaning of project that people have a strong association with; this is not that meaning.\n\n",
					"date": "2018-02-26",
					"id": "dutxtbb",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "indil7",
					"content": "Bundle?",
					"date": "2018-02-21",
					"id": "dukslrv",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Testiclese",
					"content": "There\u0027s no TOML parser in the standard lib would be my guess as to why not TOML. ",
					"date": "2018-02-21",
					"id": "duklsge",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Zamicol",
					"content": "I really don\u0027t find TOML or YAML to be golang-y.  \n\njson5, json, or rsc\u0027s solution is much better.  \n\n\n",
					"date": "2018-02-21",
					"id": "dul4w4g",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Manishearth",
					"content": "\u0026gt; Instead of users saying “no, that\u0027s too new,” they can only say “no, that\u0027s too old.”\n\nGiven that you\u0027re mentioning semver, I assume users still have the option to say \"no, that\u0027s too new\" when it comes to new major versions?\n\n(As steve mentions [below](https://www.reddit.com/r/golang/comments/7yxlfz/researchrsc_go_package_versioning_go_versioning/duk0k6t/), Rust also does \"no, that\u0027s too old\", but it also is more flexible on the defaults)",
					"date": "2018-02-20",
					"id": "duk1961",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Perhyte",
					"content": "The intention is to require major versions to use different import paths (except v0, for obvious reasons).\n\nSo if v0.x.x - v1.x.x live in \"host.com/pkg\", then v2.x.x lives in \"host.com/pkg/v2\". (Search for \"/v2\" in the article)",
					"date": "2018-02-21",
					"id": "dulbef9",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-02-20",
					"id": "dujulkz",
					"isArchived": false,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "rsc",
					"content": "I could have had it out sooner, but it would have been even longer. :-)\n",
					"date": "2018-02-20",
					"id": "duk8pjv",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "drink_with_me_to_day",
					"content": "Let the bloat begin...",
					"date": "2018-02-21",
					"id": "dukpr5u",
					"isArchived": false,
					"isControversial": false,
					"score": -8
				}
			]
		},
		{
			"author": "faiface",
			"date": "2017-08-07",
			"id": "6s5a7q",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Context should go away for Go 2",
			"comments": [
				{
					"author": "metamatic",
					"content": "(a) Cancellation and (b) per-request values for HTTP handlers are totally different problems, and I found it really confusing when Context was introduced as the solution to both problems. I feel like it was an unfortunate case of \"Well, here\u0027s one hack which will let people work around two big issues without changing any APIs, so let\u0027s do it\".",
					"date": "2017-08-07",
					"id": "dlab7e3",
					"isArchived": true,
					"isControversial": false,
					"score": 40
				},
				{
					"author": "112-Cn",
					"content": "I tend to agree. Baked-in cancellation may be great, the only worry is how to make it fit without complicating the language too much.\n\nAs such, I\u0027m greatly interested in your proposal, keep us posted !",
					"date": "2017-08-07",
					"id": "dla5wg3",
					"isArchived": true,
					"isControversial": false,
					"score": 40
				},
				{
					"author": "bkeroack",
					"content": "Language magic should be avoided if at all possible. Though I agree that `context` is pretty clunky.",
					"date": "2017-08-07",
					"id": "dla9vkr",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Emacs24",
					"content": "Go has a lot of runtime magic anyway. Just because of the CSP model. Yet another runtime trick won\u0027t change much.",
					"date": "2017-08-07",
					"id": "dlaj7ez",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "bkeroack",
					"content": "I disagree that there\u0027s \"a lot\". There\u0027s just enough to support the concurrency model, new data structures (maps, etc) and GC. Otherwise it\u0027s pretty much straight C.",
					"date": "2017-08-07",
					"id": "dlakw5y",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Emacs24",
					"content": "And reflection, and task switching on function calls, and interface nil that is exactly (nil, nil) but (nil, table reference), and\n\n    a[string(byteSlice)] +\u003d 2\n\nthat allocates a string while\n\n    b :\u003d a[string(byteSlice)]\n\ndoesn\u0027t allocate anything, etc.\n\nHardly a C Go is.",
					"date": "2017-08-07",
					"id": "dlamffw",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "jerf",
					"content": "At the point where people are seriously discussing changing io.Reader to include a context, and indeed, by that logic, slathering contexts in dozens of other places too, I\u0027d submit that maybe it\u0027s time to reconsider the argument against goroutine-local data. As it happens, I\u0027ve also had the exact use case where I would have _loved_ to have a context passed into my BinaryUnmarshaler implementation, but there\u0027s no way to do it. (I\u0027m using Gob to deserialize something that may need to depend on some local state, but because I\u0027m getting my UnmarshalBinary function called with no state or context whatsoever other than the bytes in the binary, I only have access to global state.) Include a community-driven standard on where cancellation lives in that context.\n\nBasically, every place someone wants to stick one of these \"ctx\" parameters is an argument in favor of goroutine-local data.\n\n(Also, \"let\u0027s have a generic cancellation mechanism\" leads one quickly to the idea of asynchronous exceptions, or asynchronous panics in Go\u0027s parlance. But such things aren\u0027t possible in Go. [See this writeup I\u0027ve done](http://www.jerf.org/iri/post/2930#no_async_exceptions), and let me reiterate here on Reddit that the discussion there is not the result of desk-chair theory, but the hard experience of several very well-funded efforts to add them to languages that are, for this purpose, basically identical to Go.)",
					"date": "2017-08-07",
					"id": "dla9m2r",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "faiface",
					"content": "I have some ideas for a general cancelation mechanism which don\u0027t require any asynchronous exceptions or any bad stuff like that. I\u0027ll post/propose the ideas later.",
					"date": "2017-08-07",
					"id": "dla9tjl",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "tv64738",
					"content": "Goroutine local storage is the wrong level for per-request data. There are often multiple goroutines collaborating on fulfilling a single request.",
					"date": "2017-08-09",
					"id": "dlcwutf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jerf",
					"content": "Nothing stops them from sharing. Contexts already require explicit management, so the fact that you\u0027d have to explicitly manage local storage isn\u0027t much of a downside by comparison.\n\nAlso, I remind you that I suggest this as a last resort, not the first thing you reach for. If you can solve the problem with passing contexts around, then do that. We\u0027re discussing the increasing number of cases for which that is not working.\n\nIf there was an obviously-correct solution, we wouldn\u0027t have to be having this discussion.",
					"date": "2017-08-09",
					"id": "dldj98g",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; I\u0027d submit that maybe it\u0027s time to reconsider the argument against goroutine-local data.\n\nI\u0027d be interested to know what those are. To me, goroutine-local data seems like being literally the best of both worlds; allowing the benefits of context.Context, while being type-safe and performant…",
					"date": "2017-08-08",
					"id": "dlbiivl",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "jerf",
					"content": "[Presented without endorsement](https://groups.google.com/d/msg/golang-nuts/fOGYNEKLZ4w/Cb5D1ea22-gJ).\n\nI don\u0027t disagree that thread-local storage is sometimes risky and has been abused in the past, but I think that issue is fixable with a community consensus of \"use this as a last resort, not a first\". It\u0027s just that I rate the global variables I\u0027ve had to use as already worse than that, and, again, if we were seriously considering slathering context.Context into the dozens of places in the standard library and the unbounded number of places it belongs in the other libraries, I\u0027d call that unambiguously far worse than thread-local storage.\n\n(And if I may say so, I _reeeeaaaalllly_ don\u0027t like global variables and I\u0027m fairly decent at avoiding them. I\u0027ve clocked a lot of time with FP and passing extra context parameters doesn\u0027t really bother me; I was passing around [\"environments\"](http://www.jerf.org/iri/post/2929) since before context.Context was public, or possibly even existed. So if I\u0027m using globals, it truly was a last resort, it\u0027s not just that I was too lazy to do the right thing.)\n\nI\u0027m also, to be clear, open to other solutions that may present themselves; I just have no idea what they may be. If someone presents one, I\u0027ll give it a fair shake (but bear in mind a \"fair shake\" may be a substantial listing of issues with the proposal, which is really the default situation here including for a thread-local proposal; such is the nature of this sort of change).",
					"date": "2017-08-08",
					"id": "dlbq7x1",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "TheMerovius",
					"content": "I think that thread agrees, that the introduction and spread of context should lead to reconsider TLS, then. I\u0027ve been considering it to be strictly worse anyway.\n\nFWIW, I was planning to write down how *I* would imagine that to look before all of this discussion started ^^ So I\u0027m fairly amused by the debate and that I\u0027m not alone in my conclusions :)",
					"date": "2017-08-08",
					"id": "dlbqjdr",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "warmans",
					"content": "Although I mostly agree I have a couple of comments:\n\n1. you can avoid context collisions if you create a specific, unexported type for each thing that wants to put stuff into the context. A map\u0027s key contains the type so even if two keys are the same string if they have a different type they will not collide. You probably also need to provide exported functions for getting things out of the context if the type is unexported. e.g. `GetLogger(ctx context.Context) log.Logger` or whatever.\n\n2. I think context makes a lot of sense for HTTP requests since you do usually want to have arbitrary \"stuff\" passed between middlewares/handlers via the request context.",
					"date": "2017-08-07",
					"id": "dla5xti",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "faiface",
					"content": "In such cases, it can be kept within the HTTP requests, if it\u0027s so useful there (although I expect it can be avoided). The reason why Context spreads to libraries outside HTTP requests themselves is cancelation. So, if Go 2 solves cancelation, context for request-scoped values will no longer need to spread outside the requests.",
					"date": "2017-08-07",
					"id": "dla674f",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-07",
					"id": "dla6xd7",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "unitedcreatures",
					"content": "Actually, it could look even easier! Just make `go` return a cancel `func()`:\n\n    cancel :\u003d go doStuff()\n    defer cancel()\n    // do other stuff\nOr make it return routine ref, or anything else.\nThis way return param can be ignored if cancellation isn\u0027t needed and won\u0027t add clutter if it is.",
					"date": "2017-08-07",
					"id": "dla8fw7",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "faiface",
					"content": "This is actually a part of one of my ideas :). The other part is how the canceled goroutine should handle it\u0027s cancelation.",
					"date": "2017-08-07",
					"id": "dlafmfj",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "unitedcreatures",
					"content": "That\u0027s cool :) looking forward for the post/proposal!",
					"date": "2017-08-07",
					"id": "dlahnp1",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Redundancy_",
					"content": "The nice thing about context is that it leaves control in the hands of the goroutine to work out when to check it and act, and doesn\u0027t preempt control flow like an exception / panic.\n\nWhile I\u0027ve worked with Python Stackless tasklets that could be cancelled from outside before through exceptions, that wouldn\u0027t be at all idiomatic for Go.",
					"date": "2017-08-07",
					"id": "dlam9np",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "faiface",
					"content": "A built-in calcelation mechanism doesn\u0027t have to be preemptive.",
					"date": "2017-08-07",
					"id": "dlao1xt",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "joncalhoun",
					"content": "Can you elaborate?\n\nWhen you accept a context you have a variable passed in that clearly notifies your code to cancel. If you had for example the reader interface where would this signal to cancel come from? \n\nIt would end up looking/feeling very similar to a recover I suspect, but I\u0027m not sure. It might also be odd in the sense that in the SQL package it is clear which functions support cancellation, but if this is more of a global thing I\u0027m not sure how a function could signify, \"yes, this func supports cancellation\". I know not all funcs that take a context do but it is often a helpful hints that it may. \n\nPs - I\u0027m not opposed to your suggestions but I\u0027m trying to understand alternative options a bit better.",
					"date": "2017-08-08",
					"id": "dlbdgv5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Rainfly_X",
					"content": "I like the idea that it\u0027s automatic by default (does checks in the same code that does voluntary task switches) but if a function contains manual cancellation handling at all, it has opted into being a completely manually managed function.",
					"date": "2017-08-08",
					"id": "dlbf6qh",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tv64738",
					"content": "Goroutines cannot be preemptively killed -- they might be holding locks. They need to cooperate, so there needs to be a way for them to discover they should exit, and clean up.",
					"date": "2017-08-09",
					"id": "dlcwyye",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "unitedcreatures",
					"content": "Sure, new built-in returning a channel would be needed there.",
					"date": "2017-08-09",
					"id": "dld7cn5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "epiris",
					"content": "Any io.Reader for the most part that cancelation is possible already implements timeouts via SetDeadline. I think it would be real hard to make an intuitive generic cancelation builtin. How would you safely interrupt memory only io in busy loops like bytes.Buffer? Compiler would need intrinsics it could inject for signaling but how would you select a safe break point? Would need to be after a function call but that leads to all the infinite problems of stack unwinding, without the luxury of an explicit recovery point. You would basically need a function like recover that took some sort of arguments and crash that part of the program I think.",
					"date": "2017-08-07",
					"id": "dla8b71",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "kardianos",
					"content": "The key with goroutines is that their life cycle is cooperative. You don\u0027t want to just \"cancel\" a goroutine\" and context can control far more then just a goroutine.\n",
					"date": "2017-08-07",
					"id": "dlaomla",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-08-07",
					"id": "dlaxcax",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "kardianos",
					"content": "\u0026gt; Yes but how is this any different in a situation where two goroutines are cooperating and one abruptly terminates or panics?\n\nThe underlying context that spawned both go routines will be canceled (because `defer cancel()` ) and then the other goroutine will stop at a good point because it also uses ctx.\n\nYou don\u0027t just \"cancel\" a thread, green or full. Doing so makes it impossible (really hard) to reason about it.",
					"date": "2017-08-07",
					"id": "dlaz5s6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "skelterjohn",
					"content": "Cancelation is one nice thing you get with context, but another thing I use for it is logging.\n\nInside Google (so I can\u0027t show you, sorry) I created a package that lets me add keywords to the context so that when I log, those keywords are added to the message as a list. I find this feature extremely useful. I don\u0027t want to blow up this keyword list, so I only add a few things to it - specifically the entry point (such and such a request, or some background batch processor, etc) and IDs for resources being modified (all these log messages have to do with widget XYZ - so if there is a problem with XYZ I can easy filter logs to show only things relevant).",
					"date": "2017-08-07",
					"id": "dla6uco",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "binaryblade",
					"content": "that sounds like a role of the logger, not every function in the enire codebase",
					"date": "2017-08-07",
					"id": "dlabebk",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "skelterjohn",
					"content": "One can make an argument about what \"should\" be.\n\nIn the meantime, this feature is invaluable and has made effective logging really easy for me.",
					"date": "2017-08-08",
					"id": "dlbt7t6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "binaryblade",
					"content": "Well we are talking about Go 2 and thus what \"should\" be is essentially the entire discussion.",
					"date": "2017-08-08",
					"id": "dlc0x7g",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "skelterjohn",
					"content": "I think you\u0027re dismissing a very practical benefit for a principle that is not well-defined. I used scare quotes to indicate that you were being to abstract and were losing track (in my opinion only, to be clear) of real usage. I think go2 updates should be grounded in real usage.",
					"date": "2017-08-09",
					"id": "dldfrx6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "binaryblade",
					"content": "law demeter is a pretty well defined programming principle. you shouldn\u0027t be putting your logging variables anywhere near your task cancellation code. I get WHY you did it, having a random map of un-typed data being passed around was too tempting for you, and you lost all self-discipline. However, your use case, I think, exemplifies why context needs to go, because it\u0027s been transformed from a simple object that allows for thread cancellation in to this behemoth of an object which is now supposed to serve every purpose under the son. The fact that is was easier for you to just lump that logging data into context rather than write a contextual logger, is the very reason it needs to go.",
					"date": "2017-08-09",
					"id": "dldo6ny",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "skelterjohn",
					"content": "I encourage you to explore ways to disagree without being insulting. There is plenty to talk about, but the principles you refer to are not fundamental; saying I was too \"tempted\" and \"lost all self-discipline\" does nothing other than make me not want to engage further.",
					"date": "2017-08-09",
					"id": "dle15yi",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kardianos",
					"content": "You wouldn\u0027t want to parse each thing from HTTP requests each time, such as authorization. Authorization parsing and checking is almost always relatively expensive. I would suspect many types of values being put into the context, but Authorization is one that is great to have. There are others depending on the application that are useful, but expensive. This isn\u0027t just about an easy way to parse an ID from a URL query string. And some things (such as an HTTP body) can only be read once.",
					"date": "2017-08-07",
					"id": "dlaopk1",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; In such cases, it can be kept within the HTTP requests\n\nIt is. Via context.Context. And *any* such mechanism is functionally equivalent to context.Context, just that the latter provides a universal interface to it.\n\n\u0026gt; The reason why Context spreads to libraries outside HTTP requests themselves is cancelation.\n\nNot really. At Google, pretty much any IO requires context, because basically nothing happens without involving the network. It is very much intentional that context.Value exists.",
					"date": "2017-08-08",
					"id": "dlbingz",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "faiface",
					"content": "It is not kept within the HTTP requests themselves. It spreads to databases, and other libraries and some proposed to spread it into io.Reader/Writer, etc.\n\nAnd why is context present in `\"database/sql\"`? Values? No, cancelation. Why did people propose to include it in `io.Reader`? Values? No, calcelation.\n\nI\u0027m pretty convinced, that cancelation is the reason why context spreads. For values, context can be kept as a simple inferface with a single method: `Value`, which would work same as now. A context like this would not need to spread anywhere, it would probably not even need to be in the stdlib.",
					"date": "2017-08-08",
					"id": "dlbp97o",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; It spreads to databases, and other libraries and some proposed to spread it into io.Reader/Writer, etc.\n\nBecause it\u0027s needed there.\n\n\u0026gt; And why is context present in \"database/sql\"? Values? No, cancelation.\n\nAre you sure? Google Cloud SQL uses `database/sql`. I am not entirely familiar with the implementation, but at least if it uses a grpc API I would, a priori, assume that it might put some request-specific authentication info into the context (because, at least internally, it is possible to make requests on behalf of other users, so there is request-scoped auth).\n\nI would, at the very least, be very careful to rule out off the bat, that there is *any* sql driver that uses it for more or would be interested to use it for more.\n\n\u0026gt; Why did people propose to include it in io.Reader? Values? No, calcelation.\n\nThat might or might not be the reason to propose it, but what I *can* tell you, is that all Google-internal file-IO requires a context not primarily for cancellation but, again, authorization and more. Because approximately all files are accessed via the network and fine-grained auth is needed. This leads to very awkward code, because all the go stdlib IO doesn\u0027t use contexts, so weird workarounds are needed.\n\n\u0026gt; I\u0027m pretty convinced, that cancelation is the reason why context spreads.\n\nContext spreads, because it is important to have a unified way for cancellation *and* to pass data through unrelated APIs. It was never a coincidence, that both are in the same package.\n\nJust outright discarding this use case, just because *you are not using it* is unhelpful.\n\n\u0026gt;  For values, context can be kept as a simple inferface with a single method: Value, which would work same as now.\n\nHow would that help, at all? You would still need context in any single function, just like before. Just that now, you are removing the one use case that *is* implemented well by it and moving it instead into a language feature. Without any real benefit.\n\nIt makes more sense, to instead move the `Value` part of it into a language feature. With TLS/dynamic scoping, cancellation is trivially implemented. Whereas an efficient and type-safe version of `Value` is not possible without compiler and/or runtime support.",
					"date": "2017-08-08",
					"id": "dlbq0kk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "freesid",
					"content": "Cool. This is close to how I use context:\n\nIn my codebase, log package defines this:\n\n    type LogContext interface {\n      context.Context\n    \n      Infof(...)\n      Warningf(...)\n      Errorf(...)\n    }\n\n    func GetLogContext(ctx context.Context) LogContext {...}\n    func WithLogBackend(ctx context.Context, backend LogBackend) LogContext {...}\n    func WithLogPrefix(ctx context.Context, prefix string) LogContext {...}\n\nI have plans for other type of extensions to contexts, like:\n\n    type CommandContext interface {\n    }\n    type ProgramContext interface {\n    }\n    type RequestContext interface {\n    }\n    type TransactionContext interface {\n    }\n\netc. IMO just because a function takes context doesn\u0027t necessary mean it must handle Deadlines, Cancellations, etc.\n\n\n\n\n",
					"date": "2017-08-07",
					"id": "dlakd4m",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "chmikes",
					"content": "That is exactly one of the problem of Context. It transgress the [single responsibility principle](https://en.m.wikipedia.org/wiki/Single_responsibility_principle).",
					"date": "2017-08-08",
					"id": "dlbkya6",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "WikiTextBot",
					"content": "**Single responsibility principle**\n\nThe single responsibility principle is a computer programming principle that states that every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility.\n\n***\n\n^[ [^PM](https://www.reddit.com/message/compose?to\u003dkittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to\u003dWikiTextBot\u0026amp;message\u003dExcludeme\u0026amp;subject\u003dExcludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/golang/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot)   ^]\n^Downvote ^to ^remove ^| ^v0.24",
					"date": "2017-08-08",
					"id": "dlbkyeq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "chmikes",
					"content": "Another small problem of context is that it\u0027s values are like global variables. It\u0027s an open door to bad programming. I don\u0027t use context because I don\u0027t understand how it works and should be used. It\u0027s not trivial and not least surprize like all other Go features. I\u0027m writing a server with persistant connections a tree of goroutines. I can confirm that handling correct canceling and termination of these go routine in case of error makes the code unpleasantly complex. I fully agree with the OP that we need a solution and a better one than Context. But I have no idea how we could do it better. ",
					"date": "2017-08-08",
					"id": "dlbkar6",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "sh41",
					"content": "Well articulated points.",
					"date": "2017-08-07",
					"id": "dlaozwp",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "zemo",
					"content": "\u0026gt; If the Go language ever comes to the point where I’d have to write this  \n\u0026gt;    n, err :\u003d r.Read(context.TODO(), p)\n\u0026gt; put a bullet in my head, please.  \n\nthat seems ... strong.  \n\n\u0026gt; If you use ctx.Value in my (non-existent) company, you’re fired  \n\u0026gt; An obvious one, it’s not statically typed at all.  \n\nThis argument is _incredibly_ weak. If you want typesafe usage of `ctx.Value`, you can have it by writing accessor methods.  \n\n\u0026gt; It requires documenting which values (keys and their types) a certain function supports and uses. As we all know, documentation is mostly a code that never runs.  \n\nit really doesn\u0027t. Write a function that reads and writes what you need: the keys are an implementation detail, they don\u0027t _need_ to be a part of the API.  This is a solved problem.  \n\n`context` is warty. Its existence and its increased reach signals a legitimate design problem. I\u0027d agree that the suggestion that `io.Reader` should take a `context` is a canary, but the overall tone of this post strikes me as very accusatory, like \"context is bad and you are bad and you should feel bad\".",
					"date": "2017-08-07",
					"id": "dla6ttx",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "faiface",
					"content": "The tone is not meant seriously, it\u0027s mostly to keep the reader awake :).\n\nAnd ok, I agree with your counter-arguments, thanks for enlightening me, I\u0027m not a server person. But I still believe ctx.Value can be avoided.\n\nThe main problem with Context, as mentioned by the post, is not the values, but spreading. And the spreading occurs because of cancelation. So, if Go 2 solves cancelation and Context will remain only for values, it will no longer spread.",
					"date": "2017-08-07",
					"id": "dla7hw5",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "weberc2",
					"content": "\u0026gt; This argument is incredibly weak. If you want typesafe usage of ctx.Value, you can have it by writing accessor methods.\n\nIt\u0027s not weak at all; if you change the type on a context to give it those accessor methods, it\u0027s no longer a \"context\" as far as the type system is concerned, and you can\u0027t compile. If you meant \"create methods on some other thing that know how to take a context and return typed values\", that isn\u0027t type safe, as it doesn\u0027t give you any guarantees that the value your method expects is actually on the context. For example, if my middleware is Foo and it depends on middleware Bar being invoked before it, then all of the helper methods in the world won\u0027t prevent a runtime error if the caller fails to ensure that Bar is invoked before Foo. Static types exist for the very purpose of ensuring that these sorts of contracts aren\u0027t violated.\n",
					"date": "2017-08-07",
					"id": "dla8yqh",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "kid0m4n",
					"content": "I was taken aback by some of the points too. We use the value method quite effectively in our entire product... no engineers fired thus far. It is a hugely useful mechanism for achieving the ability to pass out of band data through the call stack without requiring that every method deal with it explicitly.\n\nAlso, while one might argue that this is because we dont have \"goroutine local storage\" I understand the pros/cons of not having GLS too... goroutines should not have identify. If they had, I would not be able to spin up goroutines as casually as I can do right now.\n\nSo, given the pros/cons of the overall situation, I am glad that context.Value exists.",
					"date": "2017-08-07",
					"id": "dlad8qj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "DenzelM",
					"content": "\u0026gt; It is a hugely useful mechanism for achieving the ability to pass out of band data through the call stack without requiring that every method deal with it explicitly.\n\nThis sounds a lot like what aspect-oriented programming is meant to solve.\n\nGah I dislike seeing context passed all through the call stack. It\u0027s an untyped grab bag with multiple responsibilities that makes code far more difficult to understand. I really dislike context.",
					"date": "2017-08-08",
					"id": "dlbndiw",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "kid0m4n",
					"content": "What are your thoughts on `err` checking then? Surely something try/catch is \"meant\" to solve?",
					"date": "2017-08-08",
					"id": "dlbo4zc",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "DenzelM",
					"content": "So, there are three important concepts here:\n\n1. Errors\n2. Exceptions\n3. Conditions (as seen in Lisp)\n\nBad programmers can abuse all three. And it seems one of the arguments against exceptions in Go thus far has been that bad programmers will abuse them. Fair enough, \"protecting\" the average programmer from their self is in Go\u0027s founding DNA. See [Go at Google: Language Design in the Service of Software Engineering](https://talks.golang.org/2012/splash.article).\n\n**Errors and Exceptions**\n\nExceptions have their place and they are extremely useful. They\u0027re simply misunderstood. Even Rob Pike misunderstands the purpose of exceptions, as written in [1]:\n\n\u0026gt; First, there is nothing truly exceptional about errors in computer programs. For instance, the inability to open a file is a common issue that does not deserve special linguistic constructs [...]\n\nThat\u0027s a half-truth... you see, the purpose of exceptions are to signal a breach of your **invariants**. They mean you\u0027ve entered an inconsistent state. So if a piece of code or structure or package *depends* on a specific file being present that it cannot possibly operate without, then for that file not to open is a violation of its *invariant*, thus it *should* throw an exception signaling as such.\n\nGood programmers understand how to design with invariants.\n\nIf a piece of code may need the network but it\u0027s not an invariant, then you report an error. If the network being reachable is an invariant, then you report an exception.\n\nInvariants are part of your software\u0027s design. Errors and exceptions both have their place.\n\n**Errors in Go**\n\nWhen you write code that uses errors for what should be exceptions, then you\u0027ll find yourself checking and forwarding... checking and forwarding... all the way up the call stack. And in an N deep call stack with say an average 3-way branching factor, then you\u0027re checking and forwarding 3*N times. It\u0027s just noise.\n\nPanic/recover is plain clunky (on purpose) compared to first-class support for exceptional error handling.\n\nIn fact, I\u0027d love to see an analysis on what percentage of the time Go programmers actually *work* with a returned error, i.e., use it to respond in some way vs. simply printing/logging and forwarding. I\u0027d bet forwarding accounts for a large percentage of all Go error handling code.\n\nError checking adds a lot of noise most of the time and Rob admits as much:\n\n\u0026gt; Although in contrast Go makes it more verbose to check errors, the explicit design keeps the flow of control straightforward\n\nHowever, I can\u0027t agree with the assertion that error checking forces programmers to think about and deal with errors anymore than exceptions do.\n\n\u0026gt; Explicit error checking forces the programmer to think about errors—and deal with them—when they arise. Exceptions make it too easy to ignore them rather than handle them, passing the buck up the call stack until it is too late to fix the problem or diagnose it well.\n\nIt\u0027s all too easy to forward errors up the call stack.\n\nNot to mention, Go has plenty of warts around errors that make working with third-party code a pain sometimes, when the code doesn\u0027t follow good practice. See my [previous comments](https://www.reddit.com/r/golang/comments/649o0c/syncx_go_library_that_extends_standard_sync/dg0neoo/?st\u003dj63k65xr\u0026amp;sh\u003d4d6b26f2) on that matter.\n\n**Bonus: Conditions**\n\nNow, I absolutely don\u0027t expect Go to ever support this and that\u0027s fine, but conditions are cool! The idea is that the *site* that throws the exception has the best context available on how to return to a consistent state. Thus along with an exception, it throws a list of available options for the exception handler to choose from.\n\nThe exception handler will choose which option to respond with, and then the *site* of the thrown exception will restart and proceed forward -- using that option -- to return to a consistent state.\n\n[Beyond Exception Handling: Conditions and Restarts](http://www.gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html) is a great article on the concept.",
					"date": "2017-08-08",
					"id": "dlbrv8w",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; If they had, I would not be able to spin up goroutines as casually as I can do right now.\n\nWhy not? You are already creating several K of a new stack and copying over a bunch of state; adding a pointer or something to that wouldn\u0027t hurt…\n\nHonestly, to me, the existence of context.Value conclusively proofs, that we really want some variant of GLS…",
					"date": "2017-08-08",
					"id": "dlbj8ma",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "taylorchu",
					"content": "Context also causes library fragmentation; there are some packages that support context and those that don\u0027t. Since context is promoted to the stdlib, some packages that only need \"cancel\" try to add context everywhere. ",
					"date": "2017-08-07",
					"id": "dlapbt8",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "rr1pp3rr",
					"content": "I would have assumed this article was written by someone who didn\u0027t write server code, even if he hadn\u0027t mentioned it.  The fact that he thinks `.Values` is useless is ridiculous.\n\nHowever, I do agree with his points about passing around a context in general.  A much more elegant solution is to have goroutine-local data.\n\nLets just start having the `go` keyword return a context-like object that will optionally block when we check it.  That would be much simpler/cleaner.",
					"date": "2017-08-07",
					"id": "dladjah",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "faiface",
					"content": "The fact that it\u0027s useful doesn\u0027t mean it has no downsides. Many useful features have been left out of the Go language because of their downsides.\n\nRegarding goroutine-local storage... I don\u0027t think that\u0027s a good idea. I think the right solution would be a language provided cancelation mechanism (probably non-preemptive).",
					"date": "2017-08-07",
					"id": "dlarlr2",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; The fact that it\u0027s useful doesn\u0027t mean it has no downsides.\n\nAnd I\u0027d argue that the fact that `context.Context` was written, published *and* put into the stdlib, means that it has been widely accepted that the benefits outweigh the downsides. Now, IMO, instead of arguing to drop `context.Context`, we should talk about how to eliminate the downsides. And TLS is the answer to that.\n\n\u0026gt; Regarding goroutine-local storage... I don\u0027t think that\u0027s a good idea.\n\nWhy? You are making this broad assertion in your post, but seems pretty unfounded to me. What are the specific arguments here?\n\n\u0026gt; I think the right solution would be a language provided cancelation mechanism (probably non-preemptive).\n\nYou are outright disregarding the importance of `context.Value`.",
					"date": "2017-08-08",
					"id": "dlbiwmo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "I am open to accepting that ctx.Value is useful, but there are downsides. The main one is composability. When functions depend on an implicit context, such as global variables, their thread ID, or context.Context, it makes it harder to arbitrarily compose them together. Composition is one of the main ways of achieving flexible APIs. But perhaps this does not apply to ctx.Value, but I\u0027m not convinced yet.",
					"date": "2017-08-08",
					"id": "dlbp693",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; The main one is composability. When functions depend on an implicit context, such as global variables, their thread ID, or context.Context, it makes it harder to arbitrarily compose them together. \n\nThis seem completely counter intuitive to me; the exact *opposite* seems to be the case. HTTP middleware that uses `func(http.Handler) http.Handler` is infinitely composeable, exactly *because* it can use the request-context to pass data down the stack implicitly. A middleware I write does not need to know or care about data your middleware injects into the context, because it will just transparently pass it on.\n\nEven `http.Handler` itself is a perfect example of that; the `ResponseWriter` contains additional, optional behavior not expressed in types. If we would have instead different types for each class of `ResponseWriter`, you couldn\u0027t use a `http2.ResponseWriter` with a `http.Handler` and vice-versa.\n\nPutting non-essential information *outside* of strict type information is what *enhances* composability.\n\nAnd if the data/behavior is *not* optional, but indeed required further up the stack, you already have the restriction of needing the provider and consumer of the data together. So a lack of composability is problem-inherent in that case (but it\u0027s also not what context.Value is meant for). (Ab-)using `context.Value` in that case is the only thing that makes such a case even *possible* in the first place.",
					"date": "2017-08-08",
					"id": "dlbqas6",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "andradei",
					"content": "That sounds like a pretty good idea. I hope its followed up by a proposal.",
					"date": "2017-08-07",
					"id": "dlampjh",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rr1pp3rr",
					"content": "I wish I had the time to contribute more.  I\u0027ve never written a proposal, but I had thought about it on several occasions.  Frankly, Go is such an elegantly simple language created by people much more capable than me, I worry that I\u0027d just be proposing cruft.\n\nBut, for your edification, an example of what I think it should look like:\n    \n    type MyGoContext struct {\n       a string\n       b int\n    }\n    \n    c :\u003d go (MyGoContext{a: \"1\", b: 2}) func() {\n        fmt.Printf(\"%s: %d\", gocontext.(MyGoContext).a, gocontext.(MyGoContext).b)\n    }()\n\n    \u0026lt;-c.Done()\n\nChanges to the context do not propagate to other goroutines.\n\n^ This goes one step further and replaces `context.Values` with a strongly typed struct.  \n\n",
					"date": "2017-08-07",
					"id": "dlaurrg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Emacs24",
					"content": "I rarely write servers and network interfaction. My mostly used io.Readers and io.Writers are os.File and heavy processing of input/output data. File IO is blocking in Linux, heavy processing is blocking as well, thus any ctx is totally out of place at least for these.\n\nLet these people use their own context.Reader and context.Writer and don\u0027t touch sane io primitives.\n\nThe issue itself is just a consequence of poor match between synchronous semantic of Go and asynchronous events it processes. The best place to resolve these is runtime itself. Mindless API complication which will reflect into performance drop (you will need to start an OS thread per file read/write) is just a poor choice of entry point. They better add optional parameters for goroutines (timeout + timeout handler, for instance).",
					"date": "2017-08-07",
					"id": "dlah7g4",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsspy",
					"content": "I think context is super awesome and has greatly simplified much software I interact with and also made it more reliable.  I agree it does too many things (holding a value is questionable, but beneficial for some of its important use cases), but the thing I find it primarily most useful in is something the author seems to think is secondary -- deadlines.\n\nSetting a deadline on a set of work is not just a thing for servers, it\u0027s generally useful and critical to writing reliable software of all kinds.  While you could implement some types of deadlines with cancellation, propagating deadlines via cancellation is woefully insufficient.\n\nDeadlines are very useful for clients and anything using `os.exec`.  Before deadlines, I\u0027d end up with a bad connection hung for a while, or a subprocess failing to terminate properly, or other such things that were increasingly difficult to make reliable.  Now, I just set a 30s deadline for something I expect to take 10s, and it finishes or errors.  That deadline propagates properly downstream to things that may be making connections, running programs, etc...  In distributed systems, that deadline propagates across system boarders as well so my program (a client) communicates to another server and sends its deadline.  That other system can simply refuse to do any work whatsoever if the deadline is unreasonable, and it can do this before it starts.  If some bit in the middle doesn\u0027t handle a cancellation properly, this means all the client requests it attempts to send can just fail fast.\n\nIf you rely on some kind of local timer to call all of your cancel functions, are you also relying on that cancellation to send a request to any systems you\u0027re talking to to tell them to stop working?  This gets complicated fast.\n\nIn practice, context has made it really clear how timeouts are propagating and simplified my work.  I do wish more things supported them.",
					"date": "2017-08-07",
					"id": "dlajouq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "faiface",
					"content": "IIUC, deadlines can be easily implemented on top of cancelations. Here\u0027s how:\n\n    ctx, cancel :\u003d context.WithCancel(ctx)\n    go func() {\n        time.Sleep(timeout) // timeout can be easily calculated from deadline\n        cancel()\n    }()\n\nIf I\u0027m wrong, correct me please. Btw, cancelation is the one thing I find very useful about context, although, not done right.",
					"date": "2017-08-07",
					"id": "dlakj35",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsspy",
					"content": "Well, time.AfterFunc would be way cheaper, but you\u0027re still missing a lot of information.  The remaining code doesn\u0027t know how long it has.  It\u0027s going to waste a lot of work and have more edge cases that behave poorly.\n\nI put timeouts on everything I can.  Scheduling tons of async cancellations to tell remote systems, or processes, or even simple compute functions will be expensive.  Right now, we use deadlines to prevent work.  How much time you have to complete a task is known a priori and if you know with sufficient certainty that you can\u0027t do what\u0027s requested in that time, you just error.  Remote systems do the same with what\u0027s left.\n\nAttempting to express a cancellation longer than the current timeout is a noop.  Your strategy doesn\u0027t allow this.  Every attempt to add a deadline creates an additional call to cancel.  There will always be at least two, and user retested cancellation becomes indistinguishable from timeouts.\n\nThis model leads to lots of information loss, additional work, and lower reliability.",
					"date": "2017-08-07",
					"id": "dlaoeo2",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "faiface",
					"content": "Known deadlines can be passed through arguments or through context values (context for values can possibly be kept). Cancelation itself is the reason why context spreads like a virus, so if cancelation is solved by the language, context for values wouldn\u0027t need to spread beyond requests. Such context with values could carry deadline informations too.",
					"date": "2017-08-07",
					"id": "dlaouot",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsspy",
					"content": "I rarely care about cancellation, but I want contexts everywhere specifically for deadlines.  It is for this that I wish the virus to spread further.\n\nPassing a deadline as an additional argument is confusing and inconsistent.  The context provides a) a simple way to express the deadline (if any), b) an easy way to tell if the deadline has passed, c) an easy way to wait for the deadline, d) a consistent way to pass the deadline down to other methods, e) APIs for passing that deadline to remote systems (e.g. RPC calls).\n\nI do understand that cancellation and deadlines (and values) are distinct roles of cancellation.  Right now, they\u0027ve only helped me improve code, and reliability of systems using them.  If I could see a clearer view of what cancellation looked like in this implicit-propagating model, I might change my mind.  As it is, the explicit propagation of contexts makes things very clear.\n\ne.g., when I see a bit of code that spawns some goroutines in an errgroup that has a cancellation function, I know what is canceled and when.  What does this code look like in a situation where cancellation is propagated implicitly?\n\n    ctx, cancel :\u003d context.WithTimeout(time.Minute)\n    defer cancel()\n    \n    g, gctx :\u003d errgroup.WithContext(ctx)\n    \n    for x :\u003d range makeWork(gctx) {\n        x :\u003d x\n        g.Go(doStuffWith(gctx, x))\n    }\n    \n    err :\u003d g.Wait()\n\nThis is really straightforward as the context exists *before* the workers start, there can be an arbitrary number of workers, and the cancellation of that context from the errgroup cancels both the work producer and the workers, so of which may not have even been *scheduled* yet, so you don\u0027t necessarily have their cancellation function to call.  Also, many of them have finished, so calling their cancellation function is unnecessary overhead.  Both current progress *and* production cease the first time worker fails.  Everything stops in one minute.\n\nIt\u0027s super obvious to me what\u0027s happening and what the cost is.  How does this code work with implicit cancellation that\u0027s handled by a calling implicit cancellations + timeouts?",
					"date": "2017-08-07",
					"id": "dlarsla",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "I\u0027ll come with a concrete post or a proposal later and I\u0027ll definitely address what you\u0027re asking in this message. Stay tuned!",
					"date": "2017-08-07",
					"id": "dlarz3r",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kd7nyq",
					"content": "I very much agree with this article. The reason I fell in love with Go is because of its simplicity. This kind of BS makes me think that the Go team is giving into community pressure instead of holding their ground. I have begun fearing that I\u0027ll be in the radical minority that refuses to work with Go2.",
					"date": "2017-08-07",
					"id": "dla8o13",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "epiris",
					"content": "Context as a context is fine I think, but like I\u0027ve said here in the past the package could have had more thought out in the design and implementation. The biggest thing is Value should NOT exist in context.Context interface. Instead context.Value should have been replaced with Parent. Making a cleaner interface like:\n\n    Deadline() (time.Time, bool)\n    Done() \u0026lt;-chan struct{}\n    Err() error\n    Parent() context.Context // don\u0027t think ok bool is needed\n\nNow you have opened up a opportunity for user space implementations of not just Context values, but actual context. Part of the reason no better context library has emerged (trust me it could be implemented much better, without 3-7 allocs depending on the method, that number could be 1 to zero for just cancelations) is due to the fact the context package is tightly coupled to itself to find parent context. It even has cancel as a internal implementation only, using the Typed CancelFunc in place of an interface such as:\n\n    type Canceler interface { Cancel() }\n\nSo one can not implement a user context from top down that plays well at all with the std lib or optimizes away any inefficiencies. You can\u0027t make a map to use for context.Value for example to store just your app state to prevent the 6-8 allocs that come with stdlib. \n\nWith a Parent method you could, and all existing instances of (context.Context).Value(...) simply get changed to context.Value(...) a top level function call implemented using context.Parent() to walk up the tree until it asserts it\u0027s own private valuecontext type. Tooling could do this task very easily.. and then we can finally implement our own context and perhaps a set of context packages outside of std library can emerge for special purpose cases.\n\nJust my opinion, context is great and shouldn\u0027t Go anywhere. It just needs the design adjusted to be friendlier to integrate and specialize.",
					"date": "2017-08-07",
					"id": "dlaafmw",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "unitedcreatures",
					"content": "I believe that linked list was chosen instead of a map so that child context won\u0027t be able to mutate its parent\u0027s state.",
					"date": "2017-08-07",
					"id": "dlahv3b",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "epiris",
					"content": "The standard lib could still enforce that easily using a map with composite keys- or they simply keep the implementation they have today. My point isn\u0027t to change the stdlib value implementation but free users from being confined to it. Then more specialized context packages can be used with better cooperation in std lib. ",
					"date": "2017-08-07",
					"id": "dlakngx",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "unitedcreatures",
					"content": "The whole interface would be leaky then though. If you alone want to get rid of immutability then every programmer anywhere will need to think which implementation is plugged in right now in the current service. ",
					"date": "2017-08-07",
					"id": "dlaq1g8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "epiris",
					"content": "Can you provide a example? I\u0027m having trouble filling in the blanks for either of your statements. What does leaky mean and how does it get rid of immutability? The interface today is more mutable, it\u0027s tail recursion through parent ascension via interface method that ANY implementation between your context containing the value and your call site could intercept. \n\nBy forcing Parent() to be called the withvalue implementation would need to assert on the parent to check for its concrete unexported type, meaning storing a value with context.Value forces immutability by design rather than relying on convention and cooperation across interface implementations like we have today.",
					"date": "2017-08-07",
					"id": "dlaqwtz",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "unitedcreatures",
					"content": "Oh sorry, I\u0027ve misunderstood you - had to reread the root post. Yeah, forcing Parent()+iterator at the pkg level would be better and cleaner solution. :)\n\nI was speaking of http://wiki.c2.com/?LeakyAbstraction",
					"date": "2017-08-07",
					"id": "dlasl9z",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "freesid",
					"content": "I agree that context implementation must\u0027ve been better, but I beg to differ on Parent. IMO users should not be aware of existence of a parent context.\n\nPerhaps, making context a language level construct (like string or make) may enable better implementations in the background.",
					"date": "2017-08-07",
					"id": "dlakrsp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "epiris",
					"content": "But Value is exactly that- coupling a child context to its parent. WithValue simply stores Parent ctx for child to call if it doesn\u0027t have its value, it forces a inflexible tail recursion pattern AND forces children to be aware of their parents. Changing Value to Parent() allows you to implement more efficient value fetching. I wouldn\u0027t really care how it\u0027s done though and would be fine without a parent method as long as it was more flexible.",
					"date": "2017-08-07",
					"id": "dlallnd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ds101",
					"content": "How about making context an implicit first parameter to every function, essentially as a dynamic-scoped global variable. \n\nOr just add dynamically scoped globals and let people do what they want with them?  That gets you something like Value, but with types and packages in the names.\n\ni.e. you declare\n\n     package foo\n     dynamic Bar string\n\nand then you can do:\n\n     foo.Bar \u003d \"blah\"\n\nbut only functions you call (and the rest of the current scope) will see that value.\n",
					"date": "2017-08-07",
					"id": "dlahmmf",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "freesid",
					"content": "IMO context is essentially an alternative to dynamic-scoping implemented on top of lexical-scoping because language doesn\u0027t support it. This context type is really unnecessary if Emacs like dynamic-scoping is supported by the language.\n\nThat said, I also see that Go routines make it very difficult to get them right at language level. For example, if request processing creates a new goroutine, users may expect the goroutine to inherit caller goroutine\u0027s dynamic-scope values as they are at the point of invocation -- which can make goroutines expensive.\n\n",
					"date": "2017-08-07",
					"id": "dlajwtj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ds101",
					"content": "If the dynamic scopes are immutable (like context), then you\u0027re just copying a pointer to the current dynamic scope.  Is an extra pointer copy too expensive for goroutine spawning?  (I don\u0027t know how heavy they are.) Or am I missing something? \n\nThis would make assignment to dynamic variables a little more expensive. It could be done as a linked list of scopes, like context (and I presume emacs) or a hash trie / functional RB-tree, like clojure uses for its immutable maps (for O(log N) lookup).\n\nIf the cost could be made negligible (especially for those who don\u0027t use it), I think I\u0027d prefer this to having to pass around context everywhere. And it may be generally useful. \n",
					"date": "2017-08-09",
					"id": "dlehsdr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "leavecontextalone",
					"content": "I agree that we should see if it\u0027s possible to improve the design of `Context` in Go 2. But I disagree with almost everything else you wrote!\n\n# On the intro...\n\nWhile I agree that adding `Context` to the `Reader.Read` function would make it less composable and generally more annoying to use, the proposal isn\u0027t entirely without merit. It\u0027s definitely useful to be able to cancel some IO operation if it takes longer than expected! It is pretty easy to just launch your own goroutine to handle this case, though, so I agree that it doesn\u0027t absolutely _need_ to be focused on right now.\n\n# On \"Go is a general purpose language\"\n\nI think maybe you haven\u0027t thought about some of the other non-server situations in which a `Context` object is useful. There are many! This is probably a failing of the documentation that people aren\u0027t thinking about other places where `Context` can be used.\n\nIn general, whenever you have some sort of an independent \"transaction\" (though that\u0027s not even the best word because it\u0027s overloaded by databases) then a `Context` object might be a good idea.\n\nLet\u0027s say you\u0027re writing a GUI app, for example. Generally, a modern GUI app will use events to deal with things like button presses and mouse clicks. When an event occurs, one might launch a new goroutine, who\u0027s job is to handle the event. You probably don\u0027t want to let your event handler run forever, right? Here\u0027s a simple solution: use a `Context` object with a deadline, so goroutines know to automatically exit after some amount of time has passed.\n\nAnother example: maybe you\u0027re writing some background process that watches for new files in a directory, and then uploads those files to some server (like Dropbox). You probably want to make sure each file upload completes within a certain amount of time - that way, you don\u0027t have to babysit the process and manually restart it if it gets stuck on something. Again, you can use a `Context` object with a deadline to help coordinate.\n\nSo you see that `context.Context` is actually really useful even outside of servers! But is it really a virus?\n\nWell, maybe. But only because the ability to cancel a blocking call is pretty essential. The fact is, if you write a library that makes blocking API calls and doesn\u0027t provide some means of cancellation, then your library is much less useful than it could be. So yeah, I probably won\u0027t use it in a server, because it isn\u0027t safe. But I also probably won\u0027t use it in any other program either, unless absolutely necessary. If your call takes too long and you don\u0027t provide some means of cancellation, then I probably have to just restart the whole process, potentially losing a large amount of work and wasting a great deal of energy!\n\nIn most other languages, people have recognized the danger that blocking calls pose, so many functions provide their own unique interface for cancellation and timeouts, which makes them harder to use. I think `Context` is a great way to provide a standardized solution for that problem.\n\n# On \"If you use ctx.Value in my (non-existent) company, you’re fired\"\n\nSo I agree that, at first, this seems pretty messy. In practice, though, I find it greatly increases the composability of my code by making it easy to setup middleware.\n\nLet\u0027s go back to the GUI example. Maybe you\u0027re using some third party GUI framework that handles launching event handling goroutines for you, and every event handler you have also requires access to your SQLite database. Instead of repeating the transaction setup code in every handler, wouldn\u0027t it be nice if you could add some middleware that adds the transaction to a `Context`? Well, if you\u0027re passing `Context` around everywhere, now it\u0027s easy!\n\nTo refute some of your specific points:\n\n1. I agree, it\u0027s unfortunate that it isn\u0027t statically typed. At the same time though, if you don\u0027t know what type you\u0027re inserting into the `Context`, then you might have bigger problems!\n2. I agree that the documentation bit is annoying. On the bright side though, if someone misunderstands the documentation, it will be obvious, because the key they\u0027re looking for won\u0027t be present, or the value being set will be of the wrong type.\n3. It\u0027s really not like thread-local storage at all? In fact, the whole point is it\u0027s easy to share the data in a `Context` object across multiple threads. I guess I don\u0027t really understand your point here.\n4. Name collisions won\u0027t happen if you use a custom type, as specified in the documentation. Even if one were to happen, you\u0027ll probably get a panic when you try casting the value to the wrong type.\n5. Again, I don\u0027t really know how to refute this...\n\n# On \"Context is mostly an inefficient linked list\"\n\nWell, I mean sure, it\u0027s basically a linked list, but... who cares? If the major performance problem in your program is it takes too long to retrieve a value from `Context`, then your program is probably ridiculously fast already, and maybe you should start looking into assembly.\n\nOkay, that response was a little frivolous. But seriously, this won\u0027t be noticeable for almost everyone.\n\n# On \"What does the \u0027context\u0027 package actually solve?\"\n\nIt seems like we\u0027ve solved cancellation already with `Context` (or if you don\u0027t want to use `Context`, then \"done\" channels)? I\u0027m not sure why you\u0027re posing it as some major unsolved problem we are still struggling with. I suppose you might struggle with it if you refuse to use `Context` and also refuse to use channels, but then isn\u0027t that your choice?\n\nOther imperative programming languages don\u0027t have any alternative solutions. Ultimately, the only ways to provide cancellation are a) force everyone to write code as if it may die at any time, so that you might kill their thread at any time or b) have the ability to nicely ask some code to exit, and establish some standards around that idea. a) is really hard to get right and significantly decreases programmer productivity; b) is flexible and makes for a more extensible, approachable, and productive language.\n\nNowadays, since `Context` has emerged as a standard, the whole issue of people not accepting cancelation channels has largely gone away. While it\u0027s always going to be possible that a thread is doing some work which absolutely can\u0027t be interrupted, this problem comes from the OS APIs, which traditionally are always blocking. So it isn\u0027t really something we can fix in Go, even in Go 2.\n\nOn the \"tree of goroutines\" issue, I\u0027m not sure what other solution you have in mind? If you think about it logically, you\u0027re always going to need another variable in order to communicate the idea that some separate tree of goroutines/threads should terminate ASAP. Context lets you do this using the \"WithCancel\" functionality, but even if you choose to avoid `Context` and channels altogether, you\u0027re still going to need some sort of variable to store this information. So I really don\u0027t see how this can be improved.",
					"date": "2017-08-07",
					"id": "dlaq047",
					"isArchived": true,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "faiface",
					"content": "First of all, thanks for a really involved response, I appreciate!\n\nRegarding usability of Context outside servers, I agree, I even wrote about it in the article:\n\n\u0026gt; Now, I’m not trying to say that context is only useful for server people. But mostly, it is.\n\n\u0026gt; Solving it is usually necessary anytime a decent usage of goroutines is involved.\n\nOther thing, I\u0027m not sure if this wasn\u0027t clear from the article, but yes, Context does solve the cancelation problem.\n\n\u0026gt; Despite all of the bad things described above, the \"context\" package is genuinely useful, because it solves one thing that is kinda hard to do in Go: cancelation.\n\nI just don\u0027t like it for all the reasons mentioned in the article.\n\nYour points are generally right, but none of them really goes against my main argument, which is that Context is a virus that spreads into libraries where people mostly don\u0027t need it.\n\nAs I proposed in the article, the cancelation problem should be solved by the language instead of Context. Language can provide a much cleaner and non-infectious (rather healing) solution, which cannot be provided by something like Context.\n\nPS: your fonts are really big.",
					"date": "2017-08-07",
					"id": "dlaqxa8",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "lwcd",
					"content": "I saw an interesting comment on one of the issues tracking this:\n\nhttps://github.com/golang/go/issues/20282#issuecomment-320842211",
					"date": "2017-08-08",
					"id": "dlbin95",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tv64738",
					"content": "            Read(ctx context.Context, p []byte) (n int, err error)\n\nSort of unrelated to the main article, but a trick that apparently came from Google, and that seems to still not be widely known, is this:\n\n    func (*m MyFileLikeThing) IO(ctx context.Context) IO\n\n    type IO struct { ... }\n    func (i IO) Read(p []byte) (n int, err error) { ... }\n\nEssentially, currying the context, getting back to `io.Reader` etc APIs.\n\n(Feel free to name the `IO` type something else.)",
					"date": "2017-08-09",
					"id": "dlcu58m",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mcandre",
					"content": "Do IO readers not have a method to check whether the stream has closed? Seems like an oversight.",
					"date": "2017-08-07",
					"id": "dlak48f",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "dlsspy",
					"content": "When you try to read a closed stream, you get an error.",
					"date": "2017-08-07",
					"id": "dlatb7z",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "chmikes",
					"content": "Context.Context is not idiomatic because of the stutter.",
					"date": "2017-08-08",
					"id": "dlbku2h",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				}
			]
		},
		{
			"author": "faiface",
			"date": "2017-04-25",
			"id": "67gpm5",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Pixel: a new 2D game library in Go just released!",
			"comments": [
				{
					"author": "Wontorres",
					"content": "As someone who is new to Go, and has a background mostly in game programming, this is quite cool! Will look into it later.",
					"date": "2017-04-26",
					"id": "dgr5l98",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "andradei",
					"content": "Nice. You and the [Engo](https://github.com/EngoEngine/engo) guys should get together and share ideas.",
					"date": "2017-04-25",
					"id": "dgqms32",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "tylermumford",
					"content": "I\u0027m not much of a fan of game development, but this looks super nice. The only problem is that now I have to find an excuse to use it. ;)",
					"date": "2017-04-25",
					"id": "dgqkcls",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "faiface",
					"content": "Thanks! Some reasons that are totally not to be ashamed of are just having fun, experimenting, visualizing, or just exploring new areas of programming ;)",
					"date": "2017-04-25",
					"id": "dgqkmhp",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "mwholt",
					"content": "I is impressed. Much documentation. Very demo. Wow.",
					"date": "2017-04-25",
					"id": "dgqfsph",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "Chillance",
					"content": "This is cool. I currently use https://github.com/gen2brain/raylib-go/ but this is more \"pure Go\". So, if this had those features there, such as a \"camera\", that would be sweet!",
					"date": "2017-04-25",
					"id": "dgqzsai",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "faiface",
					"content": "Pixel doesn\u0027t directly have a \"camera\", but has a more powerful concept: Matrix. I highly recommend you read a tutorial on that (there\u0027s a link to it in the README), which explains how to implement a camera with like 2 lines of code in Pixel. It\u0027s really easy. Also, such a camera can be zoomed, rotated, whatever.",
					"date": "2017-04-25",
					"id": "dgqzyky",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Chillance",
					"content": "Hey,\n\nSorry, edited the response, but yes, if this expands further, I don\u0027t see why I wouldn\u0027t use this instead. I hope it does. Such as that \"camera\" I was talking about. Please take look at the API it has.",
					"date": "2017-04-25",
					"id": "dgr07dh",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "I also edited my response, take a look ;)",
					"date": "2017-04-25",
					"id": "dgr0bp9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Chillance",
					"content": "Do you expect to be active with this library? I don\u0027t want to invest time using this instead, and see this just become a ghost.",
					"date": "2017-04-25",
					"id": "dgr0e4o",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "Yes, very much so. I started this library because I wanted to develop game in Go, but none of the existing libraries felt good enough. I don\u0027t see giving up on game development any time soon, so yes, definitely.\n\nIf you have any suggestions on improving the library, let me know, either here, or gitter, or issues. But camera is easy in Pixel, trust me ;)",
					"date": "2017-04-25",
					"id": "dgr0kbb",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Chillance",
					"content": "Funny enough, I started doing a game using the same gopher animation series image you use in one of your examples. But now, it seems to me that I should move over to using your library instead. As I really, really, prefer as much as possible to be in Go.\nMaybe this can help you to add more useful stuff: http://www.raylib.com/cheatsheet/cheatsheet.html ?",
					"date": "2017-04-25",
					"id": "dgr0tlp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "From the cheatsheet, Pixel is missing text drawing (mentioned in readme, will be added soon), audio (mentioned, will be), 3D (won\u0027t be, likely), other than that, everything else is supported. Not a 1 to 1 correspondence though, Pixel is different, but better I think, and more powerful.",
					"date": "2017-04-25",
					"id": "dgr118k",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Chillance",
					"content": "Well done on the wiki info too!\n\nEdit: Well, look at that. Found some camera info in the wiki: https://github.com/faiface/pixel/wiki/Pressing-keys-and-clicking-mouse :)",
					"date": "2017-04-25",
					"id": "dgr0y0f",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Chillance",
					"content": "How about \"Curved Lines\" support? :)\n\nhttps://github.com/raysan5/raylib/issues/244",
					"date": "2017-04-25",
					"id": "dgr1jc7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "Oh, that\u0027s on the roadmap too, it just missed this release ;) IMDraw is going to get bezier curves. It already can do ellipse arcs.",
					"date": "2017-04-25",
					"id": "dgr1l8p",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Chillance",
					"content": "You certainly seem to be very quick with this, and I love it. You really seem to know what you are doing.\n\nAnd how about a physics engine? I suppose I could just use any of these:\nhttps://github.com/vova616/chipmunk/\nhttps://github.com/neguse/go-box2d-lite/\n",
					"date": "2017-04-25",
					"id": "dgr1wz6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "faiface",
					"content": "So far, you probably gotta stick with those in Go. I might write a physics engine someday, but not very soon. However, if you only need a simple rectangular physics with no rotation, that\u0027s easy to do without a physics engine.",
					"date": "2017-04-25",
					"id": "dgr22a3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "chewxy",
					"content": "Had a look at your matrix implementation. Am I right in thinking it\u0027s a 2D variant of a quaternion?",
					"date": "2017-04-26",
					"id": "dgrpq0f",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "Not really. Quaternions only do rotations. Matrix does rotations, movement, scaling and all combined. Matrices are also used in 3D graphics. Search wikipedia for more studying.",
					"date": "2017-04-26",
					"id": "dgrqw4i",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "absdevops",
					"content": "Heya, tried a couple of the examples, couldn\u0027t get them to work - upon executing go run main.go or go build and using the binary I get something like this with nothing appearing:\n\n```\nKilled: 9\nSaving session...\n...copying shared history...\n...saving history...truncating history files...\n...completed.\n```\n\nRunning on mac",
					"date": "2017-04-26",
					"id": "dgrnait",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "faiface",
					"content": "Have you installed the libraries listed in the \"requirements\" section? (xcode something for mac)\n\nAlso, the program certainly crashed with an error message (panic). It\u0027d be very helpful if you posted it here.",
					"date": "2017-04-26",
					"id": "dgrncgj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "absdevops",
					"content": "Currently all I get is \"signal: killed\" after a go run command - I have the latest version of xcode-select installed",
					"date": "2017-04-26",
					"id": "dgrx9nu",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "csos95",
					"content": "https://github.com/faiface/pixel/issues/7  \nIt looks like it\u0027s an issue with go 1.8 when using Xcode 8.3.  \nTry updating to go 1.8.1 and see if that fixes it.",
					"date": "2017-04-26",
					"id": "dgsfsfj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "csos95",
					"content": "I am also having this problem.  \nI have the latest xcode and command line tools installed, but when I run it in Gogland I get:  \n`Process finished with exit code 137 (interrupted by signal 9: SIGKILL)`  \nThere\u0027s no other output.  \n\nEdit:\nUsing go 1.8 on macOS 10.12.3 with version 8.3.2 of Xcode and commandline tools.  \nHere\u0027s the output from Gogland if I run it in debug mode https://pastebin.com/XzFSpRKr",
					"date": "2017-04-26",
					"id": "dgs4yi8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "Ok, this seems like a problem. Could you please submit an issue with all the description of the error?",
					"date": "2017-04-26",
					"id": "dgs9fxx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "csos95",
					"content": "done: https://github.com/faiface/pixel/issues/7\n\nEdit:  \nIt looks like it\u0027s an issue with go 1.8 when using Xcode 3.2.  \nUpdating to go 1.8.1 seems to fix it.  \nI recommend adding a comment in the requirements section mentioning that 1.8.1 is needed on macOS if using the latest Xcode.",
					"date": "2017-04-26",
					"id": "dgsezn3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "In case you didn\u0027t notice, the problem seemed to be with macOS+Go1.8+xcode. Upgrading to Go 1.8.1 fixed the issue. I added a note to README (https://github.com/faiface/pixel#requirements).",
					"date": "2017-04-26",
					"id": "dgsm531",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "absdevops",
					"content": "Yup just got it working! Big thanks, was excited to try out the platformer lol",
					"date": "2017-04-26",
					"id": "dgsno7u",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "BtnMasher",
					"content": "Very awesome! I hope you put it to use in my [Game Jam](https://itch.io/jam/gopher-jam) :3\n\nI think I remember you commenting about that library in my reddit post about it. I hope my starting a Golang-oriented Game Jam was inspiration for you to continue work on it again. That would be exactly the reason in why I started it, to try and inspire some Game Development with Go, and get some nice tools out of it in the process!\n\nI hope I see a submission from you!",
					"date": "2017-04-26",
					"id": "dgroqur",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "faiface",
					"content": "Thanks alot!\n\nTBH, the game jam wasn\u0027t the inspiration to continue my work, I was working on it and would release it anyway. The game jam just came out of the blue at the right moment, and it\u0027s really great that you made that happen.\n\nYou definitely see a submission from me ;)",
					"date": "2017-04-26",
					"id": "dgrovgu",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "redditbanditking",
					"content": "Not too bad. Good that there\u0027s some traction to do game development in Go. Hardly a \"game library\" yet, so far it\u0027s still just graphics library.  But keep it up.",
					"date": "2017-04-26",
					"id": "dgs8duh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "j7b",
					"content": "I like it a lot. I\u0027ve been playing with https://github.com/hajimehoshi/ebiten for a while which is also good but less idiomatic, and with that package I really appreciate the gopherjs support. I have to niggle a little at the complex128 Vec. While it\u0027s a nice way to get the builtin operators I never really longed for them; I mostly wished for trig builtins.",
					"date": "2017-04-29",
					"id": "dgxe5wn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "faiface",
					"content": "Thanks for the feedback! What do you exactly mean by trig builtins?",
					"date": "2017-04-30",
					"id": "dgxemig",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "j7b",
					"content": "Just found myself wishing I could type atan2 instead of math.Atan2 fairly often and to that end boilerplating a lot of var atan2 \u003d math.Atan2 and similar, at least in the early stages of game physics-esque stuff. I wish most of what\u0027s in the math package were builtin functions.",
					"date": "2017-04-30",
					"id": "dgxhrhs",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "Well, you can type vec.Angle(), which will give you exactly what Atan2 would.",
					"date": "2017-04-30",
					"id": "dgxi5q8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dmikalova",
					"content": "Sweet, I was planning on making a graphing library and could probably use something like this.",
					"date": "2017-04-25",
					"id": "dgqnp8d",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "Cool! Feel free to hit me up either here or through the gitter (gitter preferred, link on github) if you get stuck with anything.",
					"date": "2017-04-25",
					"id": "dgqnydn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ZnVja3JlZGRpdA",
					"content": "Looking forward to digging into this one. Go could be a great language for games. Of course we have the GC, but it could still work for many many types of games especially now that pause times are improved so much these days thanks to the Go team.",
					"date": "2017-04-26",
					"id": "dgrf745",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Creshal",
					"content": "I wouldn\u0027t worry about the GC *too* much – Unity is doing fine enough despite Mono\u0027s not that great GC. ",
					"date": "2017-04-26",
					"id": "dgroqw3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "sendoushi",
					"content": "This is cool. Would it be hard to implement a webview?",
					"date": "2017-04-26",
					"id": "dgrmp3q",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "What do you mean by a \"webview\"? Like, an HTML5 backend? Rendering in browser?",
					"date": "2017-04-26",
					"id": "dgror84",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sendoushi",
					"content": "on the contraire. a go backend with a frontend html. a web view to render the html",
					"date": "2017-04-26",
					"id": "dgsmoan",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "BtnMasher",
					"content": "Try compiling it with GopherJS? :3",
					"date": "2017-04-26",
					"id": "dgroswc",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "peterhellberg",
					"content": "Thank you for this lovely package, I\u0027ve wanted a way to draw to a undecorated GL window for some time, and this package does exactly what I wanted.\n\nMy first experiment: https://gist.github.com/peterhellberg/959dcd03cbd309a8966009254fd8b15c\n\nEdit: I\u0027ve also added a command to my plasma project: https://github.com/peterhellberg/plasma/blob/master/cmd/plasma-pixel/main.go",
					"date": "2017-04-26",
					"id": "dgrq776",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "That\u0027s awesome! I love seeing a code which uses Pixel that\u0027s written by someone other than me :D. And your code is nice, you use the package just as it\u0027s intended to.\n\nEdit: Btw, you have a race condition in the plasma code. Sprite can be update (s.Set) and drawn (s.Draw) at the same time.\n\nEdit2: There\u0027s one more subtle problem with your plasma code. Sprite caches each Picture it\u0027s set to for performance. Since you\u0027re setting a different Picture each frame, this leads to an unbounded memory, a memory leak. The fix is that you create a new sprite each frame, it won\u0027t decrees the performance. I\u0027ll put that in the documentation.",
					"date": "2017-04-26",
					"id": "dgrr2t7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "peterhellberg",
					"content": "Thank you for pointing that out, and yes I was aware of the race condition… but didn\u0027t bother handling it :)\n\nI\u0027ll change the code to create a new sprite for each frame as per your suggestion.",
					"date": "2017-04-26",
					"id": "dgs1sa0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "peterhellberg",
					"content": "I\u0027ve continued my experimentation with the Pixel package by implementing the old school tunnel effect :)\n\nhttps://gist.github.com/peterhellberg/80df53fa909a2012f5acc00e2b908fc0",
					"date": "2017-04-27",
					"id": "dgtbk3g",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "Wow, that looks really epic! In case you wanted to improve the performance further, the Canvas (offscreen drawing area) type has a Canvas.Texture().SetPixels method, which replaces the content of the canvas with the provided pixels. (https://godoc.org/github.com/faiface/pixel/pixelgl#Canvas.Texture) This avoid allocating and managing a new sprite each frame. Just in case you needed that ;)",
					"date": "2017-04-27",
					"id": "dgtveho",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "peterhellberg",
					"content": "That sounds interesting, but it doesn\u0027t seem to be a way to access the underlying canvas from a `*pixelgl.Window`, do you have any pointers on how to open a window and draw directly on the canvas?",
					"date": "2017-04-27",
					"id": "dgu1eih",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "Well, just create a second Canvas and then draw that Canvas onto Window. I might add the functionality to get the underlying Window Canvas eventually, but so far I thought it\u0027s cleaner this way.",
					"date": "2017-04-27",
					"id": "dgu20l3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "peterhellberg",
					"content": "Thank you for the quick reply :) \nI\u0027ll continue to experiment.",
					"date": "2017-04-27",
					"id": "dgu2kvy",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "Cool! Your results look amazing!",
					"date": "2017-04-27",
					"id": "dgu2qo3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "peterhellberg",
					"content": "I\u0027m able to clear the canvas with a color and draw that to the window (using `canvas.Draw(win)`)\n\nBut as soon as I use `canvas.Texture().SetPixels` the program crashes with:\n\n`\nfatal error: unexpected signal during runtime execution\n[signal SIGSEGV: segmentation violation code\u003d0x1 addr\u003d0x348 pc\u003d0x7fff7d662a47]`\n\n**And a stack trace (that I parsed using panicparse):**\n\n    runtime stack:\n    runtime.throw(0x415dd44, 0x2a)\n    \t/usr/local/Cellar/go/1.8.1/libexec/src/runtime/panic.go:596 +0x95\n    runtime.sigpanic()\n    \t/usr/local/Cellar/go/1.8.1/libexec/src/runtime/signal_unix.go:274 +0x2db\n    \n    exit status 21: syscall [locked] [Created by mainthread.Run @ mainthread.go:41]\n        runtime    cgocall.go:131           cgocall(0x40ecbb0, 0xc420036dc8, 0x4115ce0)\n        gl         _cgo_gotypes.go:5448     _Cfunc_glowGetIntegerv(0x7fff7d662a35, 0x8069, #3)\n        gl         package.go:6191          GetIntegerv(32873, *int32(#3))\n        glhf       util.go:16               (*binder).bind(*binder(#2), 0xc42096c000)\n        glhf       texture.go:137           (*Texture).Begin(*Texture(#2))\n        main       canvas-xor-tunnel.go:104 run()\n        mainthread mainthread.go:39         Run.func1(func(#1))\n        runtime    asm_amd64.s:2197         goexit()\n    1: select [locked]\n        mainthread mainthread.go:44         Run(#1)\n        pixelgl    run.go:32                Run(func(#1))\n        main       canvas-xor-tunnel.go:139 main()\n    1: chan receive [Created by main.run @ canvas-xor-tunnel.go:87]\n        main       canvas-xor-tunnel.go:68  run.func1(#6, #7, #5, #9, #4, #8, #10, #11)\n    1: syscall [locked]\n        runtime    asm_amd64.s:2197         goexit()\n\nDo I need to do any type of setup before I’m able to call `canvas.Texture().SetPixels`?",
					"date": "2017-04-28",
					"id": "dguzi1b",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "Oh, this seems like a bug. Would you please submit an issue with this full panic description and a minimal source code that leads to this?",
					"date": "2017-04-28",
					"id": "dguzkdm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "faiface",
					"content": "Oh, ok, it might not be a bug. Try\n\n```\ncanvas.Texture().Begin()\ncanvas.Texture().SetPixels(...)\ncanvas.Texture().End()\n```\n\nEdit: And well, ok, you\u0027d need to do even additional setup. Nevermind, I\u0027ll add `canvas.SetPixels` function, that just works.",
					"date": "2017-04-28",
					"id": "dguzlg9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "This looks neat! I wonder if this could be used as the basis for a UI toolkit--I\u0027ve been longing for a cross-platform, hardware-accelerated, native-Go UI toolkit.",
					"date": "2017-04-26",
					"id": "dgs2ehd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sendoushi",
					"content": "not what i\u0027m aiming for. i want to substitute electron as a frontend layer. besides i don\u0027t think gopherjs is the way to go. too much boilerplate code",
					"date": "2017-04-26",
					"id": "dgsmprm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "dvk0",
			"date": "2017-04-18",
			"id": "662ht3",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Moving from PHP (Laravel) to Go",
			"comments": [
				{
					"author": "titpetric",
					"content": "It seems your arguably bad business decision made you come ahead by a factor of 30x over PHP :D If you had 30 servers and wen\u0027t down to 3, it would be far from bad.\n\nAlso, kudos for using netdata, I created the [docker image for it](https://github.com/titpetric/netdata). ;)",
					"date": "2017-04-18",
					"id": "dgf6n70",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "dvk0",
					"content": "Hey, nice work on providing the image for NetData. Checking out your 12 Factors book now! And hah, too bad I\u0027m nowhere near that scale for that particular service.",
					"date": "2017-04-18",
					"id": "dgfc0sm",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "titpetric",
					"content": "Well, it\u0027s a growth buffer then, which is also not bad :)",
					"date": "2017-04-19",
					"id": "dggfi68",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "cjthomp",
					"content": "Did you disable `xdebug` locally when you ran the benchmarks? 120ms is roughly how long it takes my static login page to load locally with it enabled.",
					"date": "2017-04-18",
					"id": "dgfeg9c",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "askageek",
					"content": "So many questions on the php side. Which version of php. Which version of laravel. Lemp or lamp. Were configs optimized.\n\nThe barrier to entry on the php side is low but to get things to actually work optimally is not easy. Go, on the other hand, has a higher barrier to entry but it has considerably less other pieces of software that need to be involved.\n\nThey each have their use cases.",
					"date": "2017-04-18",
					"id": "dgg09mf",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "thegame402",
					"content": "Very well written, one of the few in a long time i read completly, not only because i was really intrested in the topic. Kudos to you \u003d)",
					"date": "2017-04-18",
					"id": "dgf8t4i",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "dvk0",
					"content": "Thanks a ton for saying that. I\u0027m not much of a blogger and while writing a post like this, it\u0027s very easy to think \"people know this\" or \"this is worthless\" so I appreciate that you appreciated my attempt!",
					"date": "2017-04-18",
					"id": "dgfc2ct",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "cjthomp",
					"content": "Our primary app is Laravel, and while I love the framework I do agree that the release cycle is whack. We (having a persistent app and not a one-off for a client) basically have to do the update dance every 6 months whether we want the features or not, because while jumping one version is a pain, jumping *two* at once is a nightmare.\n\nI\u0027m very interested in go and I\u0027d *love* to do what he did, but unfortunately I can\u0027t justify it like he could.\n\nI am with /u/daveddev, what\u0027s the actual LOC that *you* wrote, excluding external libraries?",
					"date": "2017-04-18",
					"id": "dgf9bbf",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "dvk0",
					"content": "Exactly, I manage my time between a few businesses where each has its own platform. Everytime it was time to revisit the shop running on Laravel, there was an upgrade guide for me to go through with seemingly trivial changes. \u003d/ \n\nHope you\u0027ll find the play time for a switch to Go soon, I\u0027m guessing things will become even easier as the Go ecosystem matures a few more years.",
					"date": "2017-04-18",
					"id": "dgfcbja",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "diosio",
					"content": "once go dep is a thing, there will be no excuse!",
					"date": "2017-04-18",
					"id": "dgfdh42",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "SeerUD",
					"content": "Try http://glide.sh, they plan to be around as long as dep isn\u0027t as good.",
					"date": "2017-04-18",
					"id": "dgfjm5g",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Probotect0r",
					"content": "Now I want to read about someone switching from Node.js to Go. ",
					"date": "2017-04-18",
					"id": "dgfg5t0",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "php_questions",
					"content": "Didn\u0027t one of the creators of nodejs switch to go and make a blog post about it?",
					"date": "2017-04-18",
					"id": "dgfgmoa",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Neorift",
					"content": "You are thinking of the original author of Express, [TJ Holowaychuk](https://github.com/tj).  [Here is the blog post](https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b) he wrote about leaving Node.js for Go.",
					"date": "2017-04-18",
					"id": "dgfgyq1",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "kaoussi",
					"content": "Hey, I know Im late to the party, but yeah, the original implementer and creator of node js, Ryan Dahl made sure that golang is now his language of choice to build web servers! you can read it here \nhttps://www.mappingthejourney.com/single-post/2017/08/31/Episode-8-Interview-with-Ryan-Dahl-Creator-of-Nodejs",
					"date": "2017-09-02",
					"id": "dmgskoj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "geodel",
					"content": "This is very good post. Short, concise but filled with useful data.",
					"date": "2017-04-18",
					"id": "dgf8na0",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Muchoz",
					"content": "I wish I could move my biggest project from Django to Go. But it\u0027s just not feasible to port it when we don\u0027t face any performance bottlenecks. Neither do we really face any major problems with the framework. I\u0027d love to write it in Go, but you really can\u0027t when you have a 2 man team of which the first person is working on 2 iOS apps and the other (me) on 1 Android app, 1 frontend, and 1 backend. Personally I\u0027m already having a hard time keeping up with my own business and I\u0027m interning and writing a bachelor\u0027s paper.\n\nYou make me jealous.",
					"date": "2017-04-18",
					"id": "dgfdkls",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "vph",
					"content": "\u0026gt;  But it\u0027s just not feasible to port it when we don\u0027t face any performance bottlenecks. \n\nEven if it\u0027s feasible, don\u0027t fix a problem that doesn\u0027t exist.  ",
					"date": "2017-04-18",
					"id": "dgflum8",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "circuitously",
					"content": "This was a great read! We\u0027re L4.2 for our monolithic app, and gradually breaking bits out into Python-based microservices. Would much rather be using Go. Maybe if I can just unilaterally rewrite some bits in Go, we\u0027ll end up accidentally adopting it ;)",
					"date": "2017-04-18",
					"id": "dgfj57f",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "warmans",
					"content": "I guess with all things in this software business the answer is usually \"reasons\" but I am honestly surprised anyone would bother doing a big re-write of PHP to Python. In terms of actual concrete non-emotional costs/benefits they seem way too similar for that to be worthwhile. I mean, at least with switching to Go you get some obvious benefits like type safety and a usually a nice bump in performance.",
					"date": "2017-04-18",
					"id": "dgfnx9g",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "circuitously",
					"content": "Well, the original apple was more MVP and is in need of a rewrite. We\u0027ve got a lot of data science stuff going on too, and python is core there, so we can make use of some of that. And we\u0027ve also found a much higher signal to noise ratio when looking for quality Python devs over PHP.",
					"date": "2017-04-18",
					"id": "dgfpv89",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mackstann",
					"content": "Hiring is a good point -- my company rewrote from PHP to Go and I think it was a questionable decision, but it\u0027s undeniable that if you\u0027re looking for good developers, Go will pull them out of the woodwork while PHP will tend to scare them away. ",
					"date": "2017-04-18",
					"id": "dgfqhl3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gin_and_toxic",
					"content": "Laravel is nice and easy to use, has huge ecosystem, etc. But it\u0027s one of the slowest PHP frameworks.",
					"date": "2017-04-18",
					"id": "dgf9vzi",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "comrade-jim",
					"content": "There are other reason to use Go besides performance. \n\nPersonally I\u0027ve never seen a large PHP code base that wasn\u0027t a complete mess (although I don\u0027t think PHP is meant to be used for large projects). My experience with Go is usually the opposite, Go is a much more \"digestible\" language because of the adherence to idioms (in most cases). ",
					"date": "2017-04-18",
					"id": "dgfaah6",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "dvk0",
					"content": "Word. To be fair, the performance of Laravel would already be more than enough in this case. \n\nLooking back, the Go code is a lot easier to comprehend though. There\u0027s zero magic, a lot less DI wiring and it helps having concurrency built-in, but only when you need it.",
					"date": "2017-04-18",
					"id": "dgfcjpx",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "sleepybrett",
					"content": "Things can certainly get pretty unwieldy in go as well, but I think it\u0027s threshold from digestable to undigestable is certainly a bit higher than most.",
					"date": "2017-04-18",
					"id": "dgfrsyl",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "daveddev",
					"content": "What was the difference in written/managed loc? Thanks for the write-up.",
					"date": "2017-04-18",
					"id": "dgf8mxh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dvk0",
					"content": "Good point! I just added that to the post and discovered I somehow used a wrong number yesterday. The difference including dependencies is actually much larger (500%), but excluding external dependencies it\u0027s a lot more even (still twice as much though).",
					"date": "2017-04-18",
					"id": "dgfc5oc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "MEAT_FIST",
					"content": "This is to be expected, no? Pretty much any statically typed language will require more LOC than an identical implementation with dynamic typing, in my opinion.",
					"date": "2017-04-18",
					"id": "dgfn4k4",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dvk0",
					"content": "You\u0027d say so, but in this case it\u0027s actually the statically typed language that ships in at half the amount of LOC. Probably due to Go\u0027s stdlib, whereas in PHP you need libraries for the crucial stuff like HTTP requests, responses, etc.",
					"date": "2017-04-18",
					"id": "dgfpbjl",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "jacobsantos",
					"content": "This makes my decision to start with Go a good one. I still think it is crazy with the performance.",
					"date": "2017-04-20",
					"id": "dgi18yn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "vincentlu",
			"date": "2017-05-17",
			"id": "6bmp7q",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Why Go doesn\u0027t implement generational and compacting GC -- Great response from Ian Lance Taylor",
			"comments": [
				{
					"author": "JackOhBlades",
					"content": "TLDR; \n\n**Compaction** is for avoiding fragmentation and allowing bump allocator. \nSince Go doesn\u0027t fragment and bump allocation doesn\u0027t work as \u0027well\u0027 in parallel (concurrently?), compaction offers less value. \n\n**Generational** is prioritising looking at the most recent objects to reduce GC time.\nSince Go\u0027s GC is concurrent, the GC time is independent of the amount of garbage to be collected, so generational offers less value. Furthermore Go uses escape analysis to put as many short lived objects on the stack as it can, thus creating less garbage to begin with: the truly short lived objects never even reach the heap.\n\nI think that\u0027s right. ",
					"date": "2017-05-17",
					"id": "dho1gfx",
					"isArchived": true,
					"isControversial": false,
					"score": 35
				},
				{
					"author": "waffle299",
					"content": "One clarification - escape analysis is done at compile time. Otherwise, you nailed it.",
					"date": "2017-05-17",
					"id": "dhob63u",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "bkeroack",
					"content": "With respect, the original post is concise and accessible enough that a TLDR isn\u0027t really necessary. People should just read the post.",
					"date": "2017-05-17",
					"id": "dhodoao",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "matttproud",
					"content": "TCMalloc, the allocator that serves as the basis for Go\u0027s, still can suffer from fragmentation.  Go\u0027s can suffer from noticeable fragmentation as well once allocations reach a size class and the allocations have multimodal lifetimes.  The reason: such allocations are stored in \u0027spans\u0027, which act as containers for your program\u0027s allocation, whose contents are never consolidated, meaning spans for larger size classes can come to appear as Swiss cheese (RSS that is up to markedly larger than live heap, which is confusing if you don\u0027t know that\u0027s what\u0027s happening).  Inactive spams are freed back to the operating system when not in use, but that is beside the point of no compaction.\n\nJust imagine partially occupied moving boxes whose contents cannot be consolidated into fewer.  More content can be added to them, but any data that is still live post-collection stays in the box in which it was born until it dies.  Nevertheless these boxes take up the same amount of space in your house.",
					"date": "2017-05-17",
					"id": "dhomrz2",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "unit_circle",
					"content": "Cool, thanks for posting!",
					"date": "2017-05-17",
					"id": "dhnwvcd",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "parham90",
			"date": "2016-12-28",
			"id": "5kqxt6",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "As a blind user, I couldn\u0027t use Medium\u0027s editor, so I created my own command-line client in Go called godium",
			"comments": [
				{
					"author": "jechols",
					"content": "That\u0027s really slick.  But it\u0027s pretty shameful that a huge site like Medium can\u0027t even get a simple form to be accessible.",
					"date": "2016-12-28",
					"id": "dbq0j41",
					"isArchived": true,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "jonbonazza",
					"content": "You\u0027d be surprised at how much of the industry ignores accessibility. In fact, I\u0027d say the gaming industry is actually the leader in this area... which is saying a lot...",
					"date": "2016-12-29",
					"id": "dbqkslp",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "garoththorp",
					"content": "I work in web editing and I think it\u0027s not really their fault. Check out https://medium.com/content-uneditable/contenteditable-the-good-the-bad-and-the-ugly-261a38555e9c for some background.\n\nTldr browsers provide a feature called contenteditable for making arbitrary HTML pages editable. However, it\u0027s the buggiest piece of crap you\u0027ve ever seen. Web accessibility is hard as is, and contenteditable doesn\u0027t help much.\n\nDevs are left reimplementing editors from scratch (like Google docs), or heavily mutilating contenteditable to work. Sometimes, adding accessibility back in is very hard, due to browser limitations.",
					"date": "2016-12-30",
					"id": "dbsweil",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jechols",
					"content": "The web is my job and has been for years, and I know accessibility is hard, and often ignored because \"it\u0027s an internal tool\" or \"we don\u0027t have time\" or \"it\u0027s not high-traffic enough to warrant the cost\" or whatever other BS excuses we come up with to justify it.  But providing an alternative plain-text editor that supports simple markup (not wysiwyg, obviously) isn\u0027t a tough thing to do.\n\nIf we can make tools for blind users to write code, we can easily make a simple Markdown-enabled text editor as a fallback for those who can\u0027t (or don\u0027t want to) use a WYSIWYG editor.  Generally speaking, if it\u0027s too hard to add accessibility back into something custom, use the standard HTML option instead of replacing it in the first place.\n\nNot meaning to bite *your* head off per se, I just get tired of the excuses the industry uses to justify making life tougher for the sake of flashiness.",
					"date": "2017-01-03",
					"id": "dby0kx2",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "garoththorp",
					"content": "I totally agree that adding a plaintext form is a good way to go here, if your platform can support it.",
					"date": "2017-01-03",
					"id": "dbybz3r",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "GoTheFuckToBed",
					"content": "It also cant show pictures offline.",
					"date": "2016-12-29",
					"id": "dbqzirx",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Zamicol",
					"content": "Whoa!  Awesome!  \n\nWhat editor do you use?",
					"date": "2016-12-28",
					"id": "dbpx9fx",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "parham90",
					"content": "I use Emacs with Emacspeak, but in the past I\u0027ve used `goclipse` for Go. Right now, though, I\u0027m stuck doing Perl. :-)",
					"date": "2016-12-28",
					"id": "dbpxpm2",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "sdmike21",
					"content": "That is crazy if you don\u0027t mind me asking have you always been blind or did you learn to program before you went blind?",
					"date": "2016-12-28",
					"id": "dbqejg1",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "parham90",
					"content": "I have always been blind. That has made things much simpler.\n\nI have shared my [autobiography][] and [the tools I use][] on my blog. I\u0027m really glad you are curious about this! :-)\n\n[autobiography]: https://www.parhamdoustdar.com/2016/03/27/autobiography-blind-programmer/\n[the tools I use]: https://www.parhamdoustdar.com/2016/04/03/tools-of-blind-programmer/",
					"date": "2016-12-29",
					"id": "dbr3x2b",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "epiris",
					"content": "Perl (written in the style perl programmers often take pride in) is hard enough to read with perfect vision, can\u0027t imagine how difficult it must be to produce purely mental visualizations of it. I commend you sir!",
					"date": "2016-12-29",
					"id": "dbqjxi7",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "parham90",
					"content": "Yes. When you are presented with a badly-written code in any language, it sucks. Perl is just more permissive in allowing you to do whatever you want.\n\nMaybe that\u0027s why I love Go. There are less ways to do awful things. It\u0027s not impossible it\u0027s just harder.",
					"date": "2016-12-29",
					"id": "dbr3ycv",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "PaulCapestany",
					"content": "Nice. \n\nReddit/Github handles seemed familiar, then I remembered listening to an interview with Parham that was really quite interesting: [The Advantages of Being a Blind Programmer — The Changelog Podcast](https://changelog.com/podcast/206)",
					"date": "2016-12-29",
					"id": "dbqlbd0",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Arthmost",
					"content": "Wait, what? How are you able to use a PC if you\u0027re blind? I\u0027m sorry if it\u0027s a somewhat unrelated question and no offense meant, I\u0027m just extremely curious. I have thought about what I would do if I were blind, since basically 90% of my interests are tied to PC.",
					"date": "2016-12-29",
					"id": "dbr1l6r",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "parham90",
					"content": "No offense taken.\n\nSo, you can use the computer without sight. In fact, I\u0027ve written about [the tools I use][]. I think reading that should give you a pretty clear idea. Of course, if you have more questions, I\u0027d love to answer them.\n\n[the tools I use]: https://www.parhamdoustdar.com/2016/04/03/tools-of-blind-programmer/",
					"date": "2016-12-29",
					"id": "dbr4096",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "tscs37",
					"content": "From what I know, there is a special terminal that outputs Braille and there is also Text-to-Speech for most things.\n\nAtleast, that was state-of-the-art when I last heard about it.",
					"date": "2016-12-29",
					"id": "dbr22al",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "shovelpost",
			"date": "2017-12-09",
			"id": "7imxl9",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "The big break in computer languages",
			"comments": [
				{
					"author": "[deleted]",
					"content": "I think he\u0027s right, by and large. Rust\u0027s advantage dminishes quickly as the task\u0027s complexity increases. I\u0027ve ported an Earley parser from C to Rust, and it works almost as fast as the C version. I had to pull a few ugly data duplications to get it working (after trying a gazillion life-time options), but that\u0027s fine. However, there\u0027s no way I can get my shared forest representation in the Rust version without using \"unsafe\". In Go, it\u0027s a doddle.\n\nGo still feels a bit sloppy to me, but it\u0027s the most productive language without serious drawbacks for very many tasks. Perhaps (something like) Kotlin can be a contender.",
					"date": "2017-12-09",
					"id": "dqzz63f",
					"isArchived": false,
					"isControversial": false,
					"score": 48
				},
				{
					"author": "ProximalAbyss",
					"content": "Kotlin has one major drawback: the Java VM and library overhead... I can\u0027t see myself writing microservices on a Java VM: just too damn much overhead.",
					"date": "2017-12-09",
					"id": "dr0hks3",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "[deleted]",
					"content": "Kotlin seems to have a native compiler, though still in early stages.",
					"date": "2017-12-10",
					"id": "dr1c1lb",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "ProximalAbyss",
					"content": "I remember there was a java to c compiler once. \n\nOnce kotlin has a native compiler, I\u0027ll have to take a peek at kotlin :-)",
					"date": "2017-12-10",
					"id": "dr1dtr4",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Fitzoh",
					"content": "https://kotlinlang.org/docs/reference/native-overview.html",
					"date": "2017-12-10",
					"id": "dr1ne18",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SeerUD",
					"content": "It does, and so does Scala, however you also lose interoperability with pretty much all libraries you\u0027re used to using. These native variants of JVM languages are awesome to see, but they\u0027re also a completely separate ecosystem that has a _long_ way to mature.",
					"date": "2017-12-11",
					"id": "dr35swp",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mallocc",
					"content": "There are plenty of reasons not to use the JVM, this is simply not one of them. It\u0027s right up there with \"you have to use threads for concurrency\", both of which usually indicate a poor understanding of the runtime and the JDK. ",
					"date": "2017-12-09",
					"id": "dr0k218",
					"isArchived": false,
					"isControversial": false,
					"score": -6
				},
				{
					"author": "ProximalAbyss",
					"content": "Have you ever tried to run micro services in a JVM? Did you run 22 JVM\u0027s? Or did you wrap them up in one fat JVM?\n\nHow did memory management go in the first case?\n\nEdit: to be clear: my point is that the JVM overhead is to damn much... I can run a golang service in 1/50th of the memory space a Java process has. And yes, I\u0027ve been using Java since version 1.1.",
					"date": "2017-12-10",
					"id": "dr11ys2",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "mallocc",
					"content": "Since you ask, yes. I\u0027ve worked on \u0026gt; 50 discrete services on the JVM across several languages with instances of those services probably still numbering in instance counts \u0026gt; 8000 several years removed. I\u0027ve spoken internationally at conferences about doing so and am a published author on the topic.\n\nI don\u0027t really value service per host as a metric beyond 10-15 services assuming any measure of concurrency. That quickly becomes an issue at scale, whether I/O being a bottleneck, cache misalignment inefficiencies or failure modes being problematic. \n\nThe JVM has made many strides over the years in terms of CDS, JIT time improvements, class unloading and reducing memory overhead (https://stackoverflow.com/a/46516509 as an example) although those all favor vanilla Java vs. over the top languages and these improvements can be leveraged in containerized workloads if done correctly. Can you squeeze 10MB less out of a Go process than a vanilla Java JVM process? Of course. Is that worth the time? Not in my experience and the upside is regularly blown out of proportion.\n\nI don\u0027t have any skin in this game. I spend most of my time in Python, Rust and Go these days but this myth of the JVM being *so* over bloated that it\u0027s not usable for microservies needs to stop.",
					"date": "2017-12-12",
					"id": "dr4cf2l",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ProximalAbyss",
					"content": "Well then, we can conclude we don\u0027t agree then.\n\nHave a nice day.",
					"date": "2017-12-12",
					"id": "dr4gc2y",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Jelterminator",
					"content": "I\u0027ve also used both Rust and Go (although much more Go). I think you\u0027re right that Go is one of the most productive languages for a lot of tasks. But I think the same holds true for Rust. The problem space where they shine just doesn\u0027t overlap a lot (at least at the moment).\n\nPlaces where I think Rust shines are:\n\n- Programs/libraries requiring extreme performance (databases, web browsers, but also things like `ripgrep`)\n- Programs that need to operate with C/C++ libraries (cgo is a very crappy option if you need any serious performance)\n- Highly reliable code (Go\u0027s type system is just not good enough to achieve this)\n\nAlso, using \"unsafe\" Rust is not a problem in itself, sometimes it\u0027s just needed. Go its regular mode is basically comparable to Rust its unsafe mode, when not doing too weird things in unsafe mode. ",
					"date": "2017-12-09",
					"id": "dr04po2",
					"isArchived": false,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "epiris",
					"content": "Subjective but reasonable enough options except the reliability one. The very last thing I think after compiling an idiomatic Go program is “I wish this was more reliable”. What about Go’s type system makes it unreliable? If your answer is eface than what is missing from the type system for reliable usage? Between type assertions and type switches I’ve never found reliability to be an issue, comma ok and return an error. Assuming the use of eface is correct to begin with of course. ",
					"date": "2017-12-09",
					"id": "dr05ey7",
					"isArchived": false,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "Jelterminator",
					"content": "The things I miss from Rust its type system when trying to write reliable code in Go (in no specific order):\n\n- Non nil-able types, dereferencing nil is the main source of panics I get when using Go\n- Sum types for error handling. It\u0027s really nice to be sure that you didn\u0027t forget to handle an error that was returned.\n- Actual enums, not custom int type that can still be the full integer range. So you always have to handle the case where it isn\u0027t any of your constants.\n- Not using empty interface for custom container types. This can be worked around with by using code generation, but I wouldn\u0027t call that a nice way of writing code.",
					"date": "2017-12-09",
					"id": "dr071w2",
					"isArchived": false,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "epiris",
					"content": "I don\u0027t see any of these as barriers to writing a highly reliable Go program. They are part of the list of trade offs that come from the difference in design between these two languages. Idioms exist for everything in your list, some of them may require developer discipline in place of syntax. But this comes quickly along with the appreciation for not having the arduous engineering cycles imposed at ground zero by Rust.\n\nMy point here is trade offs do exist between the design of Rust and Go, but writing highly reliable software isn\u0027t one of them.",
					"date": "2017-12-09",
					"id": "dr0bh2k",
					"isArchived": false,
					"isControversial": true,
					"score": -3
				},
				{
					"author": "akavel",
					"content": "I\u0027m absolutely a Go fan and user since it was announced pre-1.0 (even a contributor), and haven\u0027t yet tried writing Rust, but still can\u0027t see how can one not agree with what Jelterminator wrote above. I\u0027m working daily on a well-tested codebase, and totally confirm and know what Jelterminator is talking about the nil panics. We absolutely do occassionally get nil panics from some rarely used code, or incorrectly tested one (people are not perfect); also sometimes we catch potential nil panics only in code review.\n\nI totally understand those are tradeoffs. And the tradeoff here vs. Rust as I believe is exactly *more productivity, at a cost of increased risk of runtime panic*. A runtime panic has high chance of crashing my app (one can never be sure if one managed to put `recover` on every thread; may not even always make sense). If MS Word, or MS Windows, or Linux kernel, crashes on you, do you call it \"reliable\"?\n\nAs to point 3 and 4, I also understand the sentiment, though I can\u0027t recall now if we were actually bitten by panics from those sources at any point.",
					"date": "2017-12-09",
					"id": "dr0h99e",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "epiris",
					"content": "All of his bullet points are the same exact thing, I want an extremely rigid and verbose type system. If you implement all those things in Go, you no longer have Go, you have Rust. Regardless none of those things prevent writing highly reliable Go programs today.",
					"date": "2017-12-10",
					"id": "dr0nw9v",
					"isArchived": false,
					"isControversial": true,
					"score": 4
				},
				{
					"author": "orbat",
					"content": "\u0026gt; All of his bullet points are the same exact thing, I want an extremely rigid and verbose type system\n\nThat\u0027s *your* strawman representation of what they wrote. An expressive type system that doesn\u0027t force you to e.g. use the equivalent of void pointers and reflection doesn\u0027t have to be \"rigid and verbose.\"\n\nLook, we\u0027re probably all in agreement that Go is a \"get shit done\" language, but I don\u0027t understand this completely irrational fanboyism where any sort of criticism of the honestly quite simple type system is some sort of call for \"rigid and verbose.\" There\u0027s a bunch of places where it could be improved, and this attitude where `interface{}` should be good enough for everything isn\u0027t really conducive towards actual development of the language",
					"date": "2017-12-10",
					"id": "dr19ofy",
					"isArchived": false,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "epiris",
					"content": "It’s not a straw man, it’s a list containing the largest differences of the type systems between rust and Go. You do not agree? What other big differences does rust have that Go doesn’t that makes my statement inaccurate? Or perhaps you don’t think rust is a rigid and verbose type system, in which case computer science does not agree. \n\nRegardless this isn’t me being a fanboy, I’ve made no mention of my preferences for any of those features he listed and if they should be in Go. The truth is people feel so passionate about them they are missing the only point I continue to regurgitate.\n\nYou can write highly reliable programs in Go today. I know this because people are writing highly reliable programs in Go today. People are writing highly reliable programs in Go despite the missing features the person I replied to declared as barriers to do so. I only tried to outline the idioms I see in use to compensate for these lack of features, while I did make it clear I find these idioms a fair trade off from the other affects such features have on a language.\n\nNothing more. Nothing less. I am writing highly reliable software in Go today, as are many others. People can feel hurt and passionate about generics and language Y feature X, I don’t care. But if you think X is needed to write highly reliable software you are wrong, measurably so by the large evidence in the form of software you are using daily written in Go.",
					"date": "2017-12-10",
					"id": "dr1cb41",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "orbat",
					"content": "First of all, you seem to be operating under the assumption that a more expressive type system will always be hard to use and limit what you can do (assuming that\u0027s what you meant with \"rigid\"?). Expressive type systems *can* be more verbose (as you supply more information with them and syntax design is hard), but usually the more expressive a type system is, the *less rigid* it becomes. They often also allow you to offload complexity from the \"actual\" code, and do so in a *safe* fashion.\n\nNow, because Go\u0027s type system is extremely simple, there\u0027s not a lot you need to learn. There are no type hierarchies, there\u0027s no user-definable generics (but we do have `chan T` and `map[A]B`). This also means that if we want e.g. polymorphic containers (`sync.Map` anyone?) we\u0027re left with either using `interface{}` + possibly `reflect` (giving us runtime panics and overhead), having to write one-off boilerplate types, and/or `go:generate` fuckery.\n\n\u0026gt; It’s not a straw man, it’s a list containing the largest differences of the type systems between rust and Go. You do not agree? What other big differences does rust have that Go doesn’t that makes my statement inaccurate?\n\nI definitely don\u0027t agree that that list represents the biggest differences between Go\u0027s and Rust\u0027s type systems, that\u0027s bordering on ridiculous. Go doesn\u0027t even have *subtyping*, let alone polymorphism, higher-kinded types, lifetime annotations, traits, what have you. None of the features in the list is in any way even particular to Rust, or a new concept for that matter.\n\nJust because they\u0027re features that Rust has doesn\u0027t mean they\u0027ll automatically make a type system exceedingly complicated, just by virtue of being associated with Rust.\n\n\u0026gt; You can write highly reliable programs in Go today. I know this because people are writing highly reliable programs in Go today.\n\nNobody is contesting that. People can write highly reliable software in C, assembler, or physical switches. This does not mean some additions to the type system wouldn\u0027t make it *easier* to write reliable code.\n \n\u0026gt; People are writing highly reliable programs in Go despite the missing features the person I replied to declared as barriers to do so. \n \nAgain, nobody said that a simple type system is a barrier to anything. However, what people *are* saying is that there are a number of different concepts that could be added to the language to make it more expressive. ADTs for example could solve a lot of the problems we have with the language without making it ridiculously complex or even requiring something like subtyping.\n \n\u0026gt; I only tried to outline the idioms I see in use to compensate for these lack of features, while I did make it clear I find these idioms a fair trade off from the other affects such features have on a language.\n\nNegative effects you *claim* these features will have. Personally I don\u0027t think Go should even incorporate things type hierarchies or generics (which would somewhat have to go hand in hand), but for example ADTs would fit the philosophy of the language and make a huge class of runtime panics re. runtime `interface{}` conversions much less likely, and reduce the amount of boilerplate required to do it safely. What would the negative effects of e.g. ADTs be?\n\nRight now we have to compensate for the type system\u0027s simplicity by writing error-prone boilerplate, and many of us think it could be improved on. This doesn\u0027t mean we want to bring in everything and the kitchen sink.",
					"date": "2017-12-10",
					"id": "dr1k9yq",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Emacs24",
					"content": "The syntax and semantics can be terse with dedicated support on certain built in generic types: \n\n1. Result with error cases to be covered with generic type\n\n        type Result[Type, ErrorType] oneof {\n            Error ErrorType\n            default Type\n        }\n\n    with special subcase\n\n        !Type \u003d Result[Type] \u003d Result[Type, string] \n\n2. Nullable values to be covered with option type\n\n        type Option[Type] oneof {\n            Nil\n            default Type\n        }\n    \n    which can be written as \n\n        ?Type \u003d Option[Type]\n\nAnd special compiler treatment of these types, where `if` can be use to distinguish between a error and \nError handling with algebraic data typing:\n\n    file :\u003d os.Open(name)\n    if !file { // file has error type in this branch\n        return file\n    }\n    // file is an actual file here\n\nAnd this will not compile\n\n    file :\u003d os.Open(name)\n    scanner :\u003d bufio.NewScanner(file) // file is Result[*os.File, string] here, not an implementation of io.Reader\n\nThere should be no nullable types semantically, but there should be null value and there should be option types that can be either a specific value of a type, or null. In Rust these types have compiler optimization which represents them as just a pointer, where value 0 means null and others means actual value. The bad thing with Option in Rust is heavy branching which leads to ladder code. But this can be simplified easily, just like the case with Result:\n\n    fieldValue :\u003d object.StringField(name)\n    if !fieldValue {\n        return\n    }\n    // fieldValue cannot be nil here, so process returned string\n",
					"date": "2017-12-10",
					"id": "dr1b7d4",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "epiris",
					"content": "Nice code. If opening a file fails just return to the caller that it failed with no error reporting why. So you need sum types. Then you need generics. It sounds like what you “need” is to use rust, oh great experienced one.\n\nEdit: You edited your post to include sum types, which is not the approach Rust took with return values, you need option which requires generics as well. Otherwise each call site requires a new type declaration for its return value which gets extremely cumbersome fast.\n\nI’ve never said I’m against any of these features, nor am I interested in debating their merit because without a full language proposal I can’t properly measure them. So if you feel so passionately about them and think you have taken into consideration things other Go contributors have not, then create a proposal for sum types. If it is completely sound and has the right trade offs it will be accepted. If it is flawed, it will not.",
					"date": "2017-12-10",
					"id": "dr1chg7",
					"isArchived": false,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "Emacs24",
					"content": "You eat nothing gooder than grits boy.\n\n`file` is `!*os.File`, i.e. it is either an actual `*os.File` or an error, you can branch between them with\n\n    switch file {\n    case Error:\n        // in this case the file has string type (branch Error)\n    default:\n        // file is *os.File\n    }\n\nor with proposed compiler intrinsic which IMO is a better way\n\nObviously you cannot use `!*os.File \u003d Result[*os.File]` as `*os.File`. If it is hard for you, then it is a good idea to switch a job, boy.",
					"date": "2017-12-10",
					"id": "dr1cx61",
					"isArchived": false,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "Jelterminator",
					"content": "First of all, developer discipline is not a replacement for enforced constraints IMHO. I mean why have static typing at all when you can just tell developers to only use the correct types everywhere in a dynamicly typed language. \n\nSecondly, except for my last point (containers) I don\u0027t know what tradeoffs you\u0027re hinting at. Especially non nil-able types doesn\u0027t have any downsides as far as I can tell. Except for implementation cost and needing some other way to have a None type (like sum types ;)).\n\nI hope I\u0027m clear that this is not a rant against Go (I use it with pleasure 5 days a week). I\u0027m just trying to point out the problem spaces where Rust shines. ",
					"date": "2017-12-09",
					"id": "dr0hhlv",
					"isArchived": false,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "epiris",
					"content": "\u0026gt; First of all, developer discipline is not a replacement for enforced constraints IMHO. I mean why have static typing at all when you can just tell developers to only use the correct types everywhere in a dynamicly typed language.\n\nFirst of all- I said no such thing, lets review:\n\n\u0026gt; Idioms exist for everything in your list, some of them may require developer discipline in place of syntax. But this comes quickly .....\n\nI am simply presenting that I believe most of the drawbacks in your list are mitigated by common idioms found in Go programs today. I inserted a comma and made certain to acknowledge the fact these things require developer discipline in place of syntax. I presented this as a \"cost\" and this should be clear as I go on to justify this cost by saying I believe they are easy disciplines to pick up and present this process as a good trade off verse the more arduous engineering needed for rust.\n\nPerhaps instead of racing through to find something to disagree with you should slow down a little and focus on the things that truly don\u0027t align with your own conclusion. This will prevent needless slights that don\u0027t contribute to technical discussion like \"oh why use static typing hah, got ya!\".\n\n\u0026gt; Secondly, except for my last point (containers) I don\u0027t know what tradeoffs you\u0027re hinting at. Especially non nil-able types doesn\u0027t have any downsides as far as I can tell. Except for implementation cost and needing some other way to have a None type (like sum types ;)).\n\nNon nil-able types would be the entire set of types which do not have a zero value of nil. The only different is syntax and constraints. But if your goal is to write highly reliable programs and feel non nil-able types is the only way to achieve that, you can:\n\n    type AlwaysMap struct { m map[string]int }\n    func (a *AlwaysMap) NeverPanicHighlyReliable() map[string]int {\n        if a.m \u003d\u003d nil { a.m \u003d make(map[string]int) }\n        return a.m\n    }\n    var plz AlwaysMap\n    everythingIsOkay :\u003d plz.NeverPanicHighlyReliable()\n    // scale up infra\n\nBut you don\u0027t see such code because it\u0027s not a problem in practice. Even day 1 developers trying Go for the first time quickly learn the common NewT()-err check idiom. I like Rust, I think it may be better in many problem spaces, but writing reliable software as a blanket statement I can\u0027t agree with considering it\u0027s one of the most important aspects of software engineering. I don\u0027t think you will be able form an argument that will allow me to concede so I\u0027ll agree to disagree. Take it easy.",
					"date": "2017-12-10",
					"id": "dr0n6yq",
					"isArchived": false,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "neoasterisk",
					"content": "\u0026gt; Even day 1 developers trying Go for the first time quickly learn the common NewT()-err check idiom.\n\nHmm care to elaborate on this idiom? I wasn\u0027t aware it was a thing. I mean I do know about `NewT()` but I wasn\u0027t aware it was idiomatic for it to return `err`. In fact I thought the idiom was that  `NewT()` returns `*T`.",
					"date": "2017-12-10",
					"id": "dr0pmx8",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "epiris",
					"content": "Sure, if the [constructor for a composite literal](https://golang.org/doc/effective_go.html#composite_literals) of *T may fail resulting in the zero-value of nil than the function should return a second parameter explaining why the failure occurred. This is all over the [standard library](https://golang.org/pkg/net/http/#NewRequest).\n\nWhich really it\u0027s just a natural consequence of the fact [errors are values](https://blog.golang.org/errors-are-values) and not really specific to constructors. If something can fail it should return an error so it may be checked by the caller, correct constructors along with responsible callers make the occurrence of an NPE near-zero in my experience. Since this idiom is so common it\u0027s pretty much a compiler error to not check a value in a constructor, since:\n\n    t :\u003d NewT()\n    // multiple-value NewT() in single-value context\n\nIs more or less an immediate signal that I should:\n\n    t, err :\u003d NewT()\n    if err !\u003d nil { return err }\n\nThe language is so minimal there are very few ways for people to be creative and make \"new\" patterns for creating values objects. This is why I like Go.",
					"date": "2017-12-10",
					"id": "dr0s2ix",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Emacs24",
					"content": "This rather tells about your very limited experience.\n\nGo type system is nearly sufficient for network interaction processing indeed. But it is totally inadequate when the logic becomes more tricky. In this case you need generics, algebraic (sum) data types, non-nil types, etc.",
					"date": "2017-12-10",
					"id": "dr1ared",
					"isArchived": false,
					"isControversial": false,
					"score": -3
				},
				{
					"author": "epiris",
					"content": "Yep if my opinion is different than yours it must just be my expierience is limited. Such tacky and childish statements are only made by engineers young in their career or narcissists who haven’t gone anywhere in theirs. Which are you?\n\nAnyways, Does the language the Linux kernel was written in have generics and algebraic data types, non nil-able types and etc? I don’t know enough about computers yet to know for sure. Hurr. Durr.",
					"date": "2017-12-10",
					"id": "dr1btus",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Emacs24",
					"content": "\u0026gt;  Does the language the Linux kernel was written in have generics and algebraic data types, non nil-able types and etc?\n\nThis is really poor argument\n\n1. Code in OS kernels is (and it must be) quite simple. \n2. Linux is full of bugs and regressions. 12309 is one of the most annoying ones, don\u0027t know if they finally fixed it, but they couldn\u0027t do this for years (12309 appeared in 2.6.18).\n3. You can move 1000 tones of sand with a shovel and wooden cart, but would you if will have dump track and excavator?",
					"date": "2017-12-10",
					"id": "dr1cipi",
					"isArchived": false,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "epiris",
					"content": " 1. Code in OS kernels is quite simple.. the Linux kernel is simple...? Ugh. So what is complicated to you? \n 2. Bugs are a natural occurrence in software engineering, they happen in languages with or without the features you listed.\n 3. What?\n\nNo wonder you insulted my experience, when left to form real arguments you resort to calling kernel development simple and buggy with a side of sand castle theory. Really odd conversation here. I have no interest in continuing sorry, happy coding though.",
					"date": "2017-12-10",
					"id": "dr1cupw",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Paradiesstaub",
					"content": "A thing I miss:\n\n* In Go its not that hard to get a race condition when using goroutines, while it is almost impossible to get a race condition in Rust",
					"date": "2017-12-09",
					"id": "dr08gun",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "aboukirev",
					"content": "Writing concurrent code in Rust is at its infancy.  `tokio`attempted to cover underlying complexity by introducing all kinds of new complexity.  The fundamental issue is that Rust\u0027s borrow checker is having trouble reasoning about concurrent code. So one gets limited concurrency, no green threads, and, hence, no race conditions.",
					"date": "2017-12-09",
					"id": "dr0dc5f",
					"isArchived": false,
					"isControversial": true,
					"score": 3
				},
				{
					"author": "Paradiesstaub",
					"content": "You got that wrong. No race conditions is because of the type system (that\u0027s what we are talking about). Tokio needs some time to mature, but there is rayon today - which is easy to use and 100% save.",
					"date": "2017-12-09",
					"id": "dr0ejh1",
					"isArchived": false,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "aboukirev",
					"content": "Type system has nothing to do with race conditions, memory/reference management does. \n\nI do hope Rust gets concurrency right: safe and easy to use.",
					"date": "2017-12-09",
					"id": "dr0eof6",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "venju",
					"content": "Those aren’t mutually exclusive. Rust manages memory with a substructural type system (see: [Affine Types](https://en.m.wikipedia.org/wiki/Substructural_type_system#Affine_type_systems)).",
					"date": "2017-12-10",
					"id": "dr0zihw",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "\u0026gt; What about Go’s type system makes it unreliable?\n\nI\u0027d like sum types. \n\n",
					"date": "2017-12-10",
					"id": "dr14z2z",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Emacs24",
					"content": "I need them much more than generics :)",
					"date": "2017-12-10",
					"id": "dr1cjml",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "\u0026gt; Highly reliable code (Go\u0027s type system is just not good enough to achieve this)\n\nThere really aren\u0027t any great mainstream choices for this at the time. There\u0027s a lot of really interesting research (Idris, ATS, etc.) but none of it is ready for primetime yet. ",
					"date": "2017-12-10",
					"id": "dr150qz",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "sheepdog69",
					"content": "I agree mostly.  Rust for lowlevel and/or really fast code.  Go for most other things.\n\nWhen you say reliable code, I assume you are talking about safety critical code. Medical devices, industrial controls, etc.  Is that a correct assessment of your statement?\n\n",
					"date": "2017-12-09",
					"id": "dr0fj9x",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Jelterminator",
					"content": "Yes, but also code that should basically never crash or reach inconsistent state (like kernels or databases). ",
					"date": "2017-12-09",
					"id": "dr0hktv",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "aboukirev",
					"content": "While Go improves on C, Rust is an improvement over C++.  Both have their purpose.\n\nThe author is no entirely correct about D though as `dmd` (compiler) became open recently, i.e. no longer proprietary.  We\u0027ll see if that gives the language more exposure.",
					"date": "2017-12-09",
					"id": "dr03gl5",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Emacs24",
					"content": "Go rather improves on Python, not C – it would be an improvement if it was aimed for the same niche, but it is not and it just can\u0027t.",
					"date": "2017-12-09",
					"id": "dr09iz3",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "lobster_johnson",
					"content": "Despite your downvotes, this is accurate. C developers have for the most part not transitioned to Go, but Go has absorbed many Python and Ruby developers.",
					"date": "2017-12-09",
					"id": "dr0fdse",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Emacs24",
					"content": "People love to think they are writing low level, so these downvotes :)",
					"date": "2017-12-09",
					"id": "dr0gckn",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "tech_tuna",
					"content": "Python, Ruby, Java guy here (mostly). . . this is true for me, there are many use cases where I choose Go now.  However, I prefer Python for quick and dirty scripts, CI/CD tasks and anything small where I need to parse JSON or YAML.\n\nI cannot stand parsing JSON or YAML in statically typed languages unless it\u0027s for a big project/application.  I love scripting languages for quickly and painlessly transforming JSON/YAML into a hash/list/scalar mix.",
					"date": "2017-12-10",
					"id": "dr0r3w1",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "basiclaser",
					"content": "what about javascript though",
					"date": "2017-12-09",
					"id": "dr08bs7",
					"isArchived": false,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "sheepdog69",
					"content": "[WAT?](https://www.youtube.com/watch?v\u003dVTE3DM2Aygk)",
					"date": "2017-12-09",
					"id": "dr0flxu",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "Cvballa3g0",
					"content": "Great laugh",
					"date": "2017-12-10",
					"id": "dr0v7ki",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Emacs24",
					"content": "Javascript sucks, that is enough.",
					"date": "2017-12-09",
					"id": "dr0a07o",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "tech_tuna",
					"content": "You\u0027re being kind.",
					"date": "2017-12-10",
					"id": "dr0r4zo",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "ihsw",
					"content": "Can confirm, even small teams can turn a well-structured project into a big ball of mud with stunning efficiency.\n\nLarge JS projects (yes, even \"modern\" React and otherwise ES2017 projects) will always descend into chaos.\n\nTypeScript is an *okay* guarantor against this but it\u0027s generally opt-in, so that only papers over the issue.\n\nGo is not immune to similar classes of bugs that JS suffers from but you have to either be extremely inexperienced or trying really hard to shoot yourself in the foot.",
					"date": "2017-12-10",
					"id": "dr1cg4p",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "djslakor",
					"content": "I work on a very large JS project.  It has not \"descending into chaos\" in the slightest.  We\u0027ve been working on it for years.  ",
					"date": "2017-12-11",
					"id": "dr3pm3w",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ihsw",
					"content": "Does it have high unit test coverage?",
					"date": "2017-12-11",
					"id": "dr3psey",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "djslakor",
					"content": "No.  It has high e2e/integration test coverage though.\n\nTypescript catches far more issues than the tests.",
					"date": "2017-12-11",
					"id": "dr3rmy6",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ihsw",
					"content": "Ah, so no actual tests to ensure code quality remains high, and instead tests ensuring superficial functional requirements are met.\n\nTurnover must be high.",
					"date": "2017-12-11",
					"id": "dr3ugi4",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "djslakor",
					"content": "Meanwhile our company is making millions of dollars selling great software we all love working on.  Thanks for you opinion and erudite insights!  (turnover is almost 0).",
					"date": "2017-12-12",
					"id": "dr3zxxf",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "iends",
					"content": "Try TypeScript?",
					"date": "2017-12-09",
					"id": "dr0ezkb",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-12-09",
					"id": "dr0g9yx",
					"isArchived": false,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "[deleted]",
					"content": "Actually, I like TypeScript. It still has drawbacks, but it\u0027s much better than JavaScript. Recommended if you ever have to do something browser-side.",
					"date": "2017-12-10",
					"id": "dr1d5o4",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "A language in which you can write\n\n    if (somecondition) {\n        class.prototype.member \u003d anotherfunction;\n    }\n\ndoes not count as a good language. It also lacks in other departments, such as multi-threading.",
					"date": "2017-12-09",
					"id": "dr09rlu",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				}
			]
		},
		{
			"author": "the_neverlands",
			"date": "2017-07-24",
			"id": "6pawag",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "Talks playlist: https://www.youtube.com/playlist?list\u003dPL2ntRZ1ySWBdD9bru6IR-_WXUgJqvrtx9\n\nLightning talks playlist: https://www.youtube.com/playlist?list\u003dPL2ntRZ1ySWBfhRZj3BDOrKdHzoafHsKHU",
			"title": "Gophercon 2017 videos are online",
			"comments": [
				{
					"author": "dasopranos",
					"content": "[GopherCon 2017: Fatih Arslan - Writing a Go Tool to Parse and Modify Struct Tags](https://www.youtube.com/watch?v\u003dbUznDnBboCs\u0026amp;list\u003dPL2ntRZ1ySWBdD9bru6IR-_WXUgJqvrtx9\u0026amp;index\u003d5) -- watching now , seems like a really useful tool",
					"date": "2017-07-24",
					"id": "dknx37j",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "from_cork",
					"content": "Hmm. Looks pretty similar to when I wrote this, except more in depth: https://github.com/alistanis/st",
					"date": "2017-07-24",
					"id": "dko1hgz",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "Gom, nom, nom, nom, nom, nom, nom",
					"date": "2017-07-24",
					"id": "dknwkg1",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "help_computar",
					"content": "I agree. I\u0027m going to binge-watch these like they\u0027re Battlestar Galactica.",
					"date": "2017-07-25",
					"id": "dkobwzr",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "jarmojobbo",
					"content": "Went to last years, thought a couple of the talks were very good. Anything stand out in anyone\u0027s opinion for this year?",
					"date": "2017-07-24",
					"id": "dko7q5q",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mattgen88",
					"content": "Antipatterns was so packed I couldn\u0027t go in.",
					"date": "2017-07-25",
					"id": "dkoi2ne",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "mzupzup",
					"content": "I liked the Antipatterns talk as well.\n\nTalks of this kind tend to repeat themselves over time, but I think they are a great resource to remind one, in certain intervals, to re-check some assumptions and practices. :)",
					"date": "2017-07-25",
					"id": "dkori69",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dsies1",
					"content": "The one about moss k/v store was extremely high quality - loved it.\n\nGRPC talk was pretty good as well (if you haven\u0027t yet had the chance to work with it).",
					"date": "2017-07-25",
					"id": "dkotm1c",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "royge",
					"content": "Yeah!!! thanks!!!",
					"date": "2017-07-25",
					"id": "dkofxjm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "nstratos",
			"date": "2016-10-30",
			"id": "5a8ih1",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.8 will most likely include built-in support for graceful shutdowns of a net/http Server",
			"comments": [
				{
					"author": "gohacker",
					"content": "Yum.",
					"date": "2016-10-30",
					"id": "d9ekpoj",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "karnd01",
					"content": "I may be missing something, but it looks like hijacked connections are just removed from the tracked connections and if I\u0027m not mistaken WebSockets hijack the connection; so my question is, with this change how would one ensure graceful shutdown of connections including WebSockets?\n\nit appears that they would be interrupted after all idle connections are done.\n\nupdate: asked this question in issue itself hoping to get an answer https://github.com/golang/go/issues/4674#issuecomment-257549871",
					"date": "2016-11-01",
					"id": "d9gado8",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "andradei",
					"content": "Now I\u0027m curious about this too.",
					"date": "2016-11-01",
					"id": "d9gmanw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "lobster_johnson",
					"content": "Great. It\u0027s amazing that this issue has been in development since 2013.\n\n\u0026gt; Labels changed: added priority-later, go1.1maybe, packagechange, removed priority-triage, go1.1.\n\nಠ_ಠ",
					"date": "2016-10-30",
					"id": "d9eib4d",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "lespritd",
					"content": "To be fair, most people who wanted this functionality probably used https://github.com/braintree/manners",
					"date": "2016-10-31",
					"id": "d9eokpx",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "jeremiahs_bullfrog",
					"content": "Yup, I used that. Seemed kind of silly that it wasn\u0027t built into the std lib, but it also isn\u0027t that common.",
					"date": "2016-10-31",
					"id": "d9ewq6i",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dmikalova",
					"content": "There\u0027s plenty of other solutions too, [facebook/grace](https://github.com/facebookgo/grace).",
					"date": "2016-10-31",
					"id": "d9evr5g",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "gernest_",
					"content": "delicious! Once a gopher, just chill, relax the Go team got you covered.\n\n",
					"date": "2016-10-31",
					"id": "d9f7jy6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mcandre",
					"content": "Go 1.8 to follow symlinks when evaluating GOPATH???",
					"date": "2016-10-31",
					"id": "d9fabjg",
					"isArchived": true,
					"isControversial": false,
					"score": -7
				},
				{
					"author": "PaluMacil",
					"content": "\u0026gt; GOPATH\n\nOr maybe you\u0027ve made your point in enough threads to be done bringing it up in unrelated places... maybe...",
					"date": "2016-10-31",
					"id": "d9fh3id",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "downvotes_puffins",
					"content": "But no generics, eh?\n",
					"date": "2016-10-31",
					"id": "d9f6xzn",
					"isArchived": true,
					"isControversial": false,
					"score": -16
				}
			]
		},
		{
			"author": "dericofilho",
			"date": "2016-10-29",
			"id": "59y0vx",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Sub-ms GC pauses lands in Go 1.8",
			"comments": [
				{
					"author": "x7C3",
					"content": "That\u0027s some amazing work being done on the GC.\nI really need to start developing in Go someday. \n\nEDIT: Thanks for the feedback, everyone! :)",
					"date": "2016-10-29",
					"id": "d9cbryo",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "mcouturier",
					"content": "Start today: https://tour.golang.org/ ",
					"date": "2016-10-29",
					"id": "d9cm20y",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "weberc2",
					"content": "I did this and I was ready to start writing code immediately. I stumbled a bit with some errors as I learned about uninitialized maps and interfaces, but it wasn\u0027t like other languages where I couldn\u0027t even figure out how to wire up the build system or import a library.",
					"date": "2016-10-29",
					"id": "d9d59qi",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "orbat",
					"content": "Go is actually surprisingly easy to pick up. Do the tour, then start doing some hobby project that you don\u0027t even have to publish. Read the standard library\u0027s sources whenever you use stuff, it\u0027s (mostly) extremely readable and will give you an idea of how things are often done in Go",
					"date": "2016-10-29",
					"id": "d9coeja",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "cheetahkk",
					"content": "I started learning Go roughly a month ago and did so by reading the book \"The Go Programming Language by A. Donovan \u0026amp; B. Kernighan\". It has helped me tremendously throughout learning and on my recent projects, highly recommended!",
					"date": "2016-10-29",
					"id": "d9czd6w",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dlsniper",
					"content": "Before everyone gets too excited about this, please keep this in mind: \n\u0026gt; There are still known issues with the garbage collector interrupting individual goroutines for too long. We\u0027ve made improvements to this for Go 1.8 and will continue to improve it, but this change is specifically about the garbage collector interrupting the whole application.",
					"date": "2016-10-29",
					"id": "d9ck15w",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "Mittalmailbox",
					"content": "What is pause value for Java world",
					"date": "2016-10-29",
					"id": "d9ctkos",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dilap",
					"content": "Lots of discussion of the various Java collectors in this HN thread: https://news.ycombinator.com/item?id\u003d12821586",
					"date": "2016-10-29",
					"id": "d9czyqk",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "iends",
					"content": "Given there are a number of JVMs with different performance characteristics there is no easy answer to your question. ",
					"date": "2016-10-29",
					"id": "d9cwxb0",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "uses_crt",
					"content": "http://blog.cloudera.com/blog/2014/12/tuning-java-garbage-collection-for-hbase/",
					"date": "2016-10-30",
					"id": "d9ddtq0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "YEPHENAS",
					"content": "So Java pause times are measured in seconds and if you tune it you can get to 100 ms pauses.",
					"date": "2016-10-30",
					"id": "d9drtfp",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "FlyingPiranhas",
					"content": "Minecraft regularly pauses for \u0026gt; 10 seconds at a time. Granted, Minecraft is probably not the best example of well-written Java, but Go isn\u0027t even in the same ballpark as Java at this point.",
					"date": "2016-10-29",
					"id": "d9dcg33",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "SingingLemon",
					"content": "Something I\u0027ve been curious about for a while, what is the amount of garbage collected in that sub-millisecond pause? Naively, I would imagine that a longer GC pause would mean more memory can be freed up; though I\u0027m not very familiar with GC in general so I might be missing something obvious here. ",
					"date": "2016-10-29",
					"id": "d9cjc66",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "the_birds_and_bees",
					"content": "The important point to remember is that since go1.5 GC is concurrent, so it happens while you\u0027re program is executing as normal. There are however some points in the GC algorithm where we must \u0027stop the world\u0027 (i.e. your program) entirely to do some memory management. This change is about reducing the worst case for these stop the world times.",
					"date": "2016-10-29",
					"id": "d9cklbz",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "justinisrael",
					"content": "I\u0027m curious what the opinions are from game developers on this update to the GC? I\u0027m not a game developer but I have heard the views on garbage collection + game development when you have frame rates to consider and limited time in each iteration to do work, and how GC eats into that time. ",
					"date": "2016-10-29",
					"id": "d9cetuo",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "kl0nos",
					"content": "https://www.reddit.com/r/programming/comments/59z507/go_now_has_submillisecond_gc_pause_times/d9cj7l9/",
					"date": "2016-10-29",
					"id": "d9cm7li",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "mcouturier",
					"content": "After reading all the comments, they are more knowledgable than me but: Isn\u0027t game development a little like web page development in the sense that a non-essential visual feature or carelessness can kill your performance way much more than optimizing microseconds GC?\nEDIT: by non-essential I mean unnoticeable or don\u0027t add anything to the table",
					"date": "2016-10-29",
					"id": "d9cvkau",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Sythe2o0",
					"content": "Depends what level of game development. For high level work with game building, level design, etc, yes you can do very dumb things that break your performance, but if you\u0027re building a game / graphics engine for later games to be built on, that\u0027s where these GC pauses are a bigger concern.",
					"date": "2016-10-29",
					"id": "d9cytp6",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mcouturier",
					"content": "Makes sense thanks!",
					"date": "2016-10-29",
					"id": "d9d2p8k",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "funny_falcon",
					"content": "Suppose, your application is made of  microservices. Request goes through several (for example, ten) processes before response is sent to client. Every process may freeze in STW pause for 10 millisecond. So, response to client may freeze for 100ms. Which is already remarkable.",
					"date": "2016-10-29",
					"id": "d9d1xh4",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "tmornini",
					"content": "10ms is 100x as long as the 1.8 GC pauses...",
					"date": "2016-10-29",
					"id": "d9d3zp2",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "funny_falcon",
					"content": "You are right. I just described why it is important to have low GC pause (like Go 1.8 will have) even if your application is not video game.",
					"date": "2016-10-31",
					"id": "d9f4ra9",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "FUZxxl",
					"content": "If your request goes through that many processes and latency is important, surely a micro service design might not be the most suitable.",
					"date": "2016-10-30",
					"id": "d9dsr7k",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "funny_falcon",
					"content": "Given all \"microservices\" are close to each other in network topology, network latency is neglible compared to GC STW.\n\nI work in a firm, where microservices are implemented in C/C++, so no GC pause at all. And most servers are in one datacenter, so no remarkable network latency observed.\n\nIn fact, GC STW were one of reasons I didn\u0027t convinced my team to switch to Go several years ago (at the time of Go 1.1).\n\nThere were other reasons also (I spent too much time to build prototype, cause I was perfectionist, and I tried to gain as much performance as it were possible with Go 1.1 (so cause of it, prototype were too complex)).\n\nIt is really hard to compete against C :-(",
					"date": "2016-10-31",
					"id": "d9f4v70",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "FUZxxl",
					"content": "\u0026gt; It is really hard to compete against C :-(\n\nThere is a reason I moderate /r/C_Programming.",
					"date": "2016-10-31",
					"id": "d9f4x50",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Thaxll",
					"content": "The main problem is the lack of good libraries, pretty much everything is written for c++.",
					"date": "2016-10-29",
					"id": "d9d512g",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "gernest_",
			"date": "2016-11-04",
			"id": "5b2j38",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "I checked /r/golang this morning to see what is up to find [this](https://redd.it/5ayvws) post on top. The post is good, and interesting because the project that the author links to is mine.\n\nAfter the WTF moment. I calmed down and just realized what few innocent words can do. They broke my heart.\n\nI thought the point of open sourcing project on github is to make the project even more better, by accepting criticism the fix the issues and improve. Now it looks like I made a mistake sharing what I believe was worthy sharing. \n\nI also thought using vim-go, with all the linting and all those tool to make the code idiomatic was enough, now it looks it isn\u0027t.\n\nI also thought extensive testing, and documentation will make the code idiomatic, it looks like I was wrong.\n\nI thought reading the standard library, and adopt the good gems I uncovered there will make my code idiomatic, it looks like I was wrong too.\n\nMy question is , what is idiomatic go?\n\nI\u0027m confused, and definitely heart broken.\n\n**UPDATE**\n\nThanks for the constructive comments and advice.\n\nI realized I over reacted.  And it was someone\u0027s  opinion . Which doesn\u0027t represent the Golang community. \n\n I\u0027m now looking forward to writing more Go code( hopefully more idiomatic this time) . \n",
			"title": "What is idiomatic Go?",
			"comments": [
				{
					"author": "npyde",
					"content": "Don’t be heartbroken. If thousands like your package, you are obviously doing something useful.\n\nFor non-idiomatic code: I poked around, couldn’t find anything that caught my eye as terrible. Something I personally would refactor:\n\n1. I would create sub-packages, e.g. instead of calling utron.NewModel() or utron.NewModelWithConfig() I would put the model into its own package (sub-package of utron) and call it with models.New() and models.NewWithConfig().\n\n2. I don’t see a reason why App.Set should accept an interface. I could pass anything into it but internally it only accepts certain types and throws anything else away silently. Yes, the doc comment makes it clear what it accepts but it doesn’t prevent the programmer from making a mistake. SetModel, SetController etc. is more meaningful and the compiler can catch errors early.\n\nI think you should ask the author to point out what he thinks is your egregious non-idiomatic Go code.",
					"date": "2016-11-04",
					"id": "d9la57e",
					"isArchived": true,
					"isControversial": false,
					"score": 36
				},
				{
					"author": "gernest_",
					"content": "Thanks for the advice.\n\nThere is a lot of areas for improvement. Including the ones you pointed out.",
					"date": "2016-11-04",
					"id": "d9laavx",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "sno6",
					"content": "Definitely don\u0027t beat your self up over the comments, I read the original post and had a similar reaction to you. To me, idiomatic Go is cut into two at least two sections, firstly the style/format of your code, which is handled by tools such as gofmt, govet, golint etc. But also, the structure of your project, and understanding both the power of the standard library (what it can do for you, and how to use its powerful features such as interfaces) as well as not trying to re-invent the wheel, but to replace the wheel with something stronger, which still cooperates with the car around it (middleware vs a full web framework that replaces routing etc)",
					"date": "2016-11-04",
					"id": "d9lap4l",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "FIuffyRabbit",
					"content": "\u0026gt; If thousands like your package, you are obviously doing something useful.\n\nThat\u0027s arguable. Iris has thousands of stars but nearly no one uses it (according to imports and vendors) and the author steals code. \n\nI\u0027m not sure if the same could be said for utron but it doesn\u0027t look like bad code. ",
					"date": "2016-11-04",
					"id": "d9loakx",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ofpiyush",
					"content": "I\u0027m not qualified enough to say what idiomatic go is but I love the fact that you overcame the fear and pain to share your feelings and ask for help despite the negativity thrown your way.\n\nWe often ignore the fact that the programmer on the other end is a person with feelings, good on you to speak up and ask for help.\nAnd\nIf you\u0027re not already, you will definitely become a good programmer with this attitude. Cheers.",
					"date": "2016-11-04",
					"id": "d9ldmft",
					"isArchived": true,
					"isControversial": false,
					"score": 66
				},
				{
					"author": "1s44c",
					"content": "This is the best comment in this tread.",
					"date": "2016-11-04",
					"id": "d9liw5g",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "cmmn_nighthawk",
					"content": "I\u0027m not going to comment on the code.  Looks like other people have done a nice job of that already :)\n\nTo me, the take away is--with more visibility comes higher levels of criticism.  That is, this is the price you have to pay for having 1500+ Github stars.\n\nDHH wrote Rails, which has deliveres $MM of value to companies, allowed quicker prototyping, and provided an easier onramp for 1,000s of new developers.  People *love* to tell him how slow and shitty it is--every day for over a decade.  Taylor Swift writes music that makes people happy, and thousands of people just fucking hate her.  Last example, this is one of my favorite tweets: https://twitter.com/jashkenas/status/684399026939260929.  Literally hate mail, for putting so many hours into open source.\n\nIt will always be the loud minority vs the silent majority.  I\u0027d try not to be heartbroken.  And if that doesn\u0027t work, I wouldn\u0027t share you code.  This problem isn\u0027t going away and only gets worse with scale.\n\nGood luck out there!",
					"date": "2016-11-04",
					"id": "d9lk8sp",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "Arcaire",
					"content": "You know when you say a word so much that you suddenly don\u0027t recognise it anymore? That\u0027s me and \"idiomatic\" with how much it\u0027s slung around every Go community.",
					"date": "2016-11-04",
					"id": "d9lcgkh",
					"isArchived": true,
					"isControversial": false,
					"score": 31
				},
				{
					"author": "chewxy",
					"content": "Semantic satiation",
					"date": "2016-11-05",
					"id": "d9mmp99",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "I wouldn\u0027t sweat it too much. That post represents the opinion of its author only, and I have no reason to believe he is any more an authority on Go and its idioms than you or I.",
					"date": "2016-11-04",
					"id": "d9lhcvv",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "knotdjb",
					"content": "Witch hunts are a motherfucker.",
					"date": "2016-11-04",
					"id": "d9l9x6n",
					"isArchived": true,
					"isControversial": false,
					"score": 29
				},
				{
					"author": "schumacherfm",
					"content": "IMHO unidiomatic code is:\n\nhttps://github.com/gernest/utron/blob/master/config.go#L66\nJSON, TOML, YAML, HCL: Too many imported packages where maybe only one gets used. Let the developer register its decoder by fulfilling an interface or outsource those case statements into its own separate packages.\n\nhttps://github.com/gernest/utron/blob/master/config.go#L106\nNo need to use reflect here. There are some packages who do the same for the ENV as for a file. Same pattern as above but now include maybe an order how multiple decoders gets processed to overwrite variables.\n\nhttps://github.com/gernest/utron/blob/master/context.go#L133\nhttps://github.com/gernest/utron/blob/master/utron.go#L185\nEmpty interface in argument only for encoding/decoding\n\nhttps://github.com/gernest/utron/blob/master/models.go#L9\nThe developer can import the SQL driver ... just let it panic if s/he forgets it.\n\nhttps://github.com/gernest/utron/blob/master/utron.go#L12\nI\u0027m not a fan of package globals. The developer can instantiate itself the app.\n\nhttps://github.com/gernest/utron/blob/master/view.go#L21\nShould be an interface to use any rendering engine but use html/template as the default one if none has been set during init.\n\nSo far my advice. Take that with a grain of salt ....  I can also be horribly wrong about my view of idiomatic Go code.\n\n\n",
					"date": "2016-11-04",
					"id": "d9layx9",
					"isArchived": true,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "Robonia",
					"content": "\u0026gt; https://github.com/gernest/utron/blob/master/utron.go#L185 Empty interface in argument only for encoding/decoding\n\nSo in your opinion, should there be explicit setters for for each field of the App struct? \n\n\n",
					"date": "2016-11-04",
					"id": "d9lkeqy",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "JokerSp3",
					"content": "I would say that is more idiomatic than a \u0027magical set all function\u0027",
					"date": "2016-11-04",
					"id": "d9lnvqu",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Robonia",
					"content": "I can see that, just seems a bit verbose to have an individual setter for each. I really enjoys Swift\u0027s method for handling setters known as [Property Observers](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-ID262). ",
					"date": "2016-11-04",
					"id": "d9lpb8p",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "JokerSp3",
					"content": "I think in this case its the \u0027more verbose sometimes makes code more clear\u0027 type of situation.",
					"date": "2016-11-04",
					"id": "d9lpe34",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "andrefsp",
					"content": "HI there. Good comment. \n\nI wanted to ask why is it you are not a fun of package globals?  \n\nThat is a pattern I use for dependencies that I want to be able to mock easily, or objects where I want to have control over concurrency. \n\nDatabases connections and service clients are two of those examples. \n\nDatabase connection pools is a good example of a single object that keeps track of all the available connections and delegates to individual requesting go routines.\n\nService clients as well. For testing purposes you might want to mock them easily to avoid real calls to a certain service.  \n\nI\u0027m aware using dependency injection facilitates much more flexible testing but package level objects with an initializer we can achieve the same. \n\nI\u0027m just trying to understand why is it not idiomatic.  \n\nThanks in advance :) ",
					"date": "2016-11-05",
					"id": "d9mqo7u",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "YEPHENAS",
					"content": " * Go Code Review Comments: https://github.com/golang/go/wiki/CodeReviewComments\n * Go proverbs: https://go-proverbs.github.io\n * Effective Go: https://golang.org/doc/effective_go.html\n",
					"date": "2016-11-04",
					"id": "d9lcif9",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "[deleted]",
					"content": "I\u0027m sorry that you feel this way. I think that I would, too.\n\nI think the author was wanting to find an option that\u0027s a bit more \"go\" (which I can\u0027t evaluate and tell you if that\u0027s the case or not). When you are looking at libraries as just libraries and don\u0027t know the authors, it\u0027s really easy to be critical. If I\u0027m rolling through a list of libraries I need, I throw a lot of them out after a few seconds of looking them over. I guess it\u0027s like opening up a tool box and not being able to clearly see the tools. You still want the best one, there\u0027s a lot of them, and you don\u0027t have the time to actually figure out what you want.\n\nMy most-starred project has a tenth of the stars and probably has a lot more that you could complain about. Definitely keep developing it and working on it, if that\u0027s what you want to do. I hope more people will continue with you to improve it, but there\u0027s a reason it\u0027s as starred as it is. I, and I hope most, understand that you did this work for free, were open enough to share it, and no one can ask for more.",
					"date": "2016-11-04",
					"id": "d9lj5db",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "egonelbre",
					"content": "Yes, it may not always be nice when somebody bashes your work. But I\u0027ve found that when someone completely destroys my arguments or points out significant flaws -- I end up learning much more than just building things casually... so in the end I\u0027ve come to enjoy the process, there\u0027s always something you can learn from those situations.\n\nNow to the subject matter: whether something is idiomatic is definitely less important than whether it\u0027s valuable. If people get good value from it, great, you\u0027ve done something more useful than many other projects. For example martini project was unidiomatic, something that the author realized himself, but people did build cool stuff with it nevertheless.\n\nNow, whether projects are idiomatic/unidiomatic are not necessarily a good/bad thing. For example I wouldn\u0027t want to write \"idiomatic\" code in Java, because the common idioms are often way too verbose. I would also  use more inner classes and larger files; than is recommended. \"Unidiomatic\" means it\u0027s more difficult to read for usual users...\n\nThere\u0027s also the other aspect, whether the \"idiomatic style\" results in good architecture and code. From personal experience I would say that the Go \"idiomatic style\" definitely has this property. It heavily leans into readable and understandable code -- but not necessarily concision.\n\nI\u0027ll try to condense \"idiomatic Go\" to a few ideas (of course people may agree/disagree with my list):\n\n1. No stutter.\n2. No ambiguous words. (`models` as the top-level package says nothing useful)\n3. Clear value.\n4. Concrete over abstract.\n5. Depend on interfaces, return structs.\n6. Make hard decisions. Don\u0027t have 100 ways of doing something.\n7. gofmt, golint.\n8. And more https://go-proverbs.github.io/\n\nFor further reading on structuring applications:\n\n* https://codegangsta.io/blog/2014/05/19/my-thoughts-on-martini/\n* https://github.com/marcusolsson/goddd (and the associated blog posts)\n* https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1#.uec37ltci\n* https://forum.golangbridge.org/t/comparing-the-structure-of-web-applications/1198\n* https://groups.google.com/forum/#!msg/golang-nuts/1z5kL5FCDdU/--Iox7PSAwAJ\n\nUnfortunately a full review of `utron` would take too much time, so I\u0027m going to give the general impression I got. The top-level looks overly generic -- it is unclear what is the win over other projects (points 3, 4). The example application uses generic top-level packages (points 2, 3, 4). There is only one example, and that itself is trivial -- show also business logic (e.g. https://revel.github.io/samples/booking.html, I\u0027m not saying I like the code, but I do like the example).",
					"date": "2016-11-05",
					"id": "d9n07fk",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ballagarba",
					"content": "Now you\u0027ve made me sad too :\u0027( Since the guy in the other post didn\u0027t even mention *why* he thought it was un-idiomatic, it\u0027s probably just jealousy.\n\nThis is *my* take on what people generally mean when they think of idiomatic Go:\n\n- Use gofmt, no exceptions.\n- Avoid using `interface{}` and reflection.\n- Stick to what\u0027s available in the standard library as much as possible.\n- Create small interfaces, like `io.Writer` and `io.Reader`. They\u0027re basically the best thing since sliced bread.\n\nBut perhaps more important. If you ask 10 different people what idiomatic Go is, you\u0027ll get 10 different answers. So don\u0027t beat yourself up over it!",
					"date": "2016-11-04",
					"id": "d9lemim",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Robonia",
					"content": "Why avoid reflection? I\u0027m new to the language, just curious.",
					"date": "2016-11-04",
					"id": "d9lhc3x",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "PsyWolf",
					"content": "Check out https://go-proverbs.github.io and the video linked on that page.  Specifically these 2\n\n* Clear is better than clever.\n* Reflection is never clear.\n\n",
					"date": "2016-11-04",
					"id": "d9lt51s",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "therocketofpoop",
					"content": "Reflection does have performance and readability implications, but it is a tool to be used when necessary. One does not use a screwdriver for nails or a hammer for screws.\n\nNow, as advice, I will tell you to disregard those who say NEVER EVER do x with a language. Those who say that have limited experience applying the language in limited use cases. There are situations where there is no choice but to do x. Many standard library packages do use reflection.",
					"date": "2016-11-05",
					"id": "d9m9gnb",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "piva00",
					"content": "Reflection is expensive and hides details. I\u0027m not currently working with Go and had limited experience so far (some 6 months only) with it but that\u0027s a trueism for any kind of language: try not to hide too much behind \"magic\", and reflection is a kind of it.\n\nAlso using too much reflection opens your code to bugs that could/should have been caught at compile-time but ends up exploding at runtime.\n\nKeep it simple.",
					"date": "2016-11-04",
					"id": "d9lhyr9",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "quiI",
					"content": "You\u0027re giving up compiler safety",
					"date": "2016-11-04",
					"id": "d9llusq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rco8786",
					"content": "Part of sharing your work publicly is implicitly opening it up to criticism. This is true of anything you decide to share with the world whether it\u0027s a blog, a tweet, art, a company, code, etc. \n\nEveryone has their own opinion and there\u0027s no way you can make everyone\u0027s opinion of your work positive. Don\u0027t worry about it. \n\nHey, if that person hadn\u0027t linked to your project I never would have even heard about it!",
					"date": "2016-11-04",
					"id": "d9lcn1e",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-11-04",
					"id": "d9levzc",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rco8786",
					"content": "\u0026gt; there constructive criticism and slandering.\n\nYep, and publicly sharing work opens yourself up to both. Other thread guy has an opinion and shared it. The fact that the opinion wasn\u0027t a very nice one doesn\u0027t matter.",
					"date": "2016-11-04",
					"id": "d9luea4",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "1s44c",
					"content": "\u0027Idiomatic\u0027 means \u0027what I would do\u0027 with the implication that everything else is wrong. It\u0027s a corrosive concept that has damaged the ruby world. Why do ruby programmers use \u0027do ... end\u0027 loops when ruby has perfectly good curly braces? Because it\u0027s idiomatic and for no other reason.\n\nGolang doesn\u0027t need idiot-matic programming. No language needs idiot-matic programming.\n",
					"date": "2016-11-04",
					"id": "d9lipj4",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "natefinch",
					"content": "Obviously, over 1600 people thought your project was interesting enough to star it.  That\u0027s pretty impressive.\n\nI think it\u0027s unfortunate that the other thread used your project as an example of a project that doesn\u0027t deserve the stars it gets.  The author of that thread shouldn\u0027t have named names and just talked more generally about projects that seem to get more attention than he personally thinks they deserve.\n\nStars are stars.  Unless someone is using a bot to create github accounts and fake the stars, you deserve whatever you have.  \n\nDon\u0027t let one person\u0027s opinion get you down.... you\u0027ve obviously put a ton of work into Utron and that deserves a lot of respect.",
					"date": "2016-11-04",
					"id": "d9li88a",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "goomba_gibbon",
					"content": "That\u0027s what I don\u0027t understand. The point was a general one, an interesting one even. OP didn\u0027t need to shame a specific repo to illustrate the point.",
					"date": "2016-11-04",
					"id": "d9lnjp1",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "goomba_gibbon",
					"content": "I thought the standard library itself contained various different styles. I\u0027m sure I remember reading this but can\u0027t remember where.\n\nFor the record, I think idiomatic code is good if we are talking about keeping a consistent style. What\u0027s more important is writing stuff and putting it out there. Keep it up!",
					"date": "2016-11-04",
					"id": "d9lo5zt",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "epiris",
					"content": " The idiomatic argument is just an excuse for mad people to be mad. For every person who is busy being \"hurt\" about what you are doing, many more normal people are appreciating the effort of someone who shares a common interest with them. I don\u0027t care what your Go code looks like, I will read it. I will read it within the same time give or take as some uptight mad dudes idiomatic code. Go doesn\u0027t let you send me into a black hole by design.\n\nMy most starred repo was something I made two years ago to play with Go generate, it\u0027s full of giant switch statements and is the least idiomatic thing ever made. You wanna know what I say about that? Lollllllllllllll\n\nDon\u0027t care. Code, have fun, get better, share, learn. Don\u0027t take criticism to heart, take it to the bank, get better and just keep accumulating all the experience.\n\nYour project is awesome and you should keep working at it. Haters gonna hate, man.",
					"date": "2016-11-05",
					"id": "d9mj7n8",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "cep221",
					"content": "My personal view is idiomatic code for any language is code in the style of its standard library.",
					"date": "2016-11-04",
					"id": "d9lnioh",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mrmylanman",
					"content": "To be honest I read the other post and thought it was very off base. It sounded like most of the issues he had with it were scenarios he filled in himself (like how he assumed you went to shows and solicited github stars? I don\u0027t know if you do that. I also wouldn\u0027t care if you did).\n\nSo I wouldn\u0027t say much of what he was complaining about anything technical in nature. One of his original points was that your project was a month old which wasn\u0027t even true (he was mistaken). So I think your project was just unfortunate enough to be the example he cited.\n\nSounds like your code is in decent shape and your heart is in the right place, so keep soldiering on!",
					"date": "2016-11-05",
					"id": "d9mew66",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "Would it be accepted as implementation code in the standard library by the Go maintainers?",
					"date": "2016-11-05",
					"id": "d9mllgj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "GoTheFuckToBed",
					"content": "I did not read. But maybe add \"what it is not\" to the readme, so people don\u0027t confuse it for something it is not.",
					"date": "2016-11-04",
					"id": "d9ld4te",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "The best way to find out is to ask /u/m3wm3wm3wm.",
					"date": "2016-11-04",
					"id": "d9li3de",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "I don\u0027t think it\u0027s about the code being unidiomatic. It\u0027s about envy. Everybody nowadays has their own Go framework. And, of course, everybody is sure theirs is the most idiomatic, truly conventional, and the best of the best. But not everybody\u0027s framework has GH ~~karma~~ stars.\nI think, somewhere deep deep in subconsciousness I am envy, too. At least I was for sure.\n\nP.S.: Let\u0027s look at the number of downvotes I\u0027d get. All of those are the envy people I\u0027m talking about.",
					"date": "2016-11-04",
					"id": "d9lbslm",
					"isArchived": true,
					"isControversial": true,
					"score": -6
				},
				{
					"author": "1s44c",
					"content": "\u0026gt; P.S.: Let\u0027s look at the number of downvotes I\u0027d get. All of those are the envy people I\u0027m talking about.\n\nI was going to upvote you but now I feel like you are trying to reverse psychology me into it.",
					"date": "2016-11-04",
					"id": "d9lj0ns",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "thesilentwitness",
					"content": "My only suggestion would be to stop using Gorm, it\u0027s not very good, to say the least: https://github.com/vattle/sqlboiler#benchmarks -- literally any other ORM is a better fit.",
					"date": "2016-11-05",
					"id": "d9ml8ze",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "upboatact",
					"content": "Ahh drama!\n\nJust what I needed, have an upboat",
					"date": "2016-11-04",
					"id": "d9la5hb",
					"isArchived": true,
					"isControversial": false,
					"score": -6
				}
			]
		},
		{
			"author": "[deleted]",
			"date": "2017-11-10",
			"id": "7c2uf1",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Eight Years of Go",
			"comments": [
				{
					"author": "[deleted]",
					"content": "Congrats to everybody! 🎂🎂🎉🎉🎁🎁\n\nI see Go on the track to became a mainstream language soon. How do you see Go in the next 8 years?\n\nGo is a such awesome language! Minimalistic, a huge advance on getting things done ™ compared to classic languages like Java.\n\nThanks for all the contributors!",
					"date": "2017-11-10",
					"id": "dpmt5dw",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "Ainar-G",
					"content": "IMO, it\u0027s already a mainstream language. At least I can say that the majority of new back-end projects in my company are started in Go, and there is no stopping this trend.",
					"date": "2017-11-10",
					"id": "dpmxx27",
					"isArchived": false,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "[deleted]",
					"content": "Oh yeah, Go is definitely mainstream now. Everyone knows Docker and Kubernetes and how successful those tools are and that they’re made with Go. The fact that it’s compiled, statically typed, and garbage collected make it appealing for companies that have critical pieces of functionally that need to be fast and generate small executables is really attractive. I can’t wait to see what’s in store for Go 2. ",
					"date": "2017-11-10",
					"id": "dpn7rvo",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "itsmontoya",
					"content": "Our entire backend is in Go at Meteora. Additionally, I\u0027ve led projects for at least five companies where we utilized Go as our primary language.",
					"date": "2017-11-10",
					"id": "dpn6l71",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "nomadProgrammer",
					"content": "I was talking with a seasoned developer at my company and he told me that Java used to be what go was.  At the beginning it was merely a language with some oo features then they began putting more and more crap on it. And that he hopes golang doesn\u0027t turn in another java. ",
					"date": "2017-11-11",
					"id": "dpnre9h",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "cbll",
					"content": "I\u0027m new to Go and made a few small 50 line programs.. coming from Java, I definitely grunted holy crap seeing how fast it compiled and produced an output.",
					"date": "2017-11-11",
					"id": "dpo373f",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nomadProgrammer",
					"content": "Try comparing it with Scala which is even slower.",
					"date": "2017-11-11",
					"id": "dpoa7rb",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thramp",
					"content": "In fairness, the Scala compiler is doing *a lot* more than Go\u0027s or Java\u0027s.\n\n(It\u0027s not to say that there isn\u0027t room for improvement—there is!—just different problem sets.)",
					"date": "2017-11-11",
					"id": "dpofmiu",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "nomadProgrammer",
					"content": "Sure it is. :)",
					"date": "2017-11-11",
					"id": "dpoh6vr",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thramp",
					"content": "Oh, I know you\u0027re being flippant, but there\u0027s lot of cool stuff here, so I\u0027m gonna take it seriously 🙂\n\n*[breaths in]*\n\n The Scala compiler has 25 phases (https://typelevel.org/scala/docs/phases.html), which is a lot! I\u0027ve heard people (admiringly, sometimes with trepidation...) describe the Scala compiler as one of the most complex compilers in production today, and I\u0027m inclined to believe them! A big chunk of Scala\u0027a complexity comes from the [implicit machinery](https://stackoverflow.com/questions/5598085/where-does-scala-look-for-implicits), which powers all sorts of compelling features like higher-kinded types and typeclasses. The reason this complexity exists is that Scala has fundamentally different goals than Go—how do you create an ML-derived language that runs on the JVM?\n\n(There\u0027s more to say, but I\u0027m on mobile right now...)",
					"date": "2017-11-11",
					"id": "dpolb5v",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Zy14rk",
					"content": "To see that in only 8 small years, Go is breathing C# in the neck is fantastic. The growth rate is astounding. And there is a reason for it, besides being the best thing since sliced bread.\n\nCongrats, and here\u0027s for the future! 🍻",
					"date": "2017-11-10",
					"id": "dpmulei",
					"isArchived": false,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "hmkey",
					"content": "[]bread ",
					"date": "2017-11-11",
					"id": "dpny94k",
					"isArchived": false,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-11-11",
					"id": "dpn9eil",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "chipaca",
					"content": "The classifier might be busted: https://trends.google.com/trends/explore?date\u003d2009-10-01%202017-10-30\u0026amp;q\u003dgolang\u0026amp;hl\u003den-US",
					"date": "2017-11-11",
					"id": "dpna0pf",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "downvotes_puffins",
					"content": "Eight years of go, and still no generics. ",
					"date": "2017-11-10",
					"id": "dpmu0p0",
					"isArchived": false,
					"isControversial": true,
					"score": -9
				},
				{
					"author": "xwnatnai",
					"content": "If you hate the lack of generics so much, you can just work at a java shop. There are probably more of those than there are go shops. There’s a reason why so many Developers use go though, and get by just fine with simple, invariant, explicitly typed slices and maps.",
					"date": "2017-11-11",
					"id": "dpnz4og",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "MoneyWorthington",
					"content": "Yeah, and?",
					"date": "2017-11-10",
					"id": "dpmysk6",
					"isArchived": false,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "[deleted]",
					"content": "lol no generics",
					"date": "2017-11-10",
					"id": "dpn1zgc",
					"isArchived": false,
					"isControversial": true,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "Demonstrates how 8 years on and programmers have built fast, scalable, and type safe applications without generics. What’s the need for them if problems can be solved without the overhead they bring?",
					"date": "2017-11-10",
					"id": "dpn7vek",
					"isArchived": false,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "jeremyjh",
					"content": "People had been developing fast, scalable and type safe software for more than 40 years before Go existed. Whats the need for Go if problems can be solved without it?",
					"date": "2017-11-11",
					"id": "dpnvnau",
					"isArchived": false,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "kaeshiwaza",
					"content": "It\u0027s completely different because software developed before Go could not be made in Go but generics lang could be used when Go was born. People who use Go really choose it and not because it has something that the other have not.\n\nIt\u0027s like when you decide now to use a bike instead of a car, it\u0027s not like when there was no cars.",
					"date": "2017-11-11",
					"id": "dpo17gc",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "What does rewording my comment, and making it about Go itself, and not generics, help you to prove?",
					"date": "2017-11-11",
					"id": "dpnwr1k",
					"isArchived": false,
					"isControversial": false,
					"score": -7
				},
				{
					"author": "jeremyjh",
					"content": "That just because something *works* does not mean it is ideal, or finished. Yes, people can develop applications in Go without generics. They can also develop them in assembler. Neither of those facts tells us anything about how much generics might improve Go.",
					"date": "2017-11-11",
					"id": "dpnwvs7",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "[deleted]",
					"content": "That\u0027s true, idk why you didn\u0027t just say that, because that I would reply with that\u0027s why Russ Cox and the Go team are requesting experience reports so they can collect actual experiences of how much generics might improve Go via real-world problems. Until then, the people that like to use Go can solve their problems adequately without generics.",
					"date": "2017-11-11",
					"id": "dpnx4mv",
					"isArchived": false,
					"isControversial": false,
					"score": -4
				},
				{
					"author": "jeremyjh",
					"content": "\u0026gt; experience reports\n\nWhat are more experience reports needed for when we have 40 years of experience with generics in programming languages to draw on?\n\nThey aren\u0027t implementing generics, and are trying to stifle discussion of it with this useless decision-making process theater. Google is going to do what is important to them, and nothing more. Why so many people outside of Google assume that their motives, incentives and requirements are well-aligned is a complete mystery to me.",
					"date": "2017-11-11",
					"id": "dpnyopt",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "\u0026gt; Demonstrates how 8 years on and programmers have built fast, scalable, and type safe applications without generics. \n\nWhat do you mean without generics? Go already has two generic types that are used very widely. And the demand for more is pretty evident, most recently in the `sync.Map` type for example.\n",
					"date": "2017-11-11",
					"id": "dpoilec",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "postman_",
					"content": "\u0026gt; type-safe\n\n\u0026gt; go\n\nlmaooooooooou",
					"date": "2017-11-11",
					"id": "dpnvskn",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "RevMen",
					"content": "I\u0027ve never once missed Generics in 3 years of Go enthusiasm.\n\nI wonder if the people making this complaint come from certain languages where there are common paradigms where generics are useful.",
					"date": "2017-11-11",
					"id": "dpna9ok",
					"isArchived": false,
					"isControversial": true,
					"score": 4
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "\u0026gt; I wonder if the people making this complaint come from certain languages where there are common paradigms where generics are useful.\n\nYes, they come from certain langauges, those languages are typically known as _statically typed_.\n",
					"date": "2017-11-11",
					"id": "dpoiqrk",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				}
			]
		},
		{
			"author": "dgryski",
			"date": "2018-03-18",
			"id": "85d699",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "antirez: I followed the initial parts of the golang online tutorial, and probably it’s one of the best languages for a newbie to approach programming. Low level enough to understand what’s really going on, high level enough to start without fighting with machine-level concepts.",
			"comments": [
				{
					"author": "chewxy",
					"content": "I\u0027d also like to add: and provides an easy path to going low level (Until you hit the part where you have to reason with a No-Guarantees-in-LangSpec GC). ",
					"date": "2018-03-18",
					"id": "dvws835",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "mingp",
					"content": "Just curious, what are you doing that requires more specific GC guarantees?",
					"date": "2018-03-18",
					"id": "dvww75e",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "chewxy",
					"content": "nah, what I meant is that there is nothing about GC in the language spec that is guaranteed. The GC might change underneath from version to version. \n\nThere are some performance related dark arts that will make Voldemort cry that relate to GC being of a certain kind. \n\nTake for example, if you want to write a memory allocator in Go - it\u0027s OK to do `make([]byte, size)` and then cast to whatever you need using `unsafe`.  But what is unspecified is collection and sweeping. Having a guarantee about when something is swept is definitely helpful. \n\nHowever, I DO understand why it\u0027s not guaranteed in the language spec. I like the view of the Go authors that memory is something that the programmer doesn\u0027t have to care about. It just makes writing libraries a bit of a cat and mouse game everytime there is a new version of Go",
					"date": "2018-03-19",
					"id": "dvx3saw",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "mingp",
					"content": "Interesting. What languages / runtimes are you thinking of that offer these guarantees?",
					"date": "2018-03-19",
					"id": "dvx4g5r",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "chewxy",
					"content": "None really, in GC\u0027d languages, you\u0027ll always be chasing after GC implementation if you do something that disagrees with the major paradigm of the language. \n\nThe flip side is no GC which makes memory management a pain in the ass (seealso : C with random segfaults, or Rust with borrow checker which now is much better). \n\nI\u0027d rather have GC.",
					"date": "2018-03-19",
					"id": "dvxj4wv",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "dvirsky",
					"content": "I\u0027ve been bugging antirez to learn Go for the past 2 years or so, glad to see he liked it :) ",
					"date": "2018-03-19",
					"id": "dvxmhyu",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "Don\u0027t show this to /r/programming...they\u0027ll complain about not having generics, polymorphic parametrization (lol), and google ",
					"date": "2018-03-19",
					"id": "dvx6qhd",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "tywkeene",
					"content": "Why do they have against Google?\n\nThere\u0027s a wealth of knowledge there, especially in high performance code and parallel computing. I\u0027m not saying I\u0027d ever work for Google, but I can\u0027t deny they have some serious brain power.",
					"date": "2018-03-19",
					"id": "dvx7k55",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "I can\u0027t figure it out. I\u0027ve argured several points for go and I acknowledged it\u0027s shortcomings but for some reason it\u0027s a cult-like anti go feeling in that sub ",
					"date": "2018-03-19",
					"id": "dvx7nul",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "tywkeene",
					"content": "I\u0027d really rather be writing Go than python, at least there\u0027s some serious arguments\n\n*[Redacted rant to avoid a holy war]*",
					"date": "2018-03-19",
					"id": "dvx8at7",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "GrandOpener",
					"content": "Go is exceptionally good at a fairly small number of things.  It is extremely awkward at a large number of things.  Probably most of the people you are talking to are more focused on frontend web dev, or mobile apps, or games, or basically anything other than server apps.",
					"date": "2018-03-19",
					"id": "dvxh5ml",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "zsaleeba",
					"content": "That doesn\u0027t correspond to my experience with it at all. I find it great for a wide variety of things.",
					"date": "2018-03-19",
					"id": "dvxpsft",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "GrandOpener",
					"content": "I\u0027m genuinely interested to hear your experience.  I have had great success using Go for web services, forward and reverse proxies, server daemons for various tasks, internal grpc microservices, matchmaking servers, and serverless compute functions, but in my mind those are all pretty similar things.  I\u0027ve found Go to be largely unusable for serious projects in the categories I mentioned above.  \n\nTrying to use it for anything not running on a server has generally been quite unsatisfactory for me.  With no disrespect to the people working on cool projects like golang/mobile or Azul3D or lxn/walk, those projects just aren\u0027t anywhere near the polish level of native iOS dev or Unity or Unreal or WPF, (and they don\u0027t claim to be) so they don\u0027t seem like good choices right now for for serious work projects in those areas.",
					"date": "2018-03-19",
					"id": "dvxwxho",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "kjk",
					"content": "I agree with you on the facts (that Go is bad at games, windows UI, mobile etc.).\n\nI just don\u0027t think that backend programming is \"fairly small number of things\".\n\nI mean it is as small as enumeration. It\u0027s only one thing.\n\nBut when you look at jobs, today those are major categories:\n\n* web front-end \n* backend of all kinds (for web and services to support web front-end or mobile front-end)\n* mobile\n* a very distant 4th: games \n* a very distant 5th: desktop apps\n\nThere\u0027s is no language that is really good at more than one thing. \n\nSwift and Objective-C are pretty much only for iOS and a distant second for Mac apps. Non-existant as web front-end or backend languages.\n\nJavaScript is all front-end and some backend.\n\nPHP, Python, Ruby, node.js are just like Go: only good at backend (and sys-admin scripting).\n\nC++ is pretty much only great at games and high-end desktop apps like Chrome or Photoshop.\n\nSo I would be down with \"Go is good at small number of things\" if we also acknowledge that the same is true about Python, Swift, Ruby etc.\n",
					"date": "2018-03-19",
					"id": "dvyes9f",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "GrandOpener",
					"content": "I think we are largely of the same opinion, just with different wording.\n\n\u0026gt; There\u0027s is no language that is really good at more than one thing.\n\nI don\u0027t want to start a language comparison argument, but for completeness sake C# actually does very well in at least 3 of your categories, maybe 4 if you count Xamarin, and has it\u0027s eye on the 5th via WebAssembly.  It\u0027s an exciting time to be a .NET developer.",
					"date": "2018-03-20",
					"id": "dvz2itp",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kostix",
					"content": "I agree with you, but the problem is that C# is boring as a language and .NET is boring as a runtime. F# makes this a little bit more fun, but that bit is indeed not very large.\n\nSo while you\u0027re factually correct, there\u0027s that thing that *coding should be fun,* and I find coding in Go to be way more fun than coding in C# (which I did plenty).",
					"date": "2018-03-20",
					"id": "dvzilfn",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "GrandOpener",
					"content": "\u0026gt; but the problem is that C# is boring as a language and .NET is boring as a runtime\n\nThat\u0027s an opinion.  You are welcome to it and I won\u0027t try to change your mind, but I do not agree.  Personally, Go and C# are two of my favorite languages, and I find the two of them \"fun\" in roughly equal measure.",
					"date": "2018-03-20",
					"id": "dvzjema",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "weberc2",
					"content": "I agree with your assessment, but I don\u0027t think breaking the market down into those categories is particularly interesting. Firstly, it\u0027s mostly a comparison of library availability and not fundamental language utility. Secondly, backend services is probably a bigger job market than mobile, games, and desktop apps. Lastly, I think C# ticks many of those boxes because of its library support, but I think Go would be *fundamentally better* at those categories if it had comparable libraries--I certainly think that\u0027s true on the backend, and for a variety of reasons (simpler tooling, simpler language, simpler runtime, simpler deployment model, etc). All this said, I really like .Net as far as VMs go, and (like you) I\u0027m posting in the spirit of genuine interest and friendly debate--not trying to fan flames! :)",
					"date": "2018-03-20",
					"id": "dvznba6",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "GrandOpener",
					"content": "\u0026gt; it\u0027s mostly a comparison of library availability and not fundamental language utility\n\nIt is, but that\u0027s what pays the bills.  I can use Go for fun whenever I want, but when I go to work there is not enough budget in any of my projects to recreate the libraries we\u0027re talking about, so I\u0027m going to keep using the languages where they already exist.  I eagerly await seeing how/where the community fills those holes.",
					"date": "2018-03-20",
					"id": "dvzos8c",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "unitedcreatures",
					"content": "Well, if you\u0027re down to spend a fortune on hardware for IIS and licenses... ",
					"date": "2018-03-20",
					"id": "dvzcpp0",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "DeedleFake",
					"content": "I\u0027m using it to write [a scripting language](https://github.com/DeedleFake/wdte) with an intention to use it as part of a custom, [Pixel](https://github.com/faiface/pixel)-based [game engine](https://github.com/DeedleFake/plane) that I\u0027m slowly working on, and I think it\u0027s worked quite nicely for it thus far. Does that count?",
					"date": "2018-03-19",
					"id": "dvygilp",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "GrandOpener",
					"content": "\u0026gt; Does that count?\n\nPixel looks like it could be a lot of fun with to get your hands dirty and build a hobby project.  Based on what I see on their github page, I don\u0027t think I could recommend it to a team that\u0027s planning on building a commercial game for the purpose of profit.",
					"date": "2018-03-20",
					"id": "dvz2u58",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "zsaleeba",
					"content": "I\u0027ve written a couple of small 2d games with it using a game engine and it was an enjoyable experience. They were fast and smooth. I\u0027ve also written a large desktop application using a Qt binding and it worked pretty well with the usual caveats around that kind of binding. Honestly I think the \"Go is only good for server side applications\" story is pretty much propaganda.",
					"date": "2018-03-19",
					"id": "dvyh3r4",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "chewxy",
					"content": "Are there any non GPL\u0027d Qt bindings? All the bindings I used were nice and then I get smacked in the face with GPL.",
					"date": "2018-03-19",
					"id": "dvyogjd",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "zsaleeba",
					"content": "I used https://github.com/therecipe/qt which is LGPLv3.",
					"date": "2018-03-19",
					"id": "dvyomf9",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "GrandOpener",
					"content": "Isn\u0027t LGPL basically the same as GPL for Go since we only have static linking?  How can you provide a way for end users to re-link the proprietary portions of your Go app with modified QT libraries? \n\nhttp://www.gnu.org/licenses/gpl-faq.html#LGPLStaticVsDynamic",
					"date": "2018-03-20",
					"id": "dvz3npe",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "Go is probably the best language for writing GTK apps right now even though the prominent GTK bindings are far from complete. Vala is built explicitly for GObject/GTK and it\u0027s *still* worse than Go (building is extremely complicated, the compiler is buggy, memory is reference counted (cyclical references), weird/arbitrary inheritance/interface rules, etc).\n\nGo is fine for games (needs a bit more mature libraries, but there\u0027s nothing incompatible in the language) But yeah, for things like web dev, android apps, and iOS apps, everything but JS, JVM langs, and Swift/Objective-C (respectively) are going to be \"extremely awkward\".",
					"date": "2018-03-19",
					"id": "dvyau4y",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "GrandOpener",
					"content": "Thanks for the perspective.  I don\u0027t write GTK apps, so I wasn\u0027t aware of that.\n\n\u0026gt; Go is fine for games (needs a bit more mature libraries...\n\nI think we\u0027re largely of the same opinion here.  Go is _potentially_ fine for games at some point in the _future_, but it is not ready yet.",
					"date": "2018-03-20",
					"id": "dvz2lif",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "elagergren",
					"content": "It\u0027s always easier to find faults than it is to point out good things. It\u0027s just the way we\u0027re wired, I guess.",
					"date": "2018-03-19",
					"id": "dvxf18u",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tywkeene",
					"content": "Well I did write out a lengthy rant about python before deleting it, so I guess you\u0027re right.",
					"date": "2018-03-19",
					"id": "dvxh007",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SeerUD",
					"content": "It\u0027s frustrating, but it\u0027s one of those things that you understand after having worked with Go for a while. Compromises had to be made, not having generics is a compromise to ensure that other goals that Go set out to achieve were met. A lot of people don\u0027t seem to think through why some decisions were made early on, and (like myself at first) don\u0027t really like the language as a result.\n\nAlso, people just like to circle jerk I guess.",
					"date": "2018-03-19",
					"id": "dvxo1m2",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "Yeah it\u0027s a knee jerk reaction....\"I can\u0027t do x because go doesn\u0027t have y so thrilled whole language is shit\"\n\n",
					"date": "2018-03-19",
					"id": "dvy0zhg",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Frozen1nferno",
					"content": "Coming from C#, I find myself missing polymorphism in very specific circumstances, but those don\u0027t come up often. I was very surprised to discover I haven\u0027t missed generics at all, though. But once I got used to it, I realized generics are a design pattern that can always be avoided. I understand where they\u0027re convenient, but I\u0027ve never actually needed them.",
					"date": "2018-03-19",
					"id": "dvxo53d",
					"isArchived": false,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "Hauleth",
					"content": "Yeah, especially in cases like, you know, collections. ",
					"date": "2018-03-19",
					"id": "dvxr5p2",
					"isArchived": false,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "Frozen1nferno",
					"content": "I\u0027ve solved that with interfaces. Actually, I solved most of the lack of generics with interfaces. Is there a particular instance when that doesn\u0027t work?",
					"date": "2018-03-19",
					"id": "dvxrd77",
					"isArchived": false,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "RoughMedicine",
					"content": "Collections.\n\nHow do you represent a list of items of the same type with type safety without resorting to generics? And if \"interfaces\" is your answer, please elaborate.",
					"date": "2018-03-19",
					"id": "dvyjtie",
					"isArchived": false,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "kostix",
					"content": "\u0026gt; Collections.\n\nYour statement is correct, but it\u0027s *useful* only if considered in isolation — as a pure CS paradigm.\n\nThe fact is, programmers tend to overgeneralize things, and languages with powerful support for generalization naturally make programmers indulge into that practice.\nThis leads to a simple problem: when a programmer perceives a need to have a collection, they are naturally inclined to make it generic — *just in case.* But the fact is, in most production code that case never happens. What happens often is the need for *very* specialized collections — typically those which are aware of the type of values they hold (I mean, they may interact with these values, not merely store them) etc. A typical reaction of a typical programmer trained in generics is to add more complexity by coding such a collection in a generic way and adding more \"genericity\" to support those specialized interactions by creating more interfaces etc.\n\nGo takes a different stance by offering a programmer to try to not be smart and code for a specific problem at hand; if/when there will be a tangible need for generalizing some bit of the code, *then* the approach to implement that should be thought through and materialized.",
					"date": "2018-03-20",
					"id": "dvziukb",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2018-03-20",
					"id": "dvzyzg5",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "RoughMedicine",
					"content": "\u0026gt; What happens often is the need for very specialized collections\n\nHow is a concurrent map a very specialized collection? Even the standard acknowledges that it\u0027s a generic data structure, but since the language doesn\u0027t support it, it takes interface{}, making you lose all type safety.",
					"date": "2018-03-20",
					"id": "dw07bph",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kostix",
					"content": "\u0026gt; How is a concurrent map a very specialized collection?\n\nIn Go, it\u0027s a very specialized collection because most of the time the solution you end up with when writing idiomatic Go code has some resource manager/arbiter (such as a goroutine) which keeps the collection as its non-shared state and mediates accesses to it made by other goroutines.\n\nThe documentation is pretty clear on this:\n\n\u0026gt; The Map type is specialized. Most code should use a plain Go map instead, with separate locking or coordination, for better type safety and to make it easier to maintain other invariants along with the map content.\n\u0026gt;\n\u0026gt; The Map type is optimized for two common use cases: (1) when the entry for a given key is only ever written once but read many times, as in caches that only grow, or (2) when multiple goroutines read, write, and overwrite entries for disjoint sets of keys. In these two cases, use of a Map may significantly reduce lock contention compared to a Go map paired with a separate Mutex or RWMutex.\n\nStill, that is not to say that *if* generics were part of Go 1, they would not be used for implementing `sync.Map` — I\u0027m pretty sure they would have been.",
					"date": "2018-03-21",
					"id": "dw1jyrf",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "GrandOpener",
					"content": "The idiomatic Go answer from the core devs is that creating a new collection class is rarely the right answer to a problem.\n\n\u0026gt; How do you represent a list of items of the same type with type safety without resorting to generics?\n\nTrivially, the answer to this is \"use a slice.\"  That\u0027s not as flippant as it might initially sound; you can do a heck of a lot with slices and a few functions/methods to perform business logic on them.",
					"date": "2018-03-20",
					"id": "dvzgkb0",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "RoughMedicine",
					"content": "I gave the example of the list because it\u0027s the most basic data structure I could think of.\n\nBut Go\u0027s own standard library already shows a problem with this philosophy: sync.Map. You forego type safety if you want a thread-safe container, and there\u0027s no way around that.",
					"date": "2018-03-20",
					"id": "dw078bc",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "GrandOpener",
					"content": "Agreed; in the cases where you need a thread-safe container, this is what you are stuck with.  The reasoning of the core Go devs is that this is a rare case and not worth a major language/runtime change.  Note that even in the sync.Map docs they tell you that what you want is a normal map and a lock/mutex most of the time, except when you have one of the special cases for which sync.Map has been specifically optimized.\n\nI\u0027m not sure if that\u0027s the \"right\" answer (I am fond of .NET style generics, personally), but it is at least reasonable and well-thought out.",
					"date": "2018-03-21",
					"id": "dw13gaj",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "enneff",
			"date": "2013-05-13",
			"id": "1e9stn",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.1 is out!",
			"comments": [
				{
					"author": "earthboundkid",
					"content": "Congrats to all the devs who worked so hard on it!",
					"date": "2013-05-13",
					"id": "c9y5zie",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "dvirsky",
					"content": "Thanks to the Go devs! Over the past year Go has become one of my two favorite languages (the other one being Python). Trying out this release, seeing some of my code just speeding up by a factor two without anything breaking in the transition - is just fucking awesome.\n\nKeep it up!",
					"date": "2013-05-14",
					"id": "c9ygxsv",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "jrv",
					"content": "And here\u0027s the mailing list thread: https://groups.google.com/forum/?fromgroups\u003d#!topic/golang-nuts/BwMNUlOmZao",
					"date": "2013-05-13",
					"id": "c9y6hf3",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "jackielii",
					"content": "Thanks for the awesome work!",
					"date": "2013-05-13",
					"id": "c9y6hcb",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TheMagicHorsey",
					"content": "The benchmarks game page needs to update their numbers stat!\n",
					"date": "2013-05-14",
					"id": "c9ybg1c",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "OursIsTheFury",
					"content": "For the people like me who did not know this existed: http://benchmarksgame.alioth.debian.org/",
					"date": "2013-05-14",
					"id": "c9yfux3",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "burntsushi",
					"content": "It looks like they\u0027ve been updated. I\u0027m super impressed. Go is very nearly on par with most languages in the shootout sans C/C++. (And Go certainly holds its own in that comparison.)",
					"date": "2013-05-14",
					"id": "c9ycw1a",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TheMagicHorsey",
					"content": "Why does Go outperform Java 7 significantly more on a single core machine than on a quad core machine?  Seems like with the concurrency constructs it should require less resources to launch separate execution streams on different cores.  But Go actually does better against Java 7 on a single core machine as opposed to a multicore machine.",
					"date": "2013-05-14",
					"id": "c9yet20",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "burntsushi",
					"content": "Honestly, I have no idea. If you pressed me to guess, then it could be due to the scheduling of goroutines in the runtime or perhaps the way the benchmark was written itself. Or the value of `GOMAXPROCS` that was used. Tough to know without more info.\n\nPerhaps someone else in-the-know could chime in.",
					"date": "2013-05-14",
					"id": "c9yeuji",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Vermilion",
					"content": "if you get into operating system work - you find pretty quickly that going multiple-CPU (multi-core) in the same application introduces a lot more issues.\n\nAn obvious one is the 3 or 4 layers of cache you have on a CPU.  There are thresholds where code size and OS go beyond a cache size and the performance can change dramatically.\n\nConcurrency helped a lot of apps long before multiple cores came along.",
					"date": "2013-05-14",
					"id": "c9yixhm",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "igouy",
					"content": "\"For each named benchmark, measurements of *the fastest* Go program are shown for comparison against measurements of *the fastest* Java 7 program.\"\n\nMaybe there are both Java programs written for multi core that are the fastest Java programs on multi core, and different Java programs written for single core that are the fastest Java programs on single core.\n\n\n",
					"date": "2013-05-15",
					"id": "c9zbxqg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "casualsuperman",
					"content": "It could have to do with Java\u0027s GC and other runtime threads multiplexing poorly to the single core (at least compared to Go\u0027s lighterweight concurrency model).",
					"date": "2013-05-14",
					"id": "c9ygbq4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "betamike",
					"content": "Looks like it depends on the benchmark.  If you look at the CPU load numbers, some of the Go programs are only utilizing one core on the quad-core systems, and it looks like those versions are not implemented in a concurrent manner.\n\nNote that this is not exclusively the case.  The binary-tree benchmark (which the benchmark shows Java outperforming Go) is implemented in a concurrent way in both the Go and Java versions.",
					"date": "2013-05-14",
					"id": "c9ylo7y",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kinghajj",
					"content": "The binary-tree benchmark primarily tests allocation speed, IIRC, and Go\u0027s GC is still rather basic, I think. That awesome IBM GC hasn\u0027t (yet? ever?) come to fruition.",
					"date": "2013-05-14",
					"id": "c9yqpnc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "igouy",
					"content": "Did you refresh the web browser cache?\n\nThe first set of updated measurements was posted 4 hours after the Go binaries were uploaded to the code.google download page; the fourth was posted 3 1/2 hours later.",
					"date": "2013-05-15",
					"id": "c9z9s27",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "valyala",
			"date": "2017-10-10",
			"id": "75g6f4",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.10 will support building windows DLLs",
			"comments": [
				{
					"author": "themendingwall",
					"content": "How is the runtime unloaded when the DLL is unloaded?",
					"date": "2017-10-10",
					"id": "do5xmaa",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "themendingwall",
					"content": "To elaborate, this is useless unless they support shutting down the runtime cleanly, re: [ https://github.com/golang/go/issues/11100](https://github.com/golang/go/issues/11100).\n\nThis references dlclose, but you\u0027d have the same issue on Windows.",
					"date": "2017-10-10",
					"id": "do61252",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "dobegor",
					"content": "And what about Go’s `plugin` package? I wish it will be supported on all platforms too. ",
					"date": "2017-10-10",
					"id": "do62fnq",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "dlsniper",
					"content": "This was probably the missing bit for Windows. Iirc osx and Linux already support it in 1.9",
					"date": "2017-10-10",
					"id": "do6j8py",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "dobegor",
					"content": "So we may have a chance to see plugin land on Windows in 1.10? Or is merge window closed?",
					"date": "2017-10-10",
					"id": "do6plbr",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "Merge window runs till end of November but someone has to do the work for it...",
					"date": "2017-10-10",
					"id": "do6psva",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "dragonfax",
					"content": "I thought plugin was broken and disabled on Mac",
					"date": "2017-10-11",
					"id": "do79zt0",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "qu33ksilver",
					"content": "Right, that used to be the case. IIRC, I saw a commit which changed that.",
					"date": "2017-10-11",
					"id": "do7cxvd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dragonfax",
					"content": "What? Thats awesome. I love this feature.",
					"date": "2017-10-11",
					"id": "do7deqb",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tech_tuna",
					"content": "I run Windows only when forced to do so and I don\u0027t like Macs either but. . . this is huge.  This is how languages flourish.  It\u0027s one thing for me to say, \"just use Linux or GTFO\" but that\u0027s not realistic and honestly, while Linux is my preferred OS, it\u0027s never going to be a common end user platform, even for developers.\n\ntl;dr bravo Go team, it\u0027s support like this which will allow more people to use and deploy Go based applications.\n\nAs it stands right cross-compilation is kind of mind blowing. . . this is icing on the cake.\n\n",
					"date": "2017-10-10",
					"id": "do614zn",
					"isArchived": true,
					"isControversial": false,
					"score": 38
				},
				{
					"author": "10gistic",
					"content": "It was so cool to just build a little hello world networked app, cross compile it, then run one on Linux and one on my Windows VM. I\u0027d expected way more friction, but everything just worked. I might actually get to write some Go at work with this feature.",
					"date": "2017-10-10",
					"id": "do67hfh",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "samsonx",
					"content": "Indeed, right now if I want something cross platform which will work with my GUI programs I write it in C and build either a dll, dylib or .so depending on the platform.\n\nBeing able to do this using golang will finally be a reason to use Go properly.\n\nI can do my front ends using some simple GUI tool with all the real code in dynamic libraries written in golang. That\u0027s what I will be looking into anyway.\n",
					"date": "2017-11-14",
					"id": "dptn750",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "holyjeff",
					"content": "This is honestly amazing.",
					"date": "2017-10-10",
					"id": "do5zq6x",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "jacobu9",
					"content": "IIRC, this work was partly delayed by trying to figure out how Go\u0027s thread-local storage was going to interact with the code loading the DLL or other Go runtime instances in other DLLs.  What was the resolution to this?  It wasn\u0027t clear to me from the GitHub issue or the CLs that finished off the DLL support.",
					"date": "2017-10-10",
					"id": "do66f7m",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "agnsaft",
					"content": "Does this mean building native DLLs that can be loaded by Win32, .NET, etc?",
					"date": "2017-10-10",
					"id": "do5yfoa",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Creshal",
					"content": "http://blog.ralch.com/tutorial/golang-sharing-libraries/\n\nc-shared mode produces .h files (and soon DLLs) that can be called from every programming language supporting C\u0027s function interface, but using Go types and runtime internally, so I\u0027m not reaaaally sure it\u0027ll mix well with other garbage collected environments like .NET.",
					"date": "2017-10-10",
					"id": "do623rc",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "V0lta",
					"content": "That\u0027s the question. Would love if someone could elaborate a bit more on it.",
					"date": "2017-10-10",
					"id": "do655sn",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ActualDonaldJTrump",
					"content": "I don\u0027t see any reason why there would be problems unique to Go. It\u0027s no different from interfacing C and Lua or C and JavaScript. You just have to manage your references correctly.",
					"date": "2017-10-10",
					"id": "do6s0lo",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Creshal",
					"content": "There\u0027s difference between interfacing C from Javascript… and interfacing Javascript from, say, Python, over a C interface. \n\nIn the former case, you can let the JS runtime handle garbage collection for all of its stuff, and manually manage the rest. But when you have garbage collected runtimes on both ends that think their main loop is the only active one, things get… interesting. \n\nI suppose you can get it to work, but it\u0027s not something I\u0027m in any rush to try out myself.",
					"date": "2017-10-11",
					"id": "do7xfav",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "cemremengu",
					"content": "But why? Whats a use case for this? Partial/smaller deploys?",
					"date": "2017-10-10",
					"id": "do6ax7d",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "DarkJezter",
					"content": "Modular deployment is one that I\u0027m interested in.  Without loadable DLLs, the only way to break up an app into modules is to deploy independent applications which communicate through pipes/sockets adding serialization/deserialization overhead",
					"date": "2017-10-10",
					"id": "do6darg",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dtfinch",
					"content": "I worry that without a shared runtime each module would get its own static copy of the Go runtime, each running independently (so 10 .dlls means 10 allocators and garbage collectors also running independently). I hope I\u0027m mistaken.",
					"date": "2017-10-10",
					"id": "do6e5zb",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "tscs37",
					"content": "IMO the greatest benefit would be security.\n\nI imagine you could write your app to allow loading external packages to handle SSL (or encryptino in general) which allows hotpatching high severity security issues (f.e. CVE\u0027s) without having to completely replace the application.\n\nThat is only a temporary fix but could help a lot of people maintain LTS releases in Go more easily.",
					"date": "2017-10-10",
					"id": "do6eggd",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "NeedsMoreTests",
					"content": "I get the feeling you don\u0027t deal with security very much on Windows. DLL side loading is a very common attack pattern for malware and unless those DLLs are signed from a trusted source, which is not nearly as simple as it sounds, you basically have no way of trusting the DLL you\u0027re loading.\n\nAnyway, DLL support can certainly help with maintenance but it\u0027s not going to solve the security problems that dynamic linking introduces.",
					"date": "2017-10-10",
					"id": "do6hbk0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tscs37",
					"content": "sideloading malicious libaries is an issue on any platform that has a dynamic linker (LD_PRELOAD anyone?)\n\nYou can do very simple signature schemes or just use GPG or only use certain trusted paths to dynamically load the DLL.\n\nDynamic Linking may introduce some security problems but it solves some others, like any security it\u0027s tradeoffs in this particular area.",
					"date": "2017-10-10",
					"id": "do6kfjj",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "NeedsMoreTests",
					"content": "\u0026gt; Dynamic Linking may introduce some security problems but it solves some others, like any security it\u0027s tradeoffs in this particular area.\n\n+1, that\u0027s all I was trying to say. I\u0027ve seen a lot of people call Go insecure because it\u0027s using static linking by default and that by default other languages are more security because of dynamic linking (cough: Java....). It\u0027s a trade off in any case and more or less depends on the ability to do patch management+signature validation/quick releases for static binaries.",
					"date": "2017-10-10",
					"id": "do6krwe",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "rggarou",
					"content": "the Issue:\nhttps://github.com/golang/go/issues/11058",
					"date": "2017-10-10",
					"id": "do5zn8f",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "pramodhs",
			"date": "2017-09-01",
			"id": "6xchqt",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Listen to Ryan Dahl, Creator of Node.js on programming with Go",
			"comments": [
				{
					"author": "jeffrallen",
					"content": "Seems like a nice guy. Glad to have him hacking on Go.",
					"date": "2017-09-01",
					"id": "dmez1lb",
					"isArchived": true,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "sh41",
					"content": "Relevant, a twitter thread Feross shared recently about Ryan:\n\nhttps://twitter.com/feross/status/899044389883789312\n\n\u0026gt; 1/ Ryan Dahl (creator of Node.js) wrote an epic rant and then quit writing software for a while. I want to repost it here now. ...",
					"date": "2017-09-01",
					"id": "dmf4k4i",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "framioco",
					"content": "jeez, he could have just linked to the original post, no? http://tinyclouds.org/rant.html",
					"date": "2017-09-01",
					"id": "dmf7opv",
					"isArchived": true,
					"isControversial": false,
					"score": 28
				},
				{
					"author": "sh41",
					"content": "It\u0027s almost ridiculous how much more easier the webpage version is to read compared to the twitter thread. Thanks.",
					"date": "2017-09-01",
					"id": "dmfz8an",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "gogolang",
					"content": "\u0026gt; for a certain class of application, which is like, if you\u0027re building a server, I can\u0027t imagine using anything other than Go",
					"date": "2017-09-01",
					"id": "dmfcg3r",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "SafariMonkey",
					"content": "~~I\u0027m not very familiar with Node, but isn\u0027t that back end (i.e. server) JavaScript? Seems a little strange to have its creator say something like that. Or am I missing something?~~\n\nEdit: from the article:\n\n\u0026gt; That said, I think Node is not the best system to build a massive server web. I would definitely use Go for that. And honestly, that\u0027s basically the reason why I left Node. It was the realization that: oh, actually, this is not the best server side system ever.",
					"date": "2017-09-01",
					"id": "dmg3v7w",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Redundancy_",
					"content": "I always find it interesting, because Stackless Python used channels and tasklets back in ~2000, and CCP Games built StacklessIO network libraries using non-blocking IO on top in ~2008 to run one of the larger single-universe MMOs around.\n\nIt feels like trying to convince people that non-blocking network operations were a good thing in 2012 was long after the ship had sailed on that one.",
					"date": "2017-09-05",
					"id": "dml82j6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "IAmSlar",
			"date": "2017-03-17",
			"id": "5zx6on",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "FreeBSD kernel bug affecting go programs finally identified",
			"comments": [
				{
					"author": "nevyn",
					"content": "tl;dr If you set a signal stack and then exec from the non-main thread, the kernel doesn\u0027t reset that so your signal stack is now pointing to random memory in your process.",
					"date": "2017-03-17",
					"id": "df1y105",
					"isArchived": true,
					"isControversial": false,
					"score": 32
				},
				{
					"author": "EddieRingle",
					"content": "35 minutes ago as of this comment:\n\n\u0026gt; kostikbel commented 35 minutes ago\n\n\u0026gt; As I noted to @steventh, I definitely able to reproduce the original memory corruption issue on the patched system. Also, somebody mentioned that the test code was stripped to only use fork() and still cause the issue. In other words, an issue is still there.",
					"date": "2017-03-18",
					"id": "df2x57m",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "IAmSlar",
					"content": "That is a bummer.\n\n\nThough in futher comments there seems to be issues reproducing the craches after this patch so it does seem to help.\n\n\nThe mailing list is rather silent about it at the moment, all the \"action\" seems to be on the github issue.",
					"date": "2017-03-18",
					"id": "df38r1x",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "UnreachablePaul",
					"content": "Yeah FreeBSD probably will never go to production. Can\u0027t believe there are still people wasting time on this \"system\"",
					"date": "2017-03-17",
					"id": "df2issj",
					"isArchived": true,
					"isControversial": false,
					"score": -43
				},
				{
					"author": "eXeC64",
					"content": "Yeah. What do the CTOs of Netflix or WhatsApp know about operating systems, or running high traffic applications on them.",
					"date": "2017-03-17",
					"id": "df2ktsv",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "alwindoss",
					"content": "Nice and calm response",
					"date": "2017-03-18",
					"id": "df2yzww",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "alwindoss",
					"content": "I wonder if you have really tried it. It\u0027s a complete Operating System",
					"date": "2017-03-18",
					"id": "df2ynbp",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "UnreachablePaul",
					"content": "Can\u0027t even run go properly",
					"date": "2017-03-18",
					"id": "df2yyf2",
					"isArchived": true,
					"isControversial": false,
					"score": -7
				},
				{
					"author": "IAmSlar",
					"content": "Yes it can, I\u0027ve been running several go processes handling messages at a rate of 15-35 a second 24/7 for probably a year now, not a single crash that wasn\u0027t my fault.\n\n\nI don\u0027t know if you looked at the bug report. This relates to executing external commands from go. And even with 8 gorutines constantly executing /bin/true it still took 2-10 minutes before it triggered. So as my programs rarely exec out, they\u0027re unlikely to encounter this bug.\n\n\nThis is not the first time, and will certainly not be the last, an obscure kernel bug is found in an OS because some new program happened to tickle it in a certain way it\u0027s not used to.\n\n\nYou can google any OS for \"kernel bug\" and you will find bugs that have existed for 10years+ before they\u0027re discovered and fixes.",
					"date": "2017-03-18",
					"id": "df38onq",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "UnreachablePaul",
					"content": "That\u0027s even worse if it can\u0027t even execute external commands",
					"date": "2017-03-18",
					"id": "df39bag",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "alwindoss",
					"content": "Agreed! But, like any other software Free BSD also could have issues. We can\u0027t rule out the entire set of positives because of one negative. Right!",
					"date": "2017-03-18",
					"id": "df2zn68",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "anacrolix",
					"content": "So many triggered",
					"date": "2017-03-19",
					"id": "df436iy",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "iluminae",
					"content": "Nice trolling bro.",
					"date": "2017-03-18",
					"id": "df2oyep",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				}
			]
		},
		{
			"author": "vburenin",
			"date": "2016-05-29",
			"id": "4lj0yn",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Congrats Brad Fitzpatrick",
			"comments": [
				{
					"author": "bradfitz",
					"content": "Aw, thanks! I was really confused to see this on my Reddit front page this morning until I noticed it was the golang subreddit. :)\n",
					"date": "2016-05-29",
					"id": "d3o7t2o",
					"isArchived": true,
					"isControversial": false,
					"score": 51
				},
				{
					"author": "nohoudini",
					"content": "congrats \u003d)",
					"date": "2016-05-29",
					"id": "d3obzwo",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-05-30",
					"id": "d3ots59",
					"isArchived": true,
					"isControversial": false,
					"score": -7
				},
				{
					"author": "dsymonds",
					"content": "He said \"the golang subreddit\", a.k.a. r/golang. It\u0027s not the same situation.",
					"date": "2016-05-30",
					"id": "d3oub9d",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-05-30",
					"id": "d3p7sin",
					"isArchived": true,
					"isControversial": false,
					"score": -7
				},
				{
					"author": "mwholt",
					"content": "C\u0027mon, this is just a light-hearted post to congratulate Brad. Did you really have to bring this up here and now?",
					"date": "2016-05-30",
					"id": "d3pglxa",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "I_am_toxic_af_x10",
					"content": "kiss ass all you want, still wont help in your next interview....",
					"date": "2016-06-28",
					"id": "d4ql9v5",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "thewhitetulip",
					"content": "He referred to the language as golang, when I used it in my book, they be snarky and tell me to call it Go, and you say I can\u0027t do that as a return favour?",
					"date": "2016-05-31",
					"id": "d3ps25n",
					"isArchived": true,
					"isControversial": false,
					"score": -4
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-05-30",
					"id": "d3p9el6",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dgryski",
					"content": "bradfitz and rsc are both taking some well deserved time off: Brad to get married, Russ to spend time with his kids.",
					"date": "2016-05-29",
					"id": "d3nv6th",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "mwholt",
					"content": "I love these tiny glimpses into the personal lives of developers because we often forget in our industry that tech, business, and deadlines aren\u0027t everything. Life is more enjoyable when family is more important than code.",
					"date": "2016-05-29",
					"id": "d3o0rgc",
					"isArchived": true,
					"isControversial": false,
					"score": 19
				},
				{
					"author": "[deleted]",
					"content": "No wonder there\u0027s no more of those \"Andrew and Brad hack on something-written-in-Go\" videos. :D",
					"date": "2016-05-29",
					"id": "d3o5knf",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "enneff",
					"content": "The real reason is that I have a whole lot of unedited video on my laptop. Sorry!",
					"date": "2016-05-31",
					"id": "d3q0xls",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "Looking forward to the new video then. :)",
					"date": "2016-05-31",
					"id": "d3qb638",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gizzlon",
					"content": "Love those \u003d)",
					"date": "2016-05-31",
					"id": "d3qn5od",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "backltrack",
					"content": "I hope you anticipated an exception and will handle it gracefully.",
					"date": "2016-05-29",
					"id": "d3ok73a",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "paddie",
					"content": "Woo, congrats!",
					"date": "2016-05-29",
					"id": "d3o07yr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Baashha",
					"content": "congrats /u/bradfitz ",
					"date": "2016-05-30",
					"id": "d3om0nb",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kkirsche",
					"content": "Congratulations!",
					"date": "2016-05-30",
					"id": "d3opwfk",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "qu33ksilver",
					"content": "Amazing to see things like this in /r/golang ! Congrats Brad and here\u0027s wishing you best for the future !",
					"date": "2016-05-30",
					"id": "d3oxsul",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "fr4nk3n",
					"content": "Congratulations!",
					"date": "2016-05-30",
					"id": "d3pk491",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "PaluMacil",
					"content": "Congrats! Hope it\u0027s a Go developer! :)",
					"date": "2016-05-31",
					"id": "d3qbvk0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "dgryski",
			"date": "2016-02-24",
			"id": "47e3n7",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "How We Built Uber Engineering’s Highest Query per Second Service Using Go",
			"comments": [
				{
					"author": "silentpayne1",
					"content": "Great read, I like that they explain why Go is a particularly good solution to this specific problem (CPU bound not IO bound) vs. NodeJS. ",
					"date": "2016-02-24",
					"id": "d0cftte",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "thewhitetulip",
					"content": "yes, rather than the usual hype which comes along with new tech.\n\nI remember the time when everyone wanted to replace mysql with hadoopified solutions :D and later they blame the tech for the fault and not the architecture",
					"date": "2016-02-25",
					"id": "d0cya99",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-02-24",
					"id": "d0cihc1",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "awj",
					"content": "Yeah, dismissing the whole concept of R-trees seemed like a misstep there. You don\u0027t need a full-blown R-tree (which, as they state, is difficult to get right) to get some/most of the benefits of the idea. Pre-classifying the geofences (which seem to change relatively rarely) into a grid of lat-lon rectangles that they intersect gives you that fast initial lookup without doing point-polygon for each city.\n\nThat also makes things more tunable. Grouping by city only works while each city has a reasonable number of polygons. Grouping by intersections-on-a-grid allows you to tighten the grid each time you find yourself dealing with too many actual polygons.",
					"date": "2016-02-25",
					"id": "d0cn5ec",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "earthboundkid",
					"content": "Yeah, this is not my area of expertise, but ISTM you could pre-compute a lot of this. The Earth is ~200 million square miles. Divide it up into 1 million chunks of 200sqm by lat/long. Probably most squares will be empty (ocean) or be in a city with a couple of dozen polygons in them. Make an array of one million pointers to slices of polygons. On look up, jump to the pointer by multiplying lat times long, then go through that handful of polygons. On update, figure out how many squares the polygon overlaps then duplicate those slices with the new information and atomically replace the pointer in the lat/long array  (only one update process can operate at a time, but that\u0027s probably fine).",
					"date": "2016-02-25",
					"id": "d0darqk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "earthboundkid",
					"content": "Go has a convenience type for doing atomic swaps of COW data: https://godoc.org/sync/atomic#example-Value--ReadMostly",
					"date": "2016-02-26",
					"id": "d0ep2m4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "brunokim",
					"content": "They said they have hundreds of city geofences, so perhaps this is a fine-grained resolution right there, and another level of resolution wasn\u0027t that necessary - though it would be just a matter of simple arithmetic to rule out someone checking Uber from rural Nevada, the amount of traffic from outside geofences must be small.",
					"date": "2016-02-25",
					"id": "d0dppms",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rishid",
					"content": "Sounds interesting. Can you provide a little more color on what you mean by \"precalculated rectangle lat/long based shards\"? Maybe a example would suffice.",
					"date": "2016-02-29",
					"id": "d0inea4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ants_a",
					"content": "I wonder if they considered just dumping the data into a competent GIS database, like PostgreSQL. Given the numbers presented (4250 qps/server) the performance would probably be better, and you get much better tooling and generality.",
					"date": "2016-02-25",
					"id": "d0d7sjd",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "awj",
					"content": "TBH the data size quoted (1000s of polygons) doesn\u0027t sound all that hard for PostGIS to handle. At work we do on-the-fly pruning of the OpenStreetMap data to render custom maps. That\u0027s polygon/polygon intersections against ~100G of data, if it can manage that in 50-300ms it can manage lookup of their geofences.\n\nHell, there\u0027s even [this](http://www.gaia-gis.it/gaia-sins/), which would let you keep simple deployment/operations/scaling and still probably get similar performance \"for free\".",
					"date": "2016-02-25",
					"id": "d0defrq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "danredux",
					"content": "They did some things wrong IMO. I had to solve exactly the same problem in exactly the same language.\n\nOne thing is the city-\u0026gt;geofence index. That\u0027s a fantastic data point to index on, however the mistake comes with their concurrency solution. Store/Load Pointer is the correct way. I\u0027m not sure why they said it was brittle. Every reader just copies the pointer to the current map, and then you only need to synchronize the writers (or have just 1 writer). The writer with create a new map, copy all entries from the current map into it, and then StorePointer to it.\n\nRight now the RW lock costs them on every single query but it sounds like there\u0027s going to be a huge read/write ratio so it definitely makes sense to go immutable.",
					"date": "2016-02-24",
					"id": "d0cgdnk",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Sphix",
					"content": "It would have been interesting if they could show some measured performance impacts on the same workload. Also would be interesting to know the read write ratio. ",
					"date": "2016-02-24",
					"id": "d0cha4i",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "danredux",
					"content": "I did make a guess that it would be way over 10:1 read/write. In my experiences geo-fences are extremely static, and also generally come in batches. Someone might decide to geo-fence all the schools in a state, so that will be one big write.\n\nWhen I did it, we had batches of geo-fences once every few hours at most, so the read/write was literally 10m:1. :P",
					"date": "2016-02-24",
					"id": "d0chjbu",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "kevinw88",
					"content": "\u0026gt;  and then you only need to synchronize the writers (or have just 1 writer)\n\nI\u0027m not experienced in concurrent code. Why wouldn\u0027t you need to synchronize reads? If I\u0027m writing to a location, I surely should synch. when I read too, right?",
					"date": "2016-02-25",
					"id": "d0cwp2l",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "Strictly speaking you still need synch, but it is much cheaper. You do not need a mutex, just an atomic read will do.",
					"date": "2016-02-25",
					"id": "d0cy9a8",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "danredux",
					"content": "Because the reads and writes are atomic because it\u0027s just a pointer! The readers atomically get the pointer to the current map. The writer creates the new map elsewhere then atomically changes the pointer. Any readers still using the old pointer keep using it because it\u0027s guaranteed not to mutate.",
					"date": "2016-02-25",
					"id": "d0dl4fs",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dgryski",
					"content": "A blog post from Hailo Cabs on  a similar topic: https://sudo.hailoapp.com/services/2015/02/18/geoindex/",
					"date": "2016-02-25",
					"id": "d0czxvk",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "That is a very nice post. Well written and to the point.\n\nHappy to see Go being used so successfully. It seems like a neat language.",
					"date": "2016-02-25",
					"id": "d0d0cwr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "blackflicker",
			"date": "2017-12-11",
			"id": "7j65d0",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "**type Builder struct**\n\n* (*Builder) Grow(int) _\u0026lt;- [bytes.Buffer#Grow](https://golang.org/pkg/bytes/#Buffer.Grow)_\n* (*Builder) Len() int _\u0026lt;- [bytes.Buffer#Len](https://golang.org/pkg/bytes/#Buffer.Len)_\n* (*Builder) Reset() _\u0026lt;- [bytes.Buffer#Reset](https://golang.org/pkg/bytes/#Buffer.Reset)_\n* (*Builder) String() string _\u0026lt;- [fmt.Stringer](https://golang.org/pkg/fmt/#Stringer)_\n* (*Builder) Write([]byte) (int, error) _\u0026lt;- [io.Writer](https://godoc.org/io#Writer)_\n* (*Builder) WriteByte(byte) error _\u0026lt;- [io.ByteWriter](https://godoc.org/io#ByteWriter)_\n* (*Builder) WriteRune(rune) (int, error) _\u0026lt;- [bufio.Writer#WriteRune](https://golang.org/src/bufio/bufio.go#L630) - [bytes.Buffer#WriteRune](https://golang.org/pkg/bytes/#Buffer.WriteRune)_\n* (*Builder) WriteString(string) (int, error) _\u0026lt;- [io.stringWriter](https://golang.org/src/io/io.go#L281)_\n\n--\n\n* _Methods are being implemented with the existing interfaces in mind so you can switch to the new Builder easily in your code._\n\n--\n\n**Zero value**\n\n`sb :\u003d strings.Builder{}`\n\n--\n\n**Differences from bytes.Buffer**\n\nIt prevents its internal byte slice to escape. Like this: `(*Buffer).Bytes()`. So, it\u0027s immutable and can only grow or reset.\n\nIt has also a copy check mechanism which prevents copying on its Grow/Write methods: `func (b *Builder) copyCheck() { ... }`\n\n--\n\n**Check out:**\nhttps://github.com/golang/go/blob/3058d38632aea679c96cd41156b2751c97578a2d/src/strings/builder.go",
			"title": "New in Go 1.10: strings.Builder - Efficiently build string with minimized memory allocations",
			"comments": [
				{
					"author": "epiris",
					"content": "Wow this is great, it\u0027s going to help in some of the places I\u0027ve seen security issues with people who use unsafe byte slice conversion. The implementation is quite clever, the byte slice that backs the Builder only appends and reads the backing slice, never changing an existing index. This combined with the fact a string is simply defined as:\n\n    type string struct {\n        str unsafe.Pointer // []byte slice\n        len int\n    }\n\nMeans that any string returned by the builder can never race with a future generated string despite the fact they are all backed by the same []byte slice (\"unsafe.Pointer\" above). Because an array or slice can have different indices read and written to concurrently, you just can\u0027t read and write to the same index. It enforces these rules with the clever \"copyCheck()\" which is called by every public method that mutates state. The builder struct which is defined as:\n\n    type Builder struct {\n        addr *Builder // of receiver, to detect copies by value\n        buf  []byte\n    }\n    func (b *Builder) copyCheck() {\n        if b.addr \u003d\u003d nil {\n            b.addr \u003d b\n        } else if b.addr !\u003d b {\n            panic(\"strings: illegal use of...\")\n        }\n    }\n\nSo the first first call to a public method it stores the receiver address into the addr field. If the builder is then passed to another function by value the entire struct will be copied including the addr. Since it will live at a new address the receiver address will be different than the pointer stored in addr causing a panic which blocks the writes keeping the immutability guarantees of existing strings. A cool technique that might actually be nice in things like sync.Mutex instead of relying on the noCopy empty struct and go vet- though the extra conditional branches and extra word here may need much more consideration.\n\nIn summary this will shine most when you are conditionally building a string like often found in String() methods that you may use multiple fmt.Sprintf\u0027s along with concatenation which can quickly cause a lot of allocations. Instead you can do the below for only 1 allocation:\n\n    func (p *Person) String() string {\n        var b strings.Builder\n        // We can ensure capacity for all fields before hand\n        b.Grow(len(p.First) + len(p.Last) + len(...))\n        if p.First !\u003d `` { b.WriteString(`First: ` + p.Name) }\n        if p.Last !\u003d `` {  b.WriteString(`Last: ` + p.Name) }\n        // ...\n        return b.String()\n    }\n\nNice and clean! Only other thought is a small improvement to the implementation may be a way to reuse the existing slice backing some how when reset for producing more than one string of unknown bounds. Since you could have a good deal of capacity still available that is safe to reuse, something like b.buf \u003d b.buf[len(b.buf):len(b.buf):cap(b.buf)] in reset I *think* (don\u0027t hold me to that I could be wrong) would still maintain a correct implementation but potentially save some allocations. All and all a real nice addition to the standard library, kudos to contributors involved.",
					"date": "2017-12-12",
					"id": "dr4zxi7",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "SingingLemon",
					"content": "Nice to see, but how is this different than `bytes.Buffer`?",
					"date": "2017-12-11",
					"id": "dr3x5oy",
					"isArchived": false,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "blackflicker",
					"content": "It prevents its internal byte slice to escape. Like this: `(*Buffer).Bytes()`. So, it\u0027s immutable and can only grow or reset.\n\nIt has also a copy check mechanism which prevents copying on its Grow/Write methods: `func (b *Builder) copyCheck() {  ... }`",
					"date": "2017-12-11",
					"id": "dr3x9vz",
					"isArchived": false,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "whizack",
					"content": "if you look at the String() method, it does some extra unsafe pointer hackery to avoid copying the internal byte array into a new allocation.",
					"date": "2017-12-12",
					"id": "dr4n98z",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "blackflicker",
					"content": "There was also a `ReadFrom(r io.Reader) (n int64, err error)` method but it has been removed because there was a bug with it and Go 1.10 is around the corner. Maybe in the next release.",
					"date": "2017-12-11",
					"id": "dr3xv0k",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "sczk",
					"content": "I haven\u0027t done a whole lot of looking around in the go std lib lately (or really any go code), but I know about the whole pass-error-as-last-return-value standard.\n\n\nAll of the ```Write``` functions will either panic via ```copyCheck()``` or _always_ return a ```nil``` error.\n\nI expect this is fairly uncommon? The comments even mention the ```nil``` error specifically.\n\nWhy have ```error``` in the function signatures at all? Future proofing? Sticking to a common user expectations api? ```Grow``` may also panic but doesn\u0027t pretend to have an ```error``` value.\n\nJust (pedantically) wondering about the design decision, even though I\u0027m sure in-practice it will never really affect me.",
					"date": "2017-12-12",
					"id": "dr46fe8",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "beknowly",
					"content": "It\u0027s to implement the `io.Writer` and `io.ByteWriter` interfaces, making it pluggable with tons of already written code.",
					"date": "2017-12-12",
					"id": "dr47gbc",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "sczk",
					"content": "Thanks! I forgot about how go goes about the implicit interface implementations.",
					"date": "2017-12-12",
					"id": "dr48ex7",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "koffiezet",
					"content": "It is one of the most useful powerful/most overlooked features of Go though - but it\u0027s pretty nice. Certainly the io.Writer/io.Reader and related interfaces are underestimated a lot.\n\nSadly, there\u0027s no standardized filesystem interface. That would have opened up a lot more possibilities. There are some 3rd party solutions though, and the http.FileSystem interface tries to achieve something similar.",
					"date": "2017-12-12",
					"id": "dr55bl7",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "LukeShu",
					"content": "Interfaces.\n\n- `.Write` returns an error because `io.Writer` says it must.\n- `.WriteByte` returns an error because `io.ByteWriter` says it must.\n- `.WriteRune` returns an error because `bytes.Buffer.WriteRune` and `bufio.Writer.WriteRune` return an error.\n- `.WriteString` returns an error because `io.stringWriter` says it must.",
					"date": "2017-12-12",
					"id": "dr47zdl",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "willglynn",
					"content": "Having `Write()` return `(int, error)` allows `string.Builder` to be used as an [`io.Writer`](https://godoc.org/io#Writer). Explicitly documenting it to return `nil` allows callers that _know_ they\u0027re specifically using a `string.Builder` to elide error checks.\n\nThis doesn\u0027t feel like an ideal solution, but at a minimum `bytes.Buffer` does the [same thing](https://golang.org/src/bytes/buffer.go#L156), so at least there\u0027s precedent.",
					"date": "2017-12-12",
					"id": "dr47rl6",
					"isArchived": false,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "microo8",
					"content": "`bytes.Buffer`, I thought you were my friend\nhttps://syslog.ravelin.com/bytes-buffer-i-thought-you-were-my-friend-4148fd001229",
					"date": "2017-12-12",
					"id": "dr4lfgc",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-12-12",
					"id": "dr4zt23",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "xiegeo",
					"content": "Don\u0027t worry about it, use the data structure with the most convenient api for your problem. 99% of the time, the speed of the code you write don\u0027t matter.\n\nIf you run into speed or memory issues, then profile your code. At this point, you may attempt to write a benchmark that reflex the hot paths in your code. Put them in your test file to test for regression in the future. I say attempt, because it is incredibly hard to write good benchmarks.\n\nTake the grandparent article for example. The real answer is that + on string and buffers are optimized for different situations. +s are optimized locally and statically, the compiler sees the +s and produces a string as fast as it can, assuming there are no more operations on that string. Buffers are optimized for future operations not known at compile time, it has defaults that work well in the worst case. You can write a bench mark that makes + faster than buffer, but you can also write a bench mark that makes + much much slower.",
					"date": "2017-12-12",
					"id": "dr5pl0s",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "microo8",
					"content": "Remember:\n\"When in doubt, use brute force.\" -- Ken Thompson\n\nOptimize later. You\u0027re already good at speed, you\u0027re using Go, not JS :P",
					"date": "2017-12-13",
					"id": "dr6chx4",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-12-12",
					"id": "dr4v498",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "blackflicker",
					"content": "I think that you\u0027re on the wrong thread?",
					"date": "2017-12-12",
					"id": "dr4ybqe",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "farslan",
			"date": "2017-11-05",
			"id": "7av9xz",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go at DigitalOcean",
			"comments": [
				{
					"author": "theGeekPirate",
					"content": "Anyone know if they\u0027re planning on releasing all of the videos?",
					"date": "2017-11-05",
					"id": "dpdfi33",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "farslan",
					"content": "I\u0027m not sure if this was recorded, I\u0027ll definitely share it on Twitter if that is the case.",
					"date": "2017-11-06",
					"id": "dpezysj",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Asdayasman",
					"content": "If you don\u0027t need the speaker with the slides, you have bad slides.\n\nIf you do need the speaker with the slides, don\u0027t post just the slides.",
					"date": "2017-11-05",
					"id": "dpdo8xo",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "farslan",
					"content": "Don\u0027t agree. I\u0027ve put the bullet lists more detailed sometimes just so people can read it after I publish it. However in my talk, I try to share a story and quickly go over them. It\u0027s a style I prefer.",
					"date": "2017-11-06",
					"id": "dpezzrb",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "paul_h",
					"content": "Lots to that, but would have been nice to see the video too :)\n\nRe Monorepo: 824 branches: what\u0027s the branching model you\u0027re using?\n\nOr put another way, other than master, how many of the 823 other branches are not one person (or one pair) are not very short-lived (one to two days life)?",
					"date": "2017-11-05",
					"id": "dpdfurr",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "farslan",
					"content": "Most of them are one week old (at most). It\u0027s rare that it\u0027s takes weeks. Everyone opens a PR against master and it\u0027s get merged. Master means it\u0027s deployable. We don\u0027t use any of the other Git workflows. But monorepo doesn\u0027t restrict how to use the branches, it\u0027s up to the individual teams which workflow to adapt. ",
					"date": "2017-11-06",
					"id": "dpf0126",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "paul_h",
					"content": "So GitHub coined that branching model \"GitHub Flow\". \"Master means it\u0027s deployable\" is part of [Trunk-Based Development](https://trunkbaseddevelopment.com). I hoped you\u0027d say what you said, but still it seems odd to call out 824 branches and not give context. Maybe you did in the video.  \n\nBy contrast, the MS Windows team is coming down from many thousands of branches towards trunk based development. It\u0027s going to take them some time to complete. Theirs are not [short-lived feature branches](https://trunkbaseddevelopment.com/short-lived-feature-branches/) of some definition (although a small percentage might be), they are long-lived valuable branches - that shouldn\u0027t be deleted for some reason. They also should **not** be merged back to trunk/master ASAP for some reason, because they are not release ready. There were a few article earlier this year around [GitVFS](https://github.com/Microsoft/GVFS) and they didn\u0027t dwell on the thousands because it wasn\u0027t the focus, even if it\u0027s important to many of us as we contrast to Google\u0027s Trunk-Based Development. Yup, Google\u0027s 25,000 developer monorepo IS one branch (and an un-numbered amount of patch-sets is the style of short-lived feature branches). Thus many of us think that effective monorepo does dictate branching models.",
					"date": "2017-11-06",
					"id": "dpf48x6",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "titpetric",
					"content": "structs may have been one of the first packages I picked up when I started go, good to see that the author has a nice CI/CD environment under their finger ;)",
					"date": "2017-11-05",
					"id": "dpdlero",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "etherealflaim",
					"content": "If goimports on the large repo is slowing things down, you could index the code base at regular intervals and make your fork use that instead of scanning live code.  It looks like you might even be able to use your gta logic to live index only the changed paths and use the rest from the index.",
					"date": "2017-11-05",
					"id": "dpdu4dv",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "farslan",
					"content": "Yeap, it\u0027s not written in the slides, but I\u0027ve exactly talked about this :) That Google uses a forked goimports that uses an index, instead of the current public one. ",
					"date": "2017-11-06",
					"id": "dpf01kz",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "alexfiori",
					"content": "We suffer from be same thing at fb. Cannot use goimports at all cuz it hangs forever.\n\nWe’ve been discussing a fork that supports caching somehow.",
					"date": "2017-11-06",
					"id": "dpfou5i",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "stefanotorresi",
					"content": "fascinating.",
					"date": "2017-11-05",
					"id": "dpec90g",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "emangoo",
					"content": "🇹🇷🇹🇷",
					"date": "2017-11-08",
					"id": "dpie9t8",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "sbinet",
			"date": "2016-11-10",
			"id": "5c8338",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Seven years of Go",
			"comments": [
				{
					"author": "peatymike",
					"content": "Im learning it now. Have gotten my head around the basics of channels, slices and pointers. Coming from a python background its quite nice to have your code scale easily on multiple cores/cpus. I really like concurrent thinking and programming Go allows and its very strict compiler :-D",
					"date": "2016-11-10",
					"id": "d9ugr20",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "karma_vacuum123",
					"content": "*sniff* ah shucks!\n\nbut seriously....Go has become my default language, and 98% of the time it is the best solution. Thanks!!",
					"date": "2016-11-10",
					"id": "d9ud2p1",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "iasa31",
					"content": "hey, may I know what kind of projects you write? curious.",
					"date": "2016-11-10",
					"id": "d9unqep",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "anacrolix",
					"content": "Servers, network tools, command line utilities.",
					"date": "2016-11-11",
					"id": "d9vaxta",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "kaeshiwaza",
					"content": "I was also surprise. I used Go for specific projects where i needed higher speed than python, websockets... But finally i use it also for little web sites and even little admin scripts.",
					"date": "2016-11-10",
					"id": "d9uv1za",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "vinme_49",
					"content": "And many more years to Go...",
					"date": "2016-11-10",
					"id": "d9uf25x",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "metamatic",
					"content": "Someone needs to give that poor gopher a cleanup, he\u0027s covered in JPEG artifacts.",
					"date": "2016-11-10",
					"id": "d9uvtwe",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "heydabop",
					"content": "Looks more like marks from sketching, not compression.",
					"date": "2016-11-10",
					"id": "d9v3x38",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "YEPHENAS",
					"content": "charcoal pen",
					"date": "2016-11-11",
					"id": "d9vp97f",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "loganjspears",
					"content": "congrats to the go team!",
					"date": "2016-11-10",
					"id": "d9un4qk",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "fakeNAcsgoPlayer",
					"content": "As a C veteran, I find Go refreshing and unique.\n\nAfter C, Go and Rust are two languages which make me want to program more. :)\n\nGood job on Go.\n\nPS:- Please add Generics for 2.0 release, would love to have a zero cost Generic abstraction, can ditch C++ for good.",
					"date": "2016-11-11",
					"id": "d9vm9l6",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "still no generics?",
					"date": "2016-11-10",
					"id": "d9uemhg",
					"isArchived": true,
					"isControversial": false,
					"score": -16
				},
				{
					"author": "tusharsingh",
					"content": "Generators!!! Everything and all of the time!",
					"date": "2016-11-10",
					"id": "d9umcqt",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				}
			]
		},
		{
			"author": "twetewat",
			"date": "2018-01-11",
			"id": "7pohuf",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "dayssincelastgohttprouter.com",
			"comments": [
				{
					"author": "grundee",
					"content": "Page loaded slowly for me. I bet you could solve this with some kind of load balancing router solution. Let me spin one up real fast for you in Go.",
					"date": "2018-01-11",
					"id": "dsje8vm",
					"isArchived": false,
					"isControversial": false,
					"score": 26
				},
				{
					"author": "kickroot",
					"content": "What? 106,000 days?  That\u0027s 290 years. I don\u0027t understand what I\u0027m looking at....",
					"date": "2018-01-11",
					"id": "dsitir7",
					"isArchived": false,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "Blackshell",
					"content": "They\u0027re probably not using a good router library.",
					"date": "2018-01-11",
					"id": "dsiuq3w",
					"isArchived": false,
					"isControversial": false,
					"score": 27
				},
				{
					"author": "soawesomejohn",
					"content": "I think you\u0027re right. I should probably write one for them.",
					"date": "2018-01-11",
					"id": "dsjlhnk",
					"isArchived": false,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "twetewat",
					"content": "GitHub is having some problems apparently ",
					"date": "2018-01-11",
					"id": "dsiuykh",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "kickroot",
					"content": "Now it says 1 day....which seems more likely :)\n\nAlso, GH was having problems earlier: https://status.github.com/messages",
					"date": "2018-01-11",
					"id": "dsj12jq",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "shovelpost",
					"content": "Good. Now make one more for loggers.",
					"date": "2018-01-11",
					"id": "dsiuc1x",
					"isArchived": false,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "jmatosp",
					"content": "that\u0027s easy, how many golang developers are there? multiply by 2",
					"date": "2018-01-11",
					"id": "dsiyvqs",
					"isArchived": false,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "fechan",
					"content": "So over 500 years?",
					"date": "2018-01-15",
					"id": "dspgnpj",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "deusmetallum",
					"content": "Hilarious, though I\u0027d love to see some stats. What\u0027s the highest it\u0027s ever reached? What\u0027s the average time between routers? etc.",
					"date": "2018-01-11",
					"id": "dsiqqos",
					"isArchived": false,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "ChristophBerger",
					"content": "Is it a good idea to count the days.... rather than the hours?",
					"date": "2018-01-11",
					"id": "dsjgl2a",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "plafoucr",
					"content": "This website doesn’t expose which router it’s using. Unless... it’s always using the latest router available?\n :)",
					"date": "2018-01-12",
					"id": "dsjwi55",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "zaemis",
					"content": "maybe it\u0027s written in PHP :-D",
					"date": "2018-01-12",
					"id": "dsk43b8",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "soapysops",
					"content": "It seems really strange to me that there isn\u0027t more \"standardization\" in the Go community. Even Rust (only comparing in this way because it\u0027s another young language, please put your pitchfork away ;) ) has many packages that most people have decided \"Yeah, they\u0027re doing it the right way, most people should use that one by default.\"\n\nMaybe the community needs better leadership? Or more leaders?",
					"date": "2018-01-12",
					"id": "dsk0pqb",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "metakeule",
					"content": "No, it needs a standard package management solution.\n\nThere is missing standardization in just about every area outside of the standard library.\n\nYou could as well have the webframework of the week, UI library attempt of the week, audio library of the week, package management library of the week, code generation library of the week, logging library of the week etc...\n\n",
					"date": "2018-01-12",
					"id": "dsk9gso",
					"isArchived": false,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "soapysops",
					"content": "There actually is a standard package management tool: https://github.com/golang/dep. If you see people using other tools, it\u0027s only because they haven\u0027t updated yet. But I agree with your other points.",
					"date": "2018-01-12",
					"id": "dsk9q46",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "metakeule",
					"content": "I mean, standard in the sense of the core devs/tools supporting it, not standard in the sense of an \"official experiment that might become standard or not\". Why is it taking so long to develop dep? Because it has to respect all the quirks of current dependency \"management\" (gopath, vanity imports, vendor directory and what not) instead of solving it at the root (import directive and go get). Dep will be a fragile tool with lots of bugs and edge cases because of the complexity it tries to solve. It is a dead born baby. Not simple, not elegant and not reliable.",
					"date": "2018-01-14",
					"id": "dsnr62x",
					"isArchived": false,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "davidmdm",
					"content": "Sounds a lot like npm and js land. ",
					"date": "2018-01-12",
					"id": "dskrcfj",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ChristophBerger",
					"content": "To be fair, most of these are probably just personal learning projects, and there is nothing wrong about learning.",
					"date": "2018-01-12",
					"id": "dsk6uqf",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jtrovo",
					"content": "HTTP routers in Go is the equivalent to web frameworks in Javascript or Logging libraries in Java.",
					"date": "2018-01-12",
					"id": "dsjpy8x",
					"isArchived": false,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "hippmr",
					"content": "Not to throw stones or anything ...  but have you ever considered the use of capital letters?",
					"date": "2018-01-11",
					"id": "dsj7l40",
					"isArchived": false,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "jerf",
					"content": "This is a case where you can solve that yourself, because DNS is case-insensitive: http://DaysSinceLastGoHTTPRouter.com works just fine. Your browser will probably lowercase it, though.",
					"date": "2018-01-11",
					"id": "dsjcfwj",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "hippmr",
					"content": "That only works if you know where the caps are supposed to go ... not so helpful on opaquetotallyweirdrandomcollectionofcharacters.com :-)",
					"date": "2018-01-11",
					"id": "dsjf2an",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "jerf",
					"content": "I will admit to a moment\u0027s confusion on how to capitalize HTTP. net/http seems to use HTTP though, even when CamelCase might suggest Http, so I went with that. Entire fractions of a second were burned on that decision.",
					"date": "2018-01-11",
					"id": "dsjf6lk",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "echophant",
					"content": "For Go code, [initialisms are generally done in a consistent case](https://github.com/golang/go/wiki/CodeReviewComments#initialisms).",
					"date": "2018-01-11",
					"id": "dsjms8p",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jtrovo",
					"content": "HTTP routers in Go is the equivalent to web frameworks in Javascript or Logging libraries in Java.",
					"date": "2018-01-12",
					"id": "dsjpz2o",
					"isArchived": false,
					"isControversial": false,
					"score": -2
				}
			]
		},
		{
			"author": "dlsniper",
			"date": "2018-03-26",
			"id": "87a3on",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "A Proposal for Package Versioning in Go",
			"comments": [
				{
					"author": "sh41",
					"content": "If anyone is interested in an example of a package where it really makes sense to have its v1 and v2 on distinct import paths, making it possible for programs to safely and easily import both, I\u0027ve got one.\n\nConsider the blackfriday markdown rendering package:\n\nhttps://github.com/russross/blackfriday\n\nIt has a v1 that dates back to 2011, and it can be described as a translation of Upskirt C markdown rendering library into Go.\n\nIt has a Renderer interface which can be implemented to create custom renderers (or override various behaviors in the default HTML renderer).\n\nThe package is old and very popular, so making breaking API changes to v1 is not feasible. But there was interest in resolving many of the API issues in a v2, which was created more recently. It has a cleaner, more Go-like API and much more powerful and flexible Renderer interface.\n\nI think it makes for a good example. I found it hard to relate to the oauth2 package example because it\u0027s much smaller and seemingly easier to update all in fell swoop. Definitely not the case with blackfriday.",
					"date": "2018-03-27",
					"id": "dwclk4d",
					"isArchived": false,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "Rican7",
					"content": "Great example.\n\nJust another example, which is likely to be recognized, is the **AWS SDK for Go**, [which was actually adopted from Stripe originally](https://aws.amazon.com/blogs/aws/coming-soon-aws-sdk-for-go/).\n\nIts v1 has been API \"stable\" for a while now ([Nov 2015](https://aws.amazon.com/blogs/aws/now-available-version-1-0-of-the-aws-sdk-for-go/)): https://github.com/aws/aws-sdk-go\n\n... buttttt they wanted to change the API and couldn\u0027t just kill support or API stability for v1 without doing a lot of damage to apps that use the SDK, sooooo they made a whole new repo just for the new version: https://github.com/aws/aws-sdk-go-v2\n\nIn fact, in their blog post they mentioned the necessity to support both and how it was useful to be **able to use both version in parallel**:\n\n\u0026gt; You can safely use the AWS SDK for Go 2.0 in parallel with the 1.x SDK, with both SDKs coexisting in the same Go application. We won’t drop support for the 1.0 SDK any time soon. We know there are a lot of customers depending on the 1.x SDK, and we will continue to support them. As we get closer to general availability for 2.0, we’ll share a more detailed plan about how we’ll support the 1.x SDK.\n\n(https://aws.amazon.com/blogs/developer/aws-sdk-for-go-2-0-developer-preview/)",
					"date": "2018-03-27",
					"id": "dwdb21i",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "peterbourgon",
					"content": "These types of packages are exceptions, not rules. It seems to me that what AWS did is entirely correct: if you want to make substantial breaking changes to a large package used by many importers, and you can\u0027t provide adapters for a gradual upgrade for whatever reason, then go ahead and create a new identifier — in this case, a new repo. It works well for both producers and consumers.\n\nIt doesn\u0027t seem correct to lift this exceptional case into the tooling as the standard workflow.",
					"date": "2018-03-27",
					"id": "dwdhmke",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SingularityNow",
					"content": "Why not though? Genuinely curious for the opposing side. I find Russ\u0027 arguments persuasive, but your \"not seeming correct\" doesn\u0027t really do a ton to explain what would be so bad about his proposed path forward.",
					"date": "2018-03-28",
					"id": "dwf29ir",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rawh",
					"content": "I had my first interaction with semantic import versioning\u0027s ability to implement gradual code repair (importing two or more versions of the same package within a single project) this weekend and was pleasantly surprised at how simple - and semantic - it was.\n\nAt first when the initial `vgo` blog posts came out I was skeptical about having to \"hardcode\" version numbers into my projects, it felt a bit redundant and messy, having your import paths muddied with both raw import URLs and versioned URLs alike, and then the `go.mod` and `go.modverify` files as well.\n\nBut when you think about Go\u0027s import compatibility rule, it makes sense that different versions of packages would effectively have different import paths.\n\nFurthermore, when you\u0027re working on a project that imports two versions of the same package, being able to easily see what version(s) are being imported directly within the package you are editing makes your code so much easier to read - you don\u0027t need to tab back and forth with a json / yaml / toml configuration file, you simply look at the import path to know exactly what version of the package you are working with. When gradually migrating a codebase from one version to the next, it\u0027s not an \"all or nothing\" endeavor, you can make incremental changes to each piece of your project, all the while importing both versions of the package until your full migration is complete.\n\nI\u0027m still running into a few edge cases with larger and more complex projects, and the requirement for a GitHub `~/.netrc` isn\u0027t ideal, but it\u0027s clear that there was a good about of forethought that went into `vgo` and I\u0027m glad to see the versioning question will finally be addressed by Go core.\n",
					"date": "2018-03-26",
					"id": "dwbid6b",
					"isArchived": false,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "peterbourgon",
					"content": "\u0026gt; But when you think about Go\u0027s import compatibility rule, it makes sense that different versions of packages would effectively have different import paths.\n\nIt\u0027s frustrating that we\u0027re bandying around this thing called \"The import compatibility **rule**\" because it\u0027s not a rule. It\u0027s not even strong enough to be called a convention, because almost no package abides it. At best, it\u0027s a wish, or a hope. And something that no other language ecosystem wishes, hopes for, requires, or enforces.\n\n\u0026gt; Furthermore, when you\u0027re working on a project that imports two versions of the same package\n\nIt _still_ hasn\u0027t been demonstrated to me that this is something that actually needs to or should be allowed. Other language ecosystems (notably Node) have even gone the other direction, from allowing it to disallowing it in the general case / by convention.",
					"date": "2018-03-26",
					"id": "dwbiwf2",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "iends",
					"content": "\u0026gt; Other language ecosystems (notably Node) have even gone the other direction, from allowing it to disallowing it in the general case / by convention.\n\nCan you clarify the meaning of this comment? npm allows the same package but different versions to be installed and used at the same time. ",
					"date": "2018-03-27",
					"id": "dwcbp5a",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; It\u0027s frustrating that we\u0027re bandying around this thing called \"The import compatibility rule\" because it\u0027s not a rule.\n\nI read it more descriptive than prescriptive. I.e. \"this is a name we gave to the idea of doing $thing\". How much $thing is actually done in practice is a different question.",
					"date": "2018-03-26",
					"id": "dwbkh6w",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "daveddev",
					"content": "Unfortunately this would need to be mostly a sacred rule for it\u0027s benefits to become reapable.  It is a direct containment of entropy.  However, if the cost is bore, my bet would be that it will set a new bar for how software integration is managed.",
					"date": "2018-03-26",
					"id": "dwbrrkt",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "daveddev",
					"content": "\u0026gt; it\u0027s not a rule\n\nThat\u0027s the proposal.  Obviously, \"should try\" can be read as being a weak way to define a rule, but the difficulty of keeping the rule perfectly does justify the verbiage.  It would be fundamentally beneficial to codify this principle more vocally and beyond the stdlib such that it is honored community-wide.\n\nIf someone states that breaking compatibility should also break reference, the onus of clarification should be on those who advocate for continuing discordant practices regardless of it\u0027s current popularity.  In other words, it is being suggested that we stop breaking shit, and you\u0027re asking for proof that doing so has value.  No, please, you prove why we should continue in chaotic practices.\n\nApologies if I\u0027ve misunderstood your position.",
					"date": "2018-03-26",
					"id": "dwbqkbb",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "peterbourgon",
					"content": "\u0026gt; In other words, it is being suggested that we stop breaking shit, and you\u0027re asking for proof that doing so has value. No, please, you prove why we should continue in chaotic practices.\n\nDependencies exist in two axes, space (the dependency identifier) and time (the version of the dependency). These are orthogonal axes. In approximately every other source code management ecosystem, breaking changes are signaled by convention (i.e. semantic version) in the time axis. That is, we do not expect Foo v1.0.0 to be equivalent to Foo v2.0.0. You claim this is \"chaotic practice\" but that\u0027s certainly not true. Software engineers have a native intuition that Foo is a label that transcends specific implementation, and that versions exist to categorize changes. This intuition flows into the tools that we\u0027ve built (npm, cargo, etc.) to manage motion through these vectorspaces.\n\nvgo claims these tools are too complex, and collapses the two-dimensional vectorspace to one in some circumstances: you get only package identifier. But in so doing it creates its own set of complexities, not least of which is the baby-in-the-bathwater of this natural intuition. Large disruptions from the intuitive status quo require correspondingly large and convincing justification: No, please, _you_ prove why this new scheme represents an improvement. The work just hasn\u0027t been done. IMO.",
					"date": "2018-03-26",
					"id": "dwbzhwx",
					"isArchived": false,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "daveddev",
					"content": "Grouping graduations at obvious stages dramatically expands the efficacy of communication and is far more intuitive than always requiring the inspection of fine details.  \"Collapsing dimensions\" is commonly practiced in casual communication to great effect.  For example, referring to young children as \"toddlers\" and over 18s as \"adults\" enables most affected conversations to continue without requiring additional investigation.  Hosting a party for toddlers would naturally evoke different planning than one for adults.  Likewise, once visitors for either party arrive, closer inspection would serve to provide more careful accommodations to fit existing moods/needs.  It does not seem like an improvement to have required the exact ages of each guest at the beginning of planning.\n\nWhat could be contained by a simple reference, is not better served by a complex tool.  Though, this is not a question of whether there should be a tool which can navigate metadata, it\u0027s a question of whether there should be a mechanism which facilitates progress without that dependency.  This proposal is quite defensive of keeping the go toolchain simple/focused, and it\u0027s easy to see why.  Whether something is a million years away, or a million years ago, the net result is initially the same.  Closer inspection should be left for when proximity narrows.",
					"date": "2018-03-27",
					"id": "dwc5j1z",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "peterbourgon",
					"content": "You\u0027re describing vgo\u0027s design decisions in the context of, like, aphorisms — \"grouping graduations . . . is far more intuitive than always requiring the inspection of fine details\" — \"keep the go toolchain simple/focused\" — but you\u0027re not really saying anything concrete.\n\nUntil now, we had the dimension of Identity (space) to establish a collection of versions; and the dimension of Version (time) to establish specific compatibility. Your \"grouped graduations\" were implemented by semantic versioning along the time axis: collapse all the versions with the same major version number, and you have a casual way to describe compatibility.\n\nvgo lifts this casual compatibility descriptor out of the Version (time) dimension and into the Identity (space) dimension. This action reduces the utility of the former, without apparently reducing its complexity; and increases the complexity of the latter, without apparently increasing its utility. It makes the work of the tooling easier, at the expense of disrupting the intuitive — and, I\u0027m claiming, _correct_ — mental model of what package names and versions ought to mean.",
					"date": "2018-03-27",
					"id": "dwcecvg",
					"isArchived": false,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "folago",
					"content": "I think that concept backing vgo is that space and time are not continuous but segmented. After some time a v2.0.0 comes along and  it creates a new identity, a new space. The two packages (v1 and v2) are now incompatible, why would they share the same space have the same identity? The fact that they share most of the code is not an excuse, so do forks with entirely different names/import paths.",
					"date": "2018-03-27",
					"id": "dwcrfn1",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "peterbourgon",
					"content": "Yes, I agree that this is the idea. It\u0027s even reasonably coherent. It\u0027s just not how most software builders build software. Should our tools adapt to how we work, or should we adapt how we work to our tools? Obviously the answer is \"somewhere in the middle\" but vgo falls clearly to the wrong side of that subjective line, on this issue, for me.",
					"date": "2018-03-27",
					"id": "dwdhfkr",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "folago",
					"content": "I might be wrong on this, but maybe the other tools are following a workflow from before semantic versioning gave a clear meaning to a major version bump. In this world the difference from V3 to v4 is just added functionality not a braking change, and the tools reflect this by keeping the packages in the same space/identity. And when a breaking change happens it might not even be in a major version bump. This blurred the lines. With vgo we can experiment a different approach with more stark lines, it took a while but I for one would like to see how it pans out.",
					"date": "2018-03-28",
					"id": "dwf0j21",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "daveddev",
					"content": "Drawing the lines out; Consider the hosting of a toddler/adult party where the guests invite their own friends.  The host personally invites \"Toddler Alice\".  Subsequently, the host is notified that \"Adult Alice\" was invited by another attendee.  Collapsed guest details establish sufficient expectations for host and guests reducing initial complexity greatly without preventing additional use of finer guest details.  In other words, the specific ages of Toddler and Adult Alice are irrelevant at this stage.  \n\nNow, if the attendee who invited Adult Alice was forced to visit with Toddler Alice instead, it would be quite disruptive (and possibly incompatible).  Solving this by rejecting Adult Alice outright forsakes the reality that Adult Alice and Toddler Alice are fundamentally different.  Accepting the reality creates the justified requirement for Alice to play nice with others, even future/past Alice.\n\nThe concrete truth is that toddler versions are simply different inherently from their adult versions regardless of their shared history and identity.  If they both happen to be writing in the same diary about the party, resulting in bad entries, it\u0027s Alice\u0027s fault for not being prepared to attend the same party as Alice.  Each Alice is writing different things to the same diary, about different guests.  There are different expectations, different conversations, etc.\n\nThe proposed rule delineates that Alices should be responsible for Alices fully.  Refusing the inconvenience of handling this potential creates potentially impossible-to-resolve inconveniences.  Further, the proposal allows for the preparation of the party to not be dependent on finer guest details until the party gets started and everyone has gotten to know each other.\n\n\nEdit to add: This post was far more humorous to me using \"Toddler Peter\" instead of \"Toddler Alice\", but I wanted to avoid any condescension that might imply.  I\u0027m thankful and respect you for your contributions to the community.",
					"date": "2018-03-27",
					"id": "dwcgwhq",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "aboukirev",
					"content": "I think the idea is not to have a single project to use two versions of a library but for multiple projects in a monorepo use either one version or another.  The whole monorepo should still build and pass tests without vendoring.  However, using proxy like gopkg.in or your own should solve that problem.  It looks like \"type aliases v2.0.0\" case.\n\nAllowing multiple versions of a library in a single binary is likely to bite you.",
					"date": "2018-03-26",
					"id": "dwbp5or",
					"isArchived": false,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; Allowing multiple versions of a library in a single binary is likely to bite you.\n\nFTR, the proposal is to allow exactly that and the justification is gradual code repair. If you want that, it is unavoidable to have two different major versions of the same package in one binary. If the dependency graph is\n\n* A -\u0026gt; B, C\n* B, C -\u0026gt; D\n\nand B and C are maintained by different teams in different repositories, then you can\u0027t atomically update both B and C to use a new major version of D.\n\nAnd yes, there are cases where this will require great care to prevent hurt. I\u0027m not sure they are avoidable in either case, though.",
					"date": "2018-03-26",
					"id": "dwbsz8j",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "peterbourgon",
					"content": "I understand the rationale. I believe it is a problem. But I believe it\u0027s a problem with software development methodology (i.e. unnecessary complexity) and should be fixed at the process layer, rather than conceding that it\u0027s intractable (i.e. necessary complexity) and needs to be accommodated with tooling. The latter case has been repeatedly asserted by the core team, but (IMO) never convincingly argued.",
					"date": "2018-03-26",
					"id": "dwc0kgl",
					"isArchived": false,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "ares623",
					"content": "I think this talk from Rich Hickey is relevant https://www.youtube.com/watch?v\u003doyLBGkS5ICk\n\nIt\u0027s also interesting to note that Clojure core.async library is heavily inspired by Go\u0027s concurrency model.",
					"date": "2018-03-27",
					"id": "dwcufd0",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "calclueless",
			"date": "2017-05-10",
			"id": "6addvw",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "CockroachDB 1.0",
			"comments": [
				{
					"author": "dewey4iv",
					"content": "I\u0027ve been following the project for some time and I\u0027m really excited to see it hit 1.0! ",
					"date": "2017-05-10",
					"id": "dhdrios",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "BSInHorribleness",
					"content": "I\u0027m not usually a big \"spend lots of time working on projects in my off time\" person, but I think I might make an exception for Cockroach.\n\nI\u0027ve oft wondered why there isn\u0027t a half way decent (built in) combination of SQL and scale out. The success of this project would be awesome. It would be great to help it along by using it myself and by learning enough about it to evangelize. (Assuming, of course, it lives up to some of those promises.)",
					"date": "2017-05-10",
					"id": "dhdqdzf",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "gin_and_toxic",
					"content": "For a long time, it was not possible to horizontally scale relational DB without sharding your data.\n\nThen came Google Cloud Spanner, just announced a few months ago. It\u0027s ACID compliant, but only for SELECT queries.\n\nCockroachDB is built based on Spanner.",
					"date": "2017-05-10",
					"id": "dhe125n",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-05-10",
					"id": "dheblxz",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "yackob03",
					"content": "The C and I of ACID are super important for reads. You probably want to get a consistent committed view of the data when you\u0027re reading.\n\nhttps://en.wikipedia.org/wiki/Isolation_(database_systems)#Read_phenomena",
					"date": "2017-05-11",
					"id": "dheju9i",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Cidan",
					"content": "Google has been using Spanner in production for years now -- we use Cloud Spanner at work now too, it really is just absolutely amazing. I can\u0027t recommend it enough.",
					"date": "2017-05-10",
					"id": "dhe4kt9",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "nairb774",
					"content": "Spanner has been in the works for around a decade at this point. Been using it for years now, love it.",
					"date": "2017-05-11",
					"id": "dhem0zf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hartley231",
					"content": "CockroachDB design is informed / influenced by Spanner [1] but it is not \"built based on Spanner\".\n\n0. https://github.com/cockroachdb/cockroach/blob/master/docs/design.md",
					"date": "2017-05-11",
					"id": "dhetlh5",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "gin_and_toxic",
					"content": "Sorry, to be more accurate: \"the design of CockroachDB is based on Google’s Spanner data storage system\"\n\nhttps://www.cockroachlabs.com/blog/living-without-atomic-clocks/",
					"date": "2017-05-11",
					"id": "dhf4esk",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "falder12",
					"content": "Congrats! What is the catch though? As with everything, I am sure there are tradeoffs that are being made here. Is there a document that describes these? ",
					"date": "2017-05-10",
					"id": "dhea57x",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "yackob03",
					"content": "The spanner paper has what you need: https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf\n\nOne tradeoff is that since it\u0027s based off raft, it\u0027s a CP system, which means that if your network is flaky your availability will suffer. Google manages to run their implementation of spanner at several nines of availability by tightly controlling the network.\n\nhttps://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45855.pdf",
					"date": "2017-05-11",
					"id": "dhek3wp",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "riking27",
					"content": "If your clocks are off, it enters a pseudo failure mode where all operations take significant time (250ms or so)",
					"date": "2017-05-12",
					"id": "dhgfcrt",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "twisted1919",
					"content": "I\u0027ve been waiting for this for so long now... Glad it\u0027s finally here :)",
					"date": "2017-05-10",
					"id": "dhe0d92",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "SeerUD",
					"content": "This looks too good to be true. I\u0027ll need to test this out later and see how it performs... You even already have a Docker image ready to go.\n\nI\u0027ve taken a look through some of the docs and FAQ and it seems very impressive. Who\u0027s using it at the moment? (With it being so new and only just being announced as production-ready I imagine not many people?)\n\nEdit: Just a heads up too, trying to actually click something on the drop-downs in the menu was very difficult! The menu kept disappearing.",
					"date": "2017-05-10",
					"id": "dhdqis0",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "calclueless",
					"content": "[cockroachdb engineer] we\u0027ve just turned the corner on production readiness. we have a couple of customers which cover the range from startup to enterprise who are already in production. there\u0027s a larger group which is currently evaluating CockroachDB through proof of concepts and beta testbeds but if you\u0027re looking for specific names, two we publicly announced (in the blog post) are Baidu and Heroic Labs.",
					"date": "2017-05-10",
					"id": "dhdqrmv",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "ROGER_CHOCS",
					"content": "This is pretty flippin\u0027 sweet! I am excited to use this. Any plans for computed column types, views, cte, functions, etc?  \n\nThanks! As an ardent supporter of Dr. Codd, anything that promotes SQL into the future is a-ok with me.",
					"date": "2017-05-10",
					"id": "dhe4341",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "calclueless",
					"content": "yup, all those an much more are very much on our roadmap, not everything could make the 1.0 cut but stay tuned!",
					"date": "2017-05-10",
					"id": "dhe5104",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ROGER_CHOCS",
					"content": "Awesome, thanks for keeping it relational!",
					"date": "2017-05-10",
					"id": "dhe638y",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Creshal",
					"content": "Cockroach errs on the side of being really slow (250ms delays, ouch) when it can\u0027t get a good clock source. So not really too good to be true, assuming you have a good enough infrastructure for it.",
					"date": "2017-05-11",
					"id": "dhfcbbw",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "hugthemachines",
					"content": "Still a better db name than Mongo.",
					"date": "2017-05-10",
					"id": "dhe33w8",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "tiberiousr",
					"content": "The problem with NoSQL dbs from my point of view is that the moment you start requiring any kind of relationship between datasets they no longer fit your use case. And given the nature of feature creep it\u0027s pretty much a given that you\u0027re going to need an RDBMS sooner or later. \n\nMight as well just start with one and save yourself the trouble of having to migrate further down the line.",
					"date": "2017-05-10",
					"id": "dhe7327",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "hugthemachines",
					"content": "I am sure you are right. What I was talking about is that maybe Cockroach is not a perfect name for success in the world of corporations but Mongo on the other hand is, at least where I live, short for \"mongoloid\" (Downs syndrome) and used by rude people as an insult. So that name is worse.",
					"date": "2017-05-10",
					"id": "dhe87il",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "DualRearWheels",
					"content": "True. It is like a comparison of rose vs potato. http://www.bash.org/?151227",
					"date": "2017-05-11",
					"id": "dhewtue",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "circuitously",
					"content": "Why use just one? Why not pick the best tool for the job? We use MySQL for account data, totalling no more than a few MB. In Mongo we have a collection of 15M documents of structured, indexed data. Pulling out the documents for any given user or account is simple.\n\nThere are use cases where Mongo is clearly better, and cases where MySQL is clearly better. What I hope we see in CockroachDB is a relational database that improves on areas where SQL performs notoriously badly.",
					"date": "2017-05-10",
					"id": "dheae5g",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "earthboundkid",
					"content": "How do you work around the race condition when a document is synchronized to Mongo but not MySQL or vice versa?",
					"date": "2017-05-11",
					"id": "dhevvy5",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "prawnsalad",
					"content": "I think he meant that documents are only in Mongo while account data is only in MySQL. Presumably each document in Mongo will have a user_id field which matches the never changing user_id in MySQL. \n\n2 different databases that are better suited to each type of data.",
					"date": "2017-05-11",
					"id": "dhf0n77",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "circuitously",
					"content": "Not sure I follow. Documents are stored solely in Mongo, not in MySQL at all.",
					"date": "2017-05-11",
					"id": "dhf7d8o",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rat9988",
					"content": "Beginner here asking just for the sake of learning.\n\nIs CockroachDB some database server as postgresql?",
					"date": "2017-05-11",
					"id": "dhf6ugo",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "lansellot",
					"content": "Yes.",
					"date": "2017-05-12",
					"id": "dhg273m",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "danieladams456",
					"content": "Now we just need AWS to make an RDS version of this",
					"date": "2017-05-11",
					"id": "dhee63r",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Arsene_Lupin",
					"content": "What would be the perfect usecase for cockroach DB? ",
					"date": "2017-05-11",
					"id": "dhf09nu",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "brokedown",
					"content": "I really wanted to use CockroachDB, I had an oddball use case for it, basically using replication to have a local environment running on a Pi that would sync up with an online version when I had connectivity.\n\nI gave up on it pretty quickly. CockroachDB on Pi was more or less broken, and trying to replicate a mixed cluster or x86 and arm just wasn\u0027t working for any practical value of working.\n\nMaybe things have improved, this was a few months ago... But I went back to mysql and manual data refreshes.",
					"date": "2017-05-10",
					"id": "dhdzrfk",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "bmurphy1976",
					"content": "Sounds more like a couchdb use case to me.",
					"date": "2017-05-11",
					"id": "dhelo1p",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "brokedown",
					"content": "Maybe, but that is besides the point. The reason it didn\u0027t work had nothing to do with there being a potentially better option.",
					"date": "2017-05-11",
					"id": "dhfi893",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "lansellot",
					"content": "They don\u0027t officially support ARM.",
					"date": "2017-05-12",
					"id": "dhg28cp",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-05-11",
					"id": "dhetggy",
					"isArchived": true,
					"isControversial": false,
					"score": -3
				},
				{
					"author": "redditbanditking",
					"content": "Oh it can fly alright",
					"date": "2017-05-11",
					"id": "dhevtm1",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				}
			]
		},
		{
			"author": "TrueFurby",
			"date": "2016-11-23",
			"id": "5egj4f",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Your Go code before and after using \u0027go fmt\u0027",
			"comments": [
				{
					"author": "shovelpost",
					"content": "Does gofmt turn chocolate into gold?",
					"date": "2016-11-23",
					"id": "dac91wi",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "[deleted]",
					"content": "Imagine: Harry Potter and The Formatting of Go.",
					"date": "2016-11-23",
					"id": "dacacyb",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "DrEagle",
					"content": "No, they turn orange",
					"date": "2016-11-23",
					"id": "dachl0c",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tscs37",
					"content": "You vs the guy she tells you not to worry about",
					"date": "2016-11-23",
					"id": "dacdumy",
					"isArchived": true,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "RevMen",
					"content": "I love gofmt. Sometimes I\u0027ll copy in a bunch of code that\u0027s all messed up and I just hit control-S and watch it all magically fall into place.",
					"date": "2016-11-23",
					"id": "dach7tm",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-11-23",
					"id": "dacli56",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bear1728",
					"content": "I felt the same way. But then I found that vscode actually has a lot of formatters for various languages. So I hit \"ctl-shift-i\" and it will format go, python, javascript, etc. Mostly through plugins, but I still very much appreciate it. I assume similar plugins are available on plenty of other editors, I just never discovered them I guess.",
					"date": "2016-11-23",
					"id": "dacnequ",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-11-23",
					"id": "dacpc9y",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bear1728",
					"content": "I use `\"go.formatOnSave\": true,` right now just to avoid too many large diffs for the other files. But I agree, Go has made me think every new language can benefit from standard tools like this. Especially when they are so easy to use!",
					"date": "2016-11-23",
					"id": "dacrop3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ProfOak_",
					"content": "Same! I don\u0027t even bother with `:set paste` in vim anymore, at least for Go.",
					"date": "2016-11-23",
					"id": "dack53e",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "hexasquid",
					"content": "Too many colors.",
					"date": "2016-11-23",
					"id": "dacm196",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "F41LUR3",
					"content": "It must be black text on a white background, with serif\u0027d font!!!",
					"date": "2016-11-23",
					"id": "dacnk0n",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Zatherz",
					"content": "Wow, flashback!",
					"date": "2016-11-23",
					"id": "dacqpbq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "AnimalMachine",
					"content": "Well now I have to print a gopher. \u003d)",
					"date": "2016-11-24",
					"id": "dadacw4",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "random314",
					"content": "Gofmt is probably one of the nicest thing about coding in go. Everyone just stfu about their preferred style and work together.",
					"date": "2016-11-24",
					"id": "dadel1w",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Undreren",
					"content": "Code formatters in general are awesome. I first encountered them with Haskell, and used it with Elm.\n\nMakes you a lazy bastard though.",
					"date": "2016-12-03",
					"id": "daqb40g",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-11-23",
					"id": "dachrhl",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "neoasterisk",
					"content": "I\u0027d rather just have one format to rule them all and not go back to the dark ages of formatting arguments.",
					"date": "2016-11-23",
					"id": "dacnbmw",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-11-23",
					"id": "dacq7w4",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "neoasterisk",
					"content": "[Gofmt\u0027s style is no one\u0027s favorite, yet gofmt is everyone\u0027s favorite.](https://www.youtube.com/watch?v\u003dPAAkCSZUG1c\u0026amp;t\u003d8m44s)",
					"date": "2016-11-23",
					"id": "dacuk7j",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "natefinch",
					"content": "A function on a single line is still just a single statement.  An if statement on one line is two statements.\n\nReal life reason: if you set a breakpoint on your line, does it break outside the if or inside?",
					"date": "2016-11-23",
					"id": "daczmtx",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "er5te",
					"content": "and magically yet here are two gophers arguing over formatting",
					"date": "2016-11-23",
					"id": "dacs4ef",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "neoasterisk",
					"content": "Nah, not really. The people that are still complaining about formatting in the Go community can probably be counted on the fingers of one hand.",
					"date": "2016-11-23",
					"id": "dacunt0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "er5te",
					"content": "do we have a scientific study to confirm this?",
					"date": "2016-11-23",
					"id": "dacuy1q",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "neoasterisk",
					"content": "Well I said probably. Besides there will always be irrational people in the world or people that just like to complain for no good reason.",
					"date": "2016-11-23",
					"id": "dacv3kw",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dilap",
					"content": "also not my personal preference, but i swallow it for the overriding benefit of uniformity.\n\nsubmit and benefit!",
					"date": "2016-11-23",
					"id": "dacojva",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "random314",
					"content": "Your the reason gofmt is wonderful.",
					"date": "2016-11-24",
					"id": "dadem5i",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-11-24",
					"id": "dadfbcf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "random314",
					"content": "Because your opinion on coding standards doesn\u0027t matter.\n\nI lead a team. Whenever someone comes up to me wanting to discuss about their opinion on spaces or brackets I told them to look at gofmt and stop wasting everyone\u0027s time. That\u0027s the beauty of it, it\u0027s one less thing to worry about.",
					"date": "2016-11-24",
					"id": "dadfhyw",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "TrueFurby",
					"content": "As if we have nothing to do, right? So little time so much to code..",
					"date": "2016-11-24",
					"id": "dadssoc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "postman_",
					"content": "    man githooks",
					"date": "2016-11-24",
					"id": "dadmtpq",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "broady",
			"date": "2016-08-18",
			"id": "4ydz9c",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Smaller Go 1.7 binaries - The Go Blog",
			"comments": [
				{
					"author": "princeandin",
					"content": "I write all my personal CLI utilities in Go now so this awesome news! Always pleased with the clarity and comprehensiveness of all the blog posts.",
					"date": "2016-08-19",
					"id": "d6oc0st",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "mcouk",
					"content": "I\u0027ve just tested 1.7 on my Go port of UMoria, and the binary size has dropped from 5.4MB to 4.2MB...a 22% saving. Nice!",
					"date": "2016-08-20",
					"id": "d6p8nus",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "funny_falcon",
			"date": "2017-09-12",
			"id": "6zoggw",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go 1.10 will include \"Significantly improved timer performance for multi-core machines\"",
			"comments": [
				{
					"author": "StevenTheBirdSeagull",
					"content": "YES!!",
					"date": "2017-09-13",
					"id": "dmxi3hq",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-09-13",
					"id": "dmy24zn",
					"isArchived": true,
					"isControversial": false,
					"score": -10
				},
				{
					"author": "joncalhoun",
					"content": "Semantic versioning !\u003d Decimal notation.",
					"date": "2017-09-13",
					"id": "dmy2u6y",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "PaluMacil",
					"content": "semantic versioning isn\u0027t new. Almost all software uses it. Take a look at [semver.org](http://semver.org/)",
					"date": "2017-09-13",
					"id": "dmy40rr",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				}
			]
		},
		{
			"author": "hagen1778",
			"date": "2016-10-16",
			"id": "57tmp1",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Why you should not use iris for your Go projects",
			"comments": [
				{
					"author": "weberc2",
					"content": "Iris author to HTTPRouter\u0027s author:\n\n\u0026gt; you just hate Iris because it lives 3 months and has more stars than [HTTPRouter]\n\nYou might consider unstarring [Iris on GitHub](https://github.com/kataras/iris) if you previously starred it under false pretenses and/or [star the project it stole from](https://github.com/julienschmidt/httprouter) to help it provide such misleading benchmarks.",
					"date": "2016-10-16",
					"id": "d8uxekz",
					"isArchived": true,
					"isControversial": false,
					"score": 35
				},
				{
					"author": "connor4312",
					"content": "I was curious about the source of Iris\u0027 stars and did some super informal analysis from Github\u0027s API. I pulled down the \"stargazers\" and looked at the distribution of public repos they have, based on that it appears the stars are from legitimate users (in the ongoing drama some people have insinuated otherwise).\n\n    % of users with more than x repos\n    90% had more than 3\n    80% had more than 6\n    70% had more than 10\n    60% had more than 14\n    50% had more than 19\n    40% had more than 26\n    30% had more than 35\n    20% had more than 49\n    10% had more than 81\n\nI was going to pull down the gazers of `httprouter` to compare, but I\u0027m rate limited for another hour. I\u0027d expect that we\u0027d see roughly the same distribution. [Quick gist](https://gist.github.com/connor4312/256d7a621f6197a89f5faa600088ee70) of the code if anyone wants to verify or run the analysis themselves.",
					"date": "2016-10-17",
					"id": "d8vb26y",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "sh41",
					"content": "I remember when I first saw the project I immediately starred it just because it was written in Go (a language I like, and want to see more projects use), I didn\u0027t consider any other factors. Much later, after I saw the drama, I realized I should go and unstar it. But I\u0027m sure many people never showed that initiative.",
					"date": "2016-10-17",
					"id": "d8vfxld",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "jandunm",
					"content": "That\u0027s what we in the industry call \"a dick move\"\n\nGo community has fallen into a big trap and that is bad fact, very sadly.\n\nI first met iris on version 2 and I never changed a framework from then. I really like it because it has incomparable features that no other web framework had back then (and still). Maybe he `stole` code from `another planet or from a future timeline`.\n\nIt\u0027s really depressing how many people take this whole post seriously...﻿ ",
					"date": "2016-10-28",
					"id": "d9asdy1",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "connor4312",
					"content": "What? How is checking and confirming that Iris\u0027 stars are legit a dick move?\n\nAs far as everything else, well. It\u0027s totally your right to like Iris, if it works for you that\u0027s great. But there\u0027s no doubt--and it\u0027s well-documented--that the author stole code from other projects, it\u0027s indisputable at this point.",
					"date": "2016-10-28",
					"id": "d9askja",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "kirilldanshin",
					"content": "pretty sure we need.\nalso I\u0027ve just published some news about it.",
					"date": "2016-10-17",
					"id": "d8vhbm3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "quiI",
					"content": "I wonder how much of this toxic-ness is from someone chasing github stars for a perception of fame. Wish they\u0027d just remove them altogether. ",
					"date": "2016-10-17",
					"id": "d8vjryk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "weberc2",
					"content": "I don\u0027t know; they\u0027re moderately useful for informing me at a glance about which of the competing libraries is more widely used. This is the first abuse I\u0027ve seen.",
					"date": "2016-10-17",
					"id": "d8vmmvv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "CaptaincCodeman",
					"content": "Previous discussion about dubious approach to benchmarks:\nhttps://www.reddit.com/r/golang/comments/4a8yit/is_this_the_fastest_go_web_framework/",
					"date": "2016-10-16",
					"id": "d8uvp2g",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "FIuffyRabbit",
					"content": "For the uninformed, all of the [deleted] user posts are from the author of iris. I don\u0027t really understand how this project has ballooned so fast. ",
					"date": "2016-10-17",
					"id": "d8v1aqa",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "thewhitetulip",
					"content": "It is simple, it is written in Go, people want to learn Go and they just star any repo which is written in Go.",
					"date": "2016-10-17",
					"id": "d8vipxa",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "beeker1121",
					"content": "Thank you for posting and taking the risk, as I\u0027m sure you were worried about the possible backlash. Posting like you have though is exactly what is needed if the goal is try and help people in the community develop the best, most stable applications. Hopefully it prevents people from using this framework and regretting it later on. You don\u0027t need a framework when Go itself is one.\n\nBtw, makes me remember all the heat I took on a [similar post](https://www.reddit.com/r/golang/comments/4q60x0/contributing_to_bad_practices_in_go/) I made awhile back about Iris and its developer... hopefully this one goes better for you lol.",
					"date": "2016-10-16",
					"id": "d8uz2or",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "dlsniper",
					"content": "I\u0027m actually not afraid of the backlash since all the backlashing seems to be just fury and then self-deleting comments. But thank you for your concern. It also happens to be the truth as I see it based on all the evidence there are in the public (I\u0027m not advocating that I hold the universal truth).\n\nFirst time the author may have had an excuse, poor English, being new to programming, etc.\n\nNow it seems he\u0027s doing it all over again and I\u0027ve seen far too many people tricked by the fact that it has stars on Github. It\u0027s the only reason I\u0027ve published that, to make people aware of it and I hope people will understand that.\n\nIt\u0027s sad this has to leave a stain on the community and frankly it\u0027s a pity that all that time invested in creating iris is thrown away by all these issues.",
					"date": "2016-10-17",
					"id": "d8vjwsy",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "1 month later https://github.com/kataras/iris/commit/948eb2ecc132e299e476bfbd051a8100e216f2ac \n",
					"date": "2016-11-15",
					"id": "da0no39",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "justinisrael",
					"content": "For a moment there was a reply on the blog article from what I think was the Iris author, but for whatever reason  it is now deleted. \n\nAnyways, it had the usual tone I have seen from the Iris author which spins the comments against Iris to be stemming from jealousy. Also the reply claimed that criticism against Iris having false benchmarks was wrong because \"he didn\u0027t write the benchmarks. They were written by someone else and Iris was  still at the top\". But again I think it is just spin because the claim was that the implementation of Iris cheats on the benchmark on account of requests caching. So it doesn\u0027t really matter who writes the benchmark. ",
					"date": "2016-10-17",
					"id": "d8vgo12",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dlsniper",
					"content": "There was a single comment in the spam / moderation queue from the author, which I\u0027ve approved as soon as I could. If it got deleted meanwhile I can say that it wasn\u0027t from me. I hate blogs which don\u0027t have comments or worse, moderate comments and I\u0027ll never do that unless they are using slurs or foul language.",
					"date": "2016-10-17",
					"id": "d8vjnu2",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-17",
					"id": "d8vi0q0",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "pkieltyka",
					"content": "thanks very much @thesilentwitness :) - I always suggest if you\u0027re deciding on some underlying tech for a project, first look at the api, then second read the source to see if you can understand it and how well it\u0027s put together. ",
					"date": "2016-10-17",
					"id": "d8vmxv9",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "HectorJ",
					"content": "\u0026gt; It\u0027s 100% stdlib compliant, every other router I\u0027ve seen is not (or has stdlib compliancy hacked into it)\n\nWhat about https://github.com/gorilla/mux ? Seems just as compliant (takes http.Handler, exposes an http.Handler, just as chi)",
					"date": "2016-10-17",
					"id": "d8vm63l",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "lwcd",
					"content": "It can be slightly awkward to work with middleware in gorilla/mux. Chi does a better job of this by providing an \"Express-ish\" API. Also, chi was very early to adopt Go1.7 net/context, giving it a modern, idiomatic interface. \n\nFor me, chi does more than just provide routing - it provides a clean, idiomatic backbone to a Go http server.",
					"date": "2016-10-19",
					"id": "d8ylk62",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2016-10-17",
					"id": "d8vogcf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SilentWeaponQuietWar",
					"content": "as someone who typically just uses gorilla mux, since that\u0027s what everyone else I work with uses... why the downvotes to this person\u0027s response?",
					"date": "2016-10-17",
					"id": "d8w9mug",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "metamatic",
					"content": "I just started using github.com/bouk/httprouter. It\u0027s a fork of httprouter, updated to use `Context` instead of an extra argument on functions. So you get the goodness of httprouter with a completely standard set of Handlers and HandlerFuncs.\n\nWith any luck the main httprouter will [adopt the same Context parameter-fetching](https://github.com/julienschmidt/httprouter/pull/147) and I\u0027ll switch back at some point.",
					"date": "2016-10-17",
					"id": "d8vrchd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "heckerle",
					"content": "Granted I\u0027m new to Go, but I really like that Echo handlers return `error`, which makes centralized error handling a lot easier. I kinda wish there where some alternatives but I didn\u0027t find any yet.",
					"date": "2016-10-17",
					"id": "d8vw4i1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thesilentwitness",
					"content": "You can use recover middleware for panics.",
					"date": "2016-10-17",
					"id": "d8vxlgu",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "heckerle",
					"content": "No I wasn\u0027t talking about panics, but rather about regular errors.\n\nIn my REST API Echo allows me to use it\u0027s [NewHTTPError API](https://godoc.org/github.com/labstack/echo#NewHTTPError) to return non-2xx replies in a simple way similar to other libraries. But where it gets useful for me is when I\u0027m using for instance [`validator`](https://github.com/go-playground/validator/) and Echo allows me here to simply return those validator errors from a request handler. All I have to write for this is `return err` and that\u0027s it.\n\nIn the [central error handler](https://godoc.org/github.com/labstack/echo#Echo.SetHTTPErrorHandler) I can then catch those errors and handle them accordingly. In my case I\u0027m for instance formatting validator errors to contain the failed validation keys in an array, in order for the web frontend to correctly mark the incorrectly filled input fields with e.g. a red outline.\n\nThe only DRY alternative I can think of using regular standard HTTP handlers is to wrap each possibly failing function in a method that would generate the reply accordingly, but IMO that\u0027s a lot more cumbersome than a central error handler, since you now have to write `return formatReplyForLibraryXYZ(req, res, err)` everywhere instead of simply having `return err`.",
					"date": "2016-10-17",
					"id": "d8vyoxw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mr_delphi",
					"content": "gin has an array of errors per request. you can either deal with the error on the spot or simply add it to the array. the middleware can then centrally go over all recorded errors.",
					"date": "2016-10-17",
					"id": "d8weky7",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "heckerle",
					"content": "Oh man thanks!! This is really awesome, because I really liked gin so far. I do wonder what the use case for multiple errors per request is… Don\u0027t you abort the processing with the first error anyways? Or can you think of anything where this feature could be useful?",
					"date": "2016-10-17",
					"id": "d8wfwi0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mr_delphi",
					"content": "I don\u0027t know, maybe if the error isn\u0027t fatal, we can simply record it and proceed anyway. the middleware then logs everything ",
					"date": "2016-10-17",
					"id": "d8wg70a",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "qu33ksilver",
					"content": "Just curious - What legal action can I take if I find someone using my code without proper attribution ?",
					"date": "2016-10-17",
					"id": "d8w05o0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "First try and talk with the person doing this. Usually it can be a simple mistake or people not knowing about this when they first venture in the (open-source) world. I recommend the less nuclear / nicer options first.\n\nIt also depends on how this is done. If they have no mention at all or anything else pointing to your code then then that\u0027s very unfortunate. If they do link back then probably they\u0027ll be open to a friendly approach.\n\nThen, if it doesn\u0027t work, you can ask Github to take it down if it\u0027s on their website, others have similar things.\n\nLegally speaking, you\u0027d have to talk to someone specialized in this area as I have not been in this situation before and I cannot give advice on this.",
					"date": "2016-10-17",
					"id": "d8w1wzq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "\u0026gt; The first thing that should trigger a \"huh, I need to look a bit more into this\" reaction is: there is a single contributor to it. And it was always a single contributor. The author of the project actively rejects PRs and the occasional accident when a PR gets merged that contribution will be obliterated any time soon after, when the author decides to flatten the history of the repository (again). Which helps deliver the next point, API stability.\nBut before that, I\u0027ll briefly mention that the issues that are opened on Github are almost always edited to reflect a different reality, comments get deleted and conversations get locked. It happened to me (I admit that I could have done better in the initial message but I couldn\u0027t change things as my issue was instantly locked by the author and I couldn\u0027t do anything about it anymore).\n\nhttps://github.com/kataras/iris/pulls?q\u003dis%3Apr+is%3Aclosed ?\n\nI\u0027m new to this whole controversy, but some of these complaints strike me as a tad harsh. There also appear to be a lot of licenses in the license file.\n\n__Edit.__ this brings up an interesting question: does one have to manually include licenses in a project that pulls dependencies via `go get`? Wouldn\u0027t the individual building the binary have access to the licenses anyways?",
					"date": "2016-10-16",
					"id": "d8uxryg",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "ChristophBerger",
					"content": "\u0026gt; does one have to manually include licenses in a project that pulls dependencies via go get?\n\nThis is a good point. Technically, the license files are preserved this way, and this might already comply to copyright laws. (Disclaimers: 1. IANAL, and 2. law varies by country.) \n\nStill, two aspects speak towards manually adding the licenses:\n\n1. `go get`pulls the code into the original paths and not into the project that uses the code (unless the project has copies of the imported code in `\b/vendor`). So the licenses would not be obvious to the user.\n\n2. It is a sign of good manners to properly give attribution to the code being used. (Even if the license or the laws do not require this.)\n\nApart from all legal and moral questions, adding the license files manually is quick and effortless, and keeps the author on the safe side (provided, of course, they also obey to these licenses). ",
					"date": "2016-10-17",
					"id": "d8vcep5",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "\u0026gt; go getpulls the code into the original paths and not into the project that uses the code (unless the project has copies of the imported code in /vendor). So the licenses would not be obvious to the user.\n\nThe behavior of `go get` is documented though, so it _should_ be obvious to users that care. From what I have seen, it\u0027s extremely uncommon for people to aggregate licenses into their open-source projects when a package manager of some sort is fetching dependencies.\n\n\u0026gt; It is a sign of good manners to properly give attribution to the code being used. (Even if the license or the laws do not require this.)\n\nI feel like it\u0027s unreasonable to release software under a license that does not require attribution while still expecting it.",
					"date": "2016-10-17",
					"id": "d8vqdzw",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ChristophBerger",
					"content": "\u0026gt; The behavior of go get is documented though, so it should be obvious to users that care.\n\nAbsolutely. I was more thinking about possible legal obligations. Specifically, if a third-party license says something like, \"if you distribute code based on this code, then you must include this license file\", and you push your code to GitHub, Gitlab, Bitbucket etc, would you then be required to add a copy of this file to your project, despite the fact that the original can be found *somewhere* if the user cares enough to try and find it? Me, I\u0027d rather be on the safe side and copy the license file over. Yes, I might be overly cautious about this point, but I can live with that :)\n\n\u0026gt; I feel like it\u0027s unreasonable to release software under a license that does not require attribution while still expecting it.\n\nI completely agree. I was not referring to any particular license though, as this sub-thread spawned from a rather general question on licensing. Apologies, I should have made this clear from the start. ",
					"date": "2016-10-17",
					"id": "d8vvevl",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thesilentwitness",
					"content": "\u0026gt; It is a sign of good manners to properly give attribution to the code being used. (Even if the license or the laws do not require this.)\n\nAdding 20 license files to a project is a bit ridiculous, also the licenses should only reference the dependency in question not the entire project. You could add a mention of third party dependencies to your readme if you feel like giving attribution, but adding all the licenses to the root of your project is a bad idea and pretty pointless to begin with because no one looks through licenses to find dependency information.",
					"date": "2016-10-17",
					"id": "d8vi8xr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ChristophBerger",
					"content": "\u0026gt; Adding 20 license files to a project is a bit ridiculous,\n\nIf you include code whose license requires giving attribution, you should do it. \n\n\u0026gt; no one looks through licenses to find dependency information.\n\nAgreed. That\u0027s not the purpose of a license file.",
					"date": "2016-10-17",
					"id": "d8vimjf",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thewhitetulip",
					"content": "Or one can just copy paste all the licenses in one file, or at least link to the author attributing their work",
					"date": "2016-10-17",
					"id": "d8violw",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "thesilentwitness",
					"content": "\u0026gt; If you include code whose license requires giving attribution, you should do it.\n\nYou already are including it by using that dependency. It is not legally required to include it in any other way, nor is it even recommended. Nobody wants to see a project bloated with license files. If there is no license reference in the dependency then you can simply put all of the license headers in a single license file.\n",
					"date": "2016-10-17",
					"id": "d8viyjj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ChristophBerger",
					"content": "\u0026gt; It is not legally required to include it in any other way [than implicitly via `go get`]\n\nOk, if this is true, then I am fine with it.",
					"date": "2016-10-17",
					"id": "d8vlj9c",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "I do not think we need to add 20 license files, just refer to it, I have done it in my project \n\nan android app based on a FOSS app: https://github.com/thewhitetulip/hashtag-notes/blob/master/README.md#hashtag-notes\n\na book: https://github.com/thewhitetulip/web-dev-golang-anti-textbook/blob/master/README.md#note\n\nAlways attribute things you took from others!!\n\nNot doing it defeats the purpose of FOSS, FOSS was founded on this reason that we can build things on top on what others have built without IP issues, free as in freedom.",
					"date": "2016-10-17",
					"id": "d8vifi1",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "thesilentwitness",
					"content": "You are not legally required to provide attribution outside of a license file. If you want to do that, go for it, but as long as the license file is included in some shape (whether that be a reference in the original license file, a copy of their license file in your project, or their license file in their own dependency that is included in your project) it is enough.",
					"date": "2016-10-17",
					"id": "d8vj06c",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "I can\u0027t seem to comprehend why anyone would NOT provide attribution. Why are we debating this? yes, \"Legally\" it might not be required, but in the spirit of open source software, we should do it.",
					"date": "2016-10-17",
					"id": "d8vjrkq",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "thesilentwitness",
					"content": "I personally agree with you, but I\u0027m not going to hold a grudge against people who don\u0027t. They are under no obligation. They are following the law in regard to the license I have provided in my open source projects. If I cared, I wouldn\u0027t have licensed it in such a way, or I wouldn\u0027t have made it open source.",
					"date": "2016-10-17",
					"id": "d8vok9o",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "It isn\u0027t about holding a grudge, it seems that the author failed to even acknowledge the licenses. That person defeated the spirit of open source in a way. You are right, legally, only citing the license would be enough",
					"date": "2016-10-17",
					"id": "d8vrkmv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "heckerle",
					"content": "It still very clearly does.\n\nHe copied other peoples code into his repository without giving proper credit until only today (like e.g. the httprouter package), which thus was clearly illegal. He\u0027s now kinda giving credit to probably most projects he stole code from, but he\u0027s still not doing it properly because copied code is not marked as such in the source files. Also adding a license file for proper attribution does not make his malpractices of the past undone, since those where done with a malicious intent.\n\nFurthermore he changed the license of his project from MIT to Apache today, while not asking for permission by all contributors he stole code from, which again is illegal.",
					"date": "2016-10-17",
					"id": "d8vxzd8",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "Zyst",
					"content": "It\u0027s expressly mentioned in the article that he copy pasted code from the other library plus renamed functions, and also stripped license requirements (Attribution, in this case). ",
					"date": "2016-10-16",
					"id": "d8v0dg8",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "And the linkage is broken because a commit was never specified. Does the project in its current state actually violate any licenses?",
					"date": "2016-10-17",
					"id": "d8v10lf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "thewhitetulip",
					"content": "I am not attacking someone, and I don\u0027t think anyone is trying to attack anyone.\n\nBut funnily enough, https://github.com/kataras/iris#news\n\nThe repo now says that iris is under attack, and some PR was sent deleting every file from a dummy account. ",
					"date": "2016-10-18",
					"id": "d8x2iym",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "SSoreil",
					"content": "I have read this conspiracy theory before I think. Not sure why some people have a huge hateboner for an open source project because it doesn\u0027t fully satisfy how they want to see one run. The stealing claim is stupid for the same reason, you should probably find a more fitting word when taking about open source. Just like the nonsensical claim that it is not an open source person if developed by one guy.",
					"date": "2016-10-16",
					"id": "d8uy9yl",
					"isArchived": true,
					"isControversial": false,
					"score": -34
				},
				{
					"author": "BOSS_OF_THE_INTERNET",
					"content": "It all adds up.  The guy rips other people\u0027s code, doesn\u0027t attribute, squashes pull requests _after_ skimming the code from them, and then has the cajones to then take donations from unsuspecting people.  \n\nIt\u0027s a series of red flags that point to a bad citizen in open source.  It is not the type of thing we should be encouraging.\n\n",
					"date": "2016-10-17",
					"id": "d8v3xdp",
					"isArchived": true,
					"isControversial": false,
					"score": 30
				},
				{
					"author": "thesilentwitness",
					"content": "Well said. ",
					"date": "2016-10-17",
					"id": "d8vi7oe",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				}
			]
		},
		{
			"author": "buckhx",
			"date": "2016-03-29",
			"id": "4cho4k",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Unwinding Uber\u0027s Most Efficient Service (in Go)",
			"comments": [
				{
					"author": "buckhx",
					"content": "Author here. Let me know if you have feedback or questions.",
					"date": "2016-03-29",
					"id": "d1i9u61",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "ants_a",
					"content": "Excellent post. I had the same incredulous reaction when I read the original post, and I have only a passing familiarity with GIS systems. Glad to see my intuition was right here.\n\nI might take a shot at pumping the data into PostgreSQL with a spatial index and see how that performs. My hunch is that even this KISS approach would have been faster.",
					"date": "2016-03-29",
					"id": "d1id5k0",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "LtArson",
					"content": "I would guess that Postgres would be slower, just due to the latency of going to the database and back. Even with their relatively brute-force approach, they\u0027re still dealing with fractions of a millisecond.",
					"date": "2016-03-30",
					"id": "d1ikh2q",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "ants_a",
					"content": "The database can easily be on the same host as the web service, accessed via a socket. Or one could easily just get rid of the HTTP layer and use the database directly as a service. And according to their blog post their 95\u0027th percentile was 5ms, easily within PostgreSQL\u0027s capability. Latency overhead per query is on the order of 33us, a simple b-tree lookup is 37us.",
					"date": "2016-03-30",
					"id": "d1iuumi",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "buckhx",
					"content": "Thanks! I\u0027d definitely be curious to see how postgres stacks up.",
					"date": "2016-03-30",
					"id": "d1iibf6",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "ants_a",
					"content": "I had a bit of free time so I did a quick test. I used the census tracts GeoJSON loaded into a table with a geometry column.\n\nTo load the data, this psql script worked for me:\n\n    \\set content `cat nyc_census_2010_tracts.geojson`\n    CREATE TEMPORARY TABLE geojson (data jsonb);\n    INSERT INTO geojson VALUES (:\u0027content\u0027);\n    CREATE TABLE census_tracts (\n        id serial primary key,\n        ntaname text,\n        boroname text,\n        shape geometry);\n    INSERT INTO census_tracts (ntaname, boroname, shape) SELECT \n        geom-\u0026gt;\u0027properties\u0027-\u0026gt;\u0026gt;\u0027NTAName\u0027,\n        geom-\u0026gt;\u0027properties\u0027-\u0026gt;\u0026gt;\u0027BoroName\u0027,\n        st_geomfromgeojson(geom-\u0026gt;\u0026gt;\u0027geometry\u0027)\n    FROM geojson, LATERAL jsonb_array_elements(data-\u0026gt;\u0027features\u0027) geom;\n\nThe query looks like this:\n\n    SELECT * FROM census_tracts WHERE ST_Contains(shape, ST_Point(-73.9590, 40.7830));\n\nBenchmark results on my rather non-idle i5 2500K workstation:\n\n    number of threads: 1\n    duration: 10 s\n    number of transactions actually processed: 110003\n    latency average: 0.091 ms\n    tps \u003d 11000.222998 (including connections establishing)\n\n    number of clients: 4\n    number of threads: 4\n    duration: 10 s\n    number of transactions actually processed: 278934\n    latency average: 0.143 ms\n    tps \u003d 27892.978816 (including connections establishing)\n\nAnd latency distribution for median, 95%, 99%:\n\n    CREATE EXTENSION file_fdw;\n    CREATE SERVER files FOREIGN DATA WRAPPER file_fdw;\n    CREATE FOREIGN TABLE geobench (client int, tx_no int, time int, file_no int, time_epoch int, time_us int) SERVER files OPTIONS (filename \u0027/home/ants/code/gis-build/gofence-profiling/nyc/pgbench_log.7665\u0027, format \u0027text\u0027, delimiter \u0027 \u0027);\n    SELECT percentile_disc(ARRAY[0.5,0.95,0.99]) WITHIN GROUP (ORDER BY ROUND(time/1000.,3)) latency_ms FROM geobench;\n            latency_ms         \n    ---------------------------\n     {0.076,0.127,0.311}\n\nEdit: did another quick test on a larger database by translating 52 replicas of the shapes accross the globe.\n\n    CREATE TABLE tracts_100k (LIKE census_tracts INCLUDING ALL);\n    INSERT INTO tracts_100k (ntaname, boroname, shape) SELECT ntaname || \u0027 \u0027 || offs::text, boroname || \u0027 \u0027 || offs::text, ST_Translate(shape, offs, 0) FROM census_tracts, LATERAL generate_series(0,360,360/50) offs;\n    INSERT 0 112736\n    latency average: 0.109 ms",
					"date": "2016-03-31",
					"id": "d1kvn3z",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "grauenwolf",
					"content": "I\u0027ve used SQL Server for that role and the only time I ran into problems was when dealing with multiple indexes on one table. \n\nIf SQL Server picks the wrong index, you see the same kind of horrible performance that Uber has.",
					"date": "2016-08-01",
					"id": "d608m9f",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nyc640",
					"content": "Big-O notation is used for analyzing asymptotic time complexity, so it\u0027s pretty unnatural to plug in values for your parameters and use the resulting numbers as any sort of indication of performance. Technically, a O(1) algorithm could take arbitrarily longer than an O(n) algorithm when you fix the parameter *n*.\n\nI know they were intended as very rough calculations, but you make the same point about performance with your benchmarks, so I think that section was unnecessary. Very good analysis otherwise, though.",
					"date": "2016-03-30",
					"id": "d1iptoa",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "buckhx",
					"content": "I agree that it\u0027s not big O analysis and more of an efficiency estimation and it\u0027s a bit redundant with the actual benchmarking. I included that section because I ran through that exercise on a notepad before writing any code and figured it would be interesting to share. Maybe I\u0027ll make a change and call that out explicitly.",
					"date": "2016-03-30",
					"id": "d1j0faj",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "FogleMonster",
					"content": "This is great. I had the same thoughts when I read the original Uber post. I also had similar thoughts when reading about matchmaking in Lyft.",
					"date": "2016-03-30",
					"id": "d1ijdfd",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "buckhx",
					"content": "Wow hadn\u0027t seen that Lyft post. Might need to dig into that one.",
					"date": "2016-03-30",
					"id": "d1il094",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dgryski",
					"content": "And while we\u0027re talking about taxi companies and geo stuff: https://sudo.hailoapp.com/services/2015/02/18/geoindex/ :)",
					"date": "2016-03-30",
					"id": "d1jcw8r",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "buckhx",
					"content": "This is amazing. Is there some kind of research-phobia going on in this industry?",
					"date": "2016-03-30",
					"id": "d1jdolf",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dgryski",
					"content": "I think there\u0027s just research-phobia in lots of startups in general. In the rush to get a product out, they don\u0027t have time to scan the literature, or don\u0027t have the background to find it or understand it if they do.  The downside of having people who can put together a website but don\u0027t have the academic underpinnings I guess.  People optimize for different things.  (OTOH, my github is filled with implementations of academic papers, so you can guess which side I fall on...)",
					"date": "2016-03-30",
					"id": "d1jem6s",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "hegbork",
					"content": "Great post. When I read that Uber blog post I was a co-pilot to a coworker who was working geographical information retrieval in our system and after some quick napkin math we concluded that we could do the same at least 200x faster. The entire cost would be parsing queries and rendering the results, the rtree lookups themselves would be on the order of two digits nanoseconds.",
					"date": "2016-03-30",
					"id": "d1ixx2u",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "jupiter909",
					"content": "Your post is very insightful.\nJust the other day I read about some goodies that some \u0027unicorn corp\u0027 had done and I was cringing thinking about the wasted clock cycles with their method of solving some problems, more so at the scale they are at. I\u0027m to lazy to do a nice write up like you have, but maybe I should. The madness that is out there needs be exposed.",
					"date": "2016-03-31",
					"id": "d1jt1ko",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "gooeyblob",
					"content": "Great post, and way to back up it up with the code! I\u0027d love to see Uber respond.",
					"date": "2016-03-30",
					"id": "d1iw5if",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "akhenakh",
					"content": "Excellent article. \nI was really surprised when Uber proudly promoted their solution, the same week I was posting about using s2 for massive polygons lookups http://blog.nobugware.com/post/2016/geo_db_s2_region_polygon \nGuess which article gets more audience...",
					"date": "2016-03-31",
					"id": "d1jypsy",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "noydoc",
					"content": "I\u0027m really not surprised. These organizations tend to attract the kind of people who know best.",
					"date": "2016-03-30",
					"id": "d1ilgw0",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "nekron",
					"content": "Uber should donate /r/buckhx a few grands...",
					"date": "2016-03-30",
					"id": "d1ix5ap",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Rican7",
					"content": "I believe you meant /u/buckhx. Or you could just say OP. :P",
					"date": "2016-03-30",
					"id": "d1jpm76",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "maus80",
					"content": "I don’t understand the commotion. Aren\u0027t multi-variable indexes are a database technicality nowadays?",
					"date": "2016-04-01",
					"id": "d1lnsyu",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "luizbranco",
			"date": "2017-11-29",
			"id": "7ggprs",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Rich UI elements for cli prompts in Go",
			"comments": [
				{
					"author": "tadvi",
					"content": "promptui.Select does not work on Windows. Keyboard selection does not respond.\nEnvironment: Windows 10 and command prompt.",
					"date": "2017-11-30",
					"id": "dqkmog0",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "paddie",
					"content": "This looks really neat. I have a tool where I\u0027ve done some annoying one-offs to get something similar, but its incredibly hardcoded for my use-case and this is much nicer.\n\nThanks!",
					"date": "2017-11-30",
					"id": "dqjx2x5",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "tadvi",
					"content": "Does it work on Windows? Can\u0027t find Windows specific code.",
					"date": "2017-11-30",
					"id": "dqjyt3v",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "luizbranco",
					"content": "Hi, one of the authors here. We are using  https://github.com/chzyer/readline that provides Windows support. Let us know / create an issue if something for Windows doesn\u0027t work for you and we can take a look.",
					"date": "2017-11-30",
					"id": "dqk5cmx",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "earthboundkid",
					"content": "I wrote https://github.com/carlmjohnson/rank-em the other afternoon. I should make it use the select option. ",
					"date": "2017-11-30",
					"id": "dqjymmb",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "aliasliyu4",
					"content": "what？\n",
					"date": "2017-11-30",
					"id": "dqjm07d",
					"isArchived": false,
					"isControversial": false,
					"score": -9
				},
				{
					"author": "program_the_world",
					"content": "I second this. What are we meant to be looking at here?\n\nEdit: welp I\u0027m an idiot. Hit the button at the bottom of the readme to expand it.",
					"date": "2017-11-30",
					"id": "dqjnhvq",
					"isArchived": false,
					"isControversial": false,
					"score": -4
				},
				{
					"author": "lepuma",
					"content": "It seems pretty self explanatory to me. Did you read the readme?",
					"date": "2017-11-30",
					"id": "dqjnwi8",
					"isArchived": false,
					"isControversial": false,
					"score": 21
				},
				{
					"author": "program_the_world",
					"content": "I apologise. I\u0027m on mobile, and the readme shows as a single line. I didn\u0027t realise it expanded, so it made no sense to me. Visiting their website didn\u0027t provide any clarity. I understand now.",
					"date": "2017-11-30",
					"id": "dqjqeok",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				}
			]
		},
		{
			"author": "yotamN",
			"date": "2017-07-22",
			"id": "6our0k",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Should Go 2.0 support generics?",
			"comments": [
				{
					"author": "quiI",
					"content": "Putting aside pro generics or not what I like about this article is the fact that it is calling for closure one way or another. This limbo state of maybe they will maybe they wont results in the same old flame wars every thread.",
					"date": "2017-07-22",
					"id": "dkkmbze",
					"isArchived": true,
					"isControversial": false,
					"score": 39
				},
				{
					"author": "The_Sly_Marbo",
					"content": "I too want closure, and agree that this is a good attempt to reach it, but it was decided pretty early on that Go 1 wouldn\u0027t have generics (or any other language change) and it still kept coming up.",
					"date": "2017-07-22",
					"id": "dkkv9g1",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "TheMerovius",
					"content": "I don\u0027t believe that is true. The communication was always a pretty direct and consistent \"we want generics, we just don\u0027t know how yet\".",
					"date": "2017-07-23",
					"id": "dklilvl",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "The_Sly_Marbo",
					"content": "My understanding was that it would involve a (significant) language change, and would therefore need to be part of Go 2, but I could be wrong.",
					"date": "2017-07-23",
					"id": "dklkqig",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "andradei",
					"content": "\u0026gt; I too want closure\n\nGo already has closures.\n\nSeriously now, there is a lot of people really, _really_ wanting generics and I feel like they should put it there if they want to call it Go 2.",
					"date": "2017-07-27",
					"id": "dkt1833",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "The_Sly_Marbo",
					"content": "It\u0027s a fair point, but acquiescing everyone\u0027s wishes gave us C++.",
					"date": "2017-07-27",
					"id": "dkt2e17",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "To me that shows how important of an issue it is to the community, and why the developers hardline stance of \"lol no generics\" is damaging the language in the long-term.",
					"date": "2017-07-23",
					"id": "dklagp6",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "TheMerovius",
					"content": "This is not anyone\u0027s stance on anything. It is a tiresome persistent meme, but it is a complete fabrication in direct contradiction to literally everything the go team has said on the topic.\n\n*I* don\u0027t want generics in go. But the go team sure as hell wants them.",
					"date": "2017-07-23",
					"id": "dklin6n",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "[deleted]",
					"content": "I\u0027m not saying whether they should or shouldn\u0027t be implemented, I\u0027m just saying that the Go team\u0027s refusal to compromise/debate isn\u0027t good.",
					"date": "2017-07-23",
					"id": "dkljfw7",
					"isArchived": true,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt; I\u0027m just saying that the Go team\u0027s refusal to compromise/debate isn\u0027t good.\n\nAgain, this is completely fabricated. The go team has repeatedly discussed the topic. For crying out loud, Russ Cox\u0027 Keynote from Gophercon was pretty much just an hour long plea for arguments and problems; yet, so far literally the only actual reply I\u0027ve seen doing what he asked, comes [from the go team](http://www.airs.com/blog/archives/559).\n\nYou disagree with their conclusions so far? Fine. You don\u0027t understand why they need what they are saying? Okay. You think the issue is simpler than [what they think](https://research.swtch.com/generic)? That\u0027s your prerogative.\n\nBut making claims about their position and willingness to discuss this that are just plain false and directly contradicting everything they have put out about the topic is not okay. It\u0027s harmful to your own position.",
					"date": "2017-07-23",
					"id": "dklk31e",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "fuckthememeculture",
					"content": "this is a total lie. I have been part of the community since the start. I have pushed for generics since the beginning. Only recently(think the last 2 years) has the Go team considered the language might need generics - before it was just type it out, then copy and paste, and now code generation. Only now after considerable pressure from the greater go community, and the realization that Go is losing ground, and slowly fading to obscurity does the Go team admit that the lack of polymorphic types is a pain point.\n\nkeep linking your nonsense, and I will dig up every thread from go-dev, go-nuts, and the personal conversations I\u0027ve had with ian, russ, andrew, rob, and robert. In the end you will make both, yourself and them, look bad.\n\nRuss is asking three year too late. All the people with decent ideas have moved on. Now you are left with those that never wanted generics, those that never had the need for generics, and the so naive that they really have nothing to offer.\n",
					"date": "2017-07-23",
					"id": "dklx3nw",
					"isArchived": true,
					"isControversial": true,
					"score": -4
				},
				{
					"author": "TheMerovius",
					"content": "\u0026gt;  Only recently(think the last 2 years) has the Go team considered the language might need generics\n\n[Russ Cox post about generics](https://research.swtch.com/generic), showing that the go team was considering adding them is from 2009. The [commit adding the FAQ item](https://github.com/golang/go/commit/dd64f86e0874804d0ec5b7138dafc28b51f61c12) is from 2009, clearly stating the possibility of them coming, if sufficient need is demonstrated and the problems with implementing them are solved. Ian Lance Taylor [references](http://www.airs.com/blog/archives/559) an E-Mail from 2009, where he says that he thinks generics should be added. He also references a thread from 2010, in which Robert Griesemer considers the possibility of adding generics later.\n\nThat is now 4 of the 5 main developers of the language *directly* contradicting the claim of a stance of \"lol no generics\", *long* before the two years you are putting out here. The stance has literally always (some of these sources are earlier than the open sourcing of go, so *definitely* earlier than you being \"part of the community since the start\") been, that generics might be added later, if the issues with adding them could be figured out.\n\nAnd again: *I don\u0027t like that*. I\u0027d prefer they would commit to not add them. The thought of go growing generics is making me queasy. But it\u0027s the way it is.\n\n\u0026gt; keep linking your nonsense, and I will dig up every thread from go-dev, go-nuts, and the personal conversations I\u0027ve had with ian, russ, andrew, rob, and robert.\n\nPlease do. I\u0027d be very interested in those sources. Honestly. Sources don\u0027t lie.\n\nAs I said, it is a very persistent meme. But it is demonstrably false.\n\n\u0026gt; All the people with decent ideas have moved on. Now you are left with those that never wanted generics, those that never had the need for generics, and the so naive that they really have nothing to offer.\n\nWhich of those four are you? Presumably not the one that has moved on, you seem to still be here.",
					"date": "2017-07-23",
					"id": "dklzb8k",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "munificent",
					"content": "\u0026gt; Mainstream programmers expect static typing, not for performance, but for readability and maintainability–just look at what Typescript and Dart are bringing to Javascript, and Python’s formative efforts with optional typing.\n\nI work on Dart. We spent about five years with an optional type system (the same as TypeScript). That flavor of typing gives you the readability of types, some of the maintainability, and none of the performance. In return for sacrificing the latter two, you can have a simpler type system that still doesn\u0027t prohibit lots of code that is dynamically correct by letting users easily skirt around the type system.\n\nAt least for Dart, it turned out that that wasn\u0027t enough. We\u0027re replacing the optional type system with a full static type system — though one that has a dynamic type and lots of type inference.\n\nMy experience is that there is an uncanny valley in type systems. If you offer users some amount of static types, it summons *all* of their expectations about what a statically-typed language entails. They naturally begin programming in a very static style, even though the language allows more flexibility. They also expect the safety, refactoring support, and performance of a full statically typed language and are *really* unpleasantly surprised when they discover they don\u0027t get that.\n\nThis isn\u0027t true of *all* users, of course, but it was true of enough of our users, and we felt the limitations of not being able to rely on static types during compilation, that it made sense for us to go past the halfway point with optional types all the way to a complete sound static type system.\n\nWith Go, I think they are suffering much of that same uncanny valley affect. They are statically typed (with a really neat static type system), so users expect *all* of the comforts and tools they\u0027re used to from other static type systems. They can learn to use structural typing and interfaces instead of classes and subtyping because there is real benefit to the former. But the lack of generics just feels like an absence to a lot of users.",
					"date": "2017-07-22",
					"id": "dkkigmf",
					"isArchived": true,
					"isControversial": false,
					"score": 107
				},
				{
					"author": "ggtsu_00",
					"content": "What Go needs is just a \"variant\" type. Empty interfaces should be considered harmful. Variants can allow explicit types to be specified to use for the input or output of a function instead of an empty interface and be checked at compile time.\n\nIt could work like this:\n\n    type Number variant {\n        int\n        float64\n        float32\n    }\n\n   \nReplacing an empty interface with Number could allow a math library to work different types instead of having to cast everything to a single type (i.e. float64) or use empty interfaces everywhere.\n\nVariants would be more like a special type of interface that instead of requiring functions to be implemented, it requires specific types to be used.",
					"date": "2017-07-23",
					"id": "dkm6uid",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "andradei",
					"content": "I like this idea. That could be used to improve errors as well (which is another goal they have for Go 2). Like\n\n    type result variant {\n        string (or any type of a successful result)\n        error\n    }\n",
					"date": "2017-07-27",
					"id": "dkt1ggk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mewkiz",
					"content": "This is https://github.com/golang/go/issues/19412",
					"date": "2017-07-24",
					"id": "dkn5hy4",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "weberc2",
					"content": "\u0026gt; A better way to solve the underlying problem\n\nI think the problem is that there are a host of problems for which there isn\u0027t a better solution than generic types. With great pain, we can work around sorting with Go\u0027s type system, but there are some problems for which that isn\u0027t even possible. Unless you believe `interface{}` is better than actual generics, in which case why does Go have any static types?\n\nPlease note that I share a concern about what generics might do to Go\u0027s simplicity, compiler performance, etc--the generics question is really nuanced, and we need to recognize that either decision will have significant tradeoffs.",
					"date": "2017-07-22",
					"id": "dkkgwmh",
					"isArchived": true,
					"isControversial": false,
					"score": 23
				},
				{
					"author": "Sythe2o0",
					"content": "I\u0027d be really interested if there could be a different solution to the problem of \"We\u0027re copying code for these structs because we don\u0027t have templated types\" without using templated types or another more complex form of generics. But maybe that\u0027s not what he means when he says \"the underlying business problem\".",
					"date": "2017-07-22",
					"id": "dkkfrgu",
					"isArchived": true,
					"isControversial": false,
					"score": 25
				},
				{
					"author": "JHunz",
					"content": "I\u0027m not sure what other underlying business problem he could be referring to.  I\u0027m looking forward to hearing his solution if they choose to go without them for 2.0.  ",
					"date": "2017-07-22",
					"id": "dkkukwi",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "fuckthememeculture",
					"content": "He had a chance to explain himself in that article. Instead, he choose to be vague, because he knows the solution he has will fall short. His answers in the past was to type it out or copy/paste. I am sure that has not changed.",
					"date": "2017-07-23",
					"id": "dklyej8",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "shadowmint",
					"content": "\u0026gt;  My point is that if Go is not going to have a story for templated types, then we need to own it, just like Haskell programmers own their decisions.\n\nWell, that\u0027s the problem isn\u0027t it?\n\nWe don\u0027t want to own \u0027go doesn\u0027t need generics\u0027. We *want* generics.\n\nI think that\u0027s overwhelmingly obvious from the feedback on \u0027go 2.0\u0027.\n\nIf the community was just going to sit down and \u0027own\u0027 that go wont ever have generics, we would have done so by now.\n\n...that we haven\u0027t, is really overwhelming proof it isn\u0027t suddenly magically going to happen now.",
					"date": "2017-07-22",
					"id": "dkkeu54",
					"isArchived": true,
					"isControversial": false,
					"score": 67
				},
				{
					"author": "YEPHENAS",
					"content": "\u0026gt; We don\u0027t want to own \u0027go doesn\u0027t need generics\u0027. We want generics.\n\nDon\u0027t speak for all of us.\n\n",
					"date": "2017-07-22",
					"id": "dkkf1m6",
					"isArchived": true,
					"isControversial": true,
					"score": 31
				},
				{
					"author": "shadowmint",
					"content": "The feedback from the community has been **overwhelming** on every forum regarding go 2.0. Look it up if you don\u0027t believe me. I may not speak for everyone, but I do speak for more than a handful of people.",
					"date": "2017-07-22",
					"id": "dkkf2az",
					"isArchived": true,
					"isControversial": false,
					"score": 54
				},
				{
					"author": "computesomething",
					"content": "\u0026gt;The feedback from the community has been overwhelming on every forum regarding go 2.0\n\nWell, obviously those who really want generics are more likely to make their voice heard than those who are happy/content with the language as is, I\u0027m in the \u0027want generics\u0027 camp but I\u0027m not sure the overwhelming majority of Go users see the lack of generics as a big problem, if that was the case Go would never have seen the great uptake it has had given that there\u0027s never been a promise to implement them.\n\nAnyway it\u0027s interesting to follow the brainstorming that the concept of Go 2.0 has brought, and I hope we will see generics and other language improvements come as a result of this, looking at all the proposals in the github repo shows that there is quite a lot of interest:\n\nhttps://github.com/golang/go/issues?q\u003dis%3Aissue+is%3Aopen+label%3AGo2",
					"date": "2017-07-22",
					"id": "dkkgg7r",
					"isArchived": true,
					"isControversial": false,
					"score": 32
				},
				{
					"author": "YEPHENAS",
					"content": "- A lot of this feedback is from other communities with different values\n- Those who are discontent are the loudest, while those who are happy with the status-quo like me have no reason to speak up",
					"date": "2017-07-22",
					"id": "dkkff9k",
					"isArchived": true,
					"isControversial": false,
					"score": 44
				},
				{
					"author": "epiris",
					"content": "Although I may be part of other \"programming communities\" and in them I do value different things, I\u0027m also part of this one. Despite simplicity being my favorite thing about Go (which seems to be opponents main objection) it\u0027s clear to me that generics are needed. I want as much guarantees as possible that my programs are correct at compile time and generics will provide more of them.\n\nThe reflection API growing release after release with one of the largest [commit history logs](https://github.com/golang/go/commits/master?after\u003db81735924936291303559fd71dabaa1aa88f57c5+174\u0026amp;path%5B%5D\u003dsrc\u0026amp;path%5B%5D\u003dreflect) strengthens the argument there is a demand I think.",
					"date": "2017-07-22",
					"id": "dkkjl7k",
					"isArchived": true,
					"isControversial": false,
					"score": 24
				},
				{
					"author": "kisielk",
					"content": "Wouldn\u0027t adding generics make the reflection API even bigger?",
					"date": "2017-07-22",
					"id": "dkkm1cn",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-22",
					"id": "dkko4ju",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "kisielk",
					"content": "I don\u0027t think generics necessarily obviate or even reduce the need for runtime reflection. Java, C#, and C++ all have generics and still use reflection quite a lot.",
					"date": "2017-07-22",
					"id": "dkkwcr5",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "epiris",
					"content": "Thanks, you summarized my main reason for pointing out the reflection API accurately. Things like [Swapper](https://golang.org/pkg/reflect/#Swapper) I feel give a strong hint that generics are needed.",
					"date": "2017-07-22",
					"id": "dkkv778",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "epiris",
					"content": "You may need a few parts, such as:\n\n * reflect.Kind const for generic\n * reflect.Generic struct possibly, but perhaps a generic can be represented in only a couple return values specifying InT and OutT meaning it could just live on Type  interface and reflect.Value\n * reflect.GenericOf could maybe be needed depending on design outcomes and such\n\nAll and all the surface area would be pretty minimal I think. If you removed recent additions for sorting along like [Swapper](https://golang.org/pkg/reflect/#Swapper) which only exist due to lack of generics you end up with a similar surface area.",
					"date": "2017-07-22",
					"id": "dkkvhc3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "YEPHENAS",
					"content": "\u0026gt; I want as much guarantees as possible\n\nThat would mean dependent types and beyond. Barely anyone would want to use such a language. It\u0027s a fallacy to think that more static guarantees equal a better programming language. A good design balances many tradeoffs.",
					"date": "2017-07-22",
					"id": "dkklxlw",
					"isArchived": true,
					"isControversial": true,
					"score": -6
				},
				{
					"author": "epiris",
					"content": "Funny you mention fallacies right after assuming because I want Y (generics) I must also want X (Dependent types), Y..Z (beyond).\n\nI also didn\u0027t say that more static guarantees equal a better programming language.. I said it results in a more correct **(Go, remember, this is a thread about Go programs in a Go subreddit, hence any reasonable person can assume I am talking about Go)** program at compile time. My post is clear, I want more type safety by abolishing empty interface usage in places a generic T could be used instead. \n\nIf you don\u0027t want generics that\u0027s fine, but at least form real arguments. It\u0027s amusing how so many people from a career field that demands constant critical thinking and making use of higher order reasoning use very little of either when it comes to opposing views. I mean try to apply your reasoning to computer science, I.e compilers:\n\n\u0026gt; He wants generics, he MUST be want dependent types and beyond!\n\n    i :\u003d 0\n    i++\n\n    // He incremented an integer, that means he must want\n    // to exit the program immediately!\n\n\u0026gt; That would mean dependent types and beyond. \n\nWhat? Compiler? Who said anything about exiting programs?\n\n**point: read the words, respond to the words, don\u0027t put new words, the other party is capable of writing their own. You may find as a result they pay more attention to yours when they don\u0027t have to reiterate their own.**",
					"date": "2017-07-22",
					"id": "dkkuxbd",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "YEPHENAS",
					"content": "\u0026gt; Funny you mention fallacies right after assuming because I want Y (generics) I must also want X (Dependent types), Y..Z (beyond).\n\nYou wrote \"**as much** guarantees **as possible**\", which leads to this conclusion.",
					"date": "2017-07-22",
					"id": "dkkw885",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "epiris",
					"content": "In a thread about adding generics to Go, you chose to interpret it that way so you would have something to disagree with rather than the obvious take away that generics would provide more guarantees your program is correct at compile time for many Go programs today.\n\nAgain my entire point of the last reply was how unreasonable it is to assume that I want EVERY SINGLE feature that provides compile time type safety because I\u0027m discussing the benefits of a single one in a Go subreddit.\n\nSo, do you have a valid argument against my main claim, additional guarantees of a correct program at compile time from many of the Go programs we right today? If so I would love to hear it. If your argument is solid I may have to reevaluate my position for generics since this is a heavy factor for me along with programmer time. I may even become against generics if your view resonates that will with me, and it could, because I\u0027m reasonable. I change my positions all the time on technical subjects because it\u0027s not personal. \n\nI arrived to every cconclusion off of research and experience.. not some internal spiritual journey guided by my  moral compass. If I find new research or have new experience why on earth would I care to pivot? Or be butt hurt if I can\u0027t get someone else to, my experience and research formed a different conclusion. Cool, move on. People need to learn these things. Not specifically directed at you but it\u0027s so hard to have meaningful conversations here anymore.",
					"date": "2017-07-22",
					"id": "dkkx66f",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "YEPHENAS",
					"content": "So we agree that maximizing compile time type safety is not a sensible programming language design goal.\nA line has to be drawn somewhere between no type safety and maximum type safety. You say it\u0027s at 80%, I say it\u0027s at 70%.",
					"date": "2017-07-22",
					"id": "dkl167g",
					"isArchived": true,
					"isControversial": false,
					"score": -5
				},
				{
					"author": "shadowmint",
					"content": "So here\u0027s the question for you: Given \u0027the community\u0027 has not rallied behind \u0027go doesn\u0027t need generics\u0027 up to now*, what on earth makes it likely to suddenly happen?\n\nSeriously, how do you plan to achieve that?\n\n...but frankly pro or against generics, I see no viable road that unifies the community without generics. If I\u0027m wrong, what am I missing?\n\n...cause it sure hasn\u0027t worked so far.\n\n* and I\u0027m not talking a split of the community where the status quo of satisfied and dissatisfied exist alongside each other. I mean the community really gathering behind the one solution, like they are with \u0027dep\u0027 for package management.",
					"date": "2017-07-22",
					"id": "dkkg1gj",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "YEPHENAS",
					"content": "\u0026gt; I mean the community really gathering behind the one solution, like they are with \u0027dep\u0027 for package management.\n\nI know I\u0027m not a fan of semantic versioning and npm/bundler/cargo/maven like package management beasts. But I also know that I don\u0027t have to use \u0027dep\u0027, so I don\u0027t oppose its development.",
					"date": "2017-07-22",
					"id": "dkkge8i",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "fuckthememeculture",
					"content": "Trust me, your type has been loud for quite some time now. I can think back to a time when I was the only one talking about generics in Go on the go-nuts and go-dev lists, and the amount of vitriol I had to endure. Now there are many of us, and so few of you.",
					"date": "2017-07-23",
					"id": "dklyqz0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dchapes",
					"content": "\u0026gt; many of us, and so few of you\n\nThis attitude of mentally splitting a community into two sides is toxic. As is thinking the majority is automatically correct.",
					"date": "2017-07-25",
					"id": "dkoz09s",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DualRearWheels",
					"content": "Real question to ask is \"will you keep using Go even if it decides not to implement generics\". Go has large user base, and I suspect 99% people using it would answer \"yes\". Large user base also proves lack of generics is not big turn off for new users.\n\n",
					"date": "2017-07-22",
					"id": "dkku7en",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "AnAge_OldProb",
					"content": "I\u0027m not sure I agree. For the immediate future, yes of course. But the big advantage of go, easy concurrency is starting to appear in other languages. Pretty much every name brand language is getting some form of async/await syntax which are nearly as easy to use as go routines. Go wins on syntactic lightness in many cases, but even that is diminished now that type inference has made it to the main stream.  ",
					"date": "2017-07-22",
					"id": "dkkys9a",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-23",
					"id": "dklj2ym",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "AnAge_OldProb",
					"content": "I completely agree go routines really can\u0027t be beat on user friendliness. However the question is \"are these other concurrency features good enough?\" especially when you have other powerful tools like genetics at your disposal in other languages. \n\nMy team used to use node now we use go. However typescript offers use nearly the same benefits but we would have been able to keep our existing code bases. Async/await certainly makes go a min harder sell, particularly in the presence of glaringly missing features like generics. ",
					"date": "2017-07-23",
					"id": "dkmew3v",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "DualRearWheels",
					"content": "I\u0027m not using Go because of concurrency but because of simplicity and maintainability. It is funny to claim Go\u0027s advantage over other languages is some feature it has, it is not, it is lack of things. Minimalism, balance and lack of kitchen sink is what separates Go.\n\nC++ has every feature ever conceived added in last 20+ years yet I don\u0027t see people abandoning other languages, on the contrary, people are running away because of complexity.",
					"date": "2017-07-23",
					"id": "dkm7xry",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "AnAge_OldProb",
					"content": "My problem with C++ is that all of the features interact poorly. C# is a kitchen sync language but is fairly maintainable. Other new languages with better integrated, more powerful features will certainly eat go\u0027s lunch. Rust, swift, crystal, and pony look like strong competitors from this end.  The real threat to go in my opinion is C#. C# with AOT compilation, increasingly better Linux support and a gigantic existing user base with some of the best tooling in the business is pretty hard to beat. \n\nMost go engineers are coming from dynamically typed languages who wanted the maintainability of go\u0027s static types and the concurrency it offers. Typescript with async/await cuts squarely at the heart of this reasoning. More modern languages with type inference and less focus on inheritance based design seem to be gaining traction amongst these users as well. ",
					"date": "2017-07-23",
					"id": "dkmabdy",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-22",
					"id": "dkkflzn",
					"isArchived": true,
					"isControversial": true,
					"score": -7
				},
				{
					"author": "shadowmint",
					"content": "google \u0027go 2.0\u0027 and read the comments. It\u0027s been exhaustively discussed. Come on, you\u0027re going to participate in the discussion, spend the two minutes doing some background reading first.",
					"date": "2017-07-22",
					"id": "dkkg4l2",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "kaeshiwaza",
					"content": "We should do like they did at three to design Go, if not all of them was agree the feature didn\u0027t enter.",
					"date": "2017-07-22",
					"id": "dkkky99",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "Finnegan482",
					"content": "\u0026gt; The feedback from the community has been **overwhelming** on every forum regarding go 2.0. Look it up if you don\u0027t believe me. I may not speak for everyone, but I do speak for more than a handful of people.\n\n\nThose of us who don\u0027t want generics are pretty tired of others beating this dead horse all the time. It\u0027s not that we don\u0027t exist; it\u0027s that we\u0027re busy doing other things and find most of these discussions boring and pointless to contribute to. \n\n\nThose discussions are also often comprised of people who don\u0027t actually write Go as their primary language, as is evident from the names on the mailing list (oftentimes contributors to other languages, using their real names). As a Go programmer, I have better things to do than argue with someone who doesn\u0027t even write Go complaining that Go doesn\u0027t do things the same way their favorite language does. ",
					"date": "2017-07-22",
					"id": "dkl0uxs",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "throwdemawaaay",
					"content": "\u0026gt; Those discussions are also often comprised of people who don\u0027t actually write Go as their primary language,\n\nI\u0027ve gotta call this out. Using go is not some sort of all or nothing membership club. Criticizing the design of golang is not a right reserved for \"true gophers\".\n\n\u0026gt; as is evident from the names on the mailing list (oftentimes contributors to other languages, using their real names).\n\nPeople with deep design and implementation experience in other languages are **exactly** who we should be looking to listen to and learn from.",
					"date": "2017-07-23",
					"id": "dkm00qq",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "Finnegan482",
					"content": "\u0026gt; Using go is not some sort of all or nothing membership club. Criticizing the design of golang is not a right reserved for \"true gophers\".\n\nNever said it was. But when we\u0027re talking about people who by their own admission do not write Go themselves, it\u0027s hard for me (and others who\u0027ve been writing Go for a while and are happy without generics) to justify wasting our time trying to argue with those who don\u0027t actually write the language. ",
					"date": "2017-07-23",
					"id": "dkm71xr",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "throwdemawaaay",
					"content": "Well, again, there are tons of us that have been doing golang for years now that **do** want generics.\n\nAnd again, there\u0027s people very much worth listening to even if they don\u0027t write go 24/7/365. In particular recently we\u0027ve seen comments from the Dart team about their experience changing their type system. We\u0027ve also seen comments from folks in the academic and research community about how golang\u0027s limitations have prevented them from contributing golang versions of very relevant libraries.\n\nThese people would all fail your test, but it\u0027s very clear that talking with them is anything but arguing and wasting time.",
					"date": "2017-07-23",
					"id": "dkmauqs",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tdewolff",
					"content": "People want generics because they are used to them. What if there\u0027d be a better way to go at generics? Be open-minded and let the language designers take their time to make a profound statement and come up with a thorough solution.",
					"date": "2017-07-22",
					"id": "dkkkm5p",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "tetroxid",
					"content": "\u0026gt; a better way to go at generics\n\nPlease, elaborate on these ways",
					"date": "2017-07-23",
					"id": "dklmoec",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "das_kube",
					"content": "I\u0027m curious to see what solution better than parametric polymorphism (something rooted in decades of basic research on types and languages) they will come up with!",
					"date": "2017-07-23",
					"id": "dklmnt3",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "loup-vaillant",
					"content": "Java started without generics. Probably because `Object` was thought to be enough. That mistake has since been corrected.\n\nFor some reason, Go did the same mistake. You can tell it\u0027s a mistake because like Java did in 1995, Go *has* some generic data structures. They\u0027re built in however, resulting in a bigger language. With generics, they would have belonged in the standard library.\n\nA thorough solution have to allow users to write data structure that are as generic as the array (or slice). Good luck doing that without generics.\n",
					"date": "2017-07-25",
					"id": "dkpo7e7",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "idobai",
					"content": "\u0026gt; People want generics because they are used to them.\n\nBecause they\u0027re useful and there\u0027s no saner and more typesafe way.\n\n\u0026gt; What if there\u0027d be a better way to go at generics? Be open-minded and let the language designers take their time to make a profound statement and come up with a thorough solution.\n\nOr just don\u0027t be stubborn idiots and learn what can generics do?",
					"date": "2017-07-22",
					"id": "dkkz1ex",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "tdewolff",
					"content": "I know what generics can do and I do miss them in Go, but I believe that there can be a certain degree of generics and it doesn\u0027t have to be as complex as in C++. I feel that a few small language changes might solve most problems that require generics. The only way forward is to investigate and describe use cases precisely, so that a rational decision can be made.\n\nGive the Go team and community some time.",
					"date": "2017-07-25",
					"id": "dkp8901",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "idobai",
					"content": "\u0026gt; but I believe that there can be a certain degree of generics and it doesn\u0027t have to be as complex as in C++\n\nWhat you\u0027re referring to is not simply generics but *template metaprogramming* - that\u0027s a whole different *beast* and it\u0027s needed in cpp because it can do miracles with optimizations.\n\n\u0026gt; I feel that a few small language changes might solve most problems that require generics.\n\nJust add simple generics. There\u0027s no solution which would be simpler or easier. Seriously, if generics are \"hard\" I don\u0027t know what is easy...",
					"date": "2017-07-25",
					"id": "dkpe07b",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "dotwaffle",
					"content": "Too many people say they dislike Go because it doesn\u0027t have generics, inheritance, polymorphism, basically all the hallmarks of OOP in languages they are used to, predominantly C++ and Java.\n\nThat doesn\u0027t make them right, and I\u0027d much prefer Go to make the right choices for Go: keeping a simple, easy to understand language that encourages you to handle errors at all stages.\n\nI\u0027m happy without generics, but some see great value in them. If a concept similar to templating can be formed that fits within the Go ethos, I wouldn\u0027t be opposed to it -- but blindly fitting generics in just because of popularity would be a mistake.",
					"date": "2017-07-22",
					"id": "dkkmzi7",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "jeremyjh",
					"content": "Generics has nothing to do with OOP. ML had them a decade before C++. Some of the features of OOP you refer to that are popular, are also widely considered to be misfeatures.  There is a lot of literature about the issues faced in inheritance, to the point that some C++ style guides strongly discourage its use. Leaving that out of Go is entirely defensible. Generics already exist in Go for a very good reason - maps and slices being typed adds great value.  Not exposing users of Go to this feature, limits expression *particularly in libraries*.  If some people who like to write good libraries have less interest in Go for lack of this feature, I don\u0027t think that is a win for the community.",
					"date": "2017-07-22",
					"id": "dkkqpt0",
					"isArchived": true,
					"isControversial": false,
					"score": 37
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-07-22",
					"id": "dkkyzb1",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "natefinch",
					"content": "Please don\u0027t use the word retard in this subreddit unless you mean \"to hold back\".",
					"date": "2017-07-23",
					"id": "dklejvn",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "dotwaffle",
					"content": "If your chief argument against Go being a simple language is \"preventing the unclean from sullying our precious environment\" then you definitely haven\u0027t understood the reason Go exists in the first place.\n\n\u0026gt; It doesn\u0027t encourage it at all.\n\nIt absolutely does. Every function capable of having an error condition in the standard library explicitly passes back an error type that you should handle. There are even tools like `errcheck` that process your code and point out where you haven\u0027t handled the error. This is in stark contrast to other languages where error checking is a lot more opaque.\n\n\u0026gt; And you can\u0027t even manage errors properly.\n\nWhat?\n\n\u0026gt; How about CS 101? Or just fuck typesafety and copy-paste like a retard?\n\nYeah, you just lost any right to have a rational argument on this subreddit. https://golang.org/conduct",
					"date": "2017-07-22",
					"id": "dkl0472",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "spaghettiCodeArtisan",
					"content": "I\u0027ve seen multiple examples of Go code, usually by newbies, that simply ignored error handling one way or another. I think it was even on this sub a while ago.\n\nSo yeah, so much for explicit errors...\n",
					"date": "2017-07-22",
					"id": "dkl3cb4",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "dotwaffle",
					"content": "Oh, for sure. I didn\u0027t say it forced you to deal with errors though, just that it encourages it ;)",
					"date": "2017-07-22",
					"id": "dkl4sbg",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "alecbenzer",
					"content": "It\u0027s _very_ clear when this is happening though, which isn\u0027t the case for a function that may throw an exception.",
					"date": "2017-07-23",
					"id": "dkl8j9j",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "irqlnotdispatchlevel",
					"content": "wat?",
					"date": "2017-07-23",
					"id": "dkll8sy",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "nishanths",
					"content": "Don\u0027t even get me started on accidental shadowing. \n\nBut otherwise, yes, Go\u0027s error handling pattern is better than exceptions for control flow.",
					"date": "2017-07-23",
					"id": "dklni52",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "idobai",
					"content": "\u0026gt; If your chief argument against Go being a simple language is \"preventing the unclean from sullying our precious environment\" then you definitely haven\u0027t understood the reason Go exists in the first place.\n\n\"The key point here is our programmers are Googlers, they’re not researchers. They’re typically, fairly young, fresh out of school, probably learned Java, maybe learned C or C++, probably learned Python. They’re not capable of understanding a brilliant language but we want to use them to build good software. So, the language that we give them has to be easy for them to understand and easy to adopt.\"\n– Rob Pike\n\nIt exists because wannabe-coders can\u0027t understand normal languages and contemporary CS.\n\n\u0026gt; It absolutely does. \n\nDoes it compile if you don\u0027t handle your errors? If yes, then your argument is pointless.\n\n\u0026gt; There are even tools like errcheck that process your code and point out where you haven\u0027t handled the error. \n\nLike for every language + there are languages with checked exceptions...\n\n\u0026gt; What?\n\nIs `if(err  !\u003d nil)` a proper way to manage errors for you?\n\n\u0026gt; Yeah, you just lost any right to have a rational argument on this subreddit.\n\nIt\u0027s not like you gophers are capable of rational arguments when you\u0027ve been trapped in your echo-chamber for so long...",
					"date": "2017-07-23",
					"id": "dkllnnd",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "dotwaffle",
					"content": "There\u0027s no need to be rude about it. It\u0027s ok to have differing opinions, it\u0027s not ok to resort to name calling and rudeness just because you see opinions other than your own :(",
					"date": "2017-07-23",
					"id": "dklpfyz",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "idobai",
					"content": "It\u0027s not rude it\u0027s honest. Which parts of my comments isn\u0027t true btw?",
					"date": "2017-07-23",
					"id": "dkluaxi",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "danredux",
					"content": "I don\u0027t think Go needs generics, I think they are complex, but complete, solutions to a whole category of problems, whereas I would prefer simpler solutions to the more common problems in that category.\n\nI think there\u0027s a few tiny things that could be added to solve 99% of the problems that generics add. Adding full generics, to me, would mean everyone uses them and I find that makes libraries much more complex to use.\n\nThe main thing missing, really, is working with a slice/map of anything. People able to specify that you accept \"any\" slice or \"any\" map (whose types have certain capabilities) without having to create a type for that slice/map and make it satisfy some interface.\n\nAnyway, that\u0027s just my argument, and is one of many perspectives on the issue.",
					"date": "2017-07-22",
					"id": "dkkl9e6",
					"isArchived": true,
					"isControversial": true,
					"score": 8
				},
				{
					"author": "mister_plinkett",
					"content": "\u0026gt;The main thing missing, really, is working with a slice/map of anything. People able to specify that you accept \"any\" slice or \"any\" map (whose types have certain capabilities) without having to create a type for that slice/map and make it satisfy some interface.\n\n... So generics, except only for the special case of slices/maps?",
					"date": "2017-07-22",
					"id": "dkl31hq",
					"isArchived": true,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "andradei",
					"content": "maps and slices are already a special case in the language, so why not?",
					"date": "2017-07-27",
					"id": "dkt1tfb",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "drink_with_me_to_day",
					"content": "I just want an easier way to extend interfaces. Currently it\u0027s just too much copy/paste and gratuitous repetition.",
					"date": "2017-07-23",
					"id": "dkl9qh5",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "youstolemyname",
					"content": "Yes yes yes yes yes yes yes yes yes yes yes yes yes. Otherwise why?",
					"date": "2017-07-23",
					"id": "dkl7uod",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "kaeshiwaza",
					"content": "Like simplicity, like \"less is more\", the problem with generic is that it\u0027s more difficult to explain why we don\u0027t need it (in fact) than why we could use it. \n\nAt first, coming from Python i thought i will need generics, but the more and more I \"think Go\" the less I feel the need for generics. But it will be a lot easier for me to sell the features of Python than the simplicity of Go. Specially if I give short examples like we do here.",
					"date": "2017-07-22",
					"id": "dkkkrjs",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "cs-guy",
					"content": "\"Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better.\" — Dijkstra (1984) On the nature of Computing Science (http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD896.html)",
					"date": "2017-07-22",
					"id": "dkl1ki4",
					"isArchived": true,
					"isControversial": false,
					"score": 13
				},
				{
					"author": "Pagedpuddle65",
					"content": "Totally agree. We don\u0027t need a new way to define funcs, what we have now is plenty elegant and simple. \n\nAnd yes, that\u0027s true. More difficult for people new to programming. Possibly easier for people coming from other languages? ",
					"date": "2017-07-22",
					"id": "dkkpktq",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "chmikes",
					"content": "I program in Go for more than a year and never met the need for generics. That doesn\u0027t prove that black swan don\u0027t exist of course. \n\nGo interfaces removes the need for generics for most use cases. Whatever quacks is a duck. So when you implement a container, one should provide an interface for items that can be stored in it. Or if we want to implement a function processing some type of data, we should provide an interface for the type that can be processed. \n\nThe nice thing with this is that the interface is well defined. We don\u0027t need to look at the code of the templated function or class to see what methods it will use. This is something that always irritate me with templates. \n\nNow there are types and operations that don\u0027t support interface. The types are the basic types like int16, unit32, float, ... The operations are the arithmetic, binary and logical operations. For these types and operation, we are stuck to rewriting the functions for the different types. This is why I stick to int in my code. \n\nFrom my current understanding, these are the only use cases where generics may solve the problem. But it doesn\u0027t mean that generics is the only solution. \n\n",
					"date": "2017-07-22",
					"id": "dkkhr73",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "saturn_vk",
					"content": "\u0026gt; I program in Go for more than a year and never met the need for generics. That doesn\u0027t prove that black swan don\u0027t exist of course. \n\nHave you used a map type? What about a channel? What about the append function? If you have, then you definitely had a need for genetics, and the language meet them with a handful of magic builtins. The problem is that they are quite magical.\n\n\u0026gt; Go interfaces removes the need for generics for most use cases. Whatever quacks is a duck. So when you implement a container, one should provide an interface for items that can be stored in it\n\nHave you ever tried what you just wrote? If you had, you would\u0027ve known that there are glaring limitations to this approach.\n\n\u0026gt; This is why I stick to int in my code. \n\nSo either you write very small apps, or you clearly have a need for genetics.",
					"date": "2017-07-23",
					"id": "dkl60mn",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "JRMWarfare",
					"content": "While Go interfaces are a powerful tool, this isn\u0027t really a substitute for generic programming, For me, the issue lies with the fact that interfaces also come with a trade-off of interface values needing dynamic dispatch and not being inlinable, so using them has costs associated with it. I generally fall on the side of the argument that you shouldn\u0027t compare the two because one (generics) can be compile-time checked and therefore optimizations can be performed, and therefore Is a zero-cost abstraction while using an interface is not necessarily zero-cost. It may not be expensive in all cases, but anywhere with a tight loop will suffer a performance hit if a simple method (like sort.Interface\u0027s Less, generally implemented as a \u0026lt; b) is called repeatedly and cannot be in-lined to prevent having to grow the stack.\n\nOf course, often generic programming benefits from operator overloading so as not to be restrictive, and that is a can of worms I\u0027m not sure the Go team needs or wants to open.",
					"date": "2017-07-22",
					"id": "dkl0tz4",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "cs-guy",
					"content": "Generics is absolutely not a zero cost abstraction. It may be zero cost at runtime (depending on the implementation), but it is probably not zero cost to compile times, it is certainly not zero cost in the complexity of the compiler code, and it is not zero cost to the reader of the generic code either. http://250bpm.com/blog:86",
					"date": "2017-07-22",
					"id": "dkl2c1c",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "JRMWarfare",
					"content": "Of course. But, in this context, I am referring specifically to zero-cost at runtime.",
					"date": "2017-07-23",
					"id": "dklyxqz",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ggtsu_00",
					"content": "A very large part of what makes Go preferable over other languages like C++, Java And C# is that it has extremely short compile times, especially for very large code bases. A large part of that benefit comes in programmer productivity and fast iteration times on par with dynamic languages like Python.\n\nWhen it comes to programming language design, out of the following 3 features you can only choose 2:\n\n* Fast compile times\n\n* Fast runtime\n\n* Generics\n\nGolang chose the first 2 at the expense of the third.\n",
					"date": "2017-07-23",
					"id": "dkm7m23",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Pagedpuddle65",
					"content": "I just want to point out that just because you haven\u0027t personally run into the need for generics doesn\u0027t mean it doesn\u0027t exist. You definitely can do A LOT without generics in go. Go is a great language. \n\nPeople trying to write abstract packages outside of some prescribed business requirements are very likely to run into the pain of not having generics though, and if those guys get generics then the rest of us get to benefit as week even though we\u0027ve always been able to figure a way through our issue. ",
					"date": "2017-07-22",
					"id": "dkkna1e",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "SteveMcQwark",
					"content": "The problem with this notion is that, once you put things in a container, you generally want to do stuff with it which is application specific. So you access the contents of the container... and are limited to whatever interface the container defined for its contents. The only way to access the operations *you* need is to use type assertions (even if only to another interface type). And this is where your code isn\u0027t statically type checked.\n\nA second problem with this notion is that a lot of operations require having two values of the same type, not just numeric operations. For example, if you have two slices and want to move values from one to the other, they need to be the same type of slice. Even if you\u0027re using interfaces everywhere and have slices of interfaces, you still need to know that the element types implement the same interface. If you want to put a value into the slice, its type needs to be the same as the element type of the slice, again, even with interfaces.\n\nStatically checked polymorphism based only on the operations provided by individual values is simply not sufficient for many common use cases, since you also need to be able to be polymorphic over the relationships *between* values. The only way around this is to use type assertions everywhere and treat the language as dynamically typed with inconvenient syntax (type assertions). Go is specifically not a dynamically typed language. A big point of the design is that interfaces are statically checked, and that it has concrete types like structs, numbers, arrays/slices, maps, channels, functions, and pointers, which you spend much of your time working with directly.",
					"date": "2017-07-22",
					"id": "dkl3kis",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ryeguy",
					"content": "What languages with generics have you used in the past and how does go reduce the need compared to them? Languages with generics always have some interface-equivalent feature, so I don\u0027t see how go\u0027s interfaces help with needing generics.\n",
					"date": "2017-07-22",
					"id": "dkkvxbc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "chmikes",
					"content": "I have programmed in C++ (mainly) and D. I have also programmed in Java before generics were added. I know what generics are and why I don\u0027t like them. I fully agree with Rob Pike´s view on the language simplicity. We don\u0027t want another C#, C++ or Java. Use them if you want generics. Go is about simplicity, and I don\u0027t see the benefit in adding generics. \n\nThe interface in Go is very different from an abstract base class. There is no need to explicitly say that your class implements an interface. It is automatic. Go\u0027s interface is more powerful than inheriting an abstract base class. \nGo\u0027s interfaces is pure duck typing. Whatever quacks is a duck. All you need is to provide a quack method. ",
					"date": "2017-07-24",
					"id": "dknrzvn",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ryeguy",
					"content": "The fact that go\u0027s interfaces are structurally typed has no bearing on the usefulness of generics. Structural typing does not \"save\" you from usecases that are normally solved by generics.\n\nThis is why I asked what your experience with generics was. Every time I hear \"I haven\u0027t needed generics\", it always seems like the person doesn\u0027t actually understand what they\u0027re for in the first place.",
					"date": "2017-07-24",
					"id": "dknsnnz",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "comrade-jim",
					"content": "C doesn\u0027t have generics and it\u0027s doing fine.\n\nAlmost every person who brings up generics when it comes to Go are people who just don\u0027t like Go. Yeah you can find a few enthusiasts who hate the lack of generics, but for the most part it\u0027s people from other communities who are just trying to find any perceived \"flaw\" they can. ",
					"date": "2017-07-22",
					"id": "dkkjmuw",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-22",
					"id": "dkkw7sm",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "comrade_donkey",
					"content": "Make that with a side of undefined behavior and infinite include-cycle sauce. ",
					"date": "2017-07-22",
					"id": "dkl0nve",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "albgr03",
					"content": "\u0026gt; C doesn\u0027t have generics and it\u0027s doing fine.\n\nC and Go are different beasts.\n\nLet’s say you want to implement a min() function. In C, without generics, you can use a macro :\n\n    #define MIN(a, b) ((a \u0026lt; b) ? a : b)\n\nWhether you use ints, chars, doubles, this code just works, no need to cast anything.\n\nIn Go, either you create multiple functions for Ints or Floats, or you use interface{} with a type switch, which would be ugly in this case.\n\nI don’t think I’m wrong if I say that most of us expect Go to be safer than C (less undefined behaviors, less segfaults due to bad memory usage, etc.). Generics will help, by enforcing type-safety at compile-time.\n\nedit: parenthesis around the macro",
					"date": "2017-07-22",
					"id": "dkkt870",
					"isArchived": true,
					"isControversial": false,
					"score": 26
				},
				{
					"author": "FCCorippus",
					"content": "You should put parenthesis around the macro expression to avoid unintended side effects during the lexical expansion.",
					"date": "2017-07-23",
					"id": "dklbxhd",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "albgr03",
					"content": "Thanks, edited.",
					"date": "2017-07-23",
					"id": "dklldzk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "deepcube",
					"content": "also, just incase it saves someone who didn\u0027t know yet, using a macro that references its arguments more than once can have unintended side effects\n\ne.g. expand this: MIN(a++, b--) ",
					"date": "2017-08-01",
					"id": "dl0r0qe",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "UTF64",
					"content": "I absolutely love Go. It\u0027s great. It would be greater with generics. It\u0027s a pain reimplementing stuff for different types.",
					"date": "2017-07-22",
					"id": "dkky94v",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "ryeguy",
					"content": "\u0026gt; C doesn\u0027t have generics and it\u0027s doing fine.\n\nThis is a non-argument. No one is saying a language can\u0027t do its job without generics. \n\nBut you see people working around generics in C, and it sucks there too. Functions often take `void *` which hurts performance and has no type safety. Or they use templates with placeholders as generators.\n\n",
					"date": "2017-07-22",
					"id": "dkkwc5p",
					"isArchived": true,
					"isControversial": false,
					"score": 17
				},
				{
					"author": "alecbenzer",
					"content": "IIUC `void*` actually doesn\u0027t hurt performance, but throws type safety totally out the window (as-in, it\u0027s UB and you\u0027ll get incomprehensible errors). Type asserts in Go retain some form of safety because you can handle the error, but there you do take the performance hit.",
					"date": "2017-07-23",
					"id": "dkl81ma",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ryeguy",
					"content": "I was thinking since the type isn\u0027t known in the function body, the compiler wouldn\u0027t be able to optimize the code as well as if it were a concrete type.",
					"date": "2017-07-23",
					"id": "dklhg5a",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "youstolemyname",
					"content": "C is a painful language",
					"date": "2017-07-23",
					"id": "dkl82x2",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "JHunz",
					"content": "I\u0027d say three quarters of the people who bring it up are people trying (or just reading about) Go and disliking the fact that they\u0027re missing, and a quarter are people actively programming in Go who have problems that would be solved or simplified if generics existed.  I\u0027m in the latter camp, personally.",
					"date": "2017-07-22",
					"id": "dkkunzp",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "throwdemawaaay",
					"content": "\u0026gt; C doesn\u0027t have generics and it\u0027s doing fine.\n\nIn c the problem is avoided via either using macros or void*. Golang was absolutely right to establish barriers and norms against this.\n\nThe flip side is, golang hasn\u0027t provided an acceptable mechanism for the same needs. The drawbacks and limitations of interface{} are clear. Code generation is brittle.\n\n\u0026gt; for the most part it\u0027s people from other communities who are just trying to find any perceived \"flaw\" they can.\n\nThis is absolutely not the case. A whole bunch of us want to be able to write type safe containers as reusable libraries. We have a specific, clear, criticism, and it cannot be hand-waved away as \"outsiders from other communities just trying to find any flaw they can\".",
					"date": "2017-07-23",
					"id": "dkm0cjl",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "WintyBadass",
					"content": "C does have generics (macros and __Generic in C11?). But! You don\u0027t need generics for what C is for (kernels, drivers, really low level code, ...).\n\nAlso did you some some higher-level code in C? (GTK+ application?) It\u0027s just pure madness.",
					"date": "2017-07-22",
					"id": "dkklunj",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "arp242",
					"content": "C isn\u0027t \"for kernels, drivers, really low level code\". It\u0027s a general programming language, like Go is.\nThere are billions of lines of \"higher-level code\" in C, with thousands being added every day.\n\nWhether it\u0027s a good thing that these sort of programs are being written in C is up for debate, but the fact is that there is loads of such code, and much of it works pretty well.\n\n----\n\nMacros aren\u0027t really \"generics\". You can do the same sort of \"generics\" in Go by generating code. Macros are just a shortcut to generate code.",
					"date": "2017-07-22",
					"id": "dkktivk",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "CaptainHondo",
					"content": "C used to be a highish level programming language like Go, but it isn\u0027t anymore.",
					"date": "2017-07-23",
					"id": "dkldbof",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "WintyBadass",
					"content": "Yes you can do everything in C and Go too. But how many people ale writing kernels in Go and webservers in C?\n\nLike common. Why people don\u0027t mind code generation but when option of standardized and automatic code generation is brought up everyone looses their mind.",
					"date": "2017-07-22",
					"id": "dkkuf7t",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "kisielk",
					"content": "There\u0027s these two projects called Apache and nginx, you may have heard of them...",
					"date": "2017-07-22",
					"id": "dkl4cfj",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "arp242",
					"content": "\u0026gt; how many people ale writing kernels in Go\n\nIIRC there was a Go kernel project.\n\nEither way, Go\u0027s garbage collection makes it unsuitable for \"real\" (non-toy) kernels.\n\n\u0026gt; webservers in C\n\nApache? Nginx? Lighttpd? Many more?\n\nThere is lots of code being written in C; arguably a lot of that *should* be in a safer language (such as Go); but on the other hand, you *can* write very useful and secure software in C (see OpenBSD and related projects for an example).\n\n\u0026gt; Why people don\u0027t mind code generation but when option of standardized and automatic code generation is brought up everyone looses their mind.\n\nA significant part of Go\u0027s attraction is its readability and lack of \"magic\". You can take a program and just read it top-down from \"cover to cover\"; no callbacks or inherited stuff or any of that.\n\nI\u0027m not sure if anyone is \"losing their mind\" over generics, but I do think a lot of people are very aware that this is the strength of Go, and are careful with introducing new features that might weaken this.",
					"date": "2017-07-23",
					"id": "dklwv0u",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "WintyBadass",
					"content": "Ok webserver wasn\u0027t the right word. More like webapps. Applications like Reddit, Github, Wikipedia. Noone writes this in C.\n\nApache, Nginx is another story. You need all the performance you can get and rust wasn\u0027t (and still isn\u0027t) mainstream so C or C++ is best option.\n\nAbout readability. Look at the new atomic map in 1.9. Can you tell me how less \"readable\" would it be if it was implemented using generics instead of interface{} ? And you would get copile time checks...\n\nLike wow... Sandart datatype in statically typed language that isn\u0027t type safe... Why do we bother with Go if Python, JS, and so on can do the same?",
					"date": "2017-07-23",
					"id": "dklyo2e",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "arp242",
					"content": "Yeah sure, no one is saying that using `interface{}` is great. Personally I\u0027m not convinced that adding the atomic map in 1.9 was a good idea exactly because of this reason; the existing solutions worked well enough IMHO.\n\nThat being said, just because there is a problem doesn\u0027t mean that any proposed solution is a *good* solution. It\u0027s like the old politician\u0027s fallacy: \"we must do something, this is something, therefore we must do this\" ;-)",
					"date": "2017-07-23",
					"id": "dklz9of",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "WintyBadass",
					"content": "Well you have a problem in Go. You can\u0027t write type safe data structures and algorythms for types you will know at compile time. In 40? years of computer science only one solution poped up. Generics. Creators of Go are brilliant people, but not that brilliant to create new and better solution.\n\nAlso another antiargument for generics making code more complex and unreadable. Is append unreadable? What about new? copy? delete? and so on. No they are not and they are clearly generic functions.",
					"date": "2017-07-23",
					"id": "dklzn2t",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "FUZxxl",
					"content": "C does not have generics. The generic selection operator is not nearly the same thing as what is typically considered an implementation of generics. Macros are textual replacement, not generics.\n\nNote that `_Generic` came in only six years ago and isn\u0027t really used outside of implementations of the mathematical standard library.\n\nHigh level code in C is perfectly easy to write. As with every thing, you just need to know what you are doing.",
					"date": "2017-07-22",
					"id": "dkkrk5n",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "WintyBadass",
					"content": "And what are template generics? Basically text replacement right before compilation.\n\nYou can use C macros almost as fully featured generics, but noone does it because it sucks and you get nonreadable error messages.\n\nBut yeah, C doesn\u0027t have proiper generics. But it has something that can be used as generics (somewhat).",
					"date": "2017-07-22",
					"id": "dkks8gy",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "FUZxxl",
					"content": "Templates do much more, like ensuring type safety and allowing for polymorphism (as in, you can use the same name for different instances of the same template) All these things are very difficult to do with macros.",
					"date": "2017-07-22",
					"id": "dkktawj",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-23",
					"id": "dklqz19",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jonathangerber",
					"content": "I always find these types of statements perplexing. What evidence is this based on?  As a user of Go, I find the lack of generics as one of the language\u0027s greatest flaws.  I hate the idea that I have to either give up compile time validation (interface{}) or lean on macro style \"solutions\". \n\nI could offer up a sweeping generalization of my own. People who dismiss the need for generics in Go do not understand the value of compile time vs runtime type checking and/or have never experienced an more advanced type system like the one found in Haskell or Rust, which can provide all the convenience of Go\u0027s \"interface{}\" but with compile time safety guarantees and runtime speedups.\n\nI could offer up that generalization, but I wont; because I really can only speak for my experiences, and maybe those of my colleagues, who seem to agree with me. But I really don\u0027t understand the pushback against generics. Perhaps the folks who are so against generics have only experienced c++ templates?  \n\nGo is a neat, compact language, but it could be a safer, arguably faster, more expressive language, with the introduction of generics IMHO. I would personally like to see some sort of  Algebraic Data Type support (variant discussion above) coupled with compile type interface validation (sans interface{} ) and (too much to hope for) pattern matching. \n\n",
					"date": "2017-10-07",
					"id": "do1fe31",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "fuckthememeculture",
					"content": "Write a type safe map that I can use out of the box.",
					"date": "2017-07-23",
					"id": "dklz6yz",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "veritasserum",
					"content": "\n\nI am an old C hacker and - more recently - a Python devotee\u0027 - just putting toes in the go waters..  Could you comment a bit on why you feel closure is needed?",
					"date": "2017-07-23",
					"id": "dkl9s09",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "the_evergrowing_fool",
					"content": "No matter, could you add TCO instead?",
					"date": "2017-07-23",
					"id": "dkmc5ez",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nomadProgrammer",
					"content": "Nope",
					"date": "2017-10-12",
					"id": "do9yi94",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "mhausenblas",
					"content": "Yep! Well argued, Dave. Go team, ship it or own it.",
					"date": "2017-07-22",
					"id": "dkkgq6y",
					"isArchived": true,
					"isControversial": true,
					"score": 2
				},
				{
					"author": "ctbel",
					"content": "\u0026gt; So my first answer is: Javascript should have some form of generics because it is a mainstream, imperative, block scoped language and it is expected these days.\n\nI love how this article does try to be objective and include valid arguments for both sides.\n\n\u0026gt; I am not one of the language designers, only an exuberant fan (...)  This isn’t simply a case of saying “nope, sorry, no generics for Go 2.0, maybe in another 5 years”, but a more fundamental statement that they are not something that will be implemented in Go because WE believe there is a better way to solve the underlying problem.\n\nWho\u0027s we?\n\nI can\u0027t build a compiler myself, but I can imagine that adding generics to the language will make the compiler a lot more complex to implement. That\u0027s a proper reason not to implement them. There\u0027s no other justification needed.",
					"date": "2017-07-22",
					"id": "dkkftjz",
					"isArchived": true,
					"isControversial": true,
					"score": -3
				},
				{
					"author": "itsmontoya",
					"content": "I really hate Dave\u0027s viewpoint on a lot of this kind of stuff. I feel like he comes off arrogant without proper backing. One aspect of go that really bothers me is that low-level data structures are nearly impossible to do well because of the lack of generics. Using an interface to represent a generic value has some large downfalls:\n\n- The compiler cannot find issues ahead of time, all type issues will be runtime issues\n- Overhead of running an interface rather than the direct struct (or value)\n\nA great example of this is the linked lib within the stdlib. Working with an interface-based data structure library feels awkward as hell. It\u0027s not a pleasant experience, and your code starts to feel muddy from all the:\n\n\n`val, ok :\u003d iface.(mystruct)\nif !ok {\n    return ErrInvalidtype\n}\n`\n\n(Sorry, reddit is making the formatting a bitch, but you get the idea)",
					"date": "2017-07-22",
					"id": "dkkkhj5",
					"isArchived": true,
					"isControversial": false,
					"score": 33
				},
				{
					"author": "ctbel",
					"content": "I\u0027m not sure if you meant to reply (all of that) to my comment?\n\n\u0026gt; I really hate Dave\u0027s viewpoint on a lot of this kind of stuff. I feel like he comes off arrogant without proper backing.\n\nThat\u0027s also what I took away from the article. The whole \"mainstream programmers\" talk felt very condescending for some reason, perhaps because I consider myself one. Maybe I\u0027m imagining things, and I didn\u0027t want to actually say it, but it\u0027s definitely the reason for my snarky misquote.",
					"date": "2017-07-23",
					"id": "dkmj5h0",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "natefinch",
					"content": "Please don\u0027t use the linked list library in the standard library.  Just write your own if you need one.  It\u0027s not hard.  \n\nAnd saying that he doesn\u0027t have proper backing is funny, given that he\u0027s been writing Go since before 1.0.  I worked with him for 3.5 years at Canonical on a 500k LOC codebase.  He knows what he\u0027s talking about.",
					"date": "2017-07-23",
					"id": "dkleqlm",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "postman_",
					"content": "\u0026gt; given that he\u0027s been writing Go since before 1.0. I worked with him for 3.5 years at Canonical on a 500k LOC codebase.\n\n500k LOC codebase of error checks? So what? Cheney has embrassed himself many times already and this is just another example of his closed-mindedness.",
					"date": "2017-07-23",
					"id": "dkmc8kg",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "Pagedpuddle65",
					"content": "Just because it\u0027s hard to do means we shouldn\u0027t? Not a good enough reason. ",
					"date": "2017-07-22",
					"id": "dkkinqf",
					"isArchived": true,
					"isControversial": false,
					"score": 22
				},
				{
					"author": "des09",
					"content": "Hard means high opportunity cost. Its not so much \"Who is going to pay for it?\" More like \"What could we have done with the same effort instead of generics?\" and \"What other features become significantly harder to implement after generics are in place?\" \n\nAlso, its not just the man hours to implement generics, what about the other expensive side-effects, like compile time? Like IDE complexity?\n\nPersonally, I\u0027m hoping we don\u0027t get generics, but that is mostly based on my experiences with them in Java, where the very heirarchical OO nature of the language made for a LOT of friction points when generics were introduced. Java too was a simple(r) language once :) I\u0027m hoping that if the rowdy bunch gets their way and we get generics, it wont be as [shitty](https://docs.oracle.com/javase/tutorial/java/generics/nonReifiableVarargsType.html) as it is in [Java.](https://docs.oracle.com/javase/tutorial/java/generics/restrictions.html) \n\nClosing thoughts... Some of us prefer our languages to be lean and mean, and to be easily read, and reasoned. Once they are there, they are there forever, for better or worse. We will pay for them with  compile time on every.single.compile. Almost every line of Go code that we read will be a little less simple to rationalize, so we will pay and pay and pay in brain power.\n\nSo, yes, IMO just because its hard IS a solid reason not to do it.",
					"date": "2017-07-22",
					"id": "dkl453f",
					"isArchived": true,
					"isControversial": true,
					"score": -2
				},
				{
					"author": "comrade-jim",
					"content": "Complex and *unnecessary*. ",
					"date": "2017-07-22",
					"id": "dkkjqji",
					"isArchived": true,
					"isControversial": false,
					"score": -9
				},
				{
					"author": "Wenste",
					"content": "That it\u0027s more complex is obvious. That it\u0027s unnecessary isn\u0027t.",
					"date": "2017-07-22",
					"id": "dkkkbki",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "des09",
					"content": "Is there a computing problem that cannot be solved in the absence of generics?I am not aware of one. I know many problems become simpler with generics, or less verbose, but I cannot think of any that *require* generics. ",
					"date": "2017-07-22",
					"id": "dkl4ceg",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "sabas123",
					"content": "\u0026gt;Is there a computing problem that cannot be solved in the absence of generics?I am not aware of one. I know many problems become simpler with generics, or less verbose, but I cannot think of any that *require* generics.  \n\nI can use all the same arguments you just gave for why we all should go back to programming in binary.",
					"date": "2017-07-22",
					"id": "dkl4lax",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "gott_modus",
					"content": "I think it\u0027s funny how Go is the language with the most memes adapted to it. I wonder why?",
					"date": "2017-07-23",
					"id": "dkl6phv",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "[removed]",
					"date": "2017-07-23",
					"id": "dkl5v1n",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "ctbel",
					"content": "It\u0027s obvious the entire article tries to justify not adding generics. The main pro-generics argument  applies equally to weakly typed languages. Why else do you think I replaced \"Go\" with \"Javascript\" in my quote?\n\n\u0026gt; It\u0027s not that hard, bro. You just substitute symbols.\n\nThen why don\u0027t you do that, and maintain the code base indefinitely. People will love you for it. You don\u0027t have time? Then why don\u0027t you pay others to do it for you?\n\n\u0026gt; Your commander just doesn\u0027t want to admit that his decision was retarded.\n\nWho is my commander? What decision are you talking about?",
					"date": "2017-07-23",
					"id": "dkm48f5",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "gott_modus",
					"content": "\u0026gt;It\u0027s obvious the entire article tries to justify not adding generics.\n\nMhmm. And?\n\n\u0026gt; The main pro-generics argument  applies equally to weakly typed languages.\n\nI\u0027m sorry, but I fail to see the relevance to this discussion here. I\u0027m honestly not even sure what argument you\u0027re referring to, exactly.\n\n\u0026gt;\u0026gt; It\u0027s not that hard, bro. You just substitute symbols.\n\u0026gt;\n\u0026gt;Then why don\u0027t you do that, and maintain the code base indefinitely.\n\nThat\u0027s not a very good rebuttle, I\u0027m afraid. It would make sense if I made the claim that you should implement generics in the Go codebase because it\u0027s not that difficult.\n\nThe people who are involved in its design have the opinion that Generics aren\u0027t particularly useful. One has specifically mentioned that they\u0027ve had trouble figuring out exactly what kind of problems generics help clearly solve.\n\nTherefore, their reasons for not implementing generics have very little to do with the work involved, be it difficult or otherwise.\n\nEven if it *were* incredibly difficult to integrate, that hasn\u0027t stopped every other widely-used statically typed language designer from incorporating it into their runtime. \n\nConsidering that the people who work on Go have an excess amount of experience with systems programming in *general*, it\u0027s fallicious to think that this would be incredibly difficult for them.\n\nUltimately every pull request to the repo has to be accepted before it actually makes any significant difference. \n\nIf someone takes the time to support generics and they choose not to accept the additional code needed  for that support, then the work and time needed has essentially been wasted. You can argue that a proof of concept will now exist, but a PoC isn\u0027t really that useful given that Generics aren\u0027t particularly new as a concept.\n\nAnyway, I have better things to do with my time than care about a programming language I don\u0027t use at all.\n\nYour assumption that I care at all is false, which kind of makes that particular point moot.\n\n\u0026gt; People will love you for it. You don\u0027t have time? Then why don\u0027t you pay others to do it for you?\n\nAgain, you\u0027re making the false assumption that I genuinely care enough to do this.\n\nEven if I did care at all, why would I pay money for people to implement a feature for a project I have no stake in whatsoever? \n\nFurthermore, how exactly does any of what you\u0027re saying at all contradict what I said about generics really not being as difficult as you claim?\n\n\n\u0026gt;\u0026gt; Your commander just doesn\u0027t want to admit that his decision was retarded.\n\u0026gt;\n\u0026gt;Who is my commander? What decision are you talking about? \n\nYour commander is Rob Pike. His decision to not implement generics from the start was retarded.   ",
					"date": "2017-07-23",
					"id": "dkmb73r",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ctbel",
					"content": "You are probably right that it doesn\u0027t necessarily make the compiler significantly more complex, but from what I\u0027ve heard it would require an entire rewrite of the compiler, and would require a lot of changes to the tooling and even standard library. Cheney worries in his article that the transition to a Go with generics risks fracturing the community.\n\nYou also seem to be under the impression that I\u0027m oblivious to the \"cargo cult-tier justification\" in the article. Perhaps if you actually read the article, you might have realized that the main pro-generics argument could also apply to weakly typed languages, and you might have noticed my sarcasm when I misquoted the original article.\n\nMy point is that those who actually work on Go might not feel that generics are sufficiently beneficial for them to actually implement and maintain them. And that would be a valid justification for them not to implement them. Claiming otherwise just reeks of entitlement because you\u0027re free to implement it yourself.",
					"date": "2017-07-23",
					"id": "dkmihga",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "gott_modus",
					"content": "\u0026gt; I\u0027ve heard it would require an entire rewrite of the compiler, and would require a lot of changes to the tooling and even standard library.\n\nThat doesn\u0027t really match with your original comment; you do say that complexity will be involved, but you don\u0027t specify how, which is pretty significant. \n\nI\u0027d be curious to know what exactly about the compiler itself would make it require a rewrite. \n\n\u0026gt; You also seem to be under the impression that I\u0027m oblivious to the \"cargo cult-tier justification\" in the article. \n\nNope, any mention of cargo culting was solely at your initial comment and had nothing to do with the article at all.\n\n\u0026gt;Perhaps if you actually read the article, you might have realized that the main pro-generics argument could also apply to weakly typed languages, and you might have noticed my sarcasm when I misquoted the original article.\n\nPerhaps. However, your assumption that the article actually needs to be read as far as this debate is concerned is false, and using my lack of reading it as an argument is fairly weak to be honest, because what I said to you had absolutely zero intent of being correlated with the article itself. Your interpretation of it being that way is at most coincidence, but it isn\u0027t my fault.\n\n\u0026gt; My point is that those who actually work on Go might not feel that generics are sufficiently beneficial for them to actually implement and maintain them. And that would be a valid justification for them not to implement them. \n\nI still think it\u0027s a flawed argument. Those who work on Go have a considerable amount of resources that exist far beyond just a few academic oldies sitting around with limited funding - this is Google we\u0027re talking about, after all. \n\nSeparate teams have existed in the past for this kind of rewrite: you have developers who continue to maintain the stable branch, and developers who go off and do whatever is necessary to produce a working version of the compiler with Generics support.\n\nWhich also leads me to this,\n\n\u0026gt; Cheney worries in his article that the transition to a Go with generics risks fracturing the community.\n\nThis makes absolutely no sense, considering that feature addition like Generics can be implemented in such a way that it doesn\u0027t break backward compatibility.\n\n\u0026gt; Claiming otherwise just reeks of entitlement because you\u0027re free to implement it yourself.\n\nActually it doesn\u0027t, because I\u0027m fully aware of my lack of entitlement: I really don\u0027t care whether or not Go has generics, because I\u0027m not a Go programmer. That said, my whole point is based on the premise that Generics being implemented _as an official language feature_ are what\u0027s important. The reason for this is because it\u0027s guaranteed support and maintenance by more than just one person in the future, _and_ that support is coming straight from the horse\u0027s mouth and not some ragtag group of coders who don\u0027t have time to commit 40+ hours a week towards Go in general. \n\nI\u0027ve already heard of people who have forked the Go repo and hacked on some ghetto implementation; obviously, these haven\u0027t made it upstream. Which implies that there\u0027s no guarantee that forked, unofficial implementations with Generics are particularly worthwhile in the long term. ",
					"date": "2017-07-24",
					"id": "dknwans",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "ctbel",
					"content": "FYI I didn\u0027t downvote you.\n\n\u0026gt; That doesn\u0027t really match with your original comment; you do say that complexity will be involved, but you don\u0027t specify how, which is pretty significant.\n\nYes I should have communicated better.\n\n\u0026gt; which is pretty significant.\n\nWhat?\n\n\u0026gt; I\u0027d be curious to know what exactly about the compiler itself would make it require a rewrite.\n\nGo ships with a lot of built-in developer tools and the compiler can\u0027t be seen in isolation from those tools. It\u0027s possible that they impose requirements on the compiler that can\u0027t be met with the current architecture without significantly impacting performance and stability. Sure the lexer won\u0027t be a problem, but that\u0027s as far as my knowledge goes.\n\nI was aware of the fork but can\u0027t seem to find the repo. Since you mentioned it, perhaps you could point me in the right direction? Would be interesting to see what works and what doesn\u0027t.\n\n\u0026gt; Perhaps. However, your assumption that the article actually needs to be read as far as this debate is concerned is false, and using my lack of reading it as an argument is fairly weak to be honest, because what I said to you had absolutely zero intent of being correlated with the article itself. Your interpretation of it being that way is at most coincidence, but it isn\u0027t my fault.\n\nFair enough.\n\n\u0026gt; I still think it\u0027s a flawed argument. Those who work on Go have a considerable amount of resources that exist far beyond just a few academic oldies sitting around with limited funding - this is Google we\u0027re talking about, after all\n\nMy argument is that those who actually work on Go might not feel that generics are sufficiently beneficial for them to actually implement and maintain them, which would be a valid justification for them not to add generics.\n\nYou\u0027re saying that this argument is flawed, but it\u0027s actually the nil-hypothesis from both a legal and an economical perspective.\n\nThe main difference between the few academic oldies, and Google, is that Google is a publicly traded for-profit company. A publicly traded for-profit company shouldn\u0027t spend money on things that don\u0027t ultimately contribute to it\u0027s profit. This includes charitable donations.\n\nAlso, implying Google should foot the bill simply because they have a lot of resources is lotter-winner-faux-friend kind of justification.\n\n\u0026gt; Separate teams have existed in the past for this kind of rewrite: you have developers who continue to maintain the stable branch, and developers who go off and do whatever is necessary to produce a working version of the compiler with Generics support.\n\nOf course it\u0027s possible to add generics, but why should Google be the one to foot the bill?\n\n\u0026gt; This makes absolutely no sense, considering that feature addition like Generics can be implemented in such a way that it doesn\u0027t break backward compatibility.\n\nWhat about the reflect package? What about all of the third-party tooling?\n\n\u0026gt; Actually it doesn\u0027t, because I\u0027m fully aware of my lack of entitlement: I really don\u0027t care whether or not Go has generics, because I\u0027m not a Go programmer. \n\nI never said you were entitled, I merely pointed out that your argument came from a place of entitlement.\n\n\u0026gt; That said, my whole point is based on the premise that Generics being implemented as an official language feature are what\u0027s important. The reason for this is because it\u0027s guaranteed support and maintenance by more than just one person in the future, \n\nExactly.\n\n\u0026gt; and that support is coming straight from the horse\u0027s mouth and not some ragtag group of coders who don\u0027t have time to commit 40+ hours a week towards Go in general.\n\nExactly.",
					"date": "2017-07-25",
					"id": "dkpw6g0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "natefinch",
					"content": "Do not use the term retarded in this subreddit.",
					"date": "2017-07-23",
					"id": "dkleqzs",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "media_guru",
					"content": "I feel like generics would be very hazardous to the simplicity and readability of Go. I also feel like the need for generics is dramatically overstated.",
					"date": "2017-07-22",
					"id": "dkkq97r",
					"isArchived": true,
					"isControversial": true,
					"score": -5
				},
				{
					"author": "saturn_vk",
					"content": "Do you use Go without relying on maps/slices/channels and the append/delete/copy/make functions? If you do not, this comment feels quite arrogant, since you obviously have no problem with consuming generic apis, yet think generic apis would somehow ruin the language.",
					"date": "2017-07-22",
					"id": "dkkwcsm",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "chmikes",
					"content": "Agree.  Thats like with early Java. People were screaming to be able to overload operators like in C++. Java kept a firm stand on its no. Did this negatively affect the future of Java ? I no way. Java is a great success.\n\nThis generic request sound to my like people requesting faster horses. Don\u0027t say WHAT you want. Say WHY you need it. The fact the we see so few justification for the need of generics is suspect. It looks like a feature nice to have. \n",
					"date": "2017-07-22",
					"id": "dkktlb4",
					"isArchived": true,
					"isControversial": true,
					"score": 4
				},
				{
					"author": "ryeguy",
					"content": "\u0026gt; Did this negatively affect the future of Java ? I no way. Java is a great success.\n\nOf course not, no language\u0027s future would be impacted by something as petty as operator overloading. Operator overloading is simply a syntactic convenience.\n\nGenerics are different, because the alternatives have downsides. Manual templating of code (genny, etc) is sloppy and needs a build step. Dropping down to `interface {}` hurts performance and type safety.\n\nOperator overloading is just syntactic sugar and a readability enhancement. People haven\u0027t really gotten over this - this is still a common complaint in the community. It makes working in some domains annoying (eg, gamedev when you want to add two `Vector3`s together).\n\n\u0026gt; This generic request sound to my like people requesting faster horses. Don\u0027t say WHAT you want. Say WHY you need it.\n\nThis isn\u0027t necessary. Generics aren\u0027t a cutting edge or controversial feature (in non-go communities). They have been around for decades and their use cases are thoroughly understood. Just look at any anti-go blogpost and read people\u0027s complaints about generics. Or peruse go\u0027s stdlib docs and imagine the benefits of omitting `interface {}` from functions. Look at any generic-having language\u0027s stdlib and look at the functions that are generic, and ask yourself what a go implementation would look like.",
					"date": "2017-07-22",
					"id": "dkkw75o",
					"isArchived": true,
					"isControversial": false,
					"score": 20
				},
				{
					"author": "postman_",
					"content": "\u0026gt; and poor java newbies are forced to learn that you absolutely can\u0027t compare objects with `\u003d\u003d`",
					"date": "2017-07-23",
					"id": "dkmgjtw",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "CountyMcCounterson",
					"content": "Just give us generics for fucks sake. If we\u0027re going to go full autism and not have basic features then why do we have strings? Do we really need anything other than pointers to an array of characters?\n\nLike honestly guys I can do the same thing without strings in only 10x more code so why not simplify the language and remove strings since simplicity is so important.\n\nDo we really need types? Like why not just have pointers to an array of bytes. You make a variable with var x \u003d byte(4) and then use those 4 bytes like an integer writing all of the functions you need and using bit operations. That would be so fucking simple, you don\u0027t even need most of the compiler features because the person just uses bytes directly with no complex ints or doubles floating around in the code.",
					"date": "2017-07-22",
					"id": "dkkvhrw",
					"isArchived": true,
					"isControversial": true,
					"score": -5
				},
				{
					"author": "tonetheman",
					"content": "I have programmed for a long time and I cannot think of any problems that fit the \"hey I need generics\" to do this problem.\n\nWhere is that list? Or what are some of the problems that need generics to be solved/worked on efficiently? Just wondering.\n\n",
					"date": "2017-07-22",
					"id": "dkkxzfv",
					"isArchived": true,
					"isControversial": true,
					"score": -1
				},
				{
					"author": "jlund3",
					"content": "Honestly, most cases that folks coming from languages like C++ or Java cite are actually covered either through Go interfaces, or through the built-in generic data types like slice, map or channel. The only place where you really miss generics in Go is in implementing or using generic data structures such as the heap package which forces you to sprinkle type assertions all over. Admittedly, this happens far less frequently than many think, but when it does, Go really is quite awkward to use.",
					"date": "2017-07-22",
					"id": "dkl1r7s",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "jlund3",
					"content": "Generic algorithms can be done very cleanly using interfaces (the sort package/interface is an oft cited example of this). I think any proposal that adds generics which facilitate generic algorithms should be rejected as they unnecessarily complicate the language. After all, the beauty and power of Go is its simplicity.\n\nHowever, when it comes to generic data structures, Go is lacking. Evidently the original creators of Go felt this too when they decided to add a select few generic data structures to the language such as slices, maps, and channels. Fortunately, these data types cover nearly all the use cases where generics are really needed. The only time I\u0027ve felt the need for generic types is when I\u0027ve implemented or used specialized data structures. Losing compile type safety and having to liter type assertions through out my code to use these data structures is makes code more brittle, makes code less readable, and leads to excessive code duplication.\n\nI think one reason why generics haven\u0027t been added to the language is because most proposals try to accomplish both generic algorithms and generic data structures. They tend to propose some cute little syntax that doesn\u0027t cover all the corner cases, and also add incredible complication to the language as they would affect virtually every part of the language in some way not defined in the proposal. Personally, if I were writing a generics proposal for Go, I would only add them to struct types and nothing else, and would try to duplicate the syntax that is already in the language. Only the simplest, most minimalistic proposal will be accepted.",
					"date": "2017-07-22",
					"id": "dkl1jwj",
					"isArchived": true,
					"isControversial": true,
					"score": -5
				},
				{
					"author": "alecbenzer",
					"content": "\u0026gt; Generic algorithms can be done very cleanly using interfaces (the sort package/interface is an oft cited example of this).\n\nBut this isn\u0027t _just_ using interfaces -- it relies somewhat heavily on the built-in genericism of slices, because that\u0027s almost always the underlying type implementing `sort.Interface`. When you don\u0027t have a built-in generic type to piggy-back off of, you often need to turn to using `interface{}`. E.g.: https://godoc.org/container/list",
					"date": "2017-07-23",
					"id": "dkl89ek",
					"isArchived": true,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "jlund3",
					"content": "Are you talking about sort.Interface with sort.Sort (which is just interfaces, and is an example of generic algorithms using interfaces), or the new (as of 1.8) sort.Slice which uses reflection to implement sort.Interface for sort.Sort? Reflection is a different animal than generics altogether...",
					"date": "2017-07-23",
					"id": "dkl94ie",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "alecbenzer",
					"content": "\u0026gt; which is just interfaces, and is an example of generic algorithms using interfaces\n\nYes but the type that implements `sort.Interface` is almost always a slice, which is a built-in generic type. So it\u0027s in a sense \"piggy-backing\" off of the genercism baked into the language.\n\nReflection and generics are different but related; you can often use both to solve similar problems.",
					"date": "2017-07-23",
					"id": "dkl9bt2",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "jlund3",
					"content": "\u0026gt; Yes but the type that implements sort.Interface is almost always a slice, which is a built-in generic type. So it\u0027s in a sense \"piggy-backing\" off of the genercism baked into the language.\n\nThe fact that it doesn\u0027t *have* to be a slice still illustrates the difference between generic algorithms via interfaces, and generic data structures, which we only have with slices, maps, channels and arrays.\n\n\u0026gt; Reflection and generics are different but related; you can often use both to solve similar problems.\n\nAre you arguing that reflection is all we need in Go to implement generic data structures? I mean...sure you *can* do it this way, but you lose type safety and readability, which is a huge problem. Adding generic data types would give you the ability to cleanly solve these problem, and the existing interfaces gives you the ability to do generic algorithms using any type, including generic data structures.",
					"date": "2017-07-23",
					"id": "dkl9qgd",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "saturn_vk",
					"content": "And yet those same algorithms that you mentioned suffer from poor performance precisely because they rely on interfaces. And they are much harder to use, and more confusing to novices. This simplicity you mention is nowhere to be found in this case. In fact, having an implementation using genetics would make things a lot simper.  That\u0027s exactly why there\u0027s a new sort function in 1.8.",
					"date": "2017-07-23",
					"id": "dkl5jnk",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "jlund3",
					"content": "If the performance hit of wrapping your concrete type with the sort interface is so big (and its not really big btw) that you can\u0027t use the sort package algorithm, then you\u0027ve found a case where you do not want generic programming, but instead you need fine-tuned code custom tailored to your exact use case. The sort package is in fact quite simple. The sort interface is small and trivial to implement. Using interfaces in this way to accomplish generic algorithms may be different than how you\u0027d do it in other languages, but that doesn\u0027t mean it is hard. Its just different. Go isn\u0027t that other language, nor should it be.",
					"date": "2017-07-23",
					"id": "dkl6c5q",
					"isArchived": true,
					"isControversial": true,
					"score": -3
				},
				{
					"author": "Paradiesstaub",
					"content": "If generics clutter the language up too much, maybe having some built-ins that give us the most-used-functions (like filter, map, take...) would be the way to go → generics-functions only in the std-lib. This way complexity increases not much (programmer point-of-view), at the same time the amount of boilerplate code would be reduced.\n\nBefore:\n\n    var a []string\n    for _, v :\u003d range []string{\"Apple\", \"Banana\"} {\n        if strings.HasPrefix(v, \"A\") {\n            a \u003d append(a, v)\n        }\n    }\n\nWith builtin generics:\n\n    a :\u003d []string{\"Apple\", \"Banana\"}\n                .filter(|v| strings.HasPrefix(v, \"A\"))\n",
					"date": "2017-07-22",
					"id": "dkkgev8",
					"isArchived": true,
					"isControversial": true,
					"score": -4
				},
				{
					"author": "Sythe2o0",
					"content": "I haven\u0027t seen many people expressing that this is a problem. I think Go has been pretty adamant that adding a couple extra lines of code to make an explicit loop is exactly what they want, and they aren\u0027t interested in going down the `map, filter, reduce ...` pattern of FP functions. ",
					"date": "2017-07-22",
					"id": "dkkgz7y",
					"isArchived": true,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "Paradiesstaub",
					"content": "As far as I know, the argument against generics (beside compiler complexity) is that go code could become a mess, because of too many \"clever abstractions\", which people tend to write. Go code is simple, that\u0027s what we love about Go, it is one of Go\u0027s major selling points.\n\nBuiltin FP functions would allow us to have more flexibility but at the same time keep Go somewhat, what it is right now.\n\n\u0026gt; adding a couple extra lines of code to make an explicit loop is exactly what they want\n\nI don\u0027t know if that\u0027s actually true. From my understanding, Go tries to keep complexity to a minimum, which IMHO, wouldn\u0027t disallow Go to have well known syntactic-sugar.\n\nShort, **expressive** code \u0026gt; boilerplate code.",
					"date": "2017-07-22",
					"id": "dkkipta",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "alecbenzer",
					"content": "\u0026gt; Go tries to keep complexity to a minimum, which IMHO, wouldn\u0027t disallow Go to have well known syntactic-sugar.\n\nI think it\u0027s been fairly clear that this is not what Go means by simplicity: they mean simplicity of the language constructs being used to build programs, not simplicity of the programs built over those constructs.",
					"date": "2017-07-23",
					"id": "dkl8c8n",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Pagedpuddle65",
					"content": "I agree completely. Everyone loves the mantra that adding anything new to the language is \"complex\" and \"unnecessary\". But often times that\u0027s just not true. Map/reduce functionality would let people write less code (less chance for bugs) that is more explicit (easier to maintain and understand). \n\nI\u0027ve loved being a go developer for the past year but if go 2 refuses to do anything interesting then I might look for a new language for my next job. ",
					"date": "2017-07-22",
					"id": "dkkmtr0",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Pagedpuddle65",
					"content": "I\u0027ll express that this is a problem. Sure I want generics but what I really miss from other languages is map/reduce functionality on arrays. It is SO useful and often much clearer",
					"date": "2017-07-22",
					"id": "dkkiqnk",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Sythe2o0",
					"content": "I think map/reduce functions are less explicit and use more complex syntax, but to each their own.",
					"date": "2017-07-22",
					"id": "dkkjoaq",
					"isArchived": true,
					"isControversial": true,
					"score": 0
				},
				{
					"author": "Pagedpuddle65",
					"content": "Ok I agree about to each their own but let me try to make my argument. \n\nThere are endless reasons to write a loop. Anytime I see a loop someone has written I have to parse all that code and understand its intention. \n\nIf I see .map on an array I know exactly what\u0027s happening. We are converting this struct to some other struct. \n\nAnd the same can be said for any of these other convenience functions. Yes there is a time and a place for them but I strongly believed when used appropriately they make code easier to understand and maintain because the purpose of the loop is explicitly stated--not to mention, less code to maintain. The convenience factor is very nice but it\u0027s just one positive thing IMO. ",
					"date": "2017-07-22",
					"id": "dkkjuys",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "Sythe2o0",
					"content": "If it used syntax that was closer to what go already used I\u0027d be ok with it:\n\nInstead of\n\n    a :\u003d []string{\"Apple\", \"Banana\"}\n                .filter(|v| strings.HasPrefix(v, \"A\"))\n\nThis:\n\n    a :\u003d []string{\"Apple\", \"Banana\"}\n                .filter(func(v string) bool {\n                    return strings.HasPrefix(v, \"A\")\n                })\n\nOtherwise it would seem like adding syntax for a new way to define functions.\n\nIt would still make Go a less beginner friendly, I think. Depending on how many functions are blessed into the standard library to have generics, you change the loop tutorial in Go from \"this is a for loop\" to \" this is a for loop, and these are the N keywords that are special types of loops\". \n\nEdit: you could use that same argument to say that any new feature would make Go less beginner friendly though, so that\u0027s probably not fair.\n",
					"date": "2017-07-22",
					"id": "dkkosov",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Justinsaccount",
					"content": "Right.. You can already do that in go, just not.. generically:\n\n    package main\n    \n    import (\n    \t\"fmt\"\n    \t\"strings\"\n    )\n    \n    type FilterableStrings []string\n    \n    func (fs FilterableStrings) filter(f func(v string) bool) []string {\n    \tvar ret []string\n    \tfor _, s :\u003d range fs {\n    \t\tif f(s) {\n    \t\t\tret \u003d append(ret, s)\n    \t\t}\n    \t}\n    \treturn ret\n    }\n    \n    func main() {\n    \ta :\u003d []string{\"Apple\", \"Banana\"}\n    \n    \tfiltered :\u003d FilterableStrings(a).filter(func(v string) bool {\n    \t\treturn strings.HasPrefix(v, \"A\")\n    \t})\n    \tfmt.Printf(\"%v\\n\", filtered)\n    }\n",
					"date": "2017-07-23",
					"id": "dkm1f1f",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "very-little-gravitas",
					"content": "It\u0027s pretty straightforward to do this if you find yourself using these loops a lot on a given type and find it cumbersome. You can easily write filter and map funcs on a list type such that you can chain the functions etc. \n\nhttps://play.golang.org/p/oWSTTwSwuu\n\n     hasPrefixA :\u003d func(s string) bool { return strings.HasPrefix(s, \"A\") }\n     atoDash :\u003d func(s string) string { return strings.Replace(s, \"A\", \"-\", 1) }\n\n     a :\u003d StringList{\"Apple\", \"Banana\"}.Filter(hasPrefixA).Map(atoDash)\n     \n     -\u0026gt; [-pple]\n\nNow I agree this might be nice to see first class support for (and other functions like range), but it is not exactly insoluble if you find yourself wanting to use these functions all the time, it\u0027s perfectly possible to work in a functional way and remain type safe. The number of types of lists you want to manipulate in this way is usually really quite limited, so I don\u0027t find it a huge problem in this particular instance just to write the functions on a list type and use that. \n\n",
					"date": "2017-07-22",
					"id": "dkl0kkl",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "weberc2",
					"content": "I disagree--these builtins complicate the language without adding much to type safety or readability. They only make the code more brief, which is not a desirable outcome by itself. I can live with for loops.\n\nThe problems that seriously cause me to consider another language are the lack of type-safe algorithms and data-structures. Fortunately for Go, there are few other languages that support generics but also value simplicity (in tooling as well as the language), but that is improving all the time...",
					"date": "2017-07-22",
					"id": "dkkhg92",
					"isArchived": true,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "Paradiesstaub",
					"content": "I like generics myself. When thinking about how Go could introduce generics without leading to overly clever code, I thought about builtin FP functions – I\u0027m not sure if that is the right approach though.",
					"date": "2017-07-22",
					"id": "dkkiz5j",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-22",
					"id": "dkkof2r",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Paradiesstaub",
					"content": "I\u0027m a Rustian :)",
					"date": "2017-07-22",
					"id": "dkkoter",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-22",
					"id": "dkkvx98",
					"isArchived": true,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "logrusorgru",
					"content": "    if a, s, d, f :\u003d 0, 5, get(val1, val2), 6; checkOut(a,s,d,f) \u003d\u003d something { return }\n\nProgrammers should not be allowed to make the code less readable",
					"date": "2017-07-22",
					"id": "dkkwod0",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Glats",
					"content": "http://fqa.9front.org/golang.gif",
					"date": "2017-07-24",
					"id": "dknekrc",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "pure_x01",
					"content": "As soon as Go gets generics it will be just another java or c# except worse. The simplicity of the language makes it stick out but it also that that makes experienced coders avoid it unless you come from say C or some of the dynamically typed languages. I don\u0027t belive that java or c# coders will ever migrate in masses to GO. There is a trend in the opposite direction the people are moving to more advanced languages like Scala, Kotlin and to some degree even F# . Go is a step backwards for jvm,.net devs.  ",
					"date": "2017-07-22",
					"id": "dkkie4t",
					"isArchived": true,
					"isControversial": false,
					"score": -16
				},
				{
					"author": "arp242",
					"content": "As long as Go doesn\u0027t have `SimpleBeanFactoryAwareAspectInstanceFactory` or `InternalFrameInternalFrameTitlePaneInternalFrameTitlePane\nMaximizeButtonWindowNotFocusedState` it will be better than Java :-)",
					"date": "2017-07-22",
					"id": "dkktrv7",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "YEPHENAS",
					"content": "https://play.golang.org/p/GYboDFzxsS",
					"date": "2017-07-22",
					"id": "dkku5u4",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "pure_x01",
					"content": "Haha i totalt didn\u0027t see that I was posting in the golang subreddit :-D ",
					"date": "2017-07-23",
					"id": "dkl550h",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "logrusorgru",
					"content": "No. Never. Just give more convenient tools for generating Go code.",
					"date": "2017-07-22",
					"id": "dkkih5l",
					"isArchived": true,
					"isControversial": false,
					"score": -12
				},
				{
					"author": "WintyBadass",
					"content": "You know that templated generics is basically builtin automatic code generation?",
					"date": "2017-07-22",
					"id": "dkklqsa",
					"isArchived": true,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "theta_d",
					"content": "I\u0027d much rather let the compiler maintain that code for me than having to do it myself with code generation tools.",
					"date": "2017-07-22",
					"id": "dkkmjbv",
					"isArchived": true,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "logrusorgru",
					"content": "1) more complex and slow compiler\n2) more complex and hard to write/read/understand/debug language\n3) less \"social\" language (none know what the hell it means)\n4) a complete study of the language lasts more than a life\n5) generics will not help with generating fastjson or gogo/protobuf like code\n6) generics will not help with OpenGL bindings\n7) There is Linux Torvalds\u0027 opinion about C++ and around, google it\n8) there is `interface{}`, there is `unsafe.Pointer`\n9) think about behaviour of a type instead of what a type is\n10) use `go generate`\n",
					"date": "2017-07-22",
					"id": "dkkw1q1",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-07-22",
					"id": "dkkwf4p",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "ChristophBerger",
			"date": "2018-04-04",
			"id": "89mqgt",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "A Minecraft like game written in Go",
			"comments": [
				{
					"author": "Hunterbunter",
					"content": "That\u0027s pretty awesome.\n\nI wonder what sort of performance hit you\u0027d see with Go vs C++ vs java for this.",
					"date": "2018-04-04",
					"id": "dws7mui",
					"isArchived": false,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "jackmott2",
					"content": "Java has less overhead with C interop than Go which will help, but the lack of value types can cause serious problems unless you are willing to make your code kind of horrible (never use a vector3 class, for instance).  You could probably make the Java one as fast or faster than Go with enough effort, BUT go\u0027s lower latency GC might mean less noticeable GC pauses even if average framerate is lower.\n\nC or C++ is going to be fastest of course.\n\nSean Barret\u0027s open block game is in C:\nhttps://github.com/nothings/obbg",
					"date": "2018-04-04",
					"id": "dwseqqu",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "koffiezet",
					"content": "Execution-speed I suspect Java to be on-par with Go, the JVM applies some dark JIT magic. Java -\u0026gt; C interop is far from optimal though, JNI has some serious overhead too... Not sure how it compares to the Go -\u0026gt; C bindings though - but would be interesting to see.\n\nThe Go or C version however, will be quite a bit more memory-friendly. And although both Go and Java are GC\u0027d the GC pauses and latency will probably be better for the Go version.\n\n",
					"date": "2018-04-04",
					"id": "dwsfb4f",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "jackmott2",
					"content": "\u0026gt;JNI has some serious overhead too...\n\nSomeone did some benchmarks on it, Go\u0027s overhead with C is worse, I think due to the unusual way that the stack works, but I am not sure.  There is also a philosophical lack of interest since the Go maintainers advocate not interoping with C in the first place. so hopefully they will do something like SDL+Vulkan in the core libs? \u003d)\n\nC#/ NET has a neat low/zero overhead system for talking to directx, which is cool but windows only.\n ",
					"date": "2018-04-04",
					"id": "dwsg5fv",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "TankorSmash",
					"content": "Why not use a vec3 class? Is it because you could use a len 3 array and assume from there?",
					"date": "2018-04-04",
					"id": "dwsjhwo",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jackmott2",
					"content": "With Java you can only have a reference type.  So one problem is that they all end up on the heap, even if they don\u0027t need to, unless the escape analysis can figure out not to put it on the heap. The second problem is any time you have an array of Vec3, you have an array of pointers to vec3, adding a pointer hop as you iterate, which is fantastically slower, and pollutes the cpu caches unnecessarily.\n\nSo for performance you would want an array of floats [x,y,z,x,y,z] or 3 arrays, one with x one with y one with z\n\nand all of your vector math functions would just take x,y,z instead of a vec3\n\n",
					"date": "2018-04-04",
					"id": "dwsjmzg",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "zacgarby",
					"content": "Here’s one written in C, for comparison: https://github.com/fogleman/Craft. My guess is that C would be faster than Go, but a lot faster than Java",
					"date": "2018-04-04",
					"id": "dws99bj",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "brobits",
					"content": "if you look at the bottom of this post\u0027s project:\n\n\u0026gt; Implementation Details  \nMany implementations is inspired by https://github.com/fogleman/Craft, thanks for Fogleman\u0027s good work!\n\na lot of the code is ported",
					"date": "2018-04-04",
					"id": "dwsrf0v",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "sh41",
					"content": "Has anyone seen https://github.com/Thinkofname/steven-go? It was another very impressive looking Minecraft client written in Go.",
					"date": "2018-04-04",
					"id": "dwss1ez",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "faiface",
					"content": "Waaaaa, that\u0027s so cool!",
					"date": "2018-04-04",
					"id": "dws9ufu",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "PieceDigital",
					"content": "I didn\u0027t realize graphics programming was possible with Go at this time.",
					"date": "2018-04-04",
					"id": "dwsa6z3",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jackmott2",
					"content": "I show how to set up SDL2 in one of my streams:\nhttps://gameswithgo.org/topics.html\n\nWe will be setting up opengl on thursday.\n",
					"date": "2018-04-04",
					"id": "dwses2y",
					"isArchived": false,
					"isControversial": false,
					"score": 16
				},
				{
					"author": "andradei",
					"content": "Your series is awesome.",
					"date": "2018-04-05",
					"id": "dwu9f5x",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "chompsky",
					"content": "Just about anything should be possible.  I\u0027ve been developing a game using the Vulkan API in Go for awhile now.  Windows side is pretty easy - the DLLs can be invoked directly from Go and the available Vulkan functions can be loaded up from there.  Same with windowing and input and audio.   I haven\u0027t looked much at what I\u0027ll need for Linux yet - may need cgo to use dlopen and friends.  But for now can call everything using 100% native Go.",
					"date": "2018-04-04",
					"id": "dwsgun8",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "jackmott2",
					"content": "\u0026gt; the DLLs can be invoked directly from Go\n\ncan you tell me more about this?\n",
					"date": "2018-04-04",
					"id": "dwspqzl",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "BraveNewCurrency",
					"content": "https://github.com/golang/go/wiki/WindowsDLLs",
					"date": "2018-04-04",
					"id": "dwsubb4",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "chompsky",
					"content": "It\u0027s pretty straight-forward on windows, though admittedly I don\u0027t really know all the details of what it does behind the scenes.  I also don\u0027t know what the difference is between Windows and other platforms that allows that to be done w/ library calls vs. other platforms requiring cgo.  \n\nBut basically, for vulkan, I\u0027m loading up the one guaranteed exposed function using the easy method:\n\n    vulkanLib :\u003d windows.NewLazyDLL(\"vulkan-1.dll\")\n    procVkGetInstanceProcAddr :\u003d vulkanLib.NewProc(\"vkGetInstanceProcAddr\")\n\nThen to pull other function addresses:\n\n    n, _ :\u003d syscall.BytePtrFromString(pName)\n    ret, _, _ :\u003d procVkGetInstanceProcAddr.Call(0, uintptr(unsafe.Pointer(n)))\n\nIn this example, pName is the vulkan function name and errors ignored for simplicity.  For everything else I have it set up dynamically so that I only have to make that one call cross-platform when I port it.  ret will always be a uintptr.  To make it more dynamic for my purposes, I cache the function pointers and use syscall.Syscall15, which I won\u0027t go into here because it\u0027s documented in the api docs.  \n\nPerformance-wise, a couple things are quite a bit slower than direct function calls because I do them dynamically.  However, in benchmarking my technique, the bottleneck will never be in how those functions are called, even with a minimal blank screen updating as fast as possible.\n\nEDIT:  Using this method does tend to require that you also port the data structures, but once you figure out a few of the potential quirky guys, that process is easy peasy.  ",
					"date": "2018-04-04",
					"id": "dwsunrh",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jackmott2",
					"content": "interesting, so performance of doing things this way is worse than cgo? better? the same?\n",
					"date": "2018-04-04",
					"id": "dwsur21",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "chompsky",
					"content": "Honestly, not entirely sure since I haven\u0027t tried the cgo method.  However, as I mentioned, the performance is good enough that it would never be a bottleneck in this particular scenario.  The functions calls from Go to DLL are much, much faster than the communication between the vulkan API, driver, and the graphics card.  To the point that my tests in C++ and Go have been running at almost identical framerates.",
					"date": "2018-04-04",
					"id": "dwsvdfs",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jackmott2",
					"content": "\u0026gt; To the point that my tests in C++ and Go have been running at almost identical framerates.\n\nGood news!\nYeah in my small hobby games the calls to C are few enough per frame it has never been a concern, but I have no idea what goes on with bigger games.\n",
					"date": "2018-04-04",
					"id": "dwsvnh0",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "chompsky",
					"content": "In my case, I can\u0027t imagine that it will ever be an issue, especially with the benefits I get from using Go for everything else.  I\u0027m parallelizing a massive amount of stuff, which is dead simple with goroutines and works nicely with Vulkan.  By that I mean realtime mesh generation where several different parts of the mesh and textures are often generated concurrently (and usually multi-threaded).  Everything I\u0027m doing there is far more of a workload than the DLL calls will ever be.",
					"date": "2018-04-04",
					"id": "dwsw2i5",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "jackmott2",
					"content": "You could probably do some heavy simd optimizations on realtime mesh and texture generation in C++ but effort level is extremely high for that.  Also you could potentially push all of that to the gpu!\n\n",
					"date": "2018-04-04",
					"id": "dwswemn",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "chompsky",
					"content": "Very true - most of it is experimental to start with, so getting it all working together properly is the first step, and then optimize the crap out of it.  :)",
					"date": "2018-04-04",
					"id": "dwswix9",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "opiniondevnull",
					"content": "Just started working with [another vulkan wrapper](https://github.com/vulkan-go/vulkan). So far so good on windows at least, do you have any experience it @chompsky? ",
					"date": "2018-04-04",
					"id": "dwt23dt",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-04-04",
					"id": "dws4mam",
					"isArchived": false,
					"isControversial": false,
					"score": -15
				},
				{
					"author": "g3eronimo",
					"content": "That\u0027s like saying you wrote your server in HTML. \nGood job btw. I like that it is very minimalistic.",
					"date": "2018-04-04",
					"id": "dws6sgj",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				}
			]
		},
		{
			"author": "kaeshiwaza",
			"date": "2018-03-20",
			"id": "85vnyf",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Proposal: Versioned Go Modules",
			"comments": [
				{
					"author": "soapysops",
					"content": "This is great. I like that they mentioned the other tools they looked at and what they learned from them. I hope the work on kubernetes goes well.",
					"date": "2018-03-21",
					"id": "dw1atzp",
					"isArchived": false,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "ofpiyush",
					"content": "Yep Russ took his time, but came up with a pretty good one :)",
					"date": "2018-03-21",
					"id": "dw1ockw",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "ofpiyush",
					"content": "If I\u0027m working on a large project and I import `my/pkg/v1/foo` all over, won\u0027t importing `my/pkg/v2/foo` in one place (as part of incremental upgrade) spell disaster with types?\n\nExpected *Bar not *Bar kind of errors.",
					"date": "2018-03-21",
					"id": "dw0uzz6",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "shovelpost",
					"content": "How? They are different packages. Do we get confused when we import `gorilla.Mux` and `http.Mux`? Even if they were they exact same type, we don\u0027t. It will be the same in this case.",
					"date": "2018-03-21",
					"id": "dw1d246",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "ofpiyush",
					"content": "\u0026gt; How? They are different packages.\n\nYes and no. They are considered different packages, for good reason. \n\nSomething *can* be backwards incompatible, doesn\u0027t mean everything **has** to be backwards incompatible.\n\n\u0026gt; Do we get confused\n\nI\u0027m not talking about human confusion, though that will be a part of it, I am talking about needing to wrap everything between versions of the same package in the middle of an incremental upgrade.\n\n\u0026gt; gorilla.Mux and http.Mux\n\nThere is a clear distinction between changing from stdlib `http` package to `gorilla` and going from `v1` to `v2` of a package. A *lot* of types remain the same in a major version upgrade\n\nIn cases where definitions are the same, having some way for a simpler upgrade would be nice.\n\nUnless the package maintainer does something like [this](/r/golang/comments/85vnyf/proposal_versioned_go_modules/dw13j2y/?context\u003d3), I have to jump through hoops to make sure I can upgrade from an older major version to a newer one.",
					"date": "2018-03-21",
					"id": "dw1dqg2",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "shovelpost",
					"content": "\u0026gt; There is a clear distinction between changing from stdlib http package to gorilla and going from v1 to v2 of a package. A lot of types remain the same in a major version upgrade\n\nSure but still I don\u0027t think there will be any confusion.\n\n    import (\n    \tfoov1 \"my/pkg/v1/foo\"\n    \tfoov2 \"my/pkg/v2/foo\"\n    )",
					"date": "2018-03-21",
					"id": "dw1dy1l",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "ofpiyush",
					"content": "\u0026gt; Sure but still I don\u0027t think there will be any confusion.\n\nAs I have tried to clarify before, I am not talking about the human confusion here.\n\nIn most cases, as part of an **incremental upgrade** you would most likely do:\n\n```\n\nbar :\u003d foov2.NewBar()\n\nreturn foov1.Bar(bar)\n\n```\n\nAt the end of your method to maintain compatibility with the rest of your code.\n\nBut it breaks as soon as you have something like this.\n\n```\ntype Bar struct {\n  Baz *Baz\n}\n```\n\nNow you have to essentially serialize and deserialize between old and new types to make it work.\n\nUnless the package maintainer goes meta and imports their own older version and type aliases everything before making breaking changes.",
					"date": "2018-03-21",
					"id": "dw1e7zz",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Perhyte",
					"content": "\u0026gt; Unless the package maintainer goes meta and imports their own older version and type aliases everything before making breaking changes.\n\nThe other way around is possibly even better: if you import the new version from the old one and keep it as a compatibility shim, you can get some bugfixes backported practically for free. (That\u0027s what [golang.org/x/net/context](https://golang.org/x/net/context) does for newer Go versions that have a builtin \"context\" package, for example)",
					"date": "2018-03-21",
					"id": "dw1fy55",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "youguess",
					"content": "and while we are at it, what about packages that have side effects?\n\nlike any database driver in existence for example...\n\nWhat happens then when A imports sqlite v1 and B sqlite v2 if both register the same driver?",
					"date": "2018-03-21",
					"id": "dw1akj1",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "soapysops",
					"content": "For the case of database/sql, you can use OpenDB, or you can call a function provided by the database driver to set itself up.\n\nFor side effects in general, packages should avoid them for exactly this reason. But that\u0027s  a problem regardless of this versioning proposal. There is no versioning scheme that will keep people from writing buggy code.",
					"date": "2018-03-21",
					"id": "dw1b31x",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "youguess",
					"content": "the database driver is exactly my point ;)\n\nhow would one handle that?\n\nand please don\u0027t expect the drivers to register themselves with different names per release... that would be annoying",
					"date": "2018-03-21",
					"id": "dw1betm",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "soapysops",
					"content": "Right, as I said, you could use sql.OpenDB to make sure to get the one you want. Most drivers also have a helper function that will create and return a sql.DB for that driver.\n\nAnd actually, yeah, I would expect a driver to change it\u0027s id for the sql.Open function if it made breaking changes. It is annoying, but breaking changes are annoying, and drivers don\u0027t have to use the Open API if they are making lots of breaking changes and confusing people.",
					"date": "2018-03-21",
					"id": "dw28zxm",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "soapysops",
					"content": "Yes. That\u0027s probably what you want, though. The major version shouldn\u0027t change unless something is incompatible. And if there are incompatibilities, then you want compiler errors if you accidentally use the wrong one.\n\nYeah it\u0027s annoying, but breaking changes in a statically typed language are annoying. IMO this proposal deals with it in the best possible way (at least, the best that has been discovered so far).\n\nEdit - also there are lots of ways to reduce the pain. A version of the older package might start using types from the newer package with type aliases. Or the library author might provide adapter types that wrap the old library.",
					"date": "2018-03-21",
					"id": "dw1am1j",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "MonkeeSage",
					"content": "I haven\u0027t read this latest iteration of the proposal, but from his blogs about it a few weeks ago it sounded like the idea was to have packages that import different versions of other packages be isolated in different modules, which would be compiled and linked separately.",
					"date": "2018-03-21",
					"id": "dw0x499",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "ofpiyush",
					"content": "Yes, that would mean structs with exactly the same fields will be considered different types.",
					"date": "2018-03-21",
					"id": "dw12xyg",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "Aoreias",
					"content": "Exported fields might be the same, but you\u0027d have to look at source to make sure that private fields are the same as well - something that\u0027ll be awfully confusing for users of packages why sometimes it works and sometimes it doesn\u0027t.\n\nIt also means that the author of a package has to be prepared to handle all variations of the same type both from previous major versions and from future ones.",
					"date": "2018-03-21",
					"id": "dw1dvcc",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ofpiyush",
					"content": "Most exported stuff would most likely remain constant though, public and private. People change a few big things, not necessarily everything\n\nAnd if we can have a way to upgrade those painlessly, it would promote upgrading to latest version (with sweet security fixes) easier.\n\nDuring an upgrade, is there no alternative to:\n\n1. Expect package maintainer to type alias things.\n2. Have serialise/deserialise methods for every type we use.",
					"date": "2018-03-21",
					"id": "dw1eeof",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "skztr",
					"content": "It sounds like you are describing the current system, in which packages have *no* version number. This is in contrast to the proposed system, in which the version number can be used to specify which one you want.\n\nI haven\u0027t ever worked on a go project that was large enough to care, but \"being able to specify the version I want\" sounds like a definite improvement to sanity. Having a defined method (semver) of specifying compatibility sounds very much like \"the go way\" of doing things, rather than letting each module come up with its own compatibility rules - that said, I expect that \"intended compatibility\" and \"actual compatibility\" will clash in a place or to.\n\nHaving a way of specifying alternative sources for specific modules is the one thing I have definitely wanted out of this, and it sounds like it would solve (or at least provide a clear path out of) such \"intended, but not\" compatibility issues, as well.",
					"date": "2018-03-22",
					"id": "dw45iwb",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jerf",
					"content": "Replying to the full chain here, it seems people may not be entirely aware that this is _already how it works_. Even today it is possible for you to end up with the exact same package in two places, either via two vendor dirs or a vendor and direct usage, and the compiler already will consider the types to not be the same. I got in trouble with an LDAP package this way once. Different versions will be different modules and modulo type aliasing, that\u0027s already the case now and will remain the case in the future.",
					"date": "2018-03-21",
					"id": "dw1qsq3",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ofpiyush",
					"content": "I think I heard this the first time with some package related to  mongodb.\n\nAll package managers kind of fixed by deleting a package\u0027s vendor directory/moving it\u0027s content to top level and trying to solve for a version that satisfied everyone.\n\nNo such fix is possible/available so far with `v1` vs `v2` imports in this proposal and probably should be discussed at the proposal phase and not after a release (the case you mentioned was discovered much later), so I brought this up now :)",
					"date": "2018-03-21",
					"id": "dw1veef",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Vlir",
					"content": "The newer package could type alias the previous package\u0027s types where possible",
					"date": "2018-03-21",
					"id": "dw132g7",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "ofpiyush",
					"content": "Isn\u0027t `my/pkg/` the repo and `v1` the tag?\n\nWould major version upgrade from a package maintainer point of view go something like:\n\n1. Import own old version.\n\n1. Replace all definitions(at least exported ones) with type aliases\n\n2. Make breaking changes.\n\n3. Release new version.\n\nThat doesn\u0027t sound very convenient. (Major version changes must not be, but probably not this difficult either)",
					"date": "2018-03-21",
					"id": "dw13j2y",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "grkg8tr",
					"content": "I\u0027m excited for this because it helps enable an offline module repository for Enterprise use cases. Golang can be frustrating without internet access.",
					"date": "2018-03-21",
					"id": "dw1mjiw",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "peterbourgon",
					"content": "This was already possible with vendoring and/or with dep.",
					"date": "2018-03-22",
					"id": "dw34t1b",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bioxcession",
					"content": "this news has me giddy!",
					"date": "2018-03-21",
					"id": "dw1tjfm",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "It may be my naivety / general oversimplification over everything but why cant the version just be some form of URI, so 2.4.5 maven like ones or git-url:\u0026lt;commit hash\u0026gt; or tag or file path or whatever / pluggable.\n\nHave something like a package.json that is a simple list so go can resolve / download dependencies, which would all have their own package.json -\u0026gt; circular / transitive and bark / warn on a version conflict -\u0026gt;  its up to the developer to resolve conflicts and test their stuff.  Its handy have this version or greater / less etc where it can apply -\u0026gt; can get quite powerful on fairly simple constructs.\n\nI dislike vendoring because libraries I use vendor and  makes things difficult  when your project has alot of dependencies / just seems a bad idea .  Its not a solution to dependency / version management its wrap this up in a ball and this ball will work but not well with anything else.  Only when you have something like Javas Project Jigsaw would it begin to make sense but its probably completely overkill for go and open up other issues / complicate simple things.",
					"date": "2018-03-21",
					"id": "dw1tsry",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "dilap",
					"content": "This proposal removes the ability of libraries to vendor. Only the final module being built gets to vendor.",
					"date": "2018-03-21",
					"id": "dw1yr0k",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "awesome :)\n",
					"date": "2018-03-21",
					"id": "dw1zofm",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "freman",
					"content": "I\u0027d just update the code to use the newer version rather than hatcheting two odd versions together.",
					"date": "2018-03-21",
					"id": "dw1blql",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "justinisrael",
					"content": "As I was reading the proposal, I had the burning question of. given minimal version selection, how would users pick up important patch releases for dependencies without having to track every dependency and raise their min ver as needed? Then I got to this part:\n\n\u0026gt; If a developer does want to update all dependencies to the latest version, that\u0027s easy: go get -u. We may also add a go get -p that updates all dependencies to their latest patch versions, so that C 1.2.3 might be updated to C 1.2.5 but not to C 1.3.0. If the Go community as a whole reserved patch versions only for very safe or security-critical changes, then that -p behavior might be useful.\n\nI\u0027m hoping this support is actually part of the implementation. I can understand not wanting to pick up any new versions automatically, by default. But having an easy way to pick up patches is really great.",
					"date": "2018-03-21",
					"id": "dw2k3le",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "caseynashvegas",
					"content": "The only thing I\u0027m disappointed in is the motivation behind \"Disallow Vendor Folder\" except at the top level.  To me the most elegant and full proof way of doing dependency management is recursive vendoring.   \nWhen I want to use Library1 from the Author @awesomedude,  put it into my vendor directory in it\u0027s canonical path (github.com/awesomedude/lib1).  I probably used dep to do this.  I check it in and forget about it.  Library1 dependencies are within the vendor folder for it (not flattened) because @awesomedude was smart enough to check in his vendor folder.  @awesomedude was also smart enough to not rely expose anything from his dependencies as part of his public interface for me to consume/create/rely on.\n\nNow, I want Library2 from @equallyasawesome.  I do the same thing.  He does the same thing.  It so happens that Library1 and Library2 both rely on the same dependency (Library3) but I don\u0027t really care because Library1 and Library2 provide complete isolation and my code doesn\u0027t have a direct dependency.  \n\nAfter successfully using Library1 and Library2, I try Library4 and it\u0027s dependencies are bleeding up through it\u0027s public interface.  I decide Library4 isn\u0027t good at all, because the library author was @notawesome.  All is not lost however, I take inspiration from what it does.  A little copy is better than a little dependency.  \n\n\n\n\n  ",
					"date": "2018-03-21",
					"id": "dw1ss7y",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dilap",
					"content": "Hmm, I think I disagree...if I\u0027m using lib1 and lib2 which both depend on lib3, I\u0027d like to just have one copy of lib3.\n\nBasically, it seems reasonable to me that a final executable says, \"here\u0027s all my dependencies, vendored up, you can build me without problems\".\n\nBut a library, which is never something you directly use, says, \"hey, when you want to use me, you\u0027ve also got to get deps A, B, C\".\n\nYou only have to do that when you\u0027re actually incorporating the library for the first time, so it\u0027s a reasonable cost to pay, for the benefit of not having dep-of-dep libraries duplicated out a million times.\n\nTo me, it seems a sweet spot between various more extreme positions.",
					"date": "2018-03-21",
					"id": "dw1yl2k",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "caseynashvegas",
					"content": "Why have one copy of the lib3? Are you concerned about binary size?  Lib3\u0027s types shouldn\u0027t matter to your code at all.",
					"date": "2018-03-21",
					"id": "dw2149n",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dilap",
					"content": "Avoids binary bloat, avoids breakage if lib3 contains mutable state that multiple things access, avoids repo-size bloat.",
					"date": "2018-03-21",
					"id": "dw247t9",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "caseynashvegas",
					"content": "\u0026gt; Basically, it seems reasonable to me that a final executable says, \"here\u0027s all my dependencies, vendored up, you can build me without problems\".\n\nHow is the \"final executable\" different from a library? If it is good for this use case, why is it not good for a library?\n",
					"date": "2018-03-21",
					"id": "dw21i3j",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "dilap",
					"content": "Because a library on its own is not useful. So the use-case is different.",
					"date": "2018-03-21",
					"id": "dw248rr",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "caseynashvegas",
					"content": "Not sure I agree but I\u0027m willing to accept that as solid reasoning.  ",
					"date": "2018-03-21",
					"id": "dw2a6mp",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "SeerUD",
					"content": "You\u0027d have issues with global state, singleton instances, and also types wouldn\u0027t match up (e.g. you want to pass some type library a to library b, but library b also has library a vendored, it\u0027s library a would technically be different to your library a, and your code wouldn\u0027t compile).",
					"date": "2018-03-21",
					"id": "dw29isy",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "caseynashvegas",
					"content": "And I believe that should be the case.  I don\u0027t think you should want to pass a type from a to b that is declared in c.  To me the fact that the code doesn\u0027t compile is a good thing, it makes me rethink my  dependency tree.   ",
					"date": "2018-03-21",
					"id": "dw2aekk",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "SeerUD",
					"content": "Why shouldn\u0027t you be able to though? There are many times when it makes a lot of sense to. For example, we have a lot of internal libraries where I work, one example of this is a logging package. We produce a logging interface, and some other libraries use that logger where it\u0027s appropriate. With the recursive vendoring approach I wouldn\u0027t be able to pass a logger from my application to a library because of the aforementioned issue.",
					"date": "2018-03-21",
					"id": "dw2c3gj",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "caseynashvegas",
					"content": "That\u0027s actually a great point.  I wouldn\u0027t run into that because I have a mono-repo, my logging library is just a package in my single repository as is all my other code.  I guess if I was vendoring in my own code I\u0027d probably share your opinion.   ",
					"date": "2018-03-21",
					"id": "dw2dri8",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "shovelpost",
					"content": "\u0026gt; A little copy is better than a little dependency.\n\nIn my opinion, this is not an appropriate usage of the proverb since you actually end up with a dependency.",
					"date": "2018-03-21",
					"id": "dw1y3vp",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "caseynashvegas",
					"content": "I didn\u0027t end up with a dependency on Library4, which is the one that didn\u0027t hide it\u0027s internal dependencies correctly.   ",
					"date": "2018-03-21",
					"id": "dw2128i",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "shovelpost",
					"content": "I reread again your comment and now I see it. By taking inspiration, you implied that you didn\u0027t actually end up using Library4. Sorry it was hard to spot it with all those dependencies.",
					"date": "2018-03-21",
					"id": "dw239e5",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "caseynashvegas",
					"content": "Yes, I agree. That just goes to show why dependencies are hard :)\n",
					"date": "2018-03-21",
					"id": "dw2a37h",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "fridder",
					"content": "Not a big fan of the new file type. It would be nice to reuse an existing file structure like toml or yaml",
					"date": "2018-03-22",
					"id": "dw4m47a",
					"isArchived": false,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "andradei",
					"content": "If the new format had a spec as big as YAML, sure. But it doesn\u0027t, you can read and understand it right away. Much better than TOML or YAML for that matter.",
					"date": "2018-03-23",
					"id": "dw5azsk",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "fridder",
					"content": "fair enough",
					"date": "2018-03-23",
					"id": "dw5rouk",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				}
			]
		},
		{
			"author": "dgryski",
			"date": "2018-02-02",
			"id": "7ut4vx",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": true,
			"selfText": "As mentioned in a previous thread, we\u0027re trying something new.  Rules yoinked from HN.  If this works, we\u0027ll do another one in March.\n\nPlease lead with the location of the position and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE. If it isn\u0027t a household name, please explain what your company does.\n\nSubmitters: please only post if you personally are part of the hiring company—no recruiting firms or job boards. One post per company please.",
			"title": "Who is Hiring? (Februrary 2018)",
			"comments": [
				{
					"author": "i_love_golang",
					"content": "ONSITE | San Francisco, CA USA | FTE | Hi!  My name is Michael Dowling, and I am the Group CTO for Blockchain Financial Services at IBM.  We have a very, very awesome golang stack in our approach for real-world solutions in the blockchain space in Finance and Banking.\n\nHere’s the list of open positions:\n\nLead Engineer:\nhttps://krb-sjobs.brassring.com/TGnewUI/Search/Home/HomeWithPreLoad?partnerid\u003d26059\u0026amp;siteid\u003d5016\u0026amp;PageType\u003dsearchResults\u0026amp;SearchType\u003dlinkquery#jobDetails\u003d126812_5016\n\nSenior Engineer:\nhttps://krb-sjobs.brassring.com/TGnewUI/Search/Home/HomeWithPreLoad?partnerid\u003d26059\u0026amp;siteid\u003d5016\u0026amp;PageType\u003dsearchResults\u0026amp;SearchType\u003dlinkquery#jobDetails\u003d125955_5016\n\nMid-level engineer:\nhttps://krb-sjobs.brassring.com/TGnewUI/Search/Home/HomeWithPreLoad?partnerid\u003d26059\u0026amp;siteid\u003d5016\u0026amp;PageType\u003dsearchResults\u0026amp;SearchType\u003dlinkquery#jobDetails\u003d125953_5016\n\nThere are multiple positions available at each of those levels.  Some DevOps roles are going to be posted soon as well.  If you have direct experience with Golang and Stellar Consensus Protocol and interested in a devops role, please contact me ASAP.\n\nDon’t send me a message on reddit for the other positions tho - go directly to those links and apply!\n\n(Edit: added the right tags)\n",
					"date": "2018-02-02",
					"id": "dtmzavj",
					"isArchived": false,
					"isControversial": false,
					"score": 83
				},
				{
					"author": "yogi_boyy",
					"content": "Had to upvote, being the devout Stellar HODL\u0027r I am.",
					"date": "2018-02-03",
					"id": "dto2mcm",
					"isArchived": false,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "TotesMessenger",
					"content": "I\u0027m a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit:\n\n- [/r/stellar] [IBM job posting specifically calls out stellar!](https://www.reddit.com/r/Stellar/comments/7uwo26/ibm_job_posting_specifically_calls_out_stellar/)\n\n\u0026amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don\u0027t vote in the other threads.) ^\\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to\u003d/r/TotesMessenger))*",
					"date": "2018-02-03",
					"id": "dtnqpuk",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-02-03",
					"id": "dtnntro",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "i_love_golang",
					"content": "Thanks! Added the tags, my bad. :)",
					"date": "2018-02-03",
					"id": "dtnpbvr",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "Snawdog",
					"content": "so did Kodak:\nWe are running our KodakOne Project and I am searching for some more Blockchain and stellar Professionals for the Berlin, Germany Region. We have some conceptional tasks to validate and many coding stuff for different payment use cases based on smart contracts. Currently we are a team of 10 devs in Berlin and a few at some cool partners  around. If someone likes to join our time, feel free to ask and answer.",
					"date": "2018-02-03",
					"id": "dtnt24x",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "zaxbyc1A",
					"content": "Kodak? What\u0027s Kodak?😁",
					"date": "2018-02-04",
					"id": "dtp8uxh",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "SuperNewk",
					"content": "Kodak too?",
					"date": "2018-02-03",
					"id": "dtoaxby",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dank_memestorm",
					"content": "source?",
					"date": "2018-02-03",
					"id": "dtoga4b",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "Snawdog",
					"content": "From Stellar Slack channel",
					"date": "2018-02-03",
					"id": "dtojr04",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "KevinBetalo",
					"content": "Betalo.com | Mobile banking | Stockholm, Sweden | ONSITE | VISA | Full-time | Team of 6 backend engineers | 45K SEK/month+ and equity\n\nI\u0027m Kevin, the CTO of Betalo, a startup in Stockholm, Sweden. We are building the the bank of the future here in the Nordics. We are actively looking for Go developers to join our team here in downtown Stockholm to help us build our new backend, written entirely in Go.\n\nWe are looking for both mid-level and senior backend developers. Bonus points if you have worked in microservices and/or AWS previously.\n\nYou can apply directly at this link:\nhttps://betalo.teamtailor.com/jobs/14348-senior-go-software-engineer",
					"date": "2018-02-02",
					"id": "dtn0abs",
					"isArchived": false,
					"isControversial": false,
					"score": 14
				},
				{
					"author": "mvmntslf",
					"content": "Hello Kevin, do you offer relocation assistance for successful candidates coming from abroad?",
					"date": "2018-02-03",
					"id": "dto1b63",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "KevinBetalo",
					"content": "Yes, we sure do. Hope to see your application soon!",
					"date": "2018-02-05",
					"id": "dtrf96p",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nesrednawerd",
					"content": "Remitly.com | [Remittances](https://en.wikipedia.org/wiki/Remittance) | Seattle, WA | ONSITE | Full-time\n\nLooking for an SDE to join Remitly\u0027s Infrastructure team. Internal tooling is all written in Go: https://www.remitly.com/us/en/careers/1025011?from\u003dengineering\u0026amp;gh_jid\u003d1025011",
					"date": "2018-02-02",
					"id": "dtn7swr",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "chloe-gitlab",
					"content": "GitLab | Engineering and Non-Engineering Roles | Remote Only | Full-time | https://about.gitlab.com/jobs/\n\nWe\u0027re currently hiring developers, managers, director level positions, and more; see https://about.gitlab.com/jobs/.\n\nWe\u0027re a remote only company so everyone can participate and contribute equally. GitLab Community Edition is an open-source Ruby on Rails project with over 1000 contributors.",
					"date": "2018-02-02",
					"id": "dtnb50a",
					"isArchived": false,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-02-03",
					"id": "dtnzj48",
					"isArchived": false,
					"isControversial": false,
					"score": 10
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-02-03",
					"id": "dto6p4j",
					"isArchived": false,
					"isControversial": false,
					"score": 8
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-02-03",
					"id": "dtobceu",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "CatButler",
					"content": "Thanks for this.  I\u0027ve been beaten myself up recently.  We transitioning to more open source and so much of what I done lately is packaging and building config files.  In addition, we are stuck on C++99 building on Fedora 14.  The last interview I had really tore me up,  so starting a personal project has really helped me get familiar with new environments and get my confidence back.",
					"date": "2018-02-03",
					"id": "dtosz54",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-02-03",
					"id": "dtoynsf",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "rockadaysc",
					"content": "For leetcode in Go, are you supposed to solve with or without standard library packages?",
					"date": "2018-02-06",
					"id": "dtt8gai",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "plafoucr",
					"content": "It\u0027s not all about experience, a lot of factors are evaluated during an interview. I don\u0027t speak for GitLab here, but it can be communication, ability to work in a team, to work remotely, and sometimes, it\u0027s just the feeling of the recruiter. \nI\u0027m a recruiter too, and if someone apply to one of my postings arguing \"I have 6+ years of Go experience, hire me\", that would be a bad conversation starter.",
					"date": "2018-02-03",
					"id": "dtoaha5",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-02-03",
					"id": "dtob894",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "plafoucr",
					"content": "Which country are you in? That was maybe the issue, I’m not sure. Anyway, if it was the case, an explanation is still nice to have when a resume is rejected. Hiring is like any other process at gitlab, and is getting updated and improved all the time. \nYou can pm me your resume, and I’ll check if I see something wrong about it. Cheers",
					"date": "2018-02-04",
					"id": "dtpvued",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "plafoucr",
					"content": "And I couldn\u0027t recommend enough to apply for this company. I just started there last month, and my best work experience.",
					"date": "2018-02-02",
					"id": "dtndkec",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "shackra",
					"content": "For your Backend Developer, CI/CD is required strong knowledge of Ruby?\n\nEDIT: It is:\n\n\u0026gt; * You have worked on a production-level Ruby application, preferably using Rails. (This is a strict requirement)",
					"date": "2018-02-03",
					"id": "dtnnnva",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "ryancox",
					"content": "Lyft | Transportation | Seattle, NYC, San Francisco | ONSITE | Full-time \n\nI\u0027m an engineer in Seattle. Happy to talk about positions in all three locations. Hiring in product and infrastructure. We use Go extensively in both.\n\nPM me for details. Also checkout out specific jobs here: https://www.lyft.com/jobs\n\n\n\n",
					"date": "2018-02-02",
					"id": "dtnfil4",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "titpetric",
					"content": "Wishing there was more part time/full time remote positions. I have a candidate with strong network stack knowledge (hardcore IP, BGP, SNMP, etc. just in case somebody thought there\u0027s only HTTP in this world ;)) and an good proclivity for cross compiling toolchains, CGO, and other stuff that\u0027s often over my head, so super senior experience. If somebody has something in these areas, hit me a comment/DM so I can connect you.\n\n\u0026amp; mods: consider also a reversal - \"Who\u0027s looking for work\" type of thread. Would make more sense for my comment :)",
					"date": "2018-02-03",
					"id": "dtp0giw",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "CatButler",
					"content": "Not sure where you\u0027re at but he/she may be interested in this\n\nhttps://cumulusnetworks.bamboohr.com/jobs/view.php?id\u003d55",
					"date": "2018-02-15",
					"id": "du9i3i4",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "titpetric",
					"content": "Sort of like that (i guess it would be his wet dream), but it doesn\u0027t seem to be a remote position, and my guy is based in central Europe. I appreciate the effort however, thank you :)",
					"date": "2018-02-15",
					"id": "dua0fcy",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "babawere",
					"content": "[imaxinacion.com](https://www.imaxinacion.com/web/) | Data Switching | eGovernment | Lagos, Nigeria | OnSite | Full-time\n\nWe are happy to talk about existing opportunities in Imaxinacion as we build African largest data processing systems in golang.",
					"date": "2018-02-05",
					"id": "dtrhyd4",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "21balloons",
					"content": "Canonical | Software Engineer | Full Time | REMOTE\n\nCanonical is the company behind Ubuntu Linux. We are a globally distributed team passionate about open source. We\u0027re looking for golang developers to join our juju engineering team. Juju is a modeling and software orchestration tool that is capable of deploying to clouds, containers or bare metal.\n\nApply to one or both of the two open positions:\n\nhttp://grnh.se/equgf11\n\nFor this role, we\u0027re looking for someone with python skills as well.\n\nhttp://grnh.se/kjgdex1\n\nIf you know golang, love open source, and want to work remotely with a bunch of other folks around the world, get in touch!\n\nAnd yes, we \u0026lt;3 golang, and the project is definitely one of the larger golang projects in the wild, especially open source. See for example the last discussion on this sub: https://www.reddit.com/r/golang/comments/4c7qf9/does_anyone_know_what_is_the_largest_codebase_in",
					"date": "2018-02-05",
					"id": "dts1ix4",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "justinisrael",
					"content": "Weta Digital | Visual Effects | Wellington, New Zealand | ONSITE | VISA\n\nI\u0027m a Senior Software Developer in the Production Engineering department at Weta Digital in New Zealand. While we are looking for a Senior level Python developer, we have a number of services, tools, and libraries written in Go. If you are experienced in Python but looking for an opportunity to really flex your skills in Go and make a difference at an award winning Visual Effects studio, check out this role: \n\nhttps://careers.wetafx.co.nz/jobs/720\n\n",
					"date": "2018-02-02",
					"id": "dtn98kf",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "tdewolff",
					"content": "That\u0027s a pity, I just settled in Auckland..",
					"date": "2018-02-04",
					"id": "dtqifq5",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "justinisrael",
					"content": "Apply anyways! Maybe you will find Wellington even more settling :-) ",
					"date": "2018-02-05",
					"id": "dtri12f",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "binarypie",
					"content": "Electronic Arts | Engineering Roles | Austin TX, Seattle WA, Vancouver Canada,  Montreal Canada | Full-time | - Infrastructure Automation\n\n\n\n\nHi Gophers! My name is Charles and I run Engineering for TechOps at Electronic Arts. We are responsible for automating the infrastructure that powers our games. Servers, VMWare, Amazon, Google, and Azure. We automate it all into a single platform! Our entire stack is written written in Go and JavaScript. We love open source and contribute back to the world.\n\n\n\n\n**Jobs**\n\n\n* https://career4.successfactors.com/career?career_ns\u003djob_listing\u0026amp;company\u003dEA\u0026amp;career_job_req_id\u003d113676 \n* https://career4.successfactors.com/career?career_ns\u003djob_listing\u0026amp;company\u003dEA\u0026amp;career_job_req_id\u003d113826\n* https://career4.successfactors.com/career?career_ns\u003djob_listing\u0026amp;company\u003dEA\u0026amp;career_job_req_id\u003d116477\n* https://career4.successfactors.com/career?career_ns\u003djob_listing\u0026amp;company\u003dEA\u0026amp;career_job_req_id\u003d113528\n\n\n\nQuestions? Feel free to reach out.",
					"date": "2018-02-03",
					"id": "dtnscr6",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2018-02-03",
					"id": "dtobgbn",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "joncalhoun",
					"content": "You didn\u0027t respond to the comment fyi. You responded to the top level post so whoever you intended this for likely didn\u0027t see it.",
					"date": "2018-02-04",
					"id": "dtprzei",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "TheBigBang79",
					"content": "REMOTE | Irvine, CA USA\nHello Go Community. BLeve is a globally distributed team working on cutting edge projects for some of the world’s top retail brands, healthcare organizations and financial institutions. Our clients include top retail brands, startups, IoT, crypto currency/blockchain, healthcare and fin-tech organizations. We are looking for motivated and experienced GoLang devs to join us in building cutting edge platforms, apps and open source projects. \n\nDescription\nThe job is a remote position, so the qualified candidate can live anywhere in the USA. The candidate must be an energetic, self-starter who is self-motivated and comfortable working in a remote environment. Infrequent on site work may be required and travel expenses will be covered by the company.\n\nSkills \u0026amp; Requirements \n2+ years as Golang developer \n5+ years of experience with software development \nRelevant and solid work experience with similar distributed systems \nFocus on writing high quality, testable and maintainable code \nUnderstanding of data structures, algorithms and design patterns \nExperience with monitoring and performance analysis \nComfortable with Linux, Unix or OSX \nExperience with micro-services infrastructures \nExperience working with remote/distributed teams\nBusiness fluent in spoken and written English \n\nHow to apply\nContact us at careers@bleve.io. Please include a copy of your resume and links to your LinkedIn and Github profiles. Individuals only, no agency applications please. \n",
					"date": "2018-02-03",
					"id": "dtp1ptx",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dk_liveramp",
					"content": "LiveRamp | Data | NYC | ONSITE | Full-time\n\nWe\u0027re currently hiring mid/senior-level talent in both San Francisco and New York (although most of the Go work takes place in NY). Our team recently open-sourced Gazette, an append-only journal which accepts byte-oriented chunks of data, written entirely in Go (https://github.com/LiveRamp/gazette/).\n\nFeel free to PM me for details, but also checkout out specific jobs here: https://liveramp.com/careers/engineers/",
					"date": "2018-02-05",
					"id": "dtroja1",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dan_fanatics",
					"content": "Boulder, CO | ONSITE | Software and Quality Engineers | FTE | Fanatics\n\nHi - My name is Dan Snyder, I\u0027m a Sr. Tech Recruiter with Fanatics, Inc in Boulder. The Fanatics Boulder office is a 35-person (and growing!) group of software engineers, quality engineers, product managers, and designers who are creating cutting edge applications and experiences for our customers around the world. We work on a variety of projects with Engineers in our offices from San Francisco to Brazil to the United Kingdom. \n\nAt Fanatics, we\u0027ve developed a rich set of tooling utilities and microservices to handle the less-exciting parts of software engineering: from cloud operations, data storage, service registration, user authentication and authorization. As developers, these tools allow us to automate away the \"boilerplate\" features and enable us focus on the new, creative parts of projects. Leveraging these tools make writing code at work fun and painless.\n\nCheck out our open positions here to apply or reach out directly to dsnyder@fanatics.com:\n\nhttp://fanaticsinc.com/careers/\n -\u0026gt; Open positions in the US\n -\u0026gt; Select Boulder (or any other location)\n\n",
					"date": "2018-02-05",
					"id": "dtrtwlg",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "cogo_casey",
					"content": "Cogo Labs | Startup Incubator/Marketing | Cambridge, MA | ONSITE | VISA | cogolabs.com\n\nHi folks!  My name is Casey and I work at Cogo Labs in Cambridge, MA.  Cogo Labs provides the companies we incubate with access to a centralized tech platform that they can use to bootstrap their businesses. We are looking for a Software Engineer who can help us further develop this platform, making it the best possible toolchain for running marketing campaigns and launching new websites. You’ll collaborate with and learn from experienced engineers while making contributions that directly impact the success and profitability of teams and companies that we’re building.\n\nThe majority of our core systems have evolved into highly concurrent Golang services and we\u0027re looking for folks who\u0027d love to jump in and contribute.  We\u0027re looking for junior to mid-level engineers for this role.  Please apply directy at https://www.cogolabs.com/careers/d9dc945b-4ba0-4f34-9538-79d6eacf6ffa and mention this Reddit thread.\n\nFeel free to reach out with any questions!",
					"date": "2018-02-05",
					"id": "dtrxs9p",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "MartinGallagher",
					"content": "Synthace | BioTech | London, UK | ONSITE | VISA | Full-time\n\nSynthace is a technology pioneer in the field of Synthetic Biology. We were the only UK company named by the World Economic Forum as one of the world’s 30 Technology Pioneers. \nSynthace is re-imagining how we work with biology by developing a high level language and operating system for the physical world called Antha (in Go), which is already shifting how scientists work in major pharmaceutical, agricultural, and chemical production companies. \n\nWe\u0027re looking for 2 backend engineers (one more DevOps) (PERM AND ONSITE) to continue developing and scaling our products and infrastructure.\n\nThe stack includes Kubernetes Federation, Go, Google Cloud, Docker, and Ansible\n\nYou can find out more and apply directly here: \nSoftware Engineer: http://careers.synthace.com/o/software-engineer\nSoftware Engineer - Infrastructure: http://careers.synthace.com/o/software-engineer-infrastructure\n",
					"date": "2018-02-06",
					"id": "dttysac",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "LearningBus",
			"date": "2017-11-08",
			"id": "7bil1c",
			"isArchived": false,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Go cheatsheet",
			"comments": [
				{
					"author": "user3961",
					"content": "Map (ok) and range (_) please ?\n\nAm sharing with coworkers who I\u0027ve been trying fruitlessly to convert. ",
					"date": "2017-11-08",
					"id": "dpil2oc",
					"isArchived": false,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "LearningBus",
					"content": "No need to thank me :) ",
					"date": "2017-11-08",
					"id": "dpipld9",
					"isArchived": false,
					"isControversial": false,
					"score": -8
				},
				{
					"author": "SeerUD",
					"content": "It\u0027s a very pretty site. Some nice examples overall, but there are some incomplete examples, and examples with poor formatting.\n\n* Hello world: You only have one return type, no need to wrap it in brackets.\n* Variable declaration: you can also do `var msg string \u003d \"Hello\"`\n* Multiple return types: you\u0027re using named returned types here too, not sure if that\u0027s intentional?\n* Importing: maybe suggest here that you should use the grouped up option if you have more than one?\n\nOverall, this looks nice, and is a really cool cheat sheet.",
					"date": "2017-11-08",
					"id": "dpilp14",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "LearningBus",
					"content": "Thanks for your compliment. ",
					"date": "2017-11-08",
					"id": "dpiplvu",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "cakeFactory2",
					"content": "Very nice ",
					"date": "2017-11-08",
					"id": "dpigj3j",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "LearningBus",
					"content": "Cool. Enjoy, then :) ",
					"date": "2017-11-08",
					"id": "dpipl1j",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "This is full of bad examples for: switch, lambda, concurrency (whole section). Please ask for help before publishing such articles, pages or websites. People like me would always be happy to do at least a quick review and make sure fundamental issues don\u0027t get promoted as good practices.",
					"date": "2017-11-08",
					"id": "dpilj59",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "filip57",
					"content": "What\u0027s wrong with these specifically?",
					"date": "2017-11-08",
					"id": "dpjqn4l",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "LearningBus",
					"content": "But for newbies and getting started this is awesome. :) ",
					"date": "2017-11-08",
					"id": "dpipmcz",
					"isArchived": false,
					"isControversial": true,
					"score": 1
				},
				{
					"author": "dlsniper",
					"content": "Not if it teaches them the wrong thing.",
					"date": "2017-11-08",
					"id": "dpjj7ot",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "qu33ksilver",
					"content": "I always forget in for-range loops, which comes first, the index or the element. You might want to add that.",
					"date": "2017-11-08",
					"id": "dpitb4e",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jerf",
					"content": "I remember it as matching what you see in an assignment:\n\n    someMap[key] \u003d value\n    array[key] \u003d value\n\n    for key, value :\u003d range someMap\n    for key, value :\u003d range array\n\nI see the logic, even though in general I\u0027m more likely to want to range over values than indexes, especially for arrays.",
					"date": "2017-11-08",
					"id": "dpiviss",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-11-08",
					"id": "dpiupoi",
					"isArchived": false,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "jasoncm",
					"content": "Escape analysis in the compiler automatically allocates any pointer that escapes the local scope on the heap.",
					"date": "2017-11-08",
					"id": "dpj5nii",
					"isArchived": false,
					"isControversial": false,
					"score": 7
				},
				{
					"author": "shark1337",
					"content": "I didn\u0027t say it\u0027s not going to work.. it\u0027s just that authors shouldn\u0027t use bad practices in examples..tbh I stopped reading the cheatsheet after seeing the pointers one...\n\nBest of luck ;)",
					"date": "2017-11-08",
					"id": "dpj7sg8",
					"isArchived": false,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "chelmi",
					"content": "Is this really bad practice though? It\u0027s even used in a the standard library, and well documented. https://golang.org/src/bytes/buffer.go?s\u003d14336:14370#L443",
					"date": "2017-11-08",
					"id": "dpjief1",
					"isArchived": false,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "shark1337",
					"content": "Well, that\u0027s not the same case. The struct is kept globally and it\u0027s not going out of scope anytime soon..",
					"date": "2017-11-08",
					"id": "dpjizua",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "chelmi",
					"content": "Unless I\u0027m missing something, the only difference is using an intermediate variable (whether it\u0027s a struct or a simple data type doesn\u0027t matter). It\u0027s the exact same case.",
					"date": "2017-11-08",
					"id": "dpjk19n",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "shark1337",
					"content": " The first one returns the address of a local variable and the second one returns the address of a global variable.  In the first case you\u0027ll have the address of a variable that will get cleared out the stack at the end of the function, in the second case the structure won\u0027t get cleared out because it\u0027s global and will last during the entire program. Am I missing something?",
					"date": "2017-11-08",
					"id": "dpjnd52",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "br1cker",
					"content": "Are you saying After the function you won’t be able to access the value of the first one anymore because it was cleared by the stack...?",
					"date": "2017-11-08",
					"id": "dpjpfpv",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "shark1337",
					"content": "It goes to off-topic, please take a look here and feel free to google\n\nhttps://stackoverflow.com/questions/17997228/what-is-a-dangling-pointer",
					"date": "2017-11-08",
					"id": "dpjpit9",
					"isArchived": false,
					"isControversial": false,
					"score": -1
				},
				{
					"author": "weirdwitch",
					"content": "Go isn\u0027t C++.  \n\nThe example in the standard library isn\u0027t returning \"the address of a global variable\".  It\u0027s returning a pointer to a composite literal.  Returning a pointer to a local variable is safe and idiomatic Go.\n\nIf you don\u0027t believe me, and the other people who have said so, please feel free to look at the language spec, the standard library, Stack Overflow, and the mountains of extant code that use this idiom.\n\nedit:\n\n    $ grep -r \"return \u0026amp;[A-Z]\" . | wc -l\n        443\n\nThe standard library does it 443 times!",
					"date": "2017-11-09",
					"id": "dpjtau8",
					"isArchived": false,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "br1cker",
					"content": "There are countless examples I’ve seen of constructors being used where the returning object is built as a local variable then returned at the end of the function rather than inline.",
					"date": "2017-11-09",
					"id": "dpjvots",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "jasoncm",
					"content": "Ah, got you. I\u0027m kind of torn on how strict a cheat sheet for people learning basic syntax should be. Anyone who has already learned a couple languages can get their basic syntax from the \"Effective Go\" doc and the language spec. I\u0027m guessing this cheatsheet is aimed at people who just want to learn enough to get started without a programming background. You don\u0027t want such newbies to learn terrible habits, but you also don\u0027t want to info-dump a ton of stuff that is just going to be confusing.",
					"date": "2017-11-08",
					"id": "dpj8unz",
					"isArchived": false,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "shark1337",
					"content": "Well summed up",
					"date": "2017-11-08",
					"id": "dpj92au",
					"isArchived": false,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "filip57",
					"content": "Why is it bad practice? It\u0027s [used a lot in the standard library](https://golang.org/src/bytes/buffer.go?s\u003d14336:14370#L443) and is the default way of returning a reference.",
					"date": "2017-11-08",
					"id": "dpjqu5b",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "stdiopt",
					"content": "go is not C, it has also a garbage collected memory management and escape analysis\n\nhttps://stackoverflow.com/questions/38234487/go-returning-a-pointer-on-stack ",
					"date": "2017-11-09",
					"id": "dpkgv40",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "LearningBus",
					"content": "Yeah but, This created in mind of beginner proof :)",
					"date": "2017-11-08",
					"id": "dpiwscd",
					"isArchived": false,
					"isControversial": false,
					"score": -2
				},
				{
					"author": "shark1337",
					"content": "Please edit that example",
					"date": "2017-11-08",
					"id": "dpj7xvj",
					"isArchived": false,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "LearningBus",
					"content": "Hey, It is not me the owner. So if you really feel there is something wrong then you can contact to the owner.",
					"date": "2017-11-09",
					"id": "dpjxhyt",
					"isArchived": false,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "[deleted]",
					"content": "[deleted]",
					"date": "2017-11-08",
					"id": "dpigltx",
					"isArchived": false,
					"isControversial": false,
					"score": -9
				},
				{
					"author": "KenjiTakahashi",
					"content": "This genuinely made me to click :-].",
					"date": "2017-11-08",
					"id": "dpisnnx",
					"isArchived": false,
					"isControversial": false,
					"score": 0
				}
			]
		},
		{
			"author": "gohacker",
			"date": "2017-10-12",
			"id": "75vc9t",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Building a neural net from scratch in Go",
			"comments": [
				{
					"author": "mwholt",
					"content": "Cool, this reminds me of my CS 478 project in undergrad (a multi-layer perceptron from scratch in Go). Doing that helped me gain an understanding of neural nets that I couldn\u0027t figure out any other way.",
					"date": "2017-10-12",
					"id": "doaaess",
					"isArchived": true,
					"isControversial": false,
					"score": 5
				},
				{
					"author": "unknownmosquito",
					"content": "Any chance your syllabus is online? I\u0027ve been looking for an assignment to do to help myself understand NNs better.",
					"date": "2017-10-12",
					"id": "doaelrq",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "mwholt",
					"content": "I don\u0027t see it online anymore. But the assignment in the article is similar: write a fully-connected neural network (multi-layer perceptron) that can learn the iris data set. It\u0027s a very basic data set that is easy to learn with a small number of nodes and just one hidden layer.\n\nThis article doesn\u0027t explain its backprop implementation and I find its use of gonum a bit confusing. I wrote my MLP using for loops and manually calculating dot products, etc. (Not super efficient but who cares when that\u0027s not the point here.) That exercise was very helpful, I thought.\n\nYou can find more (and more difficult) data sets here in the UCI repository: https://archive.ics.uci.edu/ml/datasets.html\n\nEdit: Implementing the feed-forward is simple enough: At each layer, just perform a dot product with the weights and then pass the output of that through the activation function (sigmoid in this article, and I used sigmoid as well in my class, works fine for small, simple networks). Once you\u0027ve computed the output, you have to propagate the error backward into the network. It looks like the slides from when I took the class are still up: http://axon.cs.byu.edu/~martinez/classes/478/slides/Perceptron.pdf -- basically a one-layer neural net. Backprop slides: http://axon.cs.byu.edu/~martinez/classes/478/slides/BP.pdf -- the white boxes, especially the one called \"Network Equations\" was most helpful for me during implementation. Note that the key to backprop is using the derivative of the activation function to determine how much that node contributed to the error. Sigmoid has a nice, elegant derivative.\n\nThis is a more traditional, foundational approach, to be sure. But there\u0027s no magic going on that linear algebra libraries are hiding from you, so you understand it all the way through.\n\nThese days I use TensorFlow for neural nets on GPUs, which is how I actually get some real ML tasks done. But! I still refer back to my code from CS 478 and rely on that knowledge to know what is going on. The MLP I coded then can still be used for some set of remedial tasks if needed. It could even go deep by changing the activation functions and adjusting the delta calculations. In other words, the skills generalize quite well. Once you know how fully-connected networks work, it\u0027s just a matter of learning the icing on top: convolutions, activation functions, normalization, regularization, etc -- all tricks to just help the network learn certain problems better. But they\u0027re all built on these fundamentals.",
					"date": "2017-10-12",
					"id": "doafsjd",
					"isArchived": true,
					"isControversial": false,
					"score": 12
				},
				{
					"author": "unknownmosquito",
					"content": "Wow, thank you so much, absolutely incredible response. I am finding it difficult to express just how much gratitude I feel \u0026lt;3\n\nEven just these slides are great -- I\u0027m finally starting to feel some of these ideas clicking into place.. just need to go build something now to practice and get my hands dirty :D",
					"date": "2017-10-13",
					"id": "doaicvb",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "forfunc",
					"content": "I liked your article, also the book seems interesting. I would like to buy it but I have not so good experience with packt. I would like to read a preview or a sample which is not possible, is there a way I could?",
					"date": "2017-10-12",
					"id": "doa80jx",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "gohacker",
					"content": "Not my article, I just posted the link.",
					"date": "2017-10-13",
					"id": "doaixh6",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "twek",
					"content": "I really reallllyy need to dissect this code and make sure I understand it, one of the simpler NN implementations I have seen.",
					"date": "2017-10-12",
					"id": "do9unh7",
					"isArchived": true,
					"isControversial": false,
					"score": 4
				},
				{
					"author": "Miracleb",
					"content": "Are there any mature libraries when it comes to a basic FF / RR nets? I had found some repos in the past but they all seemed to have staled for quite some time (beyond a year even).",
					"date": "2017-10-13",
					"id": "doaynuf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				}
			]
		},
		{
			"author": "JupiterV2",
			"date": "2015-07-12",
			"id": "3d0stz",
			"isArchived": true,
			"isLocked": false,
			"isNsfw": false,
			"isSelf": false,
			"selfText": "",
			"title": "Ivy - First Android App in 100% Golang on Google Play (written by the Go Team)",
			"comments": [
				{
					"author": "bradfitz",
					"content": "And Ivy on the Apple App Store for iOS: https://appsto.re/us/-V6u8.i",
					"date": "2015-07-12",
					"id": "ct0slls",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "cu_t",
					"content": "I like how the screenshot includes the number 1e100.",
					"date": "2015-07-12",
					"id": "ct0vskz",
					"isArchived": true,
					"isControversial": false,
					"score": 9
				},
				{
					"author": "captncraig",
					"content": "Wow, those reviews are hilarious. ",
					"date": "2015-07-13",
					"id": "ct1go4v",
					"isArchived": true,
					"isControversial": false,
					"score": 3
				},
				{
					"author": "JupiterV2",
					"content": "Github repo: https://github.com/robpike/ivy",
					"date": "2015-07-12",
					"id": "ct0qdtt",
					"isArchived": true,
					"isControversial": false,
					"score": 18
				},
				{
					"author": "[deleted]",
					"content": "I don\u0027t think that\u0027s the code for the Android app, just the Ivy core which is a toy language/parser created by Pike a while ago. Its part of the android app, but not the whole thing.",
					"date": "2015-07-12",
					"id": "ct107wr",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "vompatti_",
					"content": "What UI toolkit does it use? google/gxui?",
					"date": "2015-07-12",
					"id": "ct0rcdj",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "jbuberel",
					"content": "No, both the Android and the iOS versions use native UI toolkits. We\u0027re planning to publish the source to both shortly - stay tuned. The actual APL interpreter is shared Go code.",
					"date": "2015-07-12",
					"id": "ct15dfi",
					"isArchived": true,
					"isControversial": false,
					"score": 15
				},
				{
					"author": "saturn_vk",
					"content": "It looks like they use java for the ui, and go for the parsing and calculations",
					"date": "2015-07-12",
					"id": "ct119sk",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "bobappleyard",
					"content": "Not really 100% then",
					"date": "2015-07-12",
					"id": "ct12giz",
					"isArchived": true,
					"isControversial": false,
					"score": 11
				},
				{
					"author": "elithrar_",
					"content": "Perhaps not, but it\u0027d be a poor experience if they didn\u0027t use the native toolkit (or something that can call into it). A UI driven app that doesn\u0027t use the native UI framework on mobile often looks poor and ends up buggy.\n\n",
					"date": "2015-07-12",
					"id": "ct150b5",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "perihelion9",
					"content": "You can have 100% Go if you\u0027re comfortable with GL. The same demonstration at Gophercon which showed this app off also showed one being cross-compiled and run for android, ios, and the speaker\u0027s laptop.",
					"date": "2015-07-12",
					"id": "ct156ka",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dmikalova",
					"content": "By the same token then, the CLI version is not 100% Go code either.",
					"date": "2015-07-13",
					"id": "ct26bro",
					"isArchived": true,
					"isControversial": false,
					"score": 0
				},
				{
					"author": "blazes816",
					"content": "https://godoc.org/golang.org/x/mobile/gl",
					"date": "2015-07-13",
					"id": "ct19j2y",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "znpy",
					"content": "So now we can build Android apps in Go ?",
					"date": "2015-07-12",
					"id": "ct13zr0",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jbuberel",
					"content": "See: https://github.com/golang/mobile",
					"date": "2015-07-12",
					"id": "ct15aiu",
					"isArchived": true,
					"isControversial": false,
					"score": 6
				},
				{
					"author": "dmikalova",
					"content": "and iOS!",
					"date": "2015-07-13",
					"id": "ct26c3w",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "simonorono",
					"content": "Does anyone knows what they used to generate that parser?",
					"date": "2015-07-12",
					"id": "ct0tatf",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "nathj07",
					"content": "The details were given at gophercon this year. There is a blog of it and there willbe too.",
					"date": "2015-07-12",
					"id": "ct0u3x3",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "santiaago",
					"content": "have a look at this talk:\nImplementing a bignum calculator - Rob Pike - golang-syd November 2014: https://www.youtube.com/watch?v\u003dPXoG0WX0r_E",
					"date": "2015-07-13",
					"id": "ct1oqp3",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dmikalova",
					"content": "It\u0027s Ivy, a Go implementation of APL by Rob Pike.",
					"date": "2015-07-13",
					"id": "ct26d5n",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "tdewolff",
					"content": "On my Moto G I can\u0027t hide the keyboard and thus cannot go back and quit the app, unless I go to my main screen. Futhermore the Demo feature doesn\u0027t work. Great to see a Go app though! Is the one for Apple also written in Go?",
					"date": "2015-07-12",
					"id": "ct0y95v",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "kardianos",
					"content": "Demo works. After clicking demo, hit enter a bunch. Watch the magic.",
					"date": "2015-07-12",
					"id": "ct11lf7",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				},
				{
					"author": "jbuberel",
					"content": "Yes, both apps share essentially the same Go backend code, written in Go. The UIs for each are based on platform-native widgetry.",
					"date": "2015-07-12",
					"id": "ct15bdv",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "SneakerXZ",
					"content": "Will be these apps released as open-source?",
					"date": "2015-07-13",
					"id": "ct1wopd",
					"isArchived": true,
					"isControversial": false,
					"score": 1
				},
				{
					"author": "dmikalova",
					"content": "Yeah, the Go backend already is and the UI specific code will be soon.",
					"date": "2015-07-13",
					"id": "ct26fyc",
					"isArchived": true,
					"isControversial": false,
					"score": 2
				}
			]
		}
	]
}